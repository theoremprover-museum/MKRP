;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((P (A1 A3) AND P (A1 A4) AND P (A2 A4) AND P (A3 A1) AND P (A4 A1) AND P (A4 A2) AND Q (A1 A2) AND Q (A1 A4) AND Q (A2 A1) AND Q (A2 A3) AND Q (A3 A2) AND Q (A3 A4) AND Q (A4 A1) AND Q (A4 A3) AND R (A1 A2) AND R (A1 A3) AND R (A2 A1) AND R (A2 A3) AND R (A2 A4) AND R (A3 A1) AND R (A3 A2) AND R (A3 A4) AND R (A4 A2) AND R (A4 A3) AND S (A1 A3) AND S (A1 A4) AND S (A2 A4) AND S (A3 A1) AND S (A4 A1) AND S (A4 A2) AND T (A1 A2) AND T (A1 A4) AND T (A2 A1) AND T (A2 A3) AND T (A3 A2) AND T (A3 A4) AND T (A4 A1) AND T (A4 A3) AND W (A1 A3) AND W (A1 A4) AND W (A2 A4) AND W (A3 A1) AND W (A4 A1) AND W (A4 A2)))) (QUOTE ((AND (+ 5 (3 4) NIL) (AND (+ 5 (3 6) NIL) (AND (+ 5 (7 6) NIL) (AND (+ 5 (4 3) NIL) (AND (+ 5 (6 3) NIL) (AND (+ 5 (6 7) NIL) (AND (+ 8 (3 7) NIL) (AND (+ 8 (3 6) NIL) (AND (+ 8 (7 3) NIL) (AND (+ 8 (7 4) NIL) (AND (+ 8 (4 7) NIL) (AND (+ 8 (4 6) NIL) (AND (+ 8 (6 3) NIL) (AND (+ 8 (6 4) NIL) (AND (+ 9 (3 7) NIL) (AND (+ 9 (3 4) NIL) (AND (+ 9 (7 3) NIL) (AND (+ 9 (7 4) NIL) (AND (+ 9 (7 6) NIL) (AND (+ 9 (4 3) NIL) (AND (+ 9 (4 7) NIL) (AND (+ 9 (4 6) NIL) (AND (+ 9 (6 7) NIL) (AND (+ 9 (6 4) NIL) (AND (+ 10 (3 4) NIL) (AND (+ 10 (3 6) NIL) (AND (+ 10 (7 6) NIL) (AND (+ 10 (4 3) NIL) (AND (+ 10 (6 3) NIL) (AND (+ 10 (6 7) NIL) (AND (+ 11 (3 7) NIL) (AND (+ 11 (3 6) NIL) (AND (+ 11 (7 3) NIL) (AND (+ 11 (7 4) NIL) (AND (+ 11 (4 7) NIL) (AND (+ 11 (4 6) NIL) (AND (+ 11 (6 3) NIL) (AND (+ 11 (6 4) NIL) (AND (+ 12 (3 4) NIL) (AND (+ 12 (3 6) NIL) (AND (+ 12 (7 6) NIL) (AND (+ 12 (4 3) NIL) (AND (+ 12 (6 3) NIL) (+ 12 (6 7) NIL)))))))))))))))))))))))))))))))))))))))))))))) (QUOTE ((* THEOREM) (EX X,Y,Z,U (P (X Y) AND Q (X Z) AND R (X U) AND S (Y Z) AND T (Y U) AND W (Z U))))) (QUOTE (COMMENT (EX 16 (EX 15 (EX 14 (EX 13 (AND (+ 5 (13 14) NIL) (AND (+ 8 (13 15) NIL) (AND (+ 9 (13 16) NIL) (AND (+ 10 (14 15) NIL) (AND (+ 11 (14 16) NIL) (+ 12 (15 16) NIL)))))))))))) (QUOTE ("Edit:     Axioms and Theorems edited: 03-JUL,1990 11:54 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(199829 199834 199839 199844 199859 199874 199889 199904 199919 199924 199929 199944
          199949 199954 199969 199984 199999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC)))
          ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY "A1" (DT*ST-KIND NIL) CONSTANT 5 ANY "A3"
          (DT*ST-KIND NIL) CONSTANT 15 "P" NIL NIL (ANY ANY) NIL NIL ((- 5 (POSITIVE)))
          ((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5
          ANY "A4" (DT*ST-KIND NIL) CONSTANT 5 ANY "A2" (DT*ST-KIND NIL) CONSTANT 15 "Q" NIL
          NIL (ANY ANY) NIL NIL ((- 8 (POSITIVE))) ((+ 8 (NEGATIVE))) ((+ 8 (NIL)))
          ((- 8 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "R" NIL NIL (ANY ANY) NIL NIL
          ((- 9 (POSITIVE))) ((+ 9 (NEGATIVE))) ((+ 9 (NIL))) ((- 9 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "S" NIL NIL (ANY ANY) NIL NIL ((- 10 (POSITIVE)))
          ((+ 10 (NEGATIVE))) ((+ 10 (NIL))) ((- 10 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          15 "T" NIL NIL (ANY ANY) NIL NIL ((- 11 (POSITIVE))) ((+ 11 (NEGATIVE)))
          ((+ 11 (NIL))) ((- 11 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "W" NIL NIL
          (ANY ANY) NIL NIL ((- 12 (POSITIVE))) ((+ 12 (NEGATIVE))) ((+ 12 (NIL)))
          ((- 12 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 200000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 200000)
             (SETQ COUNTER1 17)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 200000)
                 (MEM-INITIALIZE 200000))
               (SETQ COUNTER1 17)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 200000) (+ 199824 INCREMENT) 199824))
      (SETQ MEM*NEXT.VADR 17
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ANY))) (SETQ DT*SORT.NR (QUOTE 2)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (7 6 4 3))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE NIL)) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (12 11 10 9 8 5 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (12 11 10 9 8 5 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
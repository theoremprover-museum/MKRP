;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-

(CONSTRUCTION  "Genera 8.0.1 Logical Pathnames Translation Files NEWEST IP-TCP 422.2 RPC 415.0 Embedding Support 407.0 UX Support 416.0 Experimental Network RPC 415.0 Experimental NFS Client 415.0 CLX 419.0 C Runtime 416.0 Compiler Tools Package 411.0 Compiler Tools Runtime 411.0 C Packages 413.0 Minimal Lexer Runtime 416.0 Lexer Package 415.0 Syntax Editor Runtime 411.0 Experimental X Server 409.0 X Remote Screen 418.1 KKL 24.0 HADES 19.0 Experimental MKRP 53.11" "26-JUN,1992 15:38" 
   ("Edit:     Axioms and Theorems edited: 19-JUN,1992 16:05 "
   ))

(AXIOMS.INFIX    ((E (MON MO) AND E (TUE TU) AND E (WED WE) AND E (THU TH) AND E (FRI FR) AND E (SAT SA) AND E (SUN SU))
   (ALL X |:| MO E (X LL))
   (ALL X |:| TU E (X LL))
   (ALL X |:| WE E (X LL))
   (ALL X |:| TH NOT E (X LL))
   (ALL X |:| FR NOT E (X LL))
   (ALL X |:| SA NOT E (X LL))
   (ALL X |:| SU NOT E (X LL))
   (ALL X |:| MO NOT E (X LU))
   (ALL X |:| TU NOT E (X LU))
   (ALL X |:| WE NOT E (X LU))
   (ALL X |:| TH E (X LU))
   (ALL X |:| FR E (X LU))
   (ALL X |:| SA E (X LU))
   (ALL X |:| SU NOT E (X LU))
   (ALL X |:| MO E (X D))
   (ALL X |:| TU E (X D))
   (ALL X |:| WE E (X D))
   (ALL X |:| TH E (X D))
   (ALL X |:| FR E (X D))
   (ALL X |:| SA E (X D))
   (ALL X |:| SU E (X D))
   (ALL X |:| LL E (X D))
   (ALL X |:| LU E (X D))
   (ALL X |:| MO E (YESTER (X) SU))
   (ALL X |:| TU E (YESTER (X) MO))
   (ALL X |:| WE E (YESTER (X) TU))
   (ALL X |:| TH E (YESTER (X) WE))
   (ALL X |:| FR E (YESTER (X) TH))
   (ALL X |:| SA E (YESTER (X) FR))
   (ALL X |:| SU E (YESTER (X) SA))
   (ALL |X,Y| |:| D (E (X LL) OR NOT LIES (LION X Y) OR E (Y LL)))
   (ALL X |:| D (ALL Y |:| LL (E (X LL) OR LIES (LION X Y))))
   (ALL |X,Y| |:| LL (NOT LIES (LION X Y)))
   (ALL Y |:| D (ALL X |:| LL (LIES (LION X Y) OR E (Y LL))))
   (ALL |X,Y| |:| D (E (X LU) OR NOT LIES (UNICORN X Y) OR E (Y LU)))
   (ALL X |:| D (ALL Y |:| LU (E (X LU) OR LIES (UNICORN X Y))))
   (ALL |X,Y| |:| LU (NOT LIES (UNICORN X Y)))
   (ALL Y |:| D (ALL X |:| LU (LIES (UNICORN X Y) OR E (Y LU))))))

(THEOREMS.INFIX ((EX X |:| D (LIES (LION X YESTER (YESTER (X))) AND LIES (UNICORN X YESTER (YESTER (X)))))))

(AXIOMS.PREFIX   ((AND (+ 4 (5 6) NIL) (AND (+ 4 (7 8) NIL) (AND (+ 4 (9 10) NIL) (AND (+ 4 (11 12) NIL) (AND (+ 4 (13 14) NIL) (AND (+ 4 (15 16) NIL) (+ 4 (17 18) NIL)))))))
   (ALL 19 (+ 4 (19 20) NIL))
   (ALL 21 (+ 4 (21 20) NIL))
   (ALL 22 (+ 4 (22 20) NIL))
   (ALL 23 (NOT (+ 4 (23 20) NIL)))
   (ALL 24 (NOT (+ 4 (24 20) NIL)))
   (ALL 25 (NOT (+ 4 (25 20) NIL)))
   (ALL 26 (NOT (+ 4 (26 20) NIL)))
   (ALL 27 (NOT (+ 4 (27 28) NIL)))
   (ALL 29 (NOT (+ 4 (29 28) NIL)))
   (ALL 30 (NOT (+ 4 (30 28) NIL)))
   (ALL 31 (+ 4 (31 28) NIL))
   (ALL 32 (+ 4 (32 28) NIL))
   (ALL 33 (+ 4 (33 28) NIL))
   (ALL 34 (NOT (+ 4 (34 28) NIL)))
   (ALL 35 (+ 4 (35 36) NIL))
   (ALL 37 (+ 4 (37 36) NIL))
   (ALL 38 (+ 4 (38 36) NIL))
   (ALL 39 (+ 4 (39 36) NIL))
   (ALL 40 (+ 4 (40 36) NIL))
   (ALL 41 (+ 4 (41 36) NIL))
   (ALL 42 (+ 4 (42 36) NIL))
   (ALL 43 (+ 4 (43 36) NIL))
   (ALL 44 (+ 4 (44 36) NIL))
   (ALL 45 (+ 4 ((46 45) 18) NIL))
   (ALL 47 (+ 4 ((46 47) 6) NIL))
   (ALL 48 (+ 4 ((46 48) 8) NIL))
   (ALL 49 (+ 4 ((46 49) 10) NIL))
   (ALL 50 (+ 4 ((46 50) 12) NIL))
   (ALL 51 (+ 4 ((46 51) 14) NIL))
   (ALL 52 (+ 4 ((46 52) 16) NIL))
   (ALL 54 (ALL 53 (OR (+ 4 (53 20) NIL) (OR (NOT (+ 56 (55 53 54) NIL)) (+ 4 (54 20) NIL)))))
   (ALL 57 (ALL 58 (OR (+ 4 (57 20) NIL) (+ 56 (55 57 58) NIL))))
   (ALL 60 (ALL 59 (NOT (+ 56 (55 59 60) NIL))))
   (ALL 61 (ALL 62 (OR (+ 56 (55 62 61) NIL) (+ 4 (61 20) NIL))))
   (ALL 64 (ALL 63 (OR (+ 4 (63 28) NIL) (OR (NOT (+ 56 (65 63 64) NIL)) (+ 4 (64 28) NIL)))))
   (ALL 66 (ALL 67 (OR (+ 4 (66 28) NIL) (+ 56 (65 66 67) NIL))))
   (ALL 69 (ALL 68 (NOT (+ 56 (65 68 69) NIL))))
   (ALL 70 (ALL 71 (OR (+ 56 (65 71 70) NIL) (+ 4 (70 28) NIL))))))

(THEOREMS.PREFIX ((EX 72 (AND (+ 56 (55 72 (46 (46 72))) NIL) (+ 56 (65 72 (46 (46 72))) NIL)))))

(OPTIONS (TWO_RULES)
    (TWO_RULES.MAXLEVEL . 1)
    (TWO_SUPPRESS.NORULES)
    (RED.I_CLAUSE.MULTIPLE.LITERALS)
    (RED.I_CLAUSE.PURITY)
    (RED.I_CLAUSE.TAUTOLOGY)
    (RED.I_CLAUSE.TAUTOLOGY.RECHECK)
    (RED.I_CLAUSE.SUBSUMPTION . T)
    (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
    (RED.I_CLAUSE.REPL.FACTORING)
    (RED.I_CLAUSE.REPL.FACTORING.RECHECK)
    (RED.I_CLAUSE.REPL.RESOLUTION)
    (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK)
    (RED.I_CLAUSE.REWRITING)
    (RED.I_LINK.INCOMPATIBILITY)
    (RED.I_LINK.TAUTOLOGY)
    (RED.I_LINK.TAUTOLOGY.RECHECK)
    (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.I_LINK.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.MULTIPLE.LITERALS)
    (RED.D_CLAUSE.PURITY)
    (RED.D_CLAUSE.TAUTOLOGY)
    (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
    (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
    (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
    (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.REPL.FACTORING)
    (RED.D_CLAUSE.REPL.FACTORING.RECHECK)
    (RED.D_CLAUSE.REPL.RESOLUTION)
    (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK)
    (RED.D_CLAUSE.REWRITING)
    (RED.D_LINK.INCOMPATIBILITY)
    (RED.D_LINK.TAUTOLOGY)
    (RED.D_LINK.TAUTOLOGY.RECHECK)
    (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.D_LINK.SUBSUMPTION.RECHECK)
    (FAC_INITIAL)
    (FAC_EACH.STEP)
    (STR_RESOLUTION . SET-OF-SUPPORT)
    (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
    (STR_LINK.DEPTH)
    (STR_TERM.DEPTH)
    (STR_FINITE.DOMAIN . T)
    (TERM_UNITS . T)
    (TERM_ITERATIONS . 0)
    (TERM_SET.OF.SUPPORT)
    (TERM_BREADTH.FIRST)
    (SORT_LITERALS . T)
    (SORT_MAX.UNIFICATION.RULE.STEPS . 30)
    (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
    (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
    (SORT_UNIFIER.STOP.NUMBER . 100)
    (SORT_SHOW.VARIABLE.SORTS . T)
    (ER_PARAMODULATION . HEURISTIC-COMPLETION)
    (ER_WEIGHT.POLYNOMIALS)
    (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
    (ER_COMPLETION . UNFAILING)
    (ER_CP.REDUCTION . T)
    (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
    (ER_OPERATOR.ORDERING * - + 0 1)
    (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
    (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
    (ER_NARROW.DEPTH . 0)
    (ER_NARROW.NEXT . DEPTH)
    (ER_NARROW.TEST NORM C DELTA SL N)
    (ER_COMPILE)
    (GEN_SPLITTING . 0)
    (GEN_PRESIMPLIFICATION . T)
    (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
    (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
    (GEN_MANUAL.CONTROL)
    (GEN_MAXIMUM.STEPS)
    (GEN_GRAPH.SAVING)
    (GEN_SAVE.FILE . SAVEDEFAULT)
    (GEN_LISP.GARBAGE.COLLECTION)
    (GEN_COMMON.LISP)
    (GEN_OTHER.PROVER . MKRP)
    (TR_PREPROCESSING)
    (TR_STEP.MODE . LR)
    (TR_DUMP)
    (TR_CLAUSE.MODE . I)
    (TR_LINK.MODE . I)
    (TR_TRACE.FILE)
    (TR_TERMINAL . T)
    (PR_INFIX.FORM . T)
    (PR_PREFIX.FORM)
    (PR_OPTIONS)
    (PR_AXIOM.CLAUSES . T)
    (PR_SYMBOLS)
    (PR_DIRECT.PROOF . T)
    (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
    (PR_PROTOCOL . STANDARD)
    (PR_LEFT.MARGIN . 0)
    (PR_RIGHT.MARGIN . 117)
    (PR_LATEX)
    (PR_LINELENGTH . 117)
    (PR_LITERALS)
   )

(LINK.COLOURS (R RIW RD S SI SIW SID T TI TIW P PIW PD RIWD))

(AXIOMS (START.TIME 660196714)
   (PARTIAL   (CLAUSE 75 R.= AXIOM ((73 . 3)) ((+ 2 (73 73)) ))(CLAUSE 76 A1 AXIOM () ((+ 4 (5 6)) )))
   (PARTIAL   (CLAUSE 77 A2 AXIOM () ((+ 4 (7 8)) )))
   (PARTIAL   (CLAUSE 78 A3 AXIOM () ((+ 4 (9 10)) )))
   (PARTIAL   (CLAUSE 79 A4 AXIOM () ((+ 4 (11 12)) )))
   (PARTIAL   (CLAUSE 80 A5 AXIOM () ((+ 4 (13 14)) )))
   (PARTIAL   (CLAUSE 81 A6 AXIOM () ((+ 4 (15 16)) )))
   (PARTIAL   (CLAUSE 82 A7 AXIOM () ((+ 4 (17 18)) )))
   (PARTIAL   (CLAUSE 84 A8 AXIOM ((19 . 6)) ((+ 4 (19 20)) )))
   (PARTIAL   (CLAUSE 86 A9 AXIOM ((21 . 8)) ((+ 4 (21 20)) )))
   (PARTIAL   (CLAUSE 88 A10 AXIOM ((22 . 10)) ((+ 4 (22 20)) )))
   (PARTIAL   (CLAUSE 90 A11 AXIOM ((23 . 12)) ((- 4 (23 20)) )))
   (PARTIAL   (CLAUSE 92 A12 AXIOM ((24 . 14)) ((- 4 (24 20)) )))
   (PARTIAL   (CLAUSE 94 A13 AXIOM ((25 . 16)) ((- 4 (25 20)) )))
   (PARTIAL   (CLAUSE 96 A14 AXIOM ((26 . 18)) ((- 4 (26 20)) )))
   (PARTIAL   (CLAUSE 98 A15 AXIOM ((27 . 6)) ((- 4 (27 28)) )))
   (PARTIAL   (CLAUSE 100 A16 AXIOM ((29 . 8)) ((- 4 (29 28)) )))
   (PARTIAL   (CLAUSE 102 A17 AXIOM ((30 . 10)) ((- 4 (30 28)) )))
   (PARTIAL   (CLAUSE 104 A18 AXIOM ((31 . 12)) ((+ 4 (31 28)) )))
   (PARTIAL   (CLAUSE 106 A19 AXIOM ((32 . 14)) ((+ 4 (32 28)) )))
   (PARTIAL   (CLAUSE 108 A20 AXIOM ((33 . 16)) ((+ 4 (33 28)) )))
   (PARTIAL   (CLAUSE 110 A21 AXIOM ((34 . 18)) ((- 4 (34 28)) )))
   (PARTIAL   (CLAUSE 112 A22 AXIOM ((35 . 6)) ((+ 4 (35 36)) )))
   (PARTIAL   (CLAUSE 114 A23 AXIOM ((37 . 8)) ((+ 4 (37 36)) )))
   (PARTIAL   (CLAUSE 116 A24 AXIOM ((38 . 10)) ((+ 4 (38 36)) )))
   (PARTIAL   (CLAUSE 118 A25 AXIOM ((39 . 12)) ((+ 4 (39 36)) )))
   (PARTIAL   (CLAUSE 120 A26 AXIOM ((40 . 14)) ((+ 4 (40 36)) )))
   (PARTIAL   (CLAUSE 122 A27 AXIOM ((41 . 16)) ((+ 4 (41 36)) )))
   (PARTIAL   (CLAUSE 124 A28 AXIOM ((42 . 18)) ((+ 4 (42 36)) )))
   (PARTIAL   (CLAUSE 126 A29 AXIOM ((43 . 20)) ((+ 4 (43 36)) )))
   (PARTIAL   (CLAUSE 128 A30 AXIOM ((44 . 28)) ((+ 4 (44 36)) )))
   (PARTIAL   (CLAUSE 130 A31 AXIOM ((45 . 6)) ((+ 4 ((46 45) 18)) )))
   (PARTIAL   (CLAUSE 132 A32 AXIOM ((47 . 8)) ((+ 4 ((46 47) 6)) )))
   (PARTIAL   (CLAUSE 134 A33 AXIOM ((48 . 10)) ((+ 4 ((46 48) 8)) )))
   (PARTIAL   (CLAUSE 136 A34 AXIOM ((49 . 12)) ((+ 4 ((46 49) 10)) )))
   (PARTIAL   (CLAUSE 138 A35 AXIOM ((50 . 14)) ((+ 4 ((46 50) 12)) )))
   (PARTIAL   (CLAUSE 140 A36 AXIOM ((51 . 16)) ((+ 4 ((46 51) 14)) )))
   (PARTIAL   (CLAUSE 142 A37 AXIOM ((52 . 18)) ((+ 4 ((46 52) 16)) )))
   (PARTIAL   (CLAUSE 145 A38 AXIOM ((60 . 20)(59 . 20)) ((- 56 (55 59 60)) )))
   (PARTIAL   (CLAUSE 148 A39 AXIOM ((69 . 28)(68 . 28)) ((- 56 (65 68 69)) )))
   (PARTIAL   (CLAUSE 151 A40 AXIOM ((58 . 20)(57 . 36))
   ((+ 4 (57 20)) (+ 56 (55 57 58)) )))
   (PARTIAL   (CLAUSE 154 A41 AXIOM ((61 . 36)(62 . 20))
   ((+ 56 (55 62 61)) (+ 4 (61 20)) )))
   (PARTIAL   (CLAUSE 157 A42 AXIOM ((67 . 28)(66 . 36))
   ((+ 4 (66 28)) (+ 56 (65 66 67)) )))
   (PARTIAL   (CLAUSE 160 A43 AXIOM ((70 . 36)(71 . 28))
   ((+ 56 (65 71 70)) (+ 4 (70 28)) )))
   (PARTIAL   (CLAUSE 163 A44 AXIOM ((54 . 36)(53 . 36))
   ((+ 4 (53 20)) (- 56 (55 53 54)) (+ 4 (54 20)) )))
   (PARTIAL   (CLAUSE 166 A45 AXIOM ((64 . 36)(63 . 36))
   ((+ 4 (63 28)) (- 56 (65 63 64)) (+ 4 (64 28)) )))
   (END.TIME 660241765)
   (FINAL 75 76 77 78 79 80 81 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 145 148 151 154 157 160 163 166)
   (SYMBOLS 
   (LET (NEW.ADDRESS)
   (LIST (CONS   56 (DT-PREDICATE.CREATE "LIES" '(ANY ANY ANY)))
   (PROG1 (CONS    4 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "E" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
   (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (CONS   65 (DT-CONSTANT.CREATE "unicorn" 'ANY))
   (CONS   55 (DT-CONSTANT.CREATE "lion" 'ANY))
   (CONS   36 (DT-CONSTANT.CREATE "d" 'ANY))
   (CONS   28 (DT-CONSTANT.CREATE "lu" 'ANY))
   (CONS   20 (DT-CONSTANT.CREATE "ll" 'ANY))
   (CONS   18 (DT-CONSTANT.CREATE "su" 'ANY))
   (CONS   17 (DT-CONSTANT.CREATE "sun" 'ANY))
   (CONS   16 (DT-CONSTANT.CREATE "sa" 'ANY))
   (CONS   15 (DT-CONSTANT.CREATE "sat" 'ANY))
   (CONS   14 (DT-CONSTANT.CREATE "fr" 'ANY))
   (CONS   13 (DT-CONSTANT.CREATE "fri" 'ANY))
   (CONS   12 (DT-CONSTANT.CREATE "th" 'ANY))
   (CONS   11 (DT-CONSTANT.CREATE "thu" 'ANY))
   (CONS   10 (DT-CONSTANT.CREATE "we" 'ANY))
   (CONS    9 (DT-CONSTANT.CREATE "wed" 'ANY))
   (CONS    8 (DT-CONSTANT.CREATE "tu" 'ANY))
   (CONS    7 (DT-CONSTANT.CREATE "tue" 'ANY))
   (CONS    6 (DT-CONSTANT.CREATE "mo" 'ANY))
   (CONS    5 (DT-CONSTANT.CREATE "mon" 'ANY))
   (CONS    3 (DT-CONSTANT.CREATE "omega" 'ANY))
   (CONS   46 (DT-FUNCTION.CREATE "yester" 'ANY '(ANY) 'NIL)))))
   (RESULT))

(THEOREMS (SPLITPART.IDENTIFIER 1)
   (START.TIME 660242246)
   (PARTIAL   (CLAUSE 168 T46 THEOREM ((72 . 36))
   ((- 56 (55 72 (46 (46 72)))) (- 56 (65 72 (46 (46 72)))) )))
   (INITIAL   (CLAUSE 75 R.= AXIOM ((73 . 3)) ((+ 2 (73 73)) ))
(CLAUSE 76 A1 AXIOM () ((+ 4 (5 6)) ))
(CLAUSE 77 A2 AXIOM () ((+ 4 (7 8)) ))
(CLAUSE 78 A3 AXIOM () ((+ 4 (9 10)) ))
(CLAUSE 79 A4 AXIOM () ((+ 4 (11 12)) ))
(CLAUSE 80 A5 AXIOM () ((+ 4 (13 14)) ))
(CLAUSE 81 A6 AXIOM () ((+ 4 (15 16)) ))
(CLAUSE 82 A7 AXIOM () ((+ 4 (17 18)) ))
(CLAUSE 84 A8 AXIOM ((19 . 6)) ((+ 4 (19 20)) ))
(CLAUSE 86 A9 AXIOM ((21 . 8)) ((+ 4 (21 20)) ))
(CLAUSE 88 A10 AXIOM ((22 . 10)) ((+ 4 (22 20)) ))
(CLAUSE 90 A11 AXIOM ((23 . 12)) ((- 4 (23 20)) ))
(CLAUSE 92 A12 AXIOM ((24 . 14)) ((- 4 (24 20)) ))
(CLAUSE 94 A13 AXIOM ((25 . 16)) ((- 4 (25 20)) ))
(CLAUSE 96 A14 AXIOM ((26 . 18)) ((- 4 (26 20)) ))
(CLAUSE 98 A15 AXIOM ((27 . 6)) ((- 4 (27 28)) ))
(CLAUSE 100 A16 AXIOM ((29 . 8)) ((- 4 (29 28)) ))
(CLAUSE 102 A17 AXIOM ((30 . 10)) ((- 4 (30 28)) ))
(CLAUSE 104 A18 AXIOM ((31 . 12)) ((+ 4 (31 28)) ))
(CLAUSE 106 A19 AXIOM ((32 . 14)) ((+ 4 (32 28)) ))
(CLAUSE 108 A20 AXIOM ((33 . 16)) ((+ 4 (33 28)) ))
(CLAUSE 110 A21 AXIOM ((34 . 18)) ((- 4 (34 28)) ))
(CLAUSE 124 A28 AXIOM ((42 . 18)) ((+ 4 (42 36)) ))
(CLAUSE 126 A29 AXIOM ((43 . 20)) ((+ 4 (43 36)) ))
(CLAUSE 128 A30 AXIOM ((44 . 28)) ((+ 4 (44 36)) ))
(CLAUSE 130 A31 AXIOM ((45 . 6)) ((+ 4 ((46 45) 18)) ))
(CLAUSE 132 A32 AXIOM ((47 . 8)) ((+ 4 ((46 47) 6)) ))
(CLAUSE 134 A33 AXIOM ((48 . 10)) ((+ 4 ((46 48) 8)) ))
(CLAUSE 136 A34 AXIOM ((49 . 12)) ((+ 4 ((46 49) 10)) ))
(CLAUSE 138 A35 AXIOM ((50 . 14)) ((+ 4 ((46 50) 12)) ))
(CLAUSE 140 A36 AXIOM ((51 . 16)) ((+ 4 ((46 51) 14)) ))
(CLAUSE 142 A37 AXIOM ((52 . 18)) ((+ 4 ((46 52) 16)) ))
(CLAUSE 145 A38 AXIOM ((60 . 20)(59 . 20)) ((- 56 (55 59 60)) ))
(CLAUSE 148 A39 AXIOM ((69 . 28)(68 . 28)) ((- 56 (65 68 69)) ))
(CLAUSE 151 A40 AXIOM ((58 . 20)(57 . 36))
   ((+ 4 (57 20)) (+ 56 (55 57 58)) ))
(CLAUSE 154 A41 AXIOM ((61 . 36)(62 . 20))
   ((+ 56 (55 62 61)) (+ 4 (61 20)) ))
(CLAUSE 157 A42 AXIOM ((67 . 28)(66 . 36))
   ((+ 4 (66 28)) (+ 56 (65 66 67)) ))
(CLAUSE 160 A43 AXIOM ((70 . 36)(71 . 28))
   ((+ 56 (65 71 70)) (+ 4 (70 28)) ))
(CLAUSE 163 A44 AXIOM ((54 . 36)(53 . 36))
   ((+ 4 (53 20)) (- 56 (55 53 54)) (+ 4 (54 20)) ))
(CLAUSE 166 A45 AXIOM ((64 . 36)(63 . 36))
   ((+ 4 (63 28)) (- 56 (65 63 64)) (+ 4 (64 28)) ))
(CLAUSE 168 T46 THEOREM ((72 . 36))
   ((- 56 (55 72 (46 (46 72)))) (- 56 (65 72 (46 (46 72)))) ))   )
   (END.TIME 660569141)
   (FINAL 75 76 77 78 79 80 81 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 124 126 128 130 132 134 136 138 140 142 145 148 151 154 157 160 163 166 168)
   (SYMBOLS 
   (LET (NEW.ADDRESS)
   (LIST (CONS   56 (DT-PREDICATE.CREATE "LIES" '(ANY ANY ANY)))
   (PROG1 (CONS    4 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "E" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
   (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (CONS   65 (DT-CONSTANT.CREATE "unicorn" 'ANY))
   (CONS   55 (DT-CONSTANT.CREATE "lion" 'ANY))
   (CONS   36 (DT-CONSTANT.CREATE "d" 'ANY))
   (CONS   28 (DT-CONSTANT.CREATE "lu" 'ANY))
   (CONS   20 (DT-CONSTANT.CREATE "ll" 'ANY))
   (CONS   18 (DT-CONSTANT.CREATE "su" 'ANY))
   (CONS   17 (DT-CONSTANT.CREATE "sun" 'ANY))
   (CONS   16 (DT-CONSTANT.CREATE "sa" 'ANY))
   (CONS   15 (DT-CONSTANT.CREATE "sat" 'ANY))
   (CONS   14 (DT-CONSTANT.CREATE "fr" 'ANY))
   (CONS   13 (DT-CONSTANT.CREATE "fri" 'ANY))
   (CONS   12 (DT-CONSTANT.CREATE "th" 'ANY))
   (CONS   11 (DT-CONSTANT.CREATE "thu" 'ANY))
   (CONS   10 (DT-CONSTANT.CREATE "we" 'ANY))
   (CONS    9 (DT-CONSTANT.CREATE "wed" 'ANY))
   (CONS    8 (DT-CONSTANT.CREATE "tu" 'ANY))
   (CONS    7 (DT-CONSTANT.CREATE "tue" 'ANY))
   (CONS    6 (DT-CONSTANT.CREATE "mo" 'ANY))
   (CONS    5 (DT-CONSTANT.CREATE "mon" 'ANY))
   (CONS    3 (DT-CONSTANT.CREATE "omega" 'ANY))
   (CONS   46 (DT-FUNCTION.CREATE "yester" 'ANY '(ANY) 'NIL)))))
   (RESULT))
(indices ((168 54 55) (166 46 47 48) (163 38 39 40) (160 52 53) (157 49 50) (154 44 45) (151 41 42) (148 51) (145 43) (142 37) (140 36) (138 35) (136 34) (134 33) (132 32) (130 31) (128 30) (126 29) (124 28) (122 27) (120 26) (118 25) (116 24) (114 23) (112 22) (110 21) (108 20) (106 19) (104 18) (102 17) (100 16) (98 15) (96 14) (94 13) (92 12) (90 11) (88 10) (86 9) (84 8) (82 7) (81 6) (80 5) (79 4) (78 3) (77 2) (76 1) (75 NIL)))

(SPLITPARTS "Genera 8.0.1 Logical Pathnames Translation Files NEWEST IP-TCP 422.2 RPC 415.0 Embedding Support 407.0 UX Support 416.0 Experimental Network RPC 415.0 Experimental NFS Client 415.0 CLX 419.0 C Runtime 416.0 Compiler Tools Package 411.0 Compiler Tools Runtime 411.0 C Packages 413.0 Minimal Lexer Runtime 416.0 Lexer Package 415.0 Syntax Editor Runtime 411.0 Experimental X Server 409.0 X Remote Screen 418.1 KKL 24.0 HADES 19.0 Experimental MKRP 53.11" "26-JUN,1992 15:45" NIL)

(OPTIONS (TWO_RULES)
    (TWO_RULES.MAXLEVEL . 1)
    (TWO_SUPPRESS.NORULES)
    (RED.I_CLAUSE.MULTIPLE.LITERALS)
    (RED.I_CLAUSE.PURITY)
    (RED.I_CLAUSE.TAUTOLOGY)
    (RED.I_CLAUSE.TAUTOLOGY.RECHECK)
    (RED.I_CLAUSE.SUBSUMPTION . T)
    (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
    (RED.I_CLAUSE.REPL.FACTORING)
    (RED.I_CLAUSE.REPL.FACTORING.RECHECK)
    (RED.I_CLAUSE.REPL.RESOLUTION)
    (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK)
    (RED.I_CLAUSE.REWRITING)
    (RED.I_LINK.INCOMPATIBILITY)
    (RED.I_LINK.TAUTOLOGY)
    (RED.I_LINK.TAUTOLOGY.RECHECK)
    (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.I_LINK.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.MULTIPLE.LITERALS)
    (RED.D_CLAUSE.PURITY)
    (RED.D_CLAUSE.TAUTOLOGY)
    (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
    (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
    (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
    (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.REPL.FACTORING)
    (RED.D_CLAUSE.REPL.FACTORING.RECHECK)
    (RED.D_CLAUSE.REPL.RESOLUTION)
    (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK)
    (RED.D_CLAUSE.REWRITING)
    (RED.D_LINK.INCOMPATIBILITY)
    (RED.D_LINK.TAUTOLOGY)
    (RED.D_LINK.TAUTOLOGY.RECHECK)
    (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.D_LINK.SUBSUMPTION.RECHECK)
    (FAC_INITIAL)
    (FAC_EACH.STEP)
    (STR_RESOLUTION . SET-OF-SUPPORT)
    (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
    (STR_LINK.DEPTH)
    (STR_TERM.DEPTH)
    (STR_FINITE.DOMAIN . T)
    (TERM_UNITS . T)
    (TERM_ITERATIONS . 0)
    (TERM_SET.OF.SUPPORT)
    (TERM_BREADTH.FIRST)
    (SORT_LITERALS . T)
    (SORT_MAX.UNIFICATION.RULE.STEPS . 30)
    (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
    (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
    (SORT_UNIFIER.STOP.NUMBER . 100)
    (SORT_SHOW.VARIABLE.SORTS . T)
    (ER_PARAMODULATION . HEURISTIC-COMPLETION)
    (ER_WEIGHT.POLYNOMIALS)
    (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
    (ER_COMPLETION . UNFAILING)
    (ER_CP.REDUCTION . T)
    (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
    (ER_OPERATOR.ORDERING * - + 0 1)
    (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
    (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
    (ER_NARROW.DEPTH . 0)
    (ER_NARROW.NEXT . DEPTH)
    (ER_NARROW.TEST NORM C DELTA SL N)
    (ER_COMPILE)
    (GEN_SPLITTING . 0)
    (GEN_PRESIMPLIFICATION . T)
    (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
    (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
    (GEN_MANUAL.CONTROL)
    (GEN_MAXIMUM.STEPS)
    (GEN_GRAPH.SAVING)
    (GEN_SAVE.FILE . SAVEDEFAULT)
    (GEN_LISP.GARBAGE.COLLECTION)
    (GEN_COMMON.LISP)
    (GEN_OTHER.PROVER . MKRP)
    (TR_PREPROCESSING)
    (TR_STEP.MODE . LR)
    (TR_DUMP)
    (TR_CLAUSE.MODE . I)
    (TR_LINK.MODE . I)
    (TR_TRACE.FILE)
    (TR_TERMINAL . T)
    (PR_INFIX.FORM . T)
    (PR_PREFIX.FORM)
    (PR_OPTIONS)
    (PR_AXIOM.CLAUSES . T)
    (PR_SYMBOLS)
    (PR_DIRECT.PROOF . T)
    (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
    (PR_PROTOCOL . STANDARD)
    (PR_LEFT.MARGIN . 0)
    (PR_RIGHT.MARGIN . 117)
    (PR_LATEX)
    (PR_LINELENGTH . 117)
    (PR_LITERALS)
   )

(REFUTATION (START.TIME 660571860)

(OPTIONS (TWO_RULES)
    (TWO_RULES.MAXLEVEL . 1)
    (TWO_SUPPRESS.NORULES)
    (RED.I_CLAUSE.MULTIPLE.LITERALS)
    (RED.I_CLAUSE.PURITY)
    (RED.I_CLAUSE.TAUTOLOGY)
    (RED.I_CLAUSE.TAUTOLOGY.RECHECK)
    (RED.I_CLAUSE.SUBSUMPTION . T)
    (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
    (RED.I_CLAUSE.REPL.FACTORING)
    (RED.I_CLAUSE.REPL.FACTORING.RECHECK)
    (RED.I_CLAUSE.REPL.RESOLUTION)
    (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK)
    (RED.I_CLAUSE.REWRITING)
    (RED.I_LINK.INCOMPATIBILITY)
    (RED.I_LINK.TAUTOLOGY)
    (RED.I_LINK.TAUTOLOGY.RECHECK)
    (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.I_LINK.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.MULTIPLE.LITERALS)
    (RED.D_CLAUSE.PURITY)
    (RED.D_CLAUSE.TAUTOLOGY)
    (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
    (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
    (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
    (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.REPL.FACTORING)
    (RED.D_CLAUSE.REPL.FACTORING.RECHECK)
    (RED.D_CLAUSE.REPL.RESOLUTION)
    (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK)
    (RED.D_CLAUSE.REWRITING)
    (RED.D_LINK.INCOMPATIBILITY)
    (RED.D_LINK.TAUTOLOGY)
    (RED.D_LINK.TAUTOLOGY.RECHECK)
    (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.D_LINK.SUBSUMPTION.RECHECK)
    (FAC_INITIAL)
    (FAC_EACH.STEP)
    (STR_RESOLUTION . SET-OF-SUPPORT)
    (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
    (STR_LINK.DEPTH)
    (STR_TERM.DEPTH)
    (STR_FINITE.DOMAIN . T)
    (TERM_UNITS . T)
    (TERM_ITERATIONS . 0)
    (TERM_SET.OF.SUPPORT)
    (TERM_BREADTH.FIRST)
    (SORT_LITERALS . T)
    (SORT_MAX.UNIFICATION.RULE.STEPS . 30)
    (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
    (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
    (SORT_UNIFIER.STOP.NUMBER . 100)
    (SORT_SHOW.VARIABLE.SORTS . T)
    (ER_PARAMODULATION . HEURISTIC-COMPLETION)
    (ER_WEIGHT.POLYNOMIALS)
    (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
    (ER_COMPLETION . UNFAILING)
    (ER_CP.REDUCTION . T)
    (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
    (ER_OPERATOR.ORDERING * - + 0 1)
    (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
    (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
    (ER_NARROW.DEPTH . 0)
    (ER_NARROW.NEXT . DEPTH)
    (ER_NARROW.TEST NORM C DELTA SL N)
    (ER_COMPILE)
    (GEN_SPLITTING . 0)
    (GEN_PRESIMPLIFICATION . T)
    (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
    (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
    (GEN_MANUAL.CONTROL)
    (GEN_MAXIMUM.STEPS)
    (GEN_GRAPH.SAVING)
    (GEN_SAVE.FILE . SAVEDEFAULT)
    (GEN_LISP.GARBAGE.COLLECTION)
    (GEN_COMMON.LISP)
    (GEN_OTHER.PROVER . MKRP)
    (TR_PREPROCESSING)
    (TR_STEP.MODE . LR)
    (TR_DUMP)
    (TR_CLAUSE.MODE . I)
    (TR_LINK.MODE . I)
    (TR_TRACE.FILE)
    (TR_TERMINAL . T)
    (PR_INFIX.FORM . T)
    (PR_PREFIX.FORM)
    (PR_OPTIONS)
    (PR_AXIOM.CLAUSES . T)
    (PR_SYMBOLS)
    (PR_DIRECT.PROOF . T)
    (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
    (PR_PROTOCOL . STANDARD)
    (PR_LEFT.MARGIN . 0)
    (PR_RIGHT.MARGIN . 117)
    (PR_LATEX)
    (PR_LINELENGTH . 117)
    (PR_LITERALS)
   )
   (INITIAL   (CLAUSE 75 R.= AXIOM ((73 . 3)) ((+ 2 (73 73)) ))
(CLAUSE 76 A1 AXIOM () ((+ 4 (5 6)) ))
(CLAUSE 77 A2 AXIOM () ((+ 4 (7 8)) ))
(CLAUSE 78 A3 AXIOM () ((+ 4 (9 10)) ))
(CLAUSE 79 A4 AXIOM () ((+ 4 (11 12)) ))
(CLAUSE 80 A5 AXIOM () ((+ 4 (13 14)) ))
(CLAUSE 81 A6 AXIOM () ((+ 4 (15 16)) ))
(CLAUSE 82 A7 AXIOM () ((+ 4 (17 18)) ))
(CLAUSE 84 A8 AXIOM ((19 . 6)) ((+ 4 (19 20)) ))
(CLAUSE 86 A9 AXIOM ((21 . 8)) ((+ 4 (21 20)) ))
(CLAUSE 88 A10 AXIOM ((22 . 10)) ((+ 4 (22 20)) ))
(CLAUSE 90 A11 AXIOM ((23 . 12)) ((- 4 (23 20)) ))
(CLAUSE 92 A12 AXIOM ((24 . 14)) ((- 4 (24 20)) ))
(CLAUSE 94 A13 AXIOM ((25 . 16)) ((- 4 (25 20)) ))
(CLAUSE 96 A14 AXIOM ((26 . 18)) ((- 4 (26 20)) ))
(CLAUSE 98 A15 AXIOM ((27 . 6)) ((- 4 (27 28)) ))
(CLAUSE 100 A16 AXIOM ((29 . 8)) ((- 4 (29 28)) ))
(CLAUSE 102 A17 AXIOM ((30 . 10)) ((- 4 (30 28)) ))
(CLAUSE 104 A18 AXIOM ((31 . 12)) ((+ 4 (31 28)) ))
(CLAUSE 106 A19 AXIOM ((32 . 14)) ((+ 4 (32 28)) ))
(CLAUSE 108 A20 AXIOM ((33 . 16)) ((+ 4 (33 28)) ))
(CLAUSE 110 A21 AXIOM ((34 . 18)) ((- 4 (34 28)) ))
(CLAUSE 124 A28 AXIOM ((42 . 18)) ((+ 4 (42 36)) ))
(CLAUSE 126 A29 AXIOM ((43 . 20)) ((+ 4 (43 36)) ))
(CLAUSE 128 A30 AXIOM ((44 . 28)) ((+ 4 (44 36)) ))
(CLAUSE 130 A31 AXIOM ((45 . 6)) ((+ 4 ((46 45) 18)) ))
(CLAUSE 132 A32 AXIOM ((47 . 8)) ((+ 4 ((46 47) 6)) ))
(CLAUSE 134 A33 AXIOM ((48 . 10)) ((+ 4 ((46 48) 8)) ))
(CLAUSE 136 A34 AXIOM ((49 . 12)) ((+ 4 ((46 49) 10)) ))
(CLAUSE 138 A35 AXIOM ((50 . 14)) ((+ 4 ((46 50) 12)) ))
(CLAUSE 140 A36 AXIOM ((51 . 16)) ((+ 4 ((46 51) 14)) ))
(CLAUSE 142 A37 AXIOM ((52 . 18)) ((+ 4 ((46 52) 16)) ))
(CLAUSE 145 A38 AXIOM ((60 . 20)(59 . 20)) ((- 56 (55 59 60)) ))
(CLAUSE 148 A39 AXIOM ((69 . 28)(68 . 28)) ((- 56 (65 68 69)) ))
(CLAUSE 151 A40 AXIOM ((58 . 20)(57 . 36))
   ((+ 4 (57 20)) (+ 56 (55 57 58)) ))
(CLAUSE 154 A41 AXIOM ((61 . 36)(62 . 20))
   ((+ 56 (55 62 61)) (+ 4 (61 20)) ))
(CLAUSE 157 A42 AXIOM ((67 . 28)(66 . 36))
   ((+ 4 (66 28)) (+ 56 (65 66 67)) ))
(CLAUSE 160 A43 AXIOM ((70 . 36)(71 . 28))
   ((+ 56 (65 71 70)) (+ 4 (70 28)) ))
(CLAUSE 163 A44 AXIOM ((54 . 36)(53 . 36))
   ((+ 4 (53 20)) (- 56 (55 53 54)) (+ 4 (54 20)) ))
(CLAUSE 166 A45 AXIOM ((64 . 36)(63 . 36))
   ((+ 4 (63 28)) (- 56 (65 63 64)) (+ 4 (64 28)) ))
(CLAUSE 168 T46 THEOREM ((72 . 36))
   ((- 56 (55 72 (46 (46 72)))) (- 56 (65 72 (46 (46 72)))) ))   )
   (OPERATION (CLAUSE 1370 R1 (168 157) ((1372 . 18))
   ((+ 4 (1372 28)) (- 56 (55 1372 (46 (46 1372)))) ))
   (RESOLUTION 157 2 168 2 NIL (66 1635 1632 (46 1635) 67 (46 (46 1635)) 72 1635) 1370))
   (OPERATION (CLAUSE 1926 R2 (168 157) ((1924 . 6))
   ((+ 4 (1924 28)) (- 56 (55 1924 (46 (46 1924)))) ))
   (RESOLUTION 157 2 168 2 NIL (66 1634 1631 (46 1634) 67 (46 (46 1634)) 72 1634) 1926))
   (OPERATION (CLAUSE 2136 R3 (168 151) ((2134 . 12))
   ((+ 4 (2134 20)) (- 56 (65 2134 (46 (46 2134)))) ))
   (RESOLUTION 151 2 168 1 NIL (57 1660 1657 (46 1660) 58 (46 (46 1660)) 72 1660) 2136))
   (OPERATION (CLAUSE 2311 R4 (168 151) ((2309 . 14))
   ((+ 4 (2309 20)) (- 56 (65 2309 (46 (46 2309)))) ))
   (RESOLUTION 151 2 168 1 NIL (57 1659 1656 (46 1659) 58 (46 (46 1659)) 72 1659) 2311))
   (OPERATION (CLAUSE 2519 R5 (110 1370) ((2517 . 18)) ((- 56 (55 2517 (46 (46 2517)))) ))
   (RESOLUTION 1370 1 110 1 NIL (1372 34) 2519))
   (OPERATION (CLAUSE 2628 R6 (98 1926) ((2626 . 6)) ((- 56 (55 2626 (46 (46 2626)))) ))
   (RESOLUTION 1926 1 98 1 NIL (1924 27) 2628))
   (OPERATION (CLAUSE 2717 R7 (2628 154) ((2715 . 6)) ((+ 4 ((46 (46 2715)) 20)) ))
   (RESOLUTION 154 1 2628 1 NIL (62 2626 61 (46 (46 2626))) 2717))
   (OPERATION (CLAUSE 2872 R8 (94 2717) () ())
   (RESOLUTION 2717 1 94 1 NIL (25 (46 (46 2715))) 2872))
   (END.TIME 660961019)
   (SYMBOLS 
   (LET (NEW.ADDRESS)
   (LIST (CONS   56 (DT-PREDICATE.CREATE "LIES" '(ANY ANY ANY)))
   (PROG1 (CONS    4 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "E" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
   (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (CONS   65 (DT-CONSTANT.CREATE "unicorn" 'ANY))
   (CONS   55 (DT-CONSTANT.CREATE "lion" 'ANY))
   (CONS   36 (DT-CONSTANT.CREATE "d" 'ANY))
   (CONS   28 (DT-CONSTANT.CREATE "lu" 'ANY))
   (CONS   20 (DT-CONSTANT.CREATE "ll" 'ANY))
   (CONS   18 (DT-CONSTANT.CREATE "su" 'ANY))
   (CONS   17 (DT-CONSTANT.CREATE "sun" 'ANY))
   (CONS   16 (DT-CONSTANT.CREATE "sa" 'ANY))
   (CONS   15 (DT-CONSTANT.CREATE "sat" 'ANY))
   (CONS   14 (DT-CONSTANT.CREATE "fr" 'ANY))
   (CONS   13 (DT-CONSTANT.CREATE "fri" 'ANY))
   (CONS   12 (DT-CONSTANT.CREATE "th" 'ANY))
   (CONS   11 (DT-CONSTANT.CREATE "thu" 'ANY))
   (CONS   10 (DT-CONSTANT.CREATE "we" 'ANY))
   (CONS    9 (DT-CONSTANT.CREATE "wed" 'ANY))
   (CONS    8 (DT-CONSTANT.CREATE "tu" 'ANY))
   (CONS    7 (DT-CONSTANT.CREATE "tue" 'ANY))
   (CONS    6 (DT-CONSTANT.CREATE "mo" 'ANY))
   (CONS    5 (DT-CONSTANT.CREATE "mon" 'ANY))
   (CONS    3 (DT-CONSTANT.CREATE "omega" 'ANY))
   (CONS   46 (DT-FUNCTION.CREATE "yester" 'ANY '(ANY) 'NIL)))))
   (SPLITPART.IDENTIFIER 1)
   (RESULT SUCCESS 2872)
)
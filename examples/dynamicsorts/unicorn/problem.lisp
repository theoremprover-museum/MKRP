;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
dit:     Axioms and Theorems edited: 19-JUN,1992 16:05 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(319580 319585 319590 319595 319600 319605 319610 319615 319620 319625 319630 319635
          319640 319645 319650 319655 319670 319675 319680 319685 319690 319695 319700 319705
          319710 319715 319729 319734 319739 319744 319749 319754 319759 319764 319769 319774
          319779 319784 319789 319794 319799 319804 319809 319814 319819 319824 319829 319834
          319839 319844 319849 319854 319859 319864 319869 319874 319879 319884 319889 319894
          319899 319904 319909 319914 319919 319924 319929 319934 319949 319954 319969 319984
          319999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC)))
          ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY "OMEGA" (DT*ST-KIND NIL) CONSTANT 15 "E"
          NIL NIL (ANY ANY) (DEFINED) NIL ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE))) ((+ 4 (NIL)))
          ((- 4 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY "MON" (DT*ST-KIND NIL)
          CONSTANT 5 ANY "MO" (DT*ST-KIND NIL) CONSTANT 5 ANY "TUE" (DT*ST-KIND NIL) CONSTANT
          5 ANY "TU" (DT*ST-KIND NIL) CONSTANT 5 ANY "WED" (DT*ST-KIND NIL) CONSTANT 5 ANY
          "WE" (DT*ST-KIND NIL) CONSTANT 5 ANY "THU" (DT*ST-KIND NIL) CONSTANT 5 ANY "TH"
          (DT*ST-KIND NIL) CONSTANT 5 ANY "FRI" (DT*ST-KIND NIL) CONSTANT 5 ANY "FR"
          (DT*ST-KIND NIL) CONSTANT 5 ANY "SAT" (DT*ST-KIND NIL) CONSTANT 5 ANY "SA"
          (DT*ST-KIND NIL) CONSTANT 5 ANY "SUN" (DT*ST-KIND NIL) CONSTANT 5 ANY "SU"
          (DT*ST-KIND NIL) CONSTANT 5 6 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY
          "LL" (DT*ST-KIND NIL) CONSTANT 5 8 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5
          10 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 12 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 14 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 16 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 18 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 6 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY "LU" (DT*ST-KIND NIL) CONSTANT 5 8 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 10 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 12 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 14 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 16 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 18 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 6 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY "D" (DT*ST-KIND NIL) CONSTANT 5 8
          NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 10 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 12 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 14 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 16 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 18 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 20 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 28 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 6 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 14 "YESTER" NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL)
          FUNCTION 5 8 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 10 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 12 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 14 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 16 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 18 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 36 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 36 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY "LION" (DT*ST-KIND NIL) CONSTANT 15
          "LIES" NIL NIL (ANY ANY ANY) NIL NIL ((- 56 (POSITIVE))) ((+ 56 (NEGATIVE)))
          ((+ 56 (NIL))) ((- 56 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 36 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 20 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 20 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 20 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 36 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 20 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 36 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 36 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY "UNICORN" (DT*ST-KIND NIL) CONSTANT 5 36 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 28 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 28 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 28 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 36 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 28 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 36 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 320000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 320000)
             (SETQ COUNTER1 73)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 320000)
                 (MEM-INITIALIZE 320000))
               (SETQ COUNTER1 73)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 320000) (+ 319575 INCREMENT) 319575))
      (SETQ MEM*NEXT.VADR 73
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ANY))) (SETQ DT*SORT.NR (QUOTE 2)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*ELEMENT.PREDICATE (QUOTE 4)) (SETQ DT*OMEGA.CONSTANT (QUOTE 3)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (65 55 36 28 20 18 17 16 15 14 13 12 11 10 9 8 7 6 5 3))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE (46))) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (56 4 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (56 4 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
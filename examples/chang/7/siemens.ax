(COND ((FMT-LOAD " 6-SEP-84 19:54:02" NIL (((* IF A IS A PRIME AND A = B**2/C**2 THEN A DIVIDES B.) COMMENT COMMENT)
((P (A)) (+ 4 (3) NIL) QUANTIFICATION) ((M (A S (C) S (B))) (+ 8 (3 (6 5) (6 7)) NIL) QUANTIFICATION) ((ALL X M
(X X S (X))) (ALL 9 (+ 8 (9 9 (6 9)) NIL)) QUANTIFICATION) ((ALL X,Y,Z M (X Y Z) IMPL D (X Z)) (ALL 12 (ALL 11
(ALL 10 (IMPL (+ 8 (10 11 12) NIL) (+ 13 (10 12) NIL))))) QUANTIFICATION) ((ALL U,X,Y,Z P (X) AND M (Y Z U) AND
D (X U) IMPL D (X Y) OR D (X Z)) (ALL 17 (ALL 16 (ALL 15 (ALL 14 (IMPL (AND (+ 4 (15) NIL) (AND (+ 8 (16 17 14)
NIL) (+ 13 (15 14) NIL))) (OR (+ 13 (15 16) NIL) (+ 13 (15 17) NIL))))))) QUANTIFICATION))) (COND (ST*LOAD.FLAG
(PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (10101 10106 10111 10116 10131 10136 10141 10146 10151 10166 10171
10185 10190 10205 10210 10225 10240))) (DATALIST (QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+
1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL
((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 A ANY (DT*ST-KIND
NIL) CONSTANT 15 P NIL NIL (ANY) NIL NIL ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE))) ((+ 4 (NIL))) ((- 4 (NIL))) NIL
NIL (DT*ST-KIND NIL) PREDICATE 5 C ANY (DT*ST-KIND NIL) CONSTANT 14 S NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (
DT*ST-KIND NIL) FUNCTION 5 B ANY (DT*ST-KIND NIL) CONSTANT 15 M NIL NIL (ANY ANY ANY) NIL NIL ((- 8 (POSITIVE)))
((+ 8 (NEGATIVE))) ((+ 8 (NIL))) ((- 8 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 D NIL NIL (ANY ANY) NIL NIL ((- 13 (POSITIVE)))
((+ 13 (NEGATIVE))) ((+ 13 (NIL))) ((- 13 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 10240)) COUNTER1)
(MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE 18 1) (IDIFFERENCE 10240 10096)) MEM*SIZE) (MEM=SATURATION.ENTERED))
((EQ MEM*SIZE 10240) (SETQ COUNTER1 18) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1
(SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY
(SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 18) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA
MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP
RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA
(DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR (IPLUS 10096 INCREMENT))
(RPAQ MEM*NEXT.VADR 18) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR
NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 1) (RPAQQ DT*SORT.PROPERTIES
(DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS 
DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ
DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (7 5 3)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER
0) (RPAQQ DT*FUNCTION.ALL (6)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES
NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (13 8 4
2 1)) (RPAQQ DT*PREDICATE.ALL (13 8 4 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS
(PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES 
+SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2)
(RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)))
(PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED (2 1))))) (PROGN (SETPROPLIST
(QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) 
DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ ST*STACK1 (NIL ((X_17
PROGN (DT-VARIABLE.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17) ST*SYMBOL.ADDRESSES))) (X_16 PROGN
(DT-VARIABLE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES))) (X_15 PROGN (
DT-VARIABLE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_15) ST*SYMBOL.ADDRESSES))) (X_14 PROGN (
DT-VARIABLE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES)))) ((D PROGN (
DT-PREDICATE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE D) ST*SYMBOL.ADDRESSES))) (X_12 PROGN (
DT-VARIABLE.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_12) ST*SYMBOL.ADDRESSES))) (X_11 PROGN (
DT-VARIABLE.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_11) ST*SYMBOL.ADDRESSES))) (X_10 PROGN (
DT-VARIABLE.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_10) ST*SYMBOL.ADDRESSES)))) ((X_9 PROGN (
DT-VARIABLE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_9) ST*SYMBOL.ADDRESSES)))) ((M PROGN (
DT-PREDICATE.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE M) ST*SYMBOL.ADDRESSES))) (B PROGN (DT-CONSTANT.DELETE
7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B) ST*SYMBOL.ADDRESSES))) (S PROGN (DT-FUNCTION.DELETE 6) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE S) ST*SYMBOL.ADDRESSES))) (C PROGN (DT-CONSTANT.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE C) ST*SYMBOL.ADDRESSES)))) ((P PROGN (DT-PREDICATE.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE P) ST*SYMBOL.ADDRESSES))) (A PROGN (DT-CONSTANT.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A)
ST*SYMBOL.ADDRESSES)))) NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE)
ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) 
ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY)
ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE
. 1) (FALSE . 2) (A . 3) (P . 4) (C . 5) (S . 6) (B . 7) (M . 8) (X_9 . 9) (X_10 . 10) (X_11 . 11) (X_12 . 12)
(D . 13) (X_14 . 14) (X_15 . 15) (X_16 . 16) (X_17 . 17))))))))STOP
 

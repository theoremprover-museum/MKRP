(COND ((FMT-LOAD " 6-SEP-84 19:52:58" NIL (((* IF S IS A NONEMPTY SUBSET OF A GROUP SUCH THAT IF X,Y BELONG TO
S,) COMMENT COMMENT) ((* THEN XY**-1 BELONGS TO S, THEN S CONTAINS X**-1 WHENEVER IT CONTAINS X.) COMMENT COMMENT)
((ALL X P (I (X) X E)) (ALL 3 (+ 6 ((4 3) 3 5) NIL)) QUANTIFICATION) ((ALL X P (X I (X) E)) (ALL 7 (+ 6 (7 (4 7)
5) NIL)) QUANTIFICATION) ((ALL X P (E X X)) (ALL 8 (+ 6 (5 8 8) NIL)) QUANTIFICATION) ((ALL X P (X E X)) (ALL 9
(+ 6 (9 5 9) NIL)) QUANTIFICATION) ((S (A)) (+ 11 (10) NIL) QUANTIFICATION) ((ALL X,Y,Z S (X) AND S (Y) AND P (X
I (Y) Z) IMPL S (Z)) (ALL 14 (ALL 13 (ALL 12 (IMPL (AND (+ 11 (12) NIL) (AND (+ 11 (13) NIL) (+ 6 (12 (4 13) 14)
NIL))) (+ 11 (14) NIL))))) QUANTIFICATION) ((ALL U,V,W,X,Y,Z P (X Y U) AND P (Y Z V) AND P (U Z W) IMPL P (X V
W)) (ALL 20 (ALL 19 (ALL 18 (ALL 17 (ALL 16 (ALL 15 (IMPL (AND (+ 6 (18 19 15) NIL) (AND (+ 6 (19 20 16) NIL) (+
6 (15 20 17) NIL))) (+ 6 (18 16 17) NIL)))))))) QUANTIFICATION) ((ALL U,V,W,X,Y,Z P (X Y U) AND P (Y Z V) AND P
(X V W) IMPL P (U Z W)) (ALL 26 (ALL 25 (ALL 24 (ALL 23 (ALL 22 (ALL 21 (IMPL (AND (+ 6 (24 25 21) NIL) (AND (+
6 (25 26 22) NIL) (+ 6 (24 22 23) NIL))) (+ 6 (21 26 23) NIL)))))))) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN
(PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (10066 10071 10076 10081 10086 10091 10096 10101 10106 10111 10116 10121
10126 10131 10136 10151 10156 10161 10166 10171 10186 10191 10205 10210 10225 10240))) (DATALIST (QUOTE (15 TRUE
NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL)))
NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 I NIL ANY (ANY) NIL NIL
NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 5 E ANY (DT*ST-KIND NIL) CONSTANT 15 P NIL NIL (ANY ANY ANY) NIL NIL
((- 6 (POSITIVE))) ((+ 6 (NEGATIVE))) ((+ 6 (NIL))) ((- 6 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 A ANY (DT*ST-KIND NIL) CONSTANT 15 S NIL NIL (ANY) NIL NIL ((- 11 (POSITIVE)))
((+ 11 (NEGATIVE))) ((+ 11 (NIL))) ((- 11 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 10240)) COUNTER1)
(MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE 27 1) (IDIFFERENCE 10240 10061)) MEM*SIZE) (MEM=SATURATION.ENTERED))
((EQ MEM*SIZE 10240) (SETQ COUNTER1 27) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1
(SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY
(SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 27) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA
MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP
RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA
(DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR (IPLUS 10061 INCREMENT))
(RPAQ MEM*NEXT.VADR 27) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR
NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 1) (RPAQQ DT*SORT.PROPERTIES
(DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS 
DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ
DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (10 5)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0)
(RPAQQ DT*FUNCTION.ALL (4)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES
NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (11 6 2
1)) (RPAQQ DT*PREDICATE.ALL (11 6 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS
(PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES 
+SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2)
(RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)))
(PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED (2 1))))) (PROGN (SETPROPLIST
(QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) 
DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ ST*STACK1 (NIL ((X_26
PROGN (DT-VARIABLE.DELETE 26) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_26) ST*SYMBOL.ADDRESSES))) (X_25 PROGN
(DT-VARIABLE.DELETE 25) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_25) ST*SYMBOL.ADDRESSES))) (X_24 PROGN (
DT-VARIABLE.DELETE 24) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_24) ST*SYMBOL.ADDRESSES))) (X_23 PROGN (
DT-VARIABLE.DELETE 23) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_23) ST*SYMBOL.ADDRESSES))) (X_22 PROGN (
DT-VARIABLE.DELETE 22) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_22) ST*SYMBOL.ADDRESSES))) (X_21 PROGN (
DT-VARIABLE.DELETE 21) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) ST*SYMBOL.ADDRESSES)))) ((X_20 PROGN (
DT-VARIABLE.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_20) ST*SYMBOL.ADDRESSES))) (X_19 PROGN (
DT-VARIABLE.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_19) ST*SYMBOL.ADDRESSES))) (X_18 PROGN (
DT-VARIABLE.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18) ST*SYMBOL.ADDRESSES))) (X_17 PROGN (
DT-VARIABLE.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17) ST*SYMBOL.ADDRESSES))) (X_16 PROGN (
DT-VARIABLE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES))) (X_15 PROGN (
DT-VARIABLE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_15) ST*SYMBOL.ADDRESSES)))) ((X_14 PROGN (
DT-VARIABLE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES))) (X_13 PROGN (
DT-VARIABLE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_13) ST*SYMBOL.ADDRESSES))) (X_12 PROGN (
DT-VARIABLE.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_12) ST*SYMBOL.ADDRESSES)))) ((S PROGN (
DT-PREDICATE.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE S) ST*SYMBOL.ADDRESSES))) (A PROGN (
DT-CONSTANT.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) ST*SYMBOL.ADDRESSES)))) ((X_9 PROGN (
DT-VARIABLE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_9) ST*SYMBOL.ADDRESSES)))) ((X_8 PROGN (
DT-VARIABLE.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_8) ST*SYMBOL.ADDRESSES)))) ((X_7 PROGN (
DT-VARIABLE.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_7) ST*SYMBOL.ADDRESSES)))) ((P PROGN (
DT-PREDICATE.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P) ST*SYMBOL.ADDRESSES))) (E PROGN (DT-CONSTANT.DELETE
5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE E) ST*SYMBOL.ADDRESSES))) (I PROGN (DT-FUNCTION.DELETE 4) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE I) ST*SYMBOL.ADDRESSES))) (X_3 PROGN (DT-VARIABLE.DELETE 3) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_3) ST*SYMBOL.ADDRESSES)))) NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2)
(RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ
ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_3 . 3) (I . 4) (E . 5) (P . 6) (X_7 . 7) (X_8 . 8)
(X_9 . 9) (A . 10) (S . 11) (X_12 . 12) (X_13 . 13) (X_14 . 14) (X_15 . 15) (X_16 . 16) (X_17 . 17) (X_18 . 18)
(X_19 . 19) (X_20 . 20) (X_21 . 21) (X_22 . 22) (X_23 . 23) (X_24 . 24) (X_25 . 25) (X_26 . 26))))))))STOP
 

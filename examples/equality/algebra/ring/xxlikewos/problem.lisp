;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION '((* AXIOMS *) (* GROUP *) (ALL X,Y,Z PLUS (PLUS (X Y) Z) = PLUS (X PLUS (Y Z)))
  (ALL X PLUS (0 X) = X) (ALL X PLUS (X 0) = X) (ALL X PLUS (MINUS (X) X) = 0)
  (ALL X PLUS (X MINUS (X)) = 0) (ALL X MINUS (MINUS (X)) = X) (MINUS (0) = 0)
  (ALL X,Y PLUS (MINUS (X) MINUS (Y)) = MINUS (PLUS (Y X)))
  (ALL X,Y PLUS (MINUS (X) PLUS (X Y)) = Y) (ALL X,Y PLUS (X PLUS (MINUS (X) Y)) = Y)
  (* MULT *) (ALL X,Y,Z MULT (MULT (X Y) Z) = MULT (X MULT (Y Z))) (* MULT GROUP CONNECTION *)
  (ALL X,Y,Z MULT (PLUS (X Y) Z) = PLUS (MULT (X Z) MULT (Y Z)))
  (ALL X,Y,Z MULT (Z PLUS (X Y)) = PLUS (MULT (Z X) MULT (Z Y))) (ALL X MULT (0 X) = 0)
  (ALL X MULT (X 0) = 0) (ALL X,Y MULT (MINUS (Y) X) = MINUS (MULT (Y X)))
  (ALL X,Y MULT (X MINUS (Y)) = MINUS (MULT (X Y))) (* ADDITIONAL AXIOM AND THEOREM *)
  (ALL X MULT (X X) = X)) '(COMMENT COMMENT (ALL 4 (ALL 3 (ALL 2 (+ 6 ((5 (5 2 3) 4) (5 2 (5 3 4))) NIL))))
  (ALL 7 (+ 6 ((5 8 7) 7) NIL)) (ALL 9 (+ 6 ((5 9 8) 9) NIL))
  (ALL 10 (+ 6 ((5 (11 10) 10) 8) NIL)) (ALL 12 (+ 6 ((5 12 (11 12)) 8) NIL))
  (ALL 13 (+ 6 ((11 (11 13)) 13) NIL)) (+ 6 ((11 8) 8) NIL)
  (ALL 15 (ALL 14 (+ 6 ((5 (11 14) (11 15)) (11 (5 15 14))) NIL)))
  (ALL 17 (ALL 16 (+ 6 ((5 (11 16) (5 16 17)) 17) NIL)))
  (ALL 19 (ALL 18 (+ 6 ((5 18 (5 (11 18) 19)) 19) NIL))) COMMENT
  (ALL 22 (ALL 21 (ALL 20 (+ 6 ((23 (23 20 21) 22) (23 20 (23 21 22))) NIL)))) COMMENT
  (ALL 26 (ALL 25 (ALL 24 (+ 6 ((23 (5 24 25) 26) (5 (23 24 26) (23 25 26))) NIL))))
  (ALL 29 (ALL 28 (ALL 27 (+ 6 ((23 29 (5 27 28)) (5 (23 29 27) (23 29 28))) NIL))))
  (ALL 30 (+ 6 ((23 8 30) 8) NIL)) (ALL 31 (+ 6 ((23 31 8) 8) NIL))
  (ALL 33 (ALL 32 (+ 6 ((23 (11 33) 32) (11 (23 33 32))) NIL)))
  (ALL 35 (ALL 34 (+ 6 ((23 34 (11 35)) (11 (23 34 35))) NIL))) COMMENT
  (ALL 36 (+ 6 ((23 36 36) 36) NIL))) '((ALL X,Y MULT (X Y) = MULT (Y X))) '((ALL 38 (ALL 37 (+ 6 ((23 37 38) (23 38 37)) NIL)))) '("                                                                                                                     "
  "*********************************************************************************************************************"
  " EDIT:     Axioms and Theorems edited: 15-AUG,1989 14:55 "
  "*********************************************************************************************************************"
  ) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(49752 49757 49762 49767 49772 49777 49782 49787 49792 49797 49802 49807 49812 49817
          49822 49836 49841 49846 49851 49856 49861 49866 49871 49876 49881 49886 49891 49905
          49910 49915 49920 49925 49940 49954 49959 49964 49969 49984 49999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 "PLUS" NIL ANY (ANY ANY) NIL NIL NIL
          NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 6 (POSITIVE . SYMMETRIC)))
          ((+ 6 (NEGATIVE . SYMMETRIC))) ((+ 6 (NIL . SYMMETRIC))) ((- 6 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY "0" (DT*ST-KIND NIL) CONSTANT 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 14 "MINUS" NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL)
          FUNCTION 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 "MULT" NIL ANY (ANY ANY) NIL NIL NIL
          NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 50000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 50000)
             (SETQ COUNTER1 39)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 50000)
                 (MEM-INITIALIZE 50000))
               (SETQ COUNTER1 39)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 50000) (+ 49747 INCREMENT) 49747))
      (SETQ MEM*NEXT.VADR 39
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL '(ANY))
       (SETQ DT*SORT.NR '2)
       (SETQ DT*SORT.PROPERTIES
              '(DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE
                DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS
                DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))
       (SETQ DT*SORT.COMMON.COMPUTE.FLAG 'NIL)
       (SETQ DT*VARIABLE.COUNTER '0)
       (SETQ DT*CONSTANT.COUNTER '0)
       (SETQ DT*CONSTANT.ALL '(8))
       (SETQ DT*ABBREVIATIONS 'NIL)
       (SETQ DT*FUNCTION.COUNTER '0)
       (SETQ DT*FUNCTION.ALL '(23 11 5))
       (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES '(ASSOCIATIVE))
       (SETQ DT*FUNCTION.ACTUAL.THEORIES 'NIL)
       (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES 'NIL)
       (SETQ DT*FUNCTION.COMPONENTS
              '(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST
                SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
       (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES '(SYMMETRIC DEFINED REFLEXIVE))
       (SETQ DT*PREDICATE.COUNTER '0)
       (SETQ DT*EQUALITY.SYMBOLS '("=" ":=" "=:" ":=:"))
       (SETQ DT*EQUALITY.PREDICATES '(6))
       (SETQ DT*NONEQUALITY.PREDICATES '(1 0))
       (SETQ DT*PREDICATE.ALL '(6 1 0))
       (SETQ DT*PREDICATE.WITH.ATTRIBUTES 'NIL)
       (SETQ DT*PREDICATE.COMPONENTS
              '(PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES
                REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES
                -TOTHERSIDES))
       (SETQ DT*TRUE.PREDICATE '0)
       (SETQ DT*FALSE.PREDICATE '1)
       (SETQ DT*UNI.CREATES.VARIABLES 'NIL)
       (SETQ DT*SIGN.MINUS.SYMBOLS '(- --))
       (SETQ DT*SIGN.PLUS.SYMBOLS '(+ ++))
       (SETQ DT*SYMBOL.KINDS '(CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET 'ANY 'DT*SORT.NUMBER) '1)
              (SETF (GET 'ANY 'DT*DIRECT.SUBSORTS) 'NIL)
              (SETF (GET 'ANY 'DT*TRANSITIVE.CLOSURE) '(ANY))
              (SETF (GET 'ANY 'DT*MAX.SUBSORTS) '((ANY ANY)))
              (SETF (GET 'ANY 'DT*MINIMAL.SUBSORTS) '(ANY))
              (SETF (GET 'ANY 'DT*DIRECT.SUPERSORTS) 'NIL)
              (SETF (GET 'ANY 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY)))) ))
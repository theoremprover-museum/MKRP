;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((* AXIOMS *) (* CONSTRUCTORS PRED AND SUCC *) (ALL X S (P (X)) = X) (ALL X P (S (X)) = X) (* DEF + *) (ALL X + (0 X) = X) (ALL X,Y + (S (X) Y) = S (+ (X Y))) (ALL X,Y + (P (X) Y) = P (+ (X Y))) (* PROPS + *) (ALL X + (X 0) = X) (ALL X,Y + (Y S (X)) = S (+ (Y X))) (ALL X,Y + (Y P (X)) = P (+ (Y X))) (ALL X,Y,Z + (+ (X Y) Z) = + (X + (Y Z))) (* DEF - *) (- (0) = 0) (ALL X - (S (X)) = P (- (X))) (ALL X - (P (X)) = S (- (X))) (* PROPS - *) (ALL X - (- (X)) = X) (ALL X + (- (X) X) = 0) (ALL X + (X - (X)) = 0) (ALL X,Y + (X + (- (X) Y)) = Y) (ALL X,Y + (- (X) + (X Y)) = Y) (ALL X,Y - (+ (X Y)) = + (- (Y) - (X))) (* DEF * *) (ALL X * (0 X) = 0) (ALL X,Y * (S (X) Y) = + (Y * (X Y))) (ALL X,Y * (P (X) Y) = + (- (Y) * (X Y))) (* PROPS * *) (ALL X * (X 0) = 0) (ALL X,Y * (Y S (X)) = + (* (Y X) Y)) (ALL X,Y * (Y P (X)) = + (* (Y X) - (Y))))) (QUOTE (COMMENT COMMENT (ALL 3 (+ 2 ((5 (4 3)) 3) NIL)) (ALL 6 (+ 2 ((4 (5 6)) 6) NIL)) COMMENT (ALL 7 (+ 2 ((9 8 7) 7) NIL)) (ALL 11 (ALL 10 (+ 2 ((9 (5 10) 11) (5 (9 10 11))) NIL))) (ALL 13 (ALL 12 (+ 2 ((9 (4 12) 13) (4 (9 12 13))) NIL))) COMMENT (ALL 14 (+ 2 ((9 14 8) 14) NIL)) (ALL 16 (ALL 15 (+ 2 ((9 16 (5 15)) (5 (9 16 15))) NIL))) (ALL 18 (ALL 17 (+ 2 ((9 18 (4 17)) (4 (9 18 17))) NIL))) (ALL 21 (ALL 20 (ALL 19 (+ 2 ((9 (9 19 20) 21) (9 19 (9 20 21))) NIL)))) COMMENT (+ 2 ((22 8) 8) NIL) (ALL 23 (+ 2 ((22 (5 23)) (4 (22 23))) NIL)) (ALL 24 (+ 2 ((22 (4 24)) (5 (22 24))) NIL)) COMMENT (ALL 25 (+ 2 ((22 (22 25)) 25) NIL)) (ALL 26 (+ 2 ((9 (22 26) 26) 8) NIL)) (ALL 27 (+ 2 ((9 27 (22 27)) 8) NIL)) (ALL 29 (ALL 28 (+ 2 ((9 28 (9 (22 28) 29)) 29) NIL))) (ALL 31 (ALL 30 (+ 2 ((9 (22 30) (9 30 31)) 31) NIL))) (ALL 33 (ALL 32 (+ 2 ((22 (9 32 33)) (9 (22 33) (22 32))) NIL))) COMMENT (ALL 34 (+ 2 ((35 8 34) 8) NIL)) (ALL 37 (ALL 36 (+ 2 ((35 (5 36) 37) (9 37 (35 36 37))) NIL))) (ALL 39 (ALL 38 (+ 2 ((35 (4 38) 39) (9 (22 39) (35 38 39))) NIL))) COMMENT (ALL 40 (+ 2 ((35 40 8) 8) NIL)) (ALL 42 (ALL 41 (+ 2 ((35 42 (5 41)) (9 (35 42 41) 42)) NIL))) (ALL 44 (ALL 43 (+ 2 ((35 44 (4 43)) (9 (35 44 43) (22 44))) NIL))))) (QUOTE ((* THEOREM *) (EX X + (X + (X P (0))) = S (0)))) (QUOTE (COMMENT (EX 45 (+ 2 ((9 45 (9 45 (4 8))) (5 8)) NIL)))) (QUOTE ("Edit:     Axioms and Theorems edited: 16-MAY,1990 20:18 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(39699 39704 39709 39714 39719 39724 39729 39734 39739 39744 39758 39763 39768 39773
          39778 39783 39788 39793 39798 39803 39808 39813 39818 39832 39837 39842 39847 39852
          39857 39862 39867 39872 39877 39882 39887 39892 39906 39911 39916 39921 39935 39949
          39954 39969 39984 39999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC)))
          ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 14 "P" NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 14
          "S" NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY "0" (DT*ST-KIND NIL) CONSTANT 14 "+" NIL ANY (ANY ANY) NIL NIL NIL
          NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 "-" NIL ANY (ANY) NIL NIL NIL NIL NIL 1
          ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5
          ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 "*" NIL ANY (ANY ANY) NIL NIL NIL NIL
          NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE))
       (INCREMENT (- MEM*SIZE 40000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 40000)
             (SETQ COUNTER1 46)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 40000)
                 (MEM-INITIALIZE 40000))
               (SETQ COUNTER1 46)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 40000) (+ 39694 INCREMENT) 39694))
      (SETQ MEM*NEXT.VADR 46
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ANY))) (SETQ DT*SORT.NR (QUOTE 2)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (8))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE (35 22 9 5 4))) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
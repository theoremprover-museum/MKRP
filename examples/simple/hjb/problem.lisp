;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((ALL X,Y,Z (LEQ (X Y) AND LEQ (Y Z)) IMPL LEQ (X Z)) (ALL X LEQ (X X)) (ALL X,Y (LEQ (X Y) AND LEQ (Y X)) EQV (NOT NEQ (X Y))) (ALL X,Y NEQ (X Y) IMPL NEQ (Y X)) (ALL X NOT NEQ (X X)) (ALL X,Y EQ (X Y) EQV (NOT NEQ (X Y))) (ALL X,Y LESS (X Y) EQV (LEQ (X Y) AND NEQ (X Y))) (EQV-EQ EQV ((ALL X,Y,Z EQ (X Y) AND EQ (Y Z) IMPL EQ (X Z)) AND (ALL X,Y EQ (X Y) IMPL EQ (Y X)) AND (ALL X EQ (X X)))) (PROP-LESS EQV ((ALL X,Y,Z LESS (X Y) AND LESS (Y Z) IMPL LESS (X Z)) AND (ALL X NOT LESS (X X)))))) (QUOTE ((ALL 5 (ALL 4 (ALL 3 (IMPL (AND (+ 6 (3 4) NIL) (+ 6 (4 5) NIL)) (+ 6 (3 5) NIL))))) (ALL 7 (+ 6 (7 7) NIL)) (ALL 9 (ALL 8 (EQV (AND (+ 6 (8 9) (KIND (EQV T 30))) (+ 6 (9 8) (KIND (EQV T 30)))) (NOT (+ 10 (8 9) (KIND (EQV NIL 30))))))) (ALL 12 (ALL 11 (IMPL (+ 10 (11 12) NIL) (+ 10 (12 11) NIL)))) (ALL 13 (NOT (+ 10 (13 13) NIL))) (ALL 15 (ALL 14 (EQV (+ 16 (14 15) (KIND (EQV T 60))) (NOT (+ 10 (14 15) (KIND (EQV NIL 60))))))) (ALL 18 (ALL 17 (EQV (+ 19 (17 18) (KIND (EQV T 70))) (AND (+ 6 (17 18) (KIND (EQV NIL 70))) (+ 10 (17 18) (KIND (EQV NIL 70))))))) (EQV (+ 20 NIL (KIND (EQV T 80))) (AND (ALL 23 (ALL 22 (ALL 21 (IMPL (AND (+ 16 (21 22) (KIND (EQV NIL 80))) (+ 16 (22 23) (KIND (EQV NIL 80)))) (+ 16 (21 23) (KIND (EQV NIL 80))))))) (AND (ALL 25 (ALL 24 (IMPL (+ 16 (24 25) (KIND (EQV NIL 80))) (+ 16 (25 24) (KIND (EQV NIL 80)))))) (ALL 26 (+ 16 (26 26) (KIND (EQV NIL 80))))))) (EQV (+ 27 NIL (KIND (EQV T 90))) (AND (ALL 30 (ALL 29 (ALL 28 (IMPL (AND (+ 19 (28 29) (KIND (EQV NIL 90))) (+ 19 (29 30) (KIND (EQV NIL 90)))) (+ 19 (28 30) (KIND (EQV NIL 90))))))) (ALL 31 (NOT (+ 19 (31 31) (KIND (EQV NIL 90))))))))) (QUOTE ((EQV-EQ AND PROP-LESS))) (QUOTE ((AND (+ 20 NIL NIL) (+ 27 NIL NIL)))) (QUOTE ("                                                                       " "***********************************************************************" "                                                                       " " FORMULA:  Date: 20-MAY,1992 23:06" "           Axioms und Theorems for this proof have been read from" "              Axiom-File: NIL" "            Theorem-File: NIL" "                                                                       " "***********************************************************************")) (PROGN(PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (9754 9759 9764 9769 9784 9789 9794 9799 9804 9809 9814 9829 9844 9849 9854 9869 9874 9879 9884 9889 9894 9909 9914 9919 9924 9939 9944 9949 9954 9969 9984 9999))) (DATALIST (QUOTE (15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE))) ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC))) ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "LEQ" NIL NIL (ANY ANY) NIL NIL ((- 6 (POSITIVE))) ((+ 6 (NEGATIVE))) ((+ 6 (NIL))) ((- 6 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "NEQ" NIL NIL (ANY ANY) NIL NIL ((- 10 (POSITIVE))) ((+ 10 (NEGATIVE))) ((+ 10 (NIL))) ((- 10 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "EQ" NIL NIL (ANY ANY) NIL NIL ((- 16 (POSITIVE))) ((+ 16 (NEGATIVE))) ((+ 16 (NIL))) ((- 16 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "LESS" NIL NIL (ANY ANY) NIL NIL ((- 19 (POSITIVE))) ((+ 19 (NEGATIVE))) ((+ 19 (NIL))) ((- 19 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "EQV-EQ" NIL NIL NIL NIL NIL ((- 20 (POSITIVE))) ((+ 20 (NEGATIVE))) ((+ 20 (NIL))) ((- 20 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "PROP-LESS" NIL NIL NIL NIL NIL ((- 27 (POSITIVE))) ((+ 27 (NEGATIVE))) ((+ 27 (NIL))) ((- 27 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (- MEM*SIZE 10000)) COUNTER1) (MEM-RESET) (COND ((> MEM*SIZE 10000) (SETQ COUNTER1 32) (MAPC (FUNCTION (LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) (COND ((EQL RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((EQL (QUOTE END) RADDR) RADDR) ((OR (EQL RADDR 0) (MINUSP RADDR)) RADDR) (T (+ RADDR INCREMENT)))))) ADDRLIST) (SETQ COUNTER1 MEM*SIZE) (MAPC (FUNCTION (LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA))) DATALIST)) (T (UNLESS (= MEM*SIZE 10000) (MEM-INITIALIZE 10000)) (SETQ COUNTER1 32) (MAPC (FUNCTION (LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))) ADDRLIST) (SETQ COUNTER1 MEM*SIZE) (MAPC (FUNCTION (LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA))) DATALIST))) (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9749 INCREMENT) 9749)) (SETQ MEM*NEXT.VADR 32 MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1) MEM*FIRST.REUSABLE.VADR NIL MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ANY))) (SETQ DT*SORT.NR (QUOTE 2)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*ELEMENT.PREDICATE (QUOTE NIL)) (SETQ DT*OMEGA.CONSTANT (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE NIL)) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE NIL)) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (27 20 19 16 10 6 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (27 20 19 16 10 6 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-

(CONSTRUCTION  "Unix" "20-MAY,1992 23:11" 
              ("                                                                       "
               "***********************************************************************"
               "                                                                       "
               " FORMULA:  Date: 20-MAY,1992 23:06"
               "           Axioms und Theorems for this proof have been read from"
               "              Axiom-File: NIL"
               "            Theorem-File: NIL"
               "                                                                       "
               "***********************************************************************"
               ))

(AXIOMS.INFIX    ((ALL |X,Y,Z| (LEQ (X Y) AND LEQ (Y Z)) IMPL LEQ (X Z))
                  (ALL X LEQ (X X))
                  (ALL |X,Y| (LEQ (X Y) AND LEQ (Y X)) EQV (NOT NEQ (X Y)))
                  (ALL |X,Y| NEQ (X Y) IMPL NEQ (Y X))
                  (ALL X NOT NEQ (X X))
                  (ALL |X,Y| EQ (X Y) EQV (NOT NEQ (X Y)))
                  (ALL |X,Y| LESS (X Y) EQV (LEQ (X Y) AND NEQ (X Y)))
                  (EQV-EQ EQV ((ALL |X,Y,Z| EQ (X Y) AND EQ (Y Z) IMPL EQ (X Z)) AND (ALL |X,Y| EQ (X Y) IMPL EQ (Y X)) AND (ALL X EQ (X X))))
                  (PROP-LESS EQV ((ALL |X,Y,Z| LESS (X Y) AND LESS (Y Z) IMPL LESS (X Z)) AND (ALL X NOT LESS (X X))))))

(THEOREMS.INFIX ((EQV-EQ AND PROP-LESS)))

(AXIOMS.PREFIX   ((ALL 5 (ALL 4 (ALL 3 (IMPL (AND (+ 6 (3 4) NIL) (+ 6 (4 5) NIL)) (+ 6 (3 5) NIL)))))
                  (ALL 7 (+ 6 (7 7) NIL))
                  (ALL 9 (ALL 8 (EQV (AND (+ 6 (8 9) (KIND (EQV T 30))) (+ 6 (9 8) (KIND (EQV T 30)))) (NOT (+ 10 (8 9) (KIND (EQV NIL 30)))))))
                  (ALL 12 (ALL 11 (IMPL (+ 10 (11 12) NIL) (+ 10 (12 11) NIL))))
                  (ALL 13 (NOT (+ 10 (13 13) NIL)))
                  (ALL 15 (ALL 14 (EQV (+ 16 (14 15) (KIND (EQV T 60))) (NOT (+ 10 (14 15) (KIND (EQV NIL 60)))))))
                  (ALL 18 (ALL 17 (EQV (+ 19 (17 18) (KIND (EQV T 70))) (AND (+ 6 (17 18) (KIND (EQV NIL 70))) (+ 10 (17 18) (KIND (EQV NIL 70)))))))
                  (EQV (+ 20 NIL (KIND (EQV T 80))) (AND (ALL 23 (ALL 22 (ALL 21 (IMPL (AND (+ 16 (21 22) (KIND (EQV NIL 80))) (+ 16 (22 23) (KIND (EQV NIL 80)))) (+ 16 (21 23) (KIND (EQV NIL 80))))))) (AND (ALL 25 (ALL 24 (IMPL (+ 16 (24 25) (KIND (EQV NIL 80))) (+ 16 (25 24) (KIND (EQV NIL 80)))))) (ALL 26 (+ 16 (26 26) (KIND (EQV NIL 80)))))))
                  (EQV (+ 27 NIL (KIND (EQV T 90))) (AND (ALL 30 (ALL 29 (ALL 28 (IMPL (AND (+ 19 (28 29) (KIND (EQV NIL 90))) (+ 19 (29 30) (KIND (EQV NIL 90)))) (+ 19 (28 30) (KIND (EQV NIL 90))))))) (ALL 31 (NOT (+ 19 (31 31) (KIND (EQV NIL 90)))))))))

(THEOREMS.PREFIX ((AND (+ 20 NIL NIL) (+ 27 NIL NIL))))

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 5)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . T)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS)
         )

(LINK.COLOURS (R RIW RD S SI SIW SID T TI TIW P PIW PD RIWD))

(AXIOMS (START.TIME 119130000)
        (PARTIAL   (CLAUSE 48 R.= AXIOM ((42 . ANY)) ((+ 2 (42 42)) ))(CLAUSE 50 A1 AXIOM ((7 . ANY)) ((+ 6 (7 7)) )))
        (PARTIAL   (CLAUSE 52 A2 AXIOM ((13 . ANY)) ((- 10 (13 13)) )))
        (PARTIAL   (CLAUSE 55 A3 AXIOM ((9 . ANY)(8 . ANY))
                         ((+ 6 (8 9)) (+ 10 (8 9)) )))
        (PARTIAL   (CLAUSE 60 A4 AXIOM ((46 . ANY)(45 . ANY))
                         ((+ 6 (45 46)) (+ 10 (46 45)) )))
        (PARTIAL   (CLAUSE 67 A5 AXIOM ((12 . ANY)(11 . ANY))
                         ((- 10 (11 12)) (+ 10 (12 11)) )))
        (PARTIAL   (CLAUSE 79 A6 AXIOM ((5 . ANY)(4 . ANY)(3 . ANY))
                         ((- 6 (3 4)) (- 6 (4 5)) (+ 6 (3 5)) )))
        (PARTIAL   (CLAUSE 102 A7 AXIOM ((44 . ANY)(43 . ANY))
                         ((- 6 (43 44)) (- 6 (44 43)) (- 10 (43 44)) )))
        (END.TIME 122210000)
        (FINAL 48 50 52 55 60 67 79 102)
        (SYMBOLS 
                 (LET (NEW.ADDRESS)
          (LIST (CONS   27 (DT-PREDICATE.CREATE "PROP-LESS" 'NIL))
                         (CONS   20 (DT-PREDICATE.CREATE "EQV-EQ" 'NIL))
                         (CONS   19 (DT-PREDICATE.CREATE "LESS" '(ANY ANY)))
                         (CONS   16 (DT-PREDICATE.CREATE "EQ" '(ANY ANY)))
                         (CONS   10 (DT-PREDICATE.CREATE "NEQ" '(ANY ANY)))
                         (CONS    6 (DT-PREDICATE.CREATE "LEQ" '(ANY ANY)))
                         (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
                         (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                         (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED))))))
        (RESULT))

(THEOREMS (SPLITPART.IDENTIFIER 1)
          (START.TIME 123490000)
          (PARTIAL   (CLAUSE 38 T8 THEOREM () ((- 10 (119 118)) )))
          (PARTIAL   (CLAUSE 123 T9 THEOREM () ((- 10 (118 120)) )))
          (PARTIAL   (CLAUSE 129 T10 THEOREM () ((+ 10 (119 120)) )))
          (INITIAL   (CLAUSE 48 R.= AXIOM ((42 . ANY)) ((+ 2 (42 42)) ))
(CLAUSE 50 A1 AXIOM ((7 . ANY)) ((+ 6 (7 7)) ))
(CLAUSE 52 A2 AXIOM ((13 . ANY)) ((- 10 (13 13)) ))
(CLAUSE 55 A3 AXIOM ((9 . ANY)(8 . ANY))
                           ((+ 6 (8 9)) (+ 10 (8 9)) ))
(CLAUSE 60 A4 AXIOM ((46 . ANY)(45 . ANY))
                           ((+ 6 (45 46)) (+ 10 (46 45)) ))
(CLAUSE 67 A5 AXIOM ((12 . ANY)(11 . ANY))
                           ((- 10 (11 12)) (+ 10 (12 11)) ))
(CLAUSE 79 A6 AXIOM ((5 . ANY)(4 . ANY)(3 . ANY))
                           ((- 6 (3 4)) (- 6 (4 5)) (+ 6 (3 5)) ))
(CLAUSE 102 A7 AXIOM ((44 . ANY)(43 . ANY))
                           ((- 6 (43 44)) (- 6 (44 43)) (- 10 (43 44)) ))
(CLAUSE 38 T8 THEOREM () ((- 10 (119 118)) ))
(CLAUSE 123 T9 THEOREM () ((- 10 (118 120)) ))
(CLAUSE 129 T10 THEOREM () ((+ 10 (119 120)) )) )
          (END.TIME 128840000)
          (FINAL 48 50 52 55 60 67 79 102 38 123 129)
          (SYMBOLS 
                   (LET (NEW.ADDRESS)
          (LIST (CONS   27 (DT-PREDICATE.CREATE "PROP-LESS" 'NIL))
                           (CONS   20 (DT-PREDICATE.CREATE "EQV-EQ" 'NIL))
                           (CONS   19 (DT-PREDICATE.CREATE "LESS" '(ANY ANY)))
                           (CONS   16 (DT-PREDICATE.CREATE "EQ" '(ANY ANY)))
                           (CONS   10 (DT-PREDICATE.CREATE "NEQ" '(ANY ANY)))
                           (CONS    6 (DT-PREDICATE.CREATE "LEQ" '(ANY ANY)))
                           (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
                           (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (CONS   37 (DT-CONSTANT.CREATE "c_10" 'ANY))
                           (CONS   35 (DT-CONSTANT.CREATE "c_9" 'ANY))
                           (CONS   36 (DT-CONSTANT.CREATE "c_8" 'ANY))
                           (CONS   32 (DT-CONSTANT.CREATE "c_7" 'ANY))
                           (CONS   34 (DT-CONSTANT.CREATE "c_6" 'ANY))
                           (CONS   33 (DT-CONSTANT.CREATE "c_5" 'ANY))
                           (CONS  117 (DT-CONSTANT.CREATE "c_4" 'ANY))
                           (CONS  118 (DT-CONSTANT.CREATE "c_3" 'ANY))
                           (CONS  119 (DT-CONSTANT.CREATE "c_2" 'ANY))
                           (CONS  120 (DT-CONSTANT.CREATE "c_1" 'ANY)))))
          (RESULT))

(THEOREMS (SPLITPART.IDENTIFIER 2)
          (START.TIME 128960000)
          (PARTIAL   (CLAUSE 38 T8 THEOREM () ((- 10 (33 117)) )))
          (PARTIAL   (CLAUSE 123 T9 THEOREM () ((+ 10 (117 33)) )))
          (INITIAL   (CLAUSE 48 R.= AXIOM ((42 . ANY)) ((+ 2 (42 42)) ))
(CLAUSE 50 A1 AXIOM ((7 . ANY)) ((+ 6 (7 7)) ))
(CLAUSE 52 A2 AXIOM ((13 . ANY)) ((- 10 (13 13)) ))
(CLAUSE 55 A3 AXIOM ((9 . ANY)(8 . ANY))
                           ((+ 6 (8 9)) (+ 10 (8 9)) ))
(CLAUSE 60 A4 AXIOM ((46 . ANY)(45 . ANY))
                           ((+ 6 (45 46)) (+ 10 (46 45)) ))
(CLAUSE 67 A5 AXIOM ((12 . ANY)(11 . ANY))
                           ((- 10 (11 12)) (+ 10 (12 11)) ))
(CLAUSE 79 A6 AXIOM ((5 . ANY)(4 . ANY)(3 . ANY))
                           ((- 6 (3 4)) (- 6 (4 5)) (+ 6 (3 5)) ))
(CLAUSE 102 A7 AXIOM ((44 . ANY)(43 . ANY))
                           ((- 6 (43 44)) (- 6 (44 43)) (- 10 (43 44)) ))
(CLAUSE 38 T8 THEOREM () ((- 10 (33 117)) ))
(CLAUSE 123 T9 THEOREM () ((+ 10 (117 33)) )) )
          (END.TIME 136910000)
          (FINAL 48 50 52 55 60 67 79 102 38 123)
          (SYMBOLS 
                   (LET (NEW.ADDRESS)
          (LIST (CONS   27 (DT-PREDICATE.CREATE "PROP-LESS" 'NIL))
                           (CONS   20 (DT-PREDICATE.CREATE "EQV-EQ" 'NIL))
                           (CONS   19 (DT-PREDICATE.CREATE "LESS" '(ANY ANY)))
                           (CONS   16 (DT-PREDICATE.CREATE "EQ" '(ANY ANY)))
                           (CONS   10 (DT-PREDICATE.CREATE "NEQ" '(ANY ANY)))
                           (CONS    6 (DT-PREDICATE.CREATE "LEQ" '(ANY ANY)))
                           (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
                           (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (CONS   37 (DT-CONSTANT.CREATE "c_10" 'ANY))
                           (CONS   35 (DT-CONSTANT.CREATE "c_9" 'ANY))
                           (CONS   36 (DT-CONSTANT.CREATE "c_8" 'ANY))
                           (CONS   32 (DT-CONSTANT.CREATE "c_7" 'ANY))
                           (CONS   34 (DT-CONSTANT.CREATE "c_6" 'ANY))
                           (CONS   33 (DT-CONSTANT.CREATE "c_5" 'ANY))
                           (CONS  117 (DT-CONSTANT.CREATE "c_4" 'ANY))
                           (CONS  118 (DT-CONSTANT.CREATE "c_3" 'ANY))
                           (CONS  119 (DT-CONSTANT.CREATE "c_2" 'ANY))
                           (CONS  120 (DT-CONSTANT.CREATE "c_1" 'ANY)))))
          (RESULT))

(THEOREMS (SPLITPART.IDENTIFIER 3)
          (START.TIME 137010000)
          (PARTIAL   (CLAUSE 38 T8 THEOREM () ((+ 10 (34 34)) )))
          (OPERATION (CLAUSE 38 T8 THEOREM () ((+ 10 (34 34)) ))
                     (REPLACEMENT.OPERATION (13 34) (38 52)
  (((38 . 1) (52 . 1) NIL))
  (NIL)
  NIL))
          (END.TIME 140410000)
          (FINAL 48 50 52 55 60 67 79 102 38)
          (SYMBOLS 
                   (LET (NEW.ADDRESS)
          (LIST (CONS   27 (DT-PREDICATE.CREATE "PROP-LESS" 'NIL))
                           (CONS   20 (DT-PREDICATE.CREATE "EQV-EQ" 'NIL))
                           (CONS   19 (DT-PREDICATE.CREATE "LESS" '(ANY ANY)))
                           (CONS   16 (DT-PREDICATE.CREATE "EQ" '(ANY ANY)))
                           (CONS   10 (DT-PREDICATE.CREATE "NEQ" '(ANY ANY)))
                           (CONS    6 (DT-PREDICATE.CREATE "LEQ" '(ANY ANY)))
                           (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
                           (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (CONS   37 (DT-CONSTANT.CREATE "c_10" 'ANY))
                           (CONS   35 (DT-CONSTANT.CREATE "c_9" 'ANY))
                           (CONS   36 (DT-CONSTANT.CREATE "c_8" 'ANY))
                           (CONS   32 (DT-CONSTANT.CREATE "c_7" 'ANY))
                           (CONS   34 (DT-CONSTANT.CREATE "c_6" 'ANY))
                           (CONS   33 (DT-CONSTANT.CREATE "c_5" 'ANY))
                           (CONS  117 (DT-CONSTANT.CREATE "c_4" 'ANY))
                           (CONS  118 (DT-CONSTANT.CREATE "c_3" 'ANY))
                           (CONS  119 (DT-CONSTANT.CREATE "c_2" 'ANY))
                           (CONS  120 (DT-CONSTANT.CREATE "c_1" 'ANY)))))
          (RESULT SUCCESS 38))

(THEOREMS (SPLITPART.IDENTIFIER 4)
          (START.TIME 140530000)
          (PARTIAL   (CLAUSE 38 T8 THEOREM () ((+ 6 (36 35)) )))
          (PARTIAL   (CLAUSE 126 T9 THEOREM () ((+ 10 (36 35)) )))
          (PARTIAL   (CLAUSE 133 T10 THEOREM () ((+ 6 (35 32)) )))
          (PARTIAL   (CLAUSE 140 T11 THEOREM () ((+ 10 (35 32)) )))
          (PARTIAL   (CLAUSE 147 T12 THEOREM () ((- 6 (36 32)) )))
          (INITIAL   (CLAUSE 48 R.= AXIOM ((42 . ANY)) ((+ 2 (42 42)) ))
(CLAUSE 50 A1 AXIOM ((7 . ANY)) ((+ 6 (7 7)) ))
(CLAUSE 52 A2 AXIOM ((13 . ANY)) ((- 10 (13 13)) ))
(CLAUSE 55 A3 AXIOM ((9 . ANY)(8 . ANY))
                           ((+ 6 (8 9)) (+ 10 (8 9)) ))
(CLAUSE 60 A4 AXIOM ((46 . ANY)(45 . ANY))
                           ((+ 6 (45 46)) (+ 10 (46 45)) ))
(CLAUSE 67 A5 AXIOM ((12 . ANY)(11 . ANY))
                           ((- 10 (11 12)) (+ 10 (12 11)) ))
(CLAUSE 79 A6 AXIOM ((5 . ANY)(4 . ANY)(3 . ANY))
                           ((- 6 (3 4)) (- 6 (4 5)) (+ 6 (3 5)) ))
(CLAUSE 102 A7 AXIOM ((44 . ANY)(43 . ANY))
                           ((- 6 (43 44)) (- 6 (44 43)) (- 10 (43 44)) ))
(CLAUSE 38 T8 THEOREM () ((+ 6 (36 35)) ))
(CLAUSE 126 T9 THEOREM () ((+ 10 (36 35)) ))
(CLAUSE 133 T10 THEOREM () ((+ 6 (35 32)) ))
(CLAUSE 140 T11 THEOREM () ((+ 10 (35 32)) ))
(CLAUSE 147 T12 THEOREM () ((- 6 (36 32)) )) )
          (END.TIME 150950000)
          (FINAL 48 50 52 55 60 67 79 102 38 126 133 140 147)
          (SYMBOLS 
                   (LET (NEW.ADDRESS)
          (LIST (CONS   27 (DT-PREDICATE.CREATE "PROP-LESS" 'NIL))
                           (CONS   20 (DT-PREDICATE.CREATE "EQV-EQ" 'NIL))
                           (CONS   19 (DT-PREDICATE.CREATE "LESS" '(ANY ANY)))
                           (CONS   16 (DT-PREDICATE.CREATE "EQ" '(ANY ANY)))
                           (CONS   10 (DT-PREDICATE.CREATE "NEQ" '(ANY ANY)))
                           (CONS    6 (DT-PREDICATE.CREATE "LEQ" '(ANY ANY)))
                           (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
                           (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (CONS   37 (DT-CONSTANT.CREATE "c_10" 'ANY))
                           (CONS   35 (DT-CONSTANT.CREATE "c_9" 'ANY))
                           (CONS   36 (DT-CONSTANT.CREATE "c_8" 'ANY))
                           (CONS   32 (DT-CONSTANT.CREATE "c_7" 'ANY))
                           (CONS   34 (DT-CONSTANT.CREATE "c_6" 'ANY))
                           (CONS   33 (DT-CONSTANT.CREATE "c_5" 'ANY))
                           (CONS  117 (DT-CONSTANT.CREATE "c_4" 'ANY))
                           (CONS  118 (DT-CONSTANT.CREATE "c_3" 'ANY))
                           (CONS  119 (DT-CONSTANT.CREATE "c_2" 'ANY))
                           (CONS  120 (DT-CONSTANT.CREATE "c_1" 'ANY)))))
          (RESULT))

(THEOREMS (SPLITPART.IDENTIFIER 5)
          (START.TIME 151140000)
          (PARTIAL   (CLAUSE 38 T8 THEOREM () ((+ 6 (36 35)) )))
          (PARTIAL   (CLAUSE 126 T9 THEOREM () ((+ 10 (36 35)) )))
          (PARTIAL   (CLAUSE 133 T10 THEOREM () ((+ 6 (35 32)) )))
          (PARTIAL   (CLAUSE 140 T11 THEOREM () ((+ 10 (35 32)) )))
          (PARTIAL   (CLAUSE 147 T12 THEOREM () ((- 10 (36 32)) )))
          (INITIAL   (CLAUSE 48 R.= AXIOM ((42 . ANY)) ((+ 2 (42 42)) ))
(CLAUSE 50 A1 AXIOM ((7 . ANY)) ((+ 6 (7 7)) ))
(CLAUSE 52 A2 AXIOM ((13 . ANY)) ((- 10 (13 13)) ))
(CLAUSE 55 A3 AXIOM ((9 . ANY)(8 . ANY))
                           ((+ 6 (8 9)) (+ 10 (8 9)) ))
(CLAUSE 60 A4 AXIOM ((46 . ANY)(45 . ANY))
                           ((+ 6 (45 46)) (+ 10 (46 45)) ))
(CLAUSE 67 A5 AXIOM ((12 . ANY)(11 . ANY))
                           ((- 10 (11 12)) (+ 10 (12 11)) ))
(CLAUSE 79 A6 AXIOM ((5 . ANY)(4 . ANY)(3 . ANY))
                           ((- 6 (3 4)) (- 6 (4 5)) (+ 6 (3 5)) ))
(CLAUSE 102 A7 AXIOM ((44 . ANY)(43 . ANY))
                           ((- 6 (43 44)) (- 6 (44 43)) (- 10 (43 44)) ))
(CLAUSE 38 T8 THEOREM () ((+ 6 (36 35)) ))
(CLAUSE 126 T9 THEOREM () ((+ 10 (36 35)) ))
(CLAUSE 133 T10 THEOREM () ((+ 6 (35 32)) ))
(CLAUSE 140 T11 THEOREM () ((+ 10 (35 32)) ))
(CLAUSE 147 T12 THEOREM () ((- 10 (36 32)) )) )
          (END.TIME 161360000)
          (FINAL 48 50 52 55 60 67 79 102 38 126 133 140 147)
          (SYMBOLS 
                   (LET (NEW.ADDRESS)
          (LIST (CONS   27 (DT-PREDICATE.CREATE "PROP-LESS" 'NIL))
                           (CONS   20 (DT-PREDICATE.CREATE "EQV-EQ" 'NIL))
                           (CONS   19 (DT-PREDICATE.CREATE "LESS" '(ANY ANY)))
                           (CONS   16 (DT-PREDICATE.CREATE "EQ" '(ANY ANY)))
                           (CONS   10 (DT-PREDICATE.CREATE "NEQ" '(ANY ANY)))
                           (CONS    6 (DT-PREDICATE.CREATE "LEQ" '(ANY ANY)))
                           (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
                           (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (CONS   37 (DT-CONSTANT.CREATE "c_10" 'ANY))
                           (CONS   35 (DT-CONSTANT.CREATE "c_9" 'ANY))
                           (CONS   36 (DT-CONSTANT.CREATE "c_8" 'ANY))
                           (CONS   32 (DT-CONSTANT.CREATE "c_7" 'ANY))
                           (CONS   34 (DT-CONSTANT.CREATE "c_6" 'ANY))
                           (CONS   33 (DT-CONSTANT.CREATE "c_5" 'ANY))
                           (CONS  117 (DT-CONSTANT.CREATE "c_4" 'ANY))
                           (CONS  118 (DT-CONSTANT.CREATE "c_3" 'ANY))
                           (CONS  119 (DT-CONSTANT.CREATE "c_2" 'ANY))
                           (CONS  120 (DT-CONSTANT.CREATE "c_1" 'ANY)))))
          (RESULT))

(THEOREMS (SPLITPART.IDENTIFIER 6)
          (START.TIME 161470000)
          (PARTIAL   (CLAUSE 38 T8 THEOREM () ((+ 6 (37 37)) )))
          (PARTIAL   (CLAUSE 121 T9 THEOREM () ((+ 10 (37 37)) )))
          (OPERATION (CLAUSE 121 T9 THEOREM () ((+ 10 (37 37)) ))
                     (REPLACEMENT.OPERATION (13 37) (121 52)
  (((121 . 1) (52 . 1) NIL))
  (NIL)
  NIL))
          (END.TIME 165040000)
          (FINAL 48 50 52 55 60 67 79 102 121)
          (SYMBOLS 
                   (LET (NEW.ADDRESS)
          (LIST (CONS   27 (DT-PREDICATE.CREATE "PROP-LESS" 'NIL))
                           (CONS   20 (DT-PREDICATE.CREATE "EQV-EQ" 'NIL))
                           (CONS   19 (DT-PREDICATE.CREATE "LESS" '(ANY ANY)))
                           (CONS   16 (DT-PREDICATE.CREATE "EQ" '(ANY ANY)))
                           (CONS   10 (DT-PREDICATE.CREATE "NEQ" '(ANY ANY)))
                           (CONS    6 (DT-PREDICATE.CREATE "LEQ" '(ANY ANY)))
                           (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
                           (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (CONS   37 (DT-CONSTANT.CREATE "c_10" 'ANY))
                           (CONS   35 (DT-CONSTANT.CREATE "c_9" 'ANY))
                           (CONS   36 (DT-CONSTANT.CREATE "c_8" 'ANY))
                           (CONS   32 (DT-CONSTANT.CREATE "c_7" 'ANY))
                           (CONS   34 (DT-CONSTANT.CREATE "c_6" 'ANY))
                           (CONS   33 (DT-CONSTANT.CREATE "c_5" 'ANY))
                           (CONS  117 (DT-CONSTANT.CREATE "c_4" 'ANY))
                           (CONS  118 (DT-CONSTANT.CREATE "c_3" 'ANY))
                           (CONS  119 (DT-CONSTANT.CREATE "c_2" 'ANY))
                           (CONS  120 (DT-CONSTANT.CREATE "c_1" 'ANY)))))
          (RESULT SUCCESS 121))
(indices ((121 24) (38 23) (147 22) (140 20) (133 19) (126 18) (38 17) (147 21) (140 20) (133 19) (126 18) (38 17) (38 16) (123 15) (38 14) (129 13) (123 12) (38 11) (102 5 6 7) (79 1 2 3) (67 8 9) (60 6 7) (55 5 7) (52 10) (50 4) (48 NIL)))

(SPLITPARTS "Unix" "20-MAY,1992 23:12" NIL)

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 5)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . T)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS)
         )

(REFUTATION (START.TIME 168760000)

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 5)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . T)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS)
         )
            (INITIAL   (CLAUSE 48 R.= AXIOM ((42 . ANY)) ((+ 2 (42 42)) ))
(CLAUSE 50 A1 AXIOM ((7 . ANY)) ((+ 6 (7 7)) ))
(CLAUSE 52 A2 AXIOM ((13 . ANY)) ((- 10 (13 13)) ))
(CLAUSE 55 A3 AXIOM ((9 . ANY)(8 . ANY))
                             ((+ 6 (8 9)) (+ 10 (8 9)) ))
(CLAUSE 60 A4 AXIOM ((46 . ANY)(45 . ANY))
                             ((+ 6 (45 46)) (+ 10 (46 45)) ))
(CLAUSE 67 A5 AXIOM ((12 . ANY)(11 . ANY))
                             ((- 10 (11 12)) (+ 10 (12 11)) ))
(CLAUSE 79 A6 AXIOM ((5 . ANY)(4 . ANY)(3 . ANY))
                             ((- 6 (3 4)) (- 6 (4 5)) (+ 6 (3 5)) ))
(CLAUSE 102 A7 AXIOM ((44 . ANY)(43 . ANY))
                             ((- 6 (43 44)) (- 6 (44 43)) (- 10 (43 44)) ))
(CLAUSE 38 T8 THEOREM () ((- 10 (119 118)) ))
(CLAUSE 123 T9 THEOREM () ((- 10 (118 120)) ))
(CLAUSE 129 T10 THEOREM () ((+ 10 (119 120)) )) )(OPERATION (CLAUSE 147 R1 (60 38) ()((+ 6 (118 119))))(RESOLUTION 60 2 38 1 NIL (45 118 46 119) 147))(OPERATION (CLAUSE 157 R2 (60 123) ()((+ 6 (120 118))))(RESOLUTION 60 2 123 1 NIL (45 120 46 118) 157))(OPERATION (CLAUSE 168 R3 (79 157) ()((- 6 (118 119))(+ 6 (120 119))))(RESOLUTION 157 1 79 1 NIL (3 120 4 118 5 119) 168))(OPERATION (CLAUSE 168 R3 (79 157 147) () ((+ 6 (120 119)) ))(REPLACEMENT.OPERATION NIL (168 147 )(((168 . 1)(147 . 1)NIL))( NIL )NIL))(OPERATION (CLAUSE 91 R4 (55 123) ()((+ 6 (118 120))))(RESOLUTION 55 2 123 1 NIL (8 118 9 120) 91))(OPERATION (CLAUSE 107 R5 (55 38) ()((+ 6 (119 118))))(RESOLUTION 55 2 38 1 NIL (8 119 9 118) 107))(OPERATION (CLAUSE 167 R6 (79 107) ()((- 6 (118 120))(+ 6 (119 120))))(RESOLUTION 107 1 79 1 NIL (3 119 4 118 5 120) 167))(OPERATION (CLAUSE 167 R6 (79 107 91) () ((+ 6 (119 120)) ))(REPLACEMENT.OPERATION NIL (167 91 )(((167 . 1)(91 . 1)NIL))( NIL )NIL))(OPERATION (CLAUSE 166 R7 (67 129) ()((+ 10 (120 119))))(RESOLUTION 129 1 67 1 NIL (11 119 12 120) 166))(OPERATION (CLAUSE 191 R8 (102 166) ()((- 6 (120 119))(- 6 (119 120))))(RESOLUTION 166 1 102 3 NIL (43 120 44 119) 191))(OPERATION (CLAUSE 191 R8 (102 166 167 168) () ())(REPLACEMENT.OPERATION NIL (191 167 168 )(((191 . 2)(167 . 1)NIL)((191 . 1)(168 . 1)NIL))( NIL  NIL )NIL))
            (END.TIME 171790000)
            (SYMBOLS 
                     (LET (NEW.ADDRESS)
          (LIST (CONS   27 (DT-PREDICATE.CREATE "PROP-LESS" 'NIL))
                             (CONS   20 (DT-PREDICATE.CREATE "EQV-EQ" 'NIL))
                             (CONS   19 (DT-PREDICATE.CREATE "LESS" '(ANY ANY)))
                             (CONS   16 (DT-PREDICATE.CREATE "EQ" '(ANY ANY)))
                             (CONS   10 (DT-PREDICATE.CREATE "NEQ" '(ANY ANY)))
                             (CONS    6 (DT-PREDICATE.CREATE "LEQ" '(ANY ANY)))
                             (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
                             (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (CONS   37 (DT-CONSTANT.CREATE "c_10" 'ANY))
                             (CONS   35 (DT-CONSTANT.CREATE "c_9" 'ANY))
                             (CONS   36 (DT-CONSTANT.CREATE "c_8" 'ANY))
                             (CONS   32 (DT-CONSTANT.CREATE "c_7" 'ANY))
                             (CONS   34 (DT-CONSTANT.CREATE "c_6" 'ANY))
                             (CONS   33 (DT-CONSTANT.CREATE "c_5" 'ANY))
                             (CONS  117 (DT-CONSTANT.CREATE "c_4" 'ANY))
                             (CONS  118 (DT-CONSTANT.CREATE "c_3" 'ANY))
                             (CONS  119 (DT-CONSTANT.CREATE "c_2" 'ANY))
                             (CONS  120 (DT-CONSTANT.CREATE "c_1" 'ANY)))))
            (SPLITPART.IDENTIFIER 1)
            (RESULT SUCCESS 191)
)

(REFUTATION (START.TIME 174860000)

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 5)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . T)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS)
         )
            (INITIAL   (CLAUSE 48 R.= AXIOM ((42 . ANY)) ((+ 2 (42 42)) ))
(CLAUSE 50 A1 AXIOM ((7 . ANY)) ((+ 6 (7 7)) ))
(CLAUSE 52 A2 AXIOM ((13 . ANY)) ((- 10 (13 13)) ))
(CLAUSE 55 A3 AXIOM ((9 . ANY)(8 . ANY))
                             ((+ 6 (8 9)) (+ 10 (8 9)) ))
(CLAUSE 60 A4 AXIOM ((46 . ANY)(45 . ANY))
                             ((+ 6 (45 46)) (+ 10 (46 45)) ))
(CLAUSE 67 A5 AXIOM ((12 . ANY)(11 . ANY))
                             ((- 10 (11 12)) (+ 10 (12 11)) ))
(CLAUSE 79 A6 AXIOM ((5 . ANY)(4 . ANY)(3 . ANY))
                             ((- 6 (3 4)) (- 6 (4 5)) (+ 6 (3 5)) ))
(CLAUSE 102 A7 AXIOM ((44 . ANY)(43 . ANY))
                             ((- 6 (43 44)) (- 6 (44 43)) (- 10 (43 44)) ))
(CLAUSE 38 T8 THEOREM () ((- 10 (33 117)) ))
(CLAUSE 123 T9 THEOREM () ((+ 10 (117 33)) )) )(OPERATION (CLAUSE 95 R1 (67 38) ()((- 10 (117 33))))(RESOLUTION 67 2 38 1 NIL (11 117 12 33) 95))(OPERATION (CLAUSE 95 R1 (67 38 123) () ())(REPLACEMENT.OPERATION NIL (95 123 )(((95 . 1)(123 . 1)NIL))( NIL )NIL))
            (END.TIME 176070000)
            (SYMBOLS 
                     (LET (NEW.ADDRESS)
          (LIST (CONS   27 (DT-PREDICATE.CREATE "PROP-LESS" 'NIL))
                             (CONS   20 (DT-PREDICATE.CREATE "EQV-EQ" 'NIL))
                             (CONS   19 (DT-PREDICATE.CREATE "LESS" '(ANY ANY)))
                             (CONS   16 (DT-PREDICATE.CREATE "EQ" '(ANY ANY)))
                             (CONS   10 (DT-PREDICATE.CREATE "NEQ" '(ANY ANY)))
                             (CONS    6 (DT-PREDICATE.CREATE "LEQ" '(ANY ANY)))
                             (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
                             (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (CONS   37 (DT-CONSTANT.CREATE "c_10" 'ANY))
                             (CONS   35 (DT-CONSTANT.CREATE "c_9" 'ANY))
                             (CONS   36 (DT-CONSTANT.CREATE "c_8" 'ANY))
                             (CONS   32 (DT-CONSTANT.CREATE "c_7" 'ANY))
                             (CONS   34 (DT-CONSTANT.CREATE "c_6" 'ANY))
                             (CONS   33 (DT-CONSTANT.CREATE "c_5" 'ANY))
                             (CONS  117 (DT-CONSTANT.CREATE "c_4" 'ANY))
                             (CONS  118 (DT-CONSTANT.CREATE "c_3" 'ANY))
                             (CONS  119 (DT-CONSTANT.CREATE "c_2" 'ANY))
                             (CONS  120 (DT-CONSTANT.CREATE "c_1" 'ANY)))))
            (SPLITPART.IDENTIFIER 2)
            (RESULT SUCCESS 95)
)

(REFUTATION (START.TIME 176190000)

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 5)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . T)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS)
         )
            (END.TIME 176450000)
            (SYMBOLS 
                     (LET (NEW.ADDRESS)
          (LIST (CONS   27 (DT-PREDICATE.CREATE "PROP-LESS" 'NIL))
                             (CONS   20 (DT-PREDICATE.CREATE "EQV-EQ" 'NIL))
                             (CONS   19 (DT-PREDICATE.CREATE "LESS" '(ANY ANY)))
                             (CONS   16 (DT-PREDICATE.CREATE "EQ" '(ANY ANY)))
                             (CONS   10 (DT-PREDICATE.CREATE "NEQ" '(ANY ANY)))
                             (CONS    6 (DT-PREDICATE.CREATE "LEQ" '(ANY ANY)))
                             (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
                             (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (CONS   37 (DT-CONSTANT.CREATE "c_10" 'ANY))
                             (CONS   35 (DT-CONSTANT.CREATE "c_9" 'ANY))
                             (CONS   36 (DT-CONSTANT.CREATE "c_8" 'ANY))
                             (CONS   32 (DT-CONSTANT.CREATE "c_7" 'ANY))
                             (CONS   34 (DT-CONSTANT.CREATE "c_6" 'ANY))
                             (CONS   33 (DT-CONSTANT.CREATE "c_5" 'ANY))
                             (CONS  117 (DT-CONSTANT.CREATE "c_4" 'ANY))
                             (CONS  118 (DT-CONSTANT.CREATE "c_3" 'ANY))
                             (CONS  119 (DT-CONSTANT.CREATE "c_2" 'ANY))
                             (CONS  120 (DT-CONSTANT.CREATE "c_1" 'ANY)))))
            (SPLITPART.IDENTIFIER 3)
            (RESULT SUCCESS 38)
)

(REFUTATION (START.TIME 180080000)

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 5)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . T)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS)
         )
            (INITIAL   (CLAUSE 48 R.= AXIOM ((42 . ANY)) ((+ 2 (42 42)) ))
(CLAUSE 50 A1 AXIOM ((7 . ANY)) ((+ 6 (7 7)) ))
(CLAUSE 52 A2 AXIOM ((13 . ANY)) ((- 10 (13 13)) ))
(CLAUSE 55 A3 AXIOM ((9 . ANY)(8 . ANY))
                             ((+ 6 (8 9)) (+ 10 (8 9)) ))
(CLAUSE 60 A4 AXIOM ((46 . ANY)(45 . ANY))
                             ((+ 6 (45 46)) (+ 10 (46 45)) ))
(CLAUSE 67 A5 AXIOM ((12 . ANY)(11 . ANY))
                             ((- 10 (11 12)) (+ 10 (12 11)) ))
(CLAUSE 79 A6 AXIOM ((5 . ANY)(4 . ANY)(3 . ANY))
                             ((- 6 (3 4)) (- 6 (4 5)) (+ 6 (3 5)) ))
(CLAUSE 102 A7 AXIOM ((44 . ANY)(43 . ANY))
                             ((- 6 (43 44)) (- 6 (44 43)) (- 10 (43 44)) ))
(CLAUSE 38 T8 THEOREM () ((+ 6 (36 35)) ))
(CLAUSE 126 T9 THEOREM () ((+ 10 (36 35)) ))
(CLAUSE 133 T10 THEOREM () ((+ 6 (35 32)) ))
(CLAUSE 140 T11 THEOREM () ((+ 10 (35 32)) ))
(CLAUSE 147 T12 THEOREM () ((- 6 (36 32)) )) )(OPERATION (CLAUSE 158 R1 (79 133) ()((- 6 (36 35))(+ 6 (36 32))))(RESOLUTION 133 1 79 2 NIL (3 36 4 35 5 32) 158))(OPERATION (CLAUSE 158 R1 (79 133 38 147) () ())(REPLACEMENT.OPERATION NIL (158 38 147 )(((158 . 1)(38 . 1)NIL)((158 . 2)(147 . 1)NIL))( NIL  NIL )NIL))
            (END.TIME 181540000)
            (SYMBOLS 
                     (LET (NEW.ADDRESS)
          (LIST (CONS   27 (DT-PREDICATE.CREATE "PROP-LESS" 'NIL))
                             (CONS   20 (DT-PREDICATE.CREATE "EQV-EQ" 'NIL))
                             (CONS   19 (DT-PREDICATE.CREATE "LESS" '(ANY ANY)))
                             (CONS   16 (DT-PREDICATE.CREATE "EQ" '(ANY ANY)))
                             (CONS   10 (DT-PREDICATE.CREATE "NEQ" '(ANY ANY)))
                             (CONS    6 (DT-PREDICATE.CREATE "LEQ" '(ANY ANY)))
                             (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
                             (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (CONS   37 (DT-CONSTANT.CREATE "c_10" 'ANY))
                             (CONS   35 (DT-CONSTANT.CREATE "c_9" 'ANY))
                             (CONS   36 (DT-CONSTANT.CREATE "c_8" 'ANY))
                             (CONS   32 (DT-CONSTANT.CREATE "c_7" 'ANY))
                             (CONS   34 (DT-CONSTANT.CREATE "c_6" 'ANY))
                             (CONS   33 (DT-CONSTANT.CREATE "c_5" 'ANY))
                             (CONS  117 (DT-CONSTANT.CREATE "c_4" 'ANY))
                             (CONS  118 (DT-CONSTANT.CREATE "c_3" 'ANY))
                             (CONS  119 (DT-CONSTANT.CREATE "c_2" 'ANY))
                             (CONS  120 (DT-CONSTANT.CREATE "c_1" 'ANY)))))
            (SPLITPART.IDENTIFIER 4)
            (RESULT SUCCESS 158)
)

(REFUTATION (START.TIME 185140000)

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 5)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . T)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS)
         )
            (INITIAL   (CLAUSE 48 R.= AXIOM ((42 . ANY)) ((+ 2 (42 42)) ))
(CLAUSE 50 A1 AXIOM ((7 . ANY)) ((+ 6 (7 7)) ))
(CLAUSE 52 A2 AXIOM ((13 . ANY)) ((- 10 (13 13)) ))
(CLAUSE 55 A3 AXIOM ((9 . ANY)(8 . ANY))
                             ((+ 6 (8 9)) (+ 10 (8 9)) ))
(CLAUSE 60 A4 AXIOM ((46 . ANY)(45 . ANY))
                             ((+ 6 (45 46)) (+ 10 (46 45)) ))
(CLAUSE 67 A5 AXIOM ((12 . ANY)(11 . ANY))
                             ((- 10 (11 12)) (+ 10 (12 11)) ))
(CLAUSE 79 A6 AXIOM ((5 . ANY)(4 . ANY)(3 . ANY))
                             ((- 6 (3 4)) (- 6 (4 5)) (+ 6 (3 5)) ))
(CLAUSE 102 A7 AXIOM ((44 . ANY)(43 . ANY))
                             ((- 6 (43 44)) (- 6 (44 43)) (- 10 (43 44)) ))
(CLAUSE 38 T8 THEOREM () ((+ 6 (36 35)) ))
(CLAUSE 126 T9 THEOREM () ((+ 10 (36 35)) ))
(CLAUSE 133 T10 THEOREM () ((+ 6 (35 32)) ))
(CLAUSE 140 T11 THEOREM () ((+ 10 (35 32)) ))
(CLAUSE 147 T12 THEOREM () ((- 10 (36 32)) )) )
            (OPERATION (CLAUSE 115 R1 (102 140) ()
                               ((- 6 (35 32)) (- 6 (32 35)) ))
                       (RESOLUTION 140 1 102 3 NIL (43 35 44 32) 115))
            (OPERATION (CLAUSE 115 R1 (102 140) ()
                               ((- 6 (35 32)) (- 6 (32 35)) ))
                       (REPLACEMENT.OPERATION NIL (115 133)
  (((115 . 1) (133 . 1) NIL))
  (NIL)
  NIL))
            (OPERATION (CLAUSE 184 R2 (102 133) ()
                               ((- 6 (32 35)) (- 10 (35 32)) ))
                       (RESOLUTION 133 1 102 1 NIL (43 35 44 32) 184))
            (OPERATION (CLAUSE 163 R3 (102 126) ()
                               ((- 6 (36 35)) (- 6 (35 36)) ))
                       (RESOLUTION 126 1 102 3 NIL (43 36 44 35) 163))
            (OPERATION (CLAUSE 163 R3 (102 126) ()
                               ((- 6 (36 35)) (- 6 (35 36)) ))
                       (REPLACEMENT.OPERATION NIL (163 38)
  (((163 . 1) (38 . 1) NIL))
  (NIL)
  NIL))(OPERATION (CLAUSE 175 R4 (60 147) ()((+ 6 (32 36))))(RESOLUTION 60 2 147 1 NIL (45 32 46 36) 175))(OPERATION (CLAUSE 178 R5 (79 175) ()((- 6 (35 32))(+ 6 (35 36))))(RESOLUTION 175 1 79 2 NIL (3 35 4 32 5 36) 178))(OPERATION (CLAUSE 178 R5 (79 175 133 163) () ())(REPLACEMENT.OPERATION NIL (178 133 163 )(((178 . 1)(133 . 1)NIL)((178 . 2)(163 . 1)NIL))( NIL  NIL )NIL))
            (END.TIME 190410000)
            (SYMBOLS 
                     (LET (NEW.ADDRESS)
          (LIST (CONS   27 (DT-PREDICATE.CREATE "PROP-LESS" 'NIL))
                             (CONS   20 (DT-PREDICATE.CREATE "EQV-EQ" 'NIL))
                             (CONS   19 (DT-PREDICATE.CREATE "LESS" '(ANY ANY)))
                             (CONS   16 (DT-PREDICATE.CREATE "EQ" '(ANY ANY)))
                             (CONS   10 (DT-PREDICATE.CREATE "NEQ" '(ANY ANY)))
                             (CONS    6 (DT-PREDICATE.CREATE "LEQ" '(ANY ANY)))
                             (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
                             (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (CONS   37 (DT-CONSTANT.CREATE "c_10" 'ANY))
                             (CONS   35 (DT-CONSTANT.CREATE "c_9" 'ANY))
                             (CONS   36 (DT-CONSTANT.CREATE "c_8" 'ANY))
                             (CONS   32 (DT-CONSTANT.CREATE "c_7" 'ANY))
                             (CONS   34 (DT-CONSTANT.CREATE "c_6" 'ANY))
                             (CONS   33 (DT-CONSTANT.CREATE "c_5" 'ANY))
                             (CONS  117 (DT-CONSTANT.CREATE "c_4" 'ANY))
                             (CONS  118 (DT-CONSTANT.CREATE "c_3" 'ANY))
                             (CONS  119 (DT-CONSTANT.CREATE "c_2" 'ANY))
                             (CONS  120 (DT-CONSTANT.CREATE "c_1" 'ANY)))))
            (SPLITPART.IDENTIFIER 5)
            (RESULT SUCCESS 178)
)

(REFUTATION (START.TIME 190550000)

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 5)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . T)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS)
         )
            (END.TIME 190790000)
            (SYMBOLS 
                     (LET (NEW.ADDRESS)
          (LIST (CONS   27 (DT-PREDICATE.CREATE "PROP-LESS" 'NIL))
                             (CONS   20 (DT-PREDICATE.CREATE "EQV-EQ" 'NIL))
                             (CONS   19 (DT-PREDICATE.CREATE "LESS" '(ANY ANY)))
                             (CONS   16 (DT-PREDICATE.CREATE "EQ" '(ANY ANY)))
                             (CONS   10 (DT-PREDICATE.CREATE "NEQ" '(ANY ANY)))
                             (CONS    6 (DT-PREDICATE.CREATE "LEQ" '(ANY ANY)))
                             (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
                             (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (CONS   37 (DT-CONSTANT.CREATE "c_10" 'ANY))
                             (CONS   35 (DT-CONSTANT.CREATE "c_9" 'ANY))
                             (CONS   36 (DT-CONSTANT.CREATE "c_8" 'ANY))
                             (CONS   32 (DT-CONSTANT.CREATE "c_7" 'ANY))
                             (CONS   34 (DT-CONSTANT.CREATE "c_6" 'ANY))
                             (CONS   33 (DT-CONSTANT.CREATE "c_5" 'ANY))
                             (CONS  117 (DT-CONSTANT.CREATE "c_4" 'ANY))
                             (CONS  118 (DT-CONSTANT.CREATE "c_3" 'ANY))
                             (CONS  119 (DT-CONSTANT.CREATE "c_2" 'ANY))
                             (CONS  120 (DT-CONSTANT.CREATE "c_1" 'ANY)))))
            (SPLITPART.IDENTIFIER 6)
            (RESULT SUCCESS 121)
)
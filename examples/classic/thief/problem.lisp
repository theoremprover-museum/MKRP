;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((THIEF (BILLIE) OR THIEF (LUCKY) OR THIEF (JACKY)) (NOT ((THIEF (BILLIE) AND THIEF (LUCKY)) OR (THIEF (BILLIE) AND THIEF (JACKY)) OR (THIEF (LUCKY) AND THIEF (JACKY)))) (ALL X THIEF (X) IMPL HOTEL (X)) (NOT (NOT THIEF (LUCKY) AND NOT HOTEL (LUCKY) AND THIEF (BILLIE))) (NOT (NOT THIEF (BILLIE) AND (THIEF (LUCKY) AND HOTEL (LUCKY) AND NOT THIEF (BILLIE)) AND NOT THIEF (JACKY))) (NOT (NOT THIEF (JACKY) AND HOTEL (LUCKY) AND NOT (THIEF (LUCKY) AND HOTEL (LUCKY) AND NOT THIEF (BILLIE)))))) (QUOTE ((OR (+ 3 (2) NIL) (OR (+ 3 (4) NIL) (+ 3 (5) NIL))) (NOT (OR (AND (+ 3 (2) NIL) (+ 3 (4) NIL)) (OR (AND (+ 3 (2) NIL) (+ 3 (5) NIL)) (AND (+ 3 (4) NIL) (+ 3 (5) NIL))))) (ALL 6 (IMPL (+ 3 (6) NIL) (+ 7 (6) NIL))) (NOT (AND (NOT (+ 3 (4) NIL)) (AND (NOT (+ 7 (4) NIL)) (+ 3 (2) NIL)))) (NOT (AND (NOT (+ 3 (2) NIL)) (AND (AND (+ 3 (4) NIL) (AND (+ 7 (4) NIL) (NOT (+ 3 (2) NIL)))) (NOT (+ 3 (5) NIL))))) (NOT (AND (NOT (+ 3 (5) NIL)) (AND (+ 7 (4) NIL) (NOT (AND (+ 3 (4) NIL) (AND (+ 7 (4) NIL) (NOT (+ 3 (2) NIL)))))))))) (QUOTE ((THIEF (JACKY)))) (QUOTE ((+ 3 (5) NIL))) (QUOTE ("Edit:     Axioms and Theorems edited: 15-DEC,1989 12:05 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST '(79934 79939 79944 79949 79964 79969 79984 79999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY "BILLIE" (DT*ST-KIND NIL) CONSTANT 15
          "THIEF" NIL NIL (ANY) NIL NIL ((- 3 (POSITIVE))) ((+ 3 (NEGATIVE))) ((+ 3 (NIL)))
          ((- 3 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY "LUCKY" (DT*ST-KIND NIL)
          CONSTANT 5 ANY "JACKY" (DT*ST-KIND NIL) CONSTANT 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "HOTEL" NIL NIL (ANY) NIL NIL
          ((- 7 (POSITIVE))) ((+ 7 (NEGATIVE))) ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE))
       (INCREMENT (- MEM*SIZE 80000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 80000)
             (SETQ COUNTER1 8)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 80000)
                 (MEM-INITIALIZE 80000))
               (SETQ COUNTER1 8)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 80000) (+ 79919 INCREMENT) 79919))
      (SETQ MEM*NEXT.VADR 8
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ANY))) (SETQ DT*SORT.NR (QUOTE 2)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (5 4 2))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE NIL)) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE NIL)) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (7 3 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (7 3 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
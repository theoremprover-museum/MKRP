(COND ((FMT-LOAD " 6-SEP-84 23:10:07" NIL (((* ----- THE MONKEY-BANANA PROBLEM ----) COMMENT COMMENT) ((* (PROBLEM
AS STATED IN LOVELANDS BOOK)) COMMENT COMMENT) ((*) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* THIS IS ONE OF THE
CLSSSICAL AI-PROBLEMS. THE SITUATION IS THE) COMMENT COMMENT) ((* FOLLOWING:) COMMENT COMMENT) ((* THERE ARE A
MONKEY, A CHAIR AND A BANANA IN AN ARBITRARY ROOM. THE) COMMENT COMMENT) ((* BANANA IS HANGING DOWN (EG. FROM THE
CEILING) SUCH THAT THE MON-) COMMENT COMMENT) ((* KEY CANNOT REACH IT. BY THIS THE MONKEY MUST USE ITS BRAIN TO)
COMMENT COMMENT) ((* REACH AND EAT THE BANANA SOMEHOW.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* THE AXIOMS DESCRIPE
THE SITUATION.) COMMENT COMMENT) ((* ANIMALS CAN REACH THINGS CLOSE BY.) COMMENT COMMENT) ((ALL X,Y ANIMAL (X)
AND CLOSE.TO (X Y) IMPL CAN.REACH (X Y)) (ALL 4 (ALL 3 (IMPL (AND (+ 5 (3) NIL) (+ 6 (3 4) NIL)) (+ 7 (3 4) NIL))))
QUANTIFICATION) ((* IF YOU ARE UPON SOMETHING TALL UNDER THE BANANA, YOU ARE CLOSE TO IT.) COMMENT COMMENT) ((ALL
X,Y ON (X Y) AND UNDER (Y BANANA) AND TALL (Y) IMPL CLOSE.TO (X BANANA)) (ALL 9 (ALL 8 (IMPL (AND (+ 10 (8 9) NIL)
(AND (+ 12 (9 11) NIL) (+ 13 (9) NIL))) (+ 6 (8 11) NIL)))) QUANTIFICATION) ((* YOU CAN MOVE SOMETHING UNDER OR
CLOSE TO SOMETHING ELSE.) COMMENT COMMENT) ((ALL X,Y,Z IN.ROOM (X) AND IN.ROOM (Y) AND IN.ROOM (Z) AND CAN.MOVE.NEAR
(X Y Z) IMPL (CLOSE.TO (Z FLOOR) OR UNDER (Y Z))) (ALL 16 (ALL 15 (ALL 14 (IMPL (AND (+ 17 (14) NIL) (AND (+ 17
(15) NIL) (AND (+ 17 (16) NIL) (+ 18 (14 15 16) NIL)))) (OR (+ 6 (16 19) NIL) (+ 12 (15 16) NIL)))))) QUANTIFICATION)
((* TO GET ON IT CLIMB.) COMMENT COMMENT) ((ALL X,Y CAN.CLIMB (X Y) IMPL ON (X Y)) (ALL 21 (ALL 20 (IMPL (+ 22
(20 21) NIL) (+ 10 (20 21) NIL)))) QUANTIFICATION) ((* THESE AXIOMS STATE WHAT IS IN THE ROOM AND WHAT THE MONKEY
CAN DO.) COMMENT COMMENT) ((ANIMAL (MONKEY)) (+ 5 (23) NIL) QUANTIFICATION) ((TALL (CHAIR)) (+ 13 (24) NIL) 
QUANTIFICATION) ((IN.ROOM (MONKEY)) (+ 17 (23) NIL) QUANTIFICATION) ((IN.ROOM (BANANA)) (+ 17 (11) NIL) QUANTIFICATION)
((IN.ROOM (CHAIR)) (+ 17 (24) NIL) QUANTIFICATION) ((CAN.MOVE.NEAR (MONKEY CHAIR BANANA)) (+ 18 (23 24 11) NIL)
QUANTIFICATION) ((NOT CLOSE.TO (BANANA FLOOR)) (NOT (+ 6 (11 19) NIL)) QUANTIFICATION) ((CAN.CLIMB (MONKEY CHAIR))
(+ 22 (23 24) NIL) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (10015
10020 10035 10040 10045 10050 10065 10080 10085 10090 10095 10110 10125 10130 10145 10150 10155 10170 10185 10200
10205 10210 10225 10240))) (DATALIST (QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE)))
((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE)))
((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 ANIMAL NIL NIL (ANY) NIL NIL ((- 5 (POSITIVE)))
((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 CLOSE.TO NIL NIL (ANY ANY)
NIL NIL ((- 6 (POSITIVE))) ((+ 6 (NEGATIVE))) ((+ 6 (NIL))) ((- 6 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
CAN.REACH NIL NIL (ANY ANY) NIL NIL ((- 7 (POSITIVE))) ((+ 7 (NEGATIVE))) ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (
DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 15 ON NIL NIL (ANY ANY) NIL NIL ((- 10 (POSITIVE))) ((+ 10 (NEGATIVE))) ((+ 10 (NIL))) ((- 10
(NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 BANANA ANY (DT*ST-KIND NIL) CONSTANT 15 UNDER NIL NIL (ANY ANY) NIL
NIL ((- 12 (POSITIVE))) ((+ 12 (NEGATIVE))) ((+ 12 (NIL))) ((- 12 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
TALL NIL NIL (ANY) NIL NIL ((- 13 (POSITIVE))) ((+ 13 (NEGATIVE))) ((+ 13 (NIL))) ((- 13 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 IN.ROOM NIL NIL (ANY) NIL NIL ((- 17 (POSITIVE))) ((+ 17
(NEGATIVE))) ((+ 17 (NIL))) ((- 17 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 CAN.MOVE.NEAR NIL NIL (ANY ANY
ANY) NIL NIL ((- 18 (POSITIVE))) ((+ 18 (NEGATIVE))) ((+ 18 (NIL))) ((- 18 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
5 FLOOR ANY (DT*ST-KIND NIL) CONSTANT 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL
DT*ST-KIND SYS-VAR) VARIABLE 15 CAN.CLIMB NIL NIL (ANY ANY) NIL NIL ((- 22 (POSITIVE))) ((+ 22 (NEGATIVE))) ((+
22 (NIL))) ((- 22 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 MONKEY ANY (DT*ST-KIND NIL) CONSTANT 5 CHAIR ANY
(DT*ST-KIND NIL) CONSTANT))) (INCREMENT (IDIFFERENCE MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP (IPLUS
(IDIFFERENCE 25 1) (IDIFFERENCE 10240 10010)) MEM*SIZE) (MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ COUNTER1
25) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1
(ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))
(T (SETQ COUNTER1 25) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
(COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT)))))))
(SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
DATA)))))) (RPAQ MEM*NEXT.RADR (IPLUS 10010 INCREMENT)) (RPAQ MEM*NEXT.VADR 25) (RPAQ MEM*REST (ADD1 (IDIFFERENCE
MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ
DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 1) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS 
DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS
DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ 
DT*CONSTANT.ALL (24 23 19 11)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL
NIL) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ 
DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT 
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (22 18 17
13 12 10 7 6 5 2 1)) (RPAQQ DT*PREDICATE.ALL (22 18 17 13 12 10 7 6 5 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES
NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE
+ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ
DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ 
DT*SIGN.PLUS.SYMBOLS (+ ++))) (PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED
(2 1))))) (PROGN (SETPROPLIST (QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL
DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ
ST*STACK1 (NIL NIL NIL NIL NIL NIL NIL ((CHAIR PROGN (DT-CONSTANT.DELETE 24) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE CHAIR) ST*SYMBOL.ADDRESSES)))) ((MONKEY PROGN (DT-CONSTANT.DELETE 23) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE MONKEY) ST*SYMBOL.ADDRESSES)))) NIL ((CAN.CLIMB PROGN (DT-PREDICATE.DELETE 22) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE CAN.CLIMB) ST*SYMBOL.ADDRESSES))) (X_21 PROGN (DT-VARIABLE.DELETE 21) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE X_21) ST*SYMBOL.ADDRESSES))) (X_20 PROGN (DT-VARIABLE.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE X_20) ST*SYMBOL.ADDRESSES)))) NIL ((FLOOR PROGN (DT-CONSTANT.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE FLOOR) ST*SYMBOL.ADDRESSES))) (CAN.MOVE.NEAR PROGN (DT-PREDICATE.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE CAN.MOVE.NEAR) ST*SYMBOL.ADDRESSES))) (IN.ROOM PROGN (DT-PREDICATE.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE IN.ROOM) ST*SYMBOL.ADDRESSES))) (X_16 PROGN (DT-VARIABLE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES))) (X_15 PROGN (DT-VARIABLE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE X_15) ST*SYMBOL.ADDRESSES))) (X_14 PROGN (DT-VARIABLE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
X_14) ST*SYMBOL.ADDRESSES)))) NIL ((TALL PROGN (DT-PREDICATE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
TALL) ST*SYMBOL.ADDRESSES))) (UNDER PROGN (DT-PREDICATE.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UNDER)
ST*SYMBOL.ADDRESSES))) (BANANA PROGN (DT-CONSTANT.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BANANA)
ST*SYMBOL.ADDRESSES))) (ON PROGN (DT-PREDICATE.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ON) 
ST*SYMBOL.ADDRESSES))) (X_9 PROGN (DT-VARIABLE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_9) 
ST*SYMBOL.ADDRESSES))) (X_8 PROGN (DT-VARIABLE.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_8) 
ST*SYMBOL.ADDRESSES)))) NIL ((CAN.REACH PROGN (DT-PREDICATE.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
CAN.REACH) ST*SYMBOL.ADDRESSES))) (CLOSE.TO PROGN (DT-PREDICATE.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
CLOSE.TO) ST*SYMBOL.ADDRESSES))) (ANIMAL PROGN (DT-PREDICATE.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
ANIMAL) ST*SYMBOL.ADDRESSES))) (X_4 PROGN (DT-VARIABLE.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_4)
ST*SYMBOL.ADDRESSES))) (X_3 PROGN (DT-VARIABLE.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_3) 
ST*SYMBOL.ADDRESSES)))) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE
2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1)
(RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY))
(RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA)))))
(RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_3 . 3) (X_4 . 4) (ANIMAL . 5) (CLOSE.TO . 6)
(CAN.REACH . 7) (X_8 . 8) (X_9 . 9) (ON . 10) (BANANA . 11) (UNDER . 12) (TALL . 13) (X_14 . 14) (X_15 . 15) (X_16
. 16) (IN.ROOM . 17) (CAN.MOVE.NEAR . 18) (FLOOR . 19) (X_20 . 20) (X_21 . 21) (CAN.CLIMB . 22) (MONKEY . 23) (CHAIR
. 24))))))))STOP
 

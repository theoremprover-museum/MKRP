(COND ((FMT-LOAD " 6-SEP-84 23:11:55" NIL (((* ----- THE MONKEY-BANANA PROBLEM ----) COMMENT COMMENT) ((* (PROBLEM
FORMULATED AS IN THE SORTED LOGIC EXAMPLE USING UNSORTED LOGIC!)) COMMENT COMMENT) ((*) COMMENT COMMENT) ((*) COMMENT
COMMENT) ((* THIS IS ONE OF THE CLASSICAL AI-PROBLEMS. THE SITUATION IS THE) COMMENT COMMENT) ((* FOLLOWING:) COMMENT
COMMENT) ((* THERE ARE A MONKEY, A CHAIR AND A BANANA IN AN ARBITRARY ROOM. THE) COMMENT COMMENT) ((* BANANA IS
HANGING DOWN (EG. FROM THE CEILING) SUCH THAT THE MON-) COMMENT COMMENT) ((* KEY CANNOT REACH IT. BY THIS THE MONKEY
MUST USE ITS BRAIN TO) COMMENT COMMENT) ((* REACH AND EAT THE BANANA SOMEHOW.) COMMENT COMMENT) ((*) COMMENT COMMENT)
((* THE AXIOMS DESCRIBE THE SITUATION.) COMMENT COMMENT) ((* IN THE ROOM ARE ANIMALS (THE MONKEY) , SOMETHING TALL
(THE CHAIR)) COMMENT COMMENT) ((* THE BANANA AND, NATURALLY, THE ROOM HAS A FLOOR TOO.) COMMENT COMMENT) (((ALL
X ANIMAL (X) IMPL IN.ROOM (X)) AND (ALL X TALL (X) IMPL IN.ROOM (X))) (AND (ALL 3 (IMPL (+ 4 (3) NIL) (+ 5 (3)
NIL))) (ALL 6 (IMPL (+ 7 (6) NIL) (+ 5 (6) NIL)))) QUANTIFICATION) ((ANIMAL (MONKEY)) (+ 4 (8) NIL) QUANTIFICATION)
((TALL (CHAIR)) (+ 7 (9) NIL) QUANTIFICATION) ((IN.ROOM (BANANA) AND IN.ROOM (FLOOR)) (AND (+ 5 (10) NIL) (+ 5
(11) NIL)) QUANTIFICATION) ((* AN ANIMAL IN THE ROOM CAN REACH SOMETHING CLOSE BY.) COMMENT COMMENT) ((ALL X,Y
ANIMAL (X) AND IN.ROOM (Y) IMPL (CLOSE.TO (X Y) IMPL CAN.REACH (X Y))) (ALL 13 (ALL 12 (IMPL (AND (+ 4 (12) NIL)
(+ 5 (13) NIL)) (IMPL (+ 14 (12 13) NIL) (+ 15 (12 13) NIL))))) QUANTIFICATION) ((* AN ANIMAL ON SOMETHING TALL
UNDER THE BANANA IS CLOSE TO IT.) COMMENT COMMENT) ((ALL X,Y ANIMAL (X) AND TALL (Y) IMPL (ON (X Y) AND UNDER (Y
BANANA) IMPL CLOSE.TO (X BANANA))) (ALL 17 (ALL 16 (IMPL (AND (+ 4 (16) NIL) (+ 7 (17) NIL)) (IMPL (AND (+ 18 (16
17) NIL) (+ 19 (17 10) NIL)) (+ 14 (16 10) NIL))))) QUANTIFICATION) ((* ANIMALS CAN MOVE THINGS AND CLIMB ON THINGS.)
COMMENT COMMENT) ((ALL X,Y,Z ANIMAL (X) AND IN.ROOM (Y) AND IN.ROOM (Z) IMPL (CAN.MOVE.NEAR (X Y Z) IMPL (CLOSE.TO
(Z FLOOR) OR UNDER (Y Z)))) (ALL 22 (ALL 21 (ALL 20 (IMPL (AND (+ 4 (20) NIL) (AND (+ 5 (21) NIL) (+ 5 (22) NIL)))
(IMPL (+ 23 (20 21 22) NIL) (OR (+ 14 (22 11) NIL) (+ 19 (21 22) NIL))))))) QUANTIFICATION) ((ALL X,Y ANIMAL (X)
AND TALL (Y) IMPL (CAN.CLIMB (X Y) IMPL ON (X Y))) (ALL 25 (ALL 24 (IMPL (AND (+ 4 (24) NIL) (+ 7 (25) NIL)) (IMPL
(+ 26 (24 25) NIL) (+ 18 (24 25) NIL))))) QUANTIFICATION) ((* NOW THIS IS THE STARTING SITUATION.) COMMENT COMMENT)
((CAN.MOVE.NEAR (MONKEY CHAIR BANANA)) (+ 23 (8 9 10) NIL) QUANTIFICATION) ((NOT CLOSE.TO (BANANA FLOOR)) (NOT
(+ 14 (10 11) NIL)) QUANTIFICATION) ((CAN.CLIMB (MONKEY CHAIR)) (+ 26 (8 9) NIL) QUANTIFICATION))) (COND (ST*LOAD.FLAG
(PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (10015 10020 10025 10040 10045 10050 10055 10070 10085 10090 10095
10110 10125 10130 10135 10140 10145 10150 10155 10170 10175 10190 10205 10210 10225 10240))) (DATALIST (QUOTE (15
TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL)))
NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 ANIMAL NIL NIL (ANY)
NIL NIL ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE))) ((+ 4 (NIL))) ((- 4 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
IN.ROOM NIL NIL (ANY) NIL NIL ((- 5 (POSITIVE))) ((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 TALL NIL NIL (ANY) NIL NIL ((- 7 (POSITIVE)))
((+ 7 (NEGATIVE))) ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 MONKEY ANY (DT*ST-KIND NIL)
CONSTANT 5 CHAIR ANY (DT*ST-KIND NIL) CONSTANT 5 BANANA ANY (DT*ST-KIND NIL) CONSTANT 5 FLOOR ANY (DT*ST-KIND NIL)
CONSTANT 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
15 CLOSE.TO NIL NIL (ANY ANY) NIL NIL ((- 14 (POSITIVE))) ((+ 14 (NEGATIVE))) ((+ 14 (NIL))) ((- 14 (NIL))) NIL
NIL (DT*ST-KIND NIL) PREDICATE 15 CAN.REACH NIL NIL (ANY ANY) NIL NIL ((- 15 (POSITIVE))) ((+ 15 (NEGATIVE))) ((+
15 (NIL))) ((- 15 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 ON NIL NIL (ANY ANY) NIL NIL ((- 18 (POSITIVE))) ((+ 18
(NEGATIVE))) ((+ 18 (NIL))) ((- 18 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 UNDER NIL NIL (ANY ANY) NIL NIL
((- 19 (POSITIVE))) ((+ 19 (NEGATIVE))) ((+ 19 (NIL))) ((- 19 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY
NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 15 CAN.MOVE.NEAR NIL NIL (ANY ANY ANY) NIL NIL ((- 23 (POSITIVE))) ((+ 23 (NEGATIVE)))
((+ 23 (NIL))) ((- 23 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 CAN.CLIMB NIL NIL (ANY ANY) NIL NIL ((- 26 (POSITIVE)))
((+ 26 (NEGATIVE))) ((+ 26 (NIL))) ((- 26 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE))) (INCREMENT (IDIFFERENCE
MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE 27 1) (IDIFFERENCE 10240 10000)) MEM*SIZE)
(MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ COUNTER1 27) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA
MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA
(DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 27) (MAPC ADDRLIST (FUNCTION
(LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR)
((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC
DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR
(IPLUS 10000 INCREMENT)) (RPAQ MEM*NEXT.VADR 27) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR)))
(RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR
1) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE
DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ 
DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (11 10 9 8)) (RPAQQ DT*ABBREVIATIONS
NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL NIL) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE))
(RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS
(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC 
ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE))
(RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ
DT*NONEQUALITY.PREDICATES (26 23 19 18 15 14 7 5 4 2 1)) (RPAQQ DT*PREDICATE.ALL (26 23 19 18 15 14 7 5 4 2 1))
(RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES
DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))
(RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ 
DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++))) (PROGN) (PROGN (SETPROPLIST (QUOTE 
DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED (2 1))))) (PROGN (SETPROPLIST (QUOTE ANY) (QUOTE (
DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY ANY))
DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ ST*STACK1 (NIL NIL NIL NIL NIL ((CAN.CLIMB PROGN
(DT-PREDICATE.DELETE 26) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CAN.CLIMB) ST*SYMBOL.ADDRESSES))) (X_25 PROGN
(DT-VARIABLE.DELETE 25) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_25) ST*SYMBOL.ADDRESSES))) (X_24 PROGN (
DT-VARIABLE.DELETE 24) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_24) ST*SYMBOL.ADDRESSES)))) ((CAN.MOVE.NEAR
PROGN (DT-PREDICATE.DELETE 23) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CAN.MOVE.NEAR) ST*SYMBOL.ADDRESSES)))
(X_22 PROGN (DT-VARIABLE.DELETE 22) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_22) ST*SYMBOL.ADDRESSES))) (X_21
PROGN (DT-VARIABLE.DELETE 21) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) ST*SYMBOL.ADDRESSES))) (X_20 PROGN
(DT-VARIABLE.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_20) ST*SYMBOL.ADDRESSES)))) NIL ((UNDER PROGN
(DT-PREDICATE.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UNDER) ST*SYMBOL.ADDRESSES))) (ON PROGN (
DT-PREDICATE.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ON) ST*SYMBOL.ADDRESSES))) (X_17 PROGN (
DT-VARIABLE.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17) ST*SYMBOL.ADDRESSES))) (X_16 PROGN (
DT-VARIABLE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES)))) NIL ((CAN.REACH
PROGN (DT-PREDICATE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CAN.REACH) ST*SYMBOL.ADDRESSES))) (CLOSE.TO
PROGN (DT-PREDICATE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CLOSE.TO) ST*SYMBOL.ADDRESSES))) (X_13
PROGN (DT-VARIABLE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_13) ST*SYMBOL.ADDRESSES))) (X_12 PROGN
(DT-VARIABLE.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_12) ST*SYMBOL.ADDRESSES)))) NIL ((FLOOR PROGN
(DT-CONSTANT.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FLOOR) ST*SYMBOL.ADDRESSES))) (BANANA PROGN
(DT-CONSTANT.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BANANA) ST*SYMBOL.ADDRESSES)))) ((CHAIR PROGN
(DT-CONSTANT.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CHAIR) ST*SYMBOL.ADDRESSES)))) ((MONKEY PROGN
(DT-CONSTANT.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MONKEY) ST*SYMBOL.ADDRESSES)))) ((TALL PROGN
(DT-PREDICATE.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TALL) ST*SYMBOL.ADDRESSES))) (X_6 PROGN (
DT-VARIABLE.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_6) ST*SYMBOL.ADDRESSES))) (IN.ROOM PROGN (
DT-PREDICATE.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IN.ROOM) ST*SYMBOL.ADDRESSES))) (ANIMAL PROGN
(DT-PREDICATE.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANIMAL) ST*SYMBOL.ADDRESSES))) (X_3 PROGN (
DT-VARIABLE.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_3) ST*SYMBOL.ADDRESSES)))) NIL NIL NIL NIL NIL
NIL NIL NIL NIL NIL NIL NIL NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE)
ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY)
ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE
. 1) (FALSE . 2) (X_3 . 3) (ANIMAL . 4) (IN.ROOM . 5) (X_6 . 6) (TALL . 7) (MONKEY . 8) (CHAIR . 9) (BANANA . 10)
(FLOOR . 11) (X_12 . 12) (X_13 . 13) (CLOSE.TO . 14) (CAN.REACH . 15) (X_16 . 16) (X_17 . 17) (ON . 18) (UNDER
. 19) (X_20 . 20) (X_21 . 21) (X_22 . 22) (CAN.MOVE.NEAR . 23) (X_24 . 24) (X_25 . 25) (CAN.CLIMB . 26))))))))STOP
 

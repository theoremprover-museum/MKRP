(COND ((FMT-LOAD " 6-SEP-84 23:13:11" NIL (((* ----- THE MONKEY-BANANA PROBLEM ----) COMMENT COMMENT) ((* (PROBLEM
FORMULATED USING A MANY SORTED LOGIC)) COMMENT COMMENT) ((*) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* THIS IS
ONE OF THE CLASSICAL AI-PROBLEMS. THE SITUATION IS THE) COMMENT COMMENT) ((* FOLLOWING:) COMMENT COMMENT) ((* THERE
ARE A MONKEY, A CHAIR AND A BANANA IN AN ARBITRARY ROOM. THE) COMMENT COMMENT) ((* BANANA IS HANGING DOWN (EG.
FROM THE CEILING) SUCH THAT THE MON-) COMMENT COMMENT) ((* KEY CANNOT REACH IT. BY THIS THE MONKEY MUST USE ITS
BRAIN TO) COMMENT COMMENT) ((* REACH AND EAT THE BANANA SOMEHOW.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* THE
AXIOMS DESCRIBE THE SITUATION.) COMMENT COMMENT) ((* FIRST WE HAVE TO DECLARE THE USE SORTS AND TYPES OF OBJECTS
AND) COMMENT COMMENT) ((* THE OPERATIONS ON THEM) COMMENT COMMENT) ((SORT ANIMAL,TALL :IN.ROOM) (+ 1 NIL) TYPE)
((TYPE MONKEY:ANIMAL) (+ 1 NIL) TYPE) ((TYPE CHAIR:TALL) (+ 1 NIL) TYPE) ((TYPE BANANA,FLOOR :IN.ROOM) (+ 1 NIL)
TYPE) ((TYPE CLOSE.TO (IN.ROOM IN.ROOM)) (+ 1 NIL) TYPE) ((TYPE CAN.REACH (ANIMAL IN.ROOM)) (+ 1 NIL) TYPE) ((TYPE
ON (IN.ROOM IN.ROOM)) (+ 1 NIL) TYPE) ((TYPE UNDER (IN.ROOM IN.ROOM)) (+ 1 NIL) TYPE) ((TYPE CAN.MOVE.NEAR (ANIMAL
IN.ROOM IN.ROOM)) (+ 1 NIL) TYPE) ((TYPE CAN.CLIMB (ANIMAL TALL)) (+ 1 NIL) TYPE) ((* AN ANIMAL CLOSE TO SOMETHING
IN A ROOM CAN REACH THIS THING.) COMMENT COMMENT) ((ALL X:ANIMAL ALL Y:IN.ROOM CLOSE.TO (X Y) IMPL CAN.REACH (X
Y)) (ALL 13 (ALL 14 (IMPL (+ 7 (13 14) NIL) (+ 8 (13 14) NIL)))) QUANTIFICATION) ((* IF SOMETHING TALL IS UNDER
THE BANANA, IT IS CLOSE TO IT.) COMMENT COMMENT) ((ALL X:ANIMAL ALL Y:TALL ON (X Y) AND UNDER (Y BANANA) IMPL CLOSE.TO
(X BANANA)) (ALL 15 (ALL 16 (IMPL (AND (+ 9 (15 16) NIL) (+ 10 (16 5) NIL)) (+ 7 (15 5) NIL)))) QUANTIFICATION)
((* ANIMALS CAN MOVE THINGS CLOSE TO OR UNDER AND CLIMB ON THEM.) COMMENT COMMENT) ((ALL X:ANIMAL ALL Y,Z:IN.ROOM
CAN.MOVE.NEAR (X Y Z) IMPL (CLOSE.TO (Z FLOOR) OR UNDER (Y Z))) (ALL 17 (ALL 19 (ALL 18 (IMPL (+ 11 (17 18 19)
NIL) (OR (+ 7 (19 6) NIL) (+ 10 (18 19) NIL)))))) QUANTIFICATION) ((ALL X:ANIMAL ALL Y:TALL CAN.CLIMB (X Y) IMPL
ON (X Y)) (ALL 20 (ALL 21 (IMPL (+ 12 (20 21) NIL) (+ 9 (20 21) NIL)))) QUANTIFICATION) ((* NOW WE HAVE TO DESCRIBE
THE STARTING POSITION.) COMMENT COMMENT) ((CAN.MOVE.NEAR (MONKEY CHAIR BANANA)) (+ 11 (3 4 5) NIL) QUANTIFICATION)
((NOT CLOSE.TO (BANANA FLOOR)) (NOT (+ 7 (5 6) NIL)) QUANTIFICATION) ((CAN.CLIMB (MONKEY CHAIR)) (+ 12 (3 4) NIL)
QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (10060 10065 10070 10075
10080 10085 10090 10095 10100 10115 10130 10145 10160 10175 10190 10195 10200 10205 10210 10225 10240))) (DATALIST
(QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL
NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL)))
((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 MONKEY ANIMAL (DT*ST-KIND NIL) CONSTANT 5 CHAIR TALL (DT*ST-KIND
NIL) CONSTANT 5 BANANA IN.ROOM (DT*ST-KIND NIL) CONSTANT 5 FLOOR IN.ROOM (DT*ST-KIND NIL) CONSTANT 15 CLOSE.TO
NIL NIL (IN.ROOM IN.ROOM) NIL NIL ((- 7 (POSITIVE))) ((+ 7 (NEGATIVE))) ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 15 CAN.REACH NIL NIL (ANIMAL IN.ROOM) NIL NIL ((- 8 (POSITIVE))) ((+ 8 (NEGATIVE))) ((+ 8 (NIL)))
((- 8 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 ON NIL NIL (IN.ROOM IN.ROOM) NIL NIL ((- 9 (POSITIVE))) ((+
9 (NEGATIVE))) ((+ 9 (NIL))) ((- 9 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 UNDER NIL NIL (IN.ROOM IN.ROOM)
NIL NIL ((- 10 (POSITIVE))) ((+ 10 (NEGATIVE))) ((+ 10 (NIL))) ((- 10 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
15 CAN.MOVE.NEAR NIL NIL (ANIMAL IN.ROOM IN.ROOM) NIL NIL ((- 11 (POSITIVE))) ((+ 11 (NEGATIVE))) ((+ 11 (NIL)))
((- 11 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 CAN.CLIMB NIL NIL (ANIMAL TALL) NIL NIL ((- 12 (POSITIVE)))
((+ 12 (NEGATIVE))) ((+ 12 (NIL))) ((- 12 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANIMAL NIL (ST*DATA NIL
DT*ST-KIND SYS-VAR) VARIABLE 5 IN.ROOM NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANIMAL NIL (ST*DATA NIL
DT*ST-KIND SYS-VAR) VARIABLE 5 TALL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANIMAL NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 IN.ROOM NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 IN.ROOM NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANIMAL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 TALL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE
22 1) (IDIFFERENCE 10240 10055)) MEM*SIZE) (MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ COUNTER1 22) (MAPC
ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1
MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T
(SETQ COUNTER1 22) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND
((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT)))))))
(SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
DATA)))))) (RPAQ MEM*NEXT.RADR (IPLUS 10055 INCREMENT)) (RPAQ MEM*NEXT.VADR 22) (RPAQ MEM*REST (ADD1 (IDIFFERENCE
MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ
DT*SORT.ALL (TALL IN.ROOM ANIMAL ANY)) (RPAQQ DT*SORT.NR 1) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS 
DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS
DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER
0) (RPAQQ DT*CONSTANT.ALL (6 5 4 3)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL
NIL) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ 
DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT 
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (12 11 10
9 8 7 2 1)) (RPAQQ DT*PREDICATE.ALL (12 11 10 9 8 7 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ 
DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES
-ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE
2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)))
(PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED (2 1))))) (PROGN (SETPROPLIST
(QUOTE TALL) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (TALL IN.ROOM ANY) DT*DIRECT.SUPERSORTS (IN.ROOM) DT*MINIMAL.SUBSORTS
(TALL) DT*MAX.SUBSORTS ((TALL TALL) (IN.ROOM TALL) (ANIMAL) (ANY TALL)) DT*TRANSITIVE.CLOSURE (TALL) DT*DIRECT.SUBSORTS
NIL))) (SETPROPLIST (QUOTE IN.ROOM) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (IN.ROOM ANY) DT*DIRECT.SUPERSORTS (ANY)
DT*MINIMAL.SUBSORTS (ANIMAL) DT*MAX.SUBSORTS ((TALL TALL) (IN.ROOM IN.ROOM) (ANIMAL ANIMAL) (ANY IN.ROOM)) 
DT*TRANSITIVE.CLOSURE (TALL ANIMAL IN.ROOM) DT*DIRECT.SUBSORTS (TALL ANIMAL)))) (SETPROPLIST (QUOTE ANIMAL) (QUOTE
(DT*INVERSE.TRANSITIVE.CLOSURE (ANIMAL IN.ROOM ANY) DT*DIRECT.SUPERSORTS (IN.ROOM) DT*MINIMAL.SUBSORTS (ANIMAL)
DT*MAX.SUBSORTS ((TALL) (IN.ROOM ANIMAL) (ANIMAL ANIMAL) (ANY ANIMAL)) DT*TRANSITIVE.CLOSURE (ANIMAL) DT*DIRECT.SUBSORTS
NIL))) (SETPROPLIST (QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS
(ANIMAL) DT*MAX.SUBSORTS ((TALL TALL) (IN.ROOM IN.ROOM) (ANIMAL ANIMAL) (ANY ANY)) DT*TRANSITIVE.CLOSURE (TALL
ANIMAL IN.ROOM ANY) DT*DIRECT.SUBSORTS (IN.ROOM)))))) (RPAQQ ST*STACK1 (NIL NIL NIL NIL NIL ((X_21 PROGN (
DT-VARIABLE.DELETE 21) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) ST*SYMBOL.ADDRESSES))) (X_20 PROGN (
DT-VARIABLE.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_20) ST*SYMBOL.ADDRESSES)))) ((X_19 PROGN (
DT-VARIABLE.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_19) ST*SYMBOL.ADDRESSES))) (X_18 PROGN (
DT-VARIABLE.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18) ST*SYMBOL.ADDRESSES))) (IN.ROOM 
DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE IN.ROOM) (QUOTE (ANY))) (IN.ROOM PUTPROP (QUOTE IN.ROOM) (QUOTE NIL)) (X_17
PROGN (DT-VARIABLE.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17) ST*SYMBOL.ADDRESSES)))) NIL ((X_16
PROGN (DT-VARIABLE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES))) (X_15 PROGN
(DT-VARIABLE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_15) ST*SYMBOL.ADDRESSES)))) NIL ((X_14 PROGN
(DT-VARIABLE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES))) (IN.ROOM 
DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE IN.ROOM) (QUOTE (ANY))) (IN.ROOM PUTPROP (QUOTE IN.ROOM) (QUOTE NIL)) (X_13
PROGN (DT-VARIABLE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_13) ST*SYMBOL.ADDRESSES)))) NIL ((CAN.CLIMB
PROGN (DT-PREDICATE.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CAN.CLIMB) ST*SYMBOL.ADDRESSES)))) ((
CAN.MOVE.NEAR PROGN (DT-PREDICATE.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CAN.MOVE.NEAR) 
ST*SYMBOL.ADDRESSES))) (IN.ROOM DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE IN.ROOM) (QUOTE (ANY))) (IN.ROOM PUTPROP
(QUOTE IN.ROOM) (QUOTE NIL)) (IN.ROOM DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE IN.ROOM) (QUOTE (ANY))) (IN.ROOM
PUTPROP (QUOTE IN.ROOM) (QUOTE NIL))) ((UNDER PROGN (DT-PREDICATE.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE UNDER) ST*SYMBOL.ADDRESSES))) (IN.ROOM DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE IN.ROOM) (QUOTE (ANY))) (IN.ROOM
PUTPROP (QUOTE IN.ROOM) (QUOTE NIL)) (IN.ROOM DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE IN.ROOM) (QUOTE (ANY))) (IN.ROOM
PUTPROP (QUOTE IN.ROOM) (QUOTE NIL))) ((ON PROGN (DT-PREDICATE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
ON) ST*SYMBOL.ADDRESSES))) (IN.ROOM DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE IN.ROOM) (QUOTE (ANY))) (IN.ROOM PUTPROP
(QUOTE IN.ROOM) (QUOTE NIL)) (IN.ROOM DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE IN.ROOM) (QUOTE (ANY))) (IN.ROOM
PUTPROP (QUOTE IN.ROOM) (QUOTE NIL))) ((CAN.REACH PROGN (DT-PREDICATE.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE CAN.REACH) ST*SYMBOL.ADDRESSES))) (IN.ROOM DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE IN.ROOM) (QUOTE (ANY)))
(IN.ROOM PUTPROP (QUOTE IN.ROOM) (QUOTE NIL))) ((CLOSE.TO PROGN (DT-PREDICATE.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE CLOSE.TO) ST*SYMBOL.ADDRESSES))) (IN.ROOM DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE IN.ROOM) (QUOTE
(ANY))) (IN.ROOM PUTPROP (QUOTE IN.ROOM) (QUOTE NIL)) (IN.ROOM DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE IN.ROOM)
(QUOTE (ANY))) (IN.ROOM PUTPROP (QUOTE IN.ROOM) (QUOTE NIL))) ((FLOOR PROGN (DT-CONSTANT.DELETE 6) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FLOOR) ST*SYMBOL.ADDRESSES))) (BANANA PROGN (DT-CONSTANT.DELETE 5) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BANANA) ST*SYMBOL.ADDRESSES))) (IN.ROOM DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE
IN.ROOM) (QUOTE (ANY))) (IN.ROOM PUTPROP (QUOTE IN.ROOM) (QUOTE NIL))) ((CHAIR PROGN (DT-CONSTANT.DELETE 4) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CHAIR) ST*SYMBOL.ADDRESSES)))) ((MONKEY PROGN (DT-CONSTANT.DELETE 3) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MONKEY) ST*SYMBOL.ADDRESSES)))) ((TALL PROGN (DT-SORT.ST.REMOVE (QUOTE TALL))
(RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TALL) ST*SYMBOL.ADDRESSES))) (TALL REMPROP (QUOTE TALL) (QUOTE ST*DATA))
(ANIMAL PROGN (DT-SORT.ST.REMOVE (QUOTE ANIMAL)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANIMAL) ST*SYMBOL.ADDRESSES))
) (ANIMAL REMPROP (QUOTE ANIMAL) (QUOTE ST*DATA)) (IN.ROOM PROGN (DT-SORT.ST.REMOVE (QUOTE IN.ROOM)) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IN.ROOM) ST*SYMBOL.ADDRESSES))) (IN.ROOM REMPROP (QUOTE IN.ROOM) (QUOTE ST*DATA)))
NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL
(ANY . T) (TRUE . 1) (FALSE . 2) (IN.ROOM . T) (ANIMAL . T) (TALL . T) (MONKEY . 3) (CHAIR . 4) (BANANA . 5) (FLOOR
. 6) (CLOSE.TO . 7) (CAN.REACH . 8) (ON . 9) (UNDER . 10) (CAN.MOVE.NEAR . 11) (CAN.CLIMB . 12) (X_13 . 13) (X_14
. 14) (X_15 . 15) (X_16 . 16) (X_17 . 17) (X_18 . 18) (X_19 . 19) (X_20 . 20) (X_21 . 21))))))))STOP
 

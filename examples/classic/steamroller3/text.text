;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-

List Of All Option-Areas And Their Options
  For each option the default value ,the allowed option-values and an
  explanation of their effects on the proof-search is printed below. 

TWO    (Options to apply the (two-literal-) rules)

TWO_RULES                               (Default value: NIL)
the (two-literal) rule clause algorithm is
  switched on by   t/y/yes
  switched on by   partial  with less rules allowed.
  switched off by  nil/n/no

TWO_RULES.MAXLEVEL                      (Default value: 1)
  nat. number   the rule graph is completed up to level n.

TWO_SUPPRESS.NORULES                    (Default value: NIL)
the rule graph generates norules for the graph:
  switched on by   t/y/yes
  switched off by  nil/n/no




RED.I    (Options for various reductionrules in initial graph.)

RED.I_CLAUSE.MULTIPLE.LITERALS          (Default value: T)
   removal of multiple literals:
 t/y/yes    switched on.
 nil/n/no   switched off.

RED.I_CLAUSE.PURITY                     (Default value: P)
   Treatment of initial pure clauses:
 t/y/yes     Removal of the clauses.
 p/partial   Removal only if no equations are in the clauses.
 nil/n/no    No removal.

RED.I_CLAUSE.TAUTOLOGY                  (Default value: T)
   treatment of initial tautology-clauses:
 t/y/yes   removal of the clauses.
 nil/n/no    no removal.

RED.I_CLAUSE.TAUTOLOGY.RECHECK          (Default value: PARTIAL)
   renewed tautology check upon link insertion:
 partial/p   switched on for incident clauses.
 nil/n/no  switched off.

RED.I_CLAUSE.SUBSUMPTION                (Default value: T)
   treatment of initial subsumed clauses:
 t/y/yes   removal of the clauses.
 nil/n/no    no removal.

RED.I_CLAUSE.SUBSUMPTION.RECHECK        (Default value: PARTIAL)
   renewed subsumption check upon link insertion:
 partial/p   switched on for incident clauses.
 nil/n/nein  switched off.

RED.I_CLAUSE.REPL.FACTORING             (Default value: T)
   substitution of replacement factors for initial clauses:
 t/y/yes     switched on.
 nil/n/no    switched off.

RED.I_CLAUSE.REPL.FACTORING.RECHECK     (Default value: T)
   renewed check for replacement factoring upon link insertion:
 t/j/ja      switched on.
 nil/n/nein  switched off.

RED.I_CLAUSE.REPL.RESOLUTION            (Default value: SIMPLE)
   substitution of replacement resolvents for initial clauses:
 generalizing/g   one of the resolution literals is replaced by more
                  general of the other clause.
 simple/s     switched on, only for one step, without generalizing.
 unit/u       switched on for unit partner only.
 nil/n/no     switched off.

RED.I_CLAUSE.REPL.RESOLUTION.RECHECK    (Default value: T)
   renewed check for replacement resolution upon link insertion:
 t/y/yes     switched on.
 nil/n/no    switched off.

RED.I_CLAUSE.REWRITING                  (Default value: DEM)
 t/y/yes      Replacement by rewrite rules switched on.
 def          Elimination of constant and function symbols by rewritng initial
              clauses only.
 demodulation Demodulation rules only.
 nil/n/no     Switched off.

RED.I_LINK.INCOMPATIBILITY              (Default value: T)
   treatment of initial incompatibility links:
 t/y/yes     removal of the links.
 nil/n/no    no removal.

RED.I_LINK.TAUTOLOGY                    (Default value: REMOVE-INHIBIT)
   treatment of initial tautology links:
 t/y/yes      removal of the links without link condition check.
 remove-inhibit/ri  removal of the links complying with the link
                    condition. inhibition of the others.
 inhibit/i    inhibition of the links.
 remove/r     removal of the links complying with the link
        condition.
 nil/n/no     no removal, no inhibition.

RED.I_LINK.TAUTOLOGY.RECHECK            (Default value: NIL)
   renewed link tautology check upon link removal:
 t/y/yes   switched on.
 nil/n/no  switched off.

RED.I_LINK.SUBSUMPTION                  (Default value: REMOVE-INHIBIT)
   Treatment of initial subsumed links:
 t/y/yes      Removal of the links without link condition check.
 remove-inhibit/ri  Removal of the links complying with the link
                    condition. Inhibition of the others.
 inhibit/i    Inhibition of the links.
 remove/r     Removal of the links complying with the link
        condition.
 nil/n/no     No removal, no inhibition.

RED.I_LINK.SUBSUMPTION.RECHECK          (Default value: NIL)
   Renewed link subsumption check upon link removal:
 t/y/yes   switched on.
 nil/n/no  switched off.




RED.D    (Options for various reductionrules during deduction.)

RED.D_CLAUSE.MULTIPLE.LITERALS          (Default value: T)
   removal of multiple literals in deduced clauses:
 t/y/yes    switched on.
 nil/n/no   switched off.

RED.D_CLAUSE.PURITY                     (Default value: P)
   Treatment of deduced purity clauses:
 t/y/yes     Removal of the clauses.
 p/partial   Removal only if no equations are in the clauses.
 nil/n/no    No removal.

RED.D_CLAUSE.TAUTOLOGY                  (Default value: REMOVE-INHIBIT)
   Treatment of deduced tautology clauses:
 T/Y/YES      Removal of the clauses without link condition check.
 REMOVE-INHIBIT/RI  Removal of the clauses. where link condition is met,
                    reinsertion and inhibition of creator links.
 INHIBIT/I    Removal of the clauses as well as reinsertion and
              inhibition of creator links.
 REMOVE/R     Removal of the links complying with the link
              condition.
 NIL/N/NO     No removal, no inhibition.

RED.D_CLAUSE.TAUTOLOGY.RECHECK          (Default value: NIL)
   Renewed tautology check upon link removal and insertion:
 t/y/yes     switched on for insertion and removal.
 partial/p   switched on for insertion of incident links.
 nil/n/no    switched off.

RED.D_CLAUSE.SUBSUMPTION.FORWARD        (Default value: REMOVE-INHIBIT)
   Treatment of deduced subsumed clauses.
 t/y/yes    removal of the clauses without link condition check.
 remove-inhibit/ri  in case of deduced subsumed clause, removal of the
        clause. if link condition is met reinsertion and
        inhibitation of creator link.
 inhibit/i    removal of the clauses as well as reinsertion and
        inhibition of creator links.
 remove/r     removal of the clauses complying with the link
        condition.
 nil/n/no     no removal, no inhibition.

RED.D_CLAUSE.SUBSUMPTION.BACKWARD       (Default value: REMOVE)
   treatment of clauses, subsumed by deduced clauses:
 t/y/yes    removal of the clauses without link condition check.
 remove/r     removal of the clauses complying with the link
        condition.
 nil/n/no     no removal, no inhibition.

RED.D_CLAUSE.SUBSUMPTION.RECHECK        (Default value: NIL)
   renewed subsumption check upon link removal and insertion:
 t/y/yes   switched on for insertion and removal.
 partial/p   switched on for insertion of incident links.
 nil/n/nein  switched off.

RED.D_CLAUSE.REPL.FACTORING             (Default value: T)
   substitution of replacement factors for deduced clauses:
 t,yes,y   switched on.
 nil/n/no    switched off.

RED.D_CLAUSE.REPL.FACTORING.RECHECK     (Default value: T)
   renewed check for replacement factoring upon link insertion:
 t/j/ja    switched on.
 nil/n/nein  switched off.

RED.D_CLAUSE.REPL.RESOLUTION            (Default value: SIMPLE)
   substitution of clauses by replacement resolvents:
 generalizing/g   one of the resolution literals is replaced by more
        general of the other clause.
 simple/s     switched on, only for one step, without generalizing.
 unit/u     switched on for unit partner only.
 nil/n/no     switched off.

RED.D_CLAUSE.REPL.RESOLUTION.RECHECK    (Default value: T)
   renewed check for replacement resolution upon link insertion:
 t/y/yes   switched on.
 nil/n/no    switched off.

RED.D_CLAUSE.REWRITING                  (Default value: DEM)
 t/y/yes      Replacement by rewrite rules switched on.
 def          Elimination of constant and function symbols by rewritng initial
              clauses only.
 demodulation Demodulation rules only.
 nil/n/no     Switched off.

RED.D_LINK.INCOMPATIBILITY              (Default value: T)
   treatment of deduced incompatibility links:
 t/y/yes   removal of the links.
 nil/n/no    no removal.

RED.D_LINK.TAUTOLOGY                    (Default value: REMOVE-INHIBIT)
   treatment of deduced tautology links:
 t/y/yes    removal of the links without link condition check.
 remove-inhibit/ri  removal of the links complying with the link
        condition. inhibition of the others.
 inhibit/i    inhibition of the links.
 remove/r     removal of the links complying with the link
        condition.
 nil/n/no     no removal, no inhibition.

RED.D_LINK.TAUTOLOGY.RECHECK            (Default value: NIL)
   renewed link tautology check upon link removal and insertion:
 t/y/yes   switched on for removal and insertion.
 partial/p   switched on for insertion of adjacent links.
 nil/n/no  switched off.

RED.D_LINK.SUBSUMPTION                  (Default value: REMOVE-INHIBIT)
   treatment of deduced subsumed links:
 t/y/yes    removal of links without link condition check.
 remove-inhibit/ri  removal of the links complying with the link
        condition. inhibition of the others.
 inhibit/i    inhibition of the links.
 remove/r     removal of the links complying with the link
        condition.
 nil/n/no     no removal, no inhibition.

RED.D_LINK.SUBSUMPTION.RECHECK          (Default value: NIL)
   renewed link subsumption check upon link removal and insertion:
 t/y/yes   switched on for removal and insertion.
 partial/p   switched on for insertion of adjacent links
 nil/n/no  switched off.




STR    (Options to direct the searching-behaviour while looking for a proof.)

FAC_INITIAL                             (Default value: NIL)
  factorizing the initial graph :
  t/y/yes  switched on,
  nil/n/no   switched off.

FAC_EACH.STEP                           (Default value: NIL)
    faktorizing the resolvents and paramodulants :
  t/y/yes      switched on,
  nil/n/no     switched off.

STR_RESOLUTION                          (Default value: SET-OF-SUPPORT)
Available strategies are
basic-resolution            (basic b)
set-of-support              (sos s)
unit-refutation             (unit u)
induction-special           (i-s)
linear                      (l linear.axm## linear.thm## l.axm## l.thm##)
u-b   means unit or basic
u-sos means unit or sos
u-l   means unit or linear  (u-l u-l.axm## u-l.thm##)

STR_PAR-RES                             (Default value: 10)
Controls the relation between paramodulation steps and resolution steps for the
strategy heuristic-completion in ER_PARAMODULATION.
The bigger the value the more paramodulations are performed.
The value randes from 1 to 20.

STR_LINK.DEPTH                          (Default value: NIL)
n/no/nil or positive integer
        upper bound for link depth (nil = unbounded)

STR_TERM.DEPTH                          (Default value: NIL)
n/no/nil or positive integer
        upper bound for term nesting depth (nil = unbounded)

STR_FINITE.DOMAIN                       (Default value: T)
 t/y/yes   Special way of handling finite domains,
           which are defined via clauses X=A1, X=A2, ..., X=AN.
 n/nil/no  Normal control.

STR_SORT.LITERALS                       (Default value: NIL)
 t/y/yes   Special way of handling sorts using sort literals.
 n/nil/no  Normal sorts.

TERM_UNITS                              (Default value: T)
t/y/yes       patterns leading to unit clauses found by the terminator
              are processed.
nil/n/no      patterns are ignored.

TERM_ITERATIONS                         (Default value: 0)
integer   >=0      number of terminator iterations. 0 = fast search.

TERM_SET.OF.SUPPORT                     (Default value: NIL)
nil/n/no           pure unit resolution
t/y/yes            superposition of unit resolution and set of support

TERM_BREADTH.FIRST                      (Default value: NIL)
t/y/yes          Pure breadth first search.
nil/n/no         The basic search strategy of the terminator is used
                 (similiar to the usual linear strategies).




ER    (Options to control the built in equality resoning procedure.)

ER_PARAMODULATION                       (Default value: HEURISTIC-COMPLETION)
    Choosing the paramodulation-strategy :
  heuristic-completion Paramodulation is only done to generate rewrite rules from
                       critical pairs.
  Kapur-Zhang          Strategy corresponding to CADE 88, Ordering is the same as
                       for HC strategy.
  equality-reasoning-machine    A compiling version of the equality handling is used.
                       Sorts and terminator don't work correct for this option.
                       Startegy corresponding to Bachmair/Ganzinger CADE 90,
                       Ordering is the same as for HC strategy.

ER_COMPLETION                           (Default value: UNFAILING)
   Selection of completion strategy:
  ignoring     If undirectable equations occur they are ignored
  failing      If undirectable equations occur the proof is aborted
  unfailing    If undirectable equations occur they are used in both
               directions and demodulation can be done with instances of
               them.
  constant-congruence If undirectable equations occur they are reduced
               considering variables as constants.

ER_CP.REDUCTION                         (Default value: T)
nil/n/nein         Critical pairs are not reduced, i.e. no preview on the rewriting
                   of links.
t/j/ja             Critical pairs i.e. links are kept interreduced.
In HEURISTIC-COMPLETION case only P- and PIW-links are considered, in the others
R-links are considered too.

ER_ORDERING                             (Default value: LEXICOGRAPHIC-RECURSIVE-PATH)
   Selection of the reduction ordering
  For all orderings 0, 1, minus, plus, mult are hardwired in the
  corresponding option ordering option.
  Knuth-Bendix          Usual Knuth Bendix ordering.
  Knuth-Bendix-Reverse  Counting subterms in reverse order, i.e. left associative.
  Polynomial            Polynomial ordering.
  Recursive-Path        Recursive path ordering, the ordering of the operator is
                        determined according to the knuth bendix weights in
                        ER_KNUTH.BENDIX.WEIGHT.
  Lexicographic-Recursive-Path Usual extension of Recursive Path Ordering.

ER_OPERATOR.ORDERING                    (Default value: (* - + 0 1))
  The operator ordering for all orderings.

ER_KNUTH.BENDIX.WEIGHT                  (Default value: ((+ 1) (* 1) (- 0) (0 1) (1 1)))
  An associationlist associating function and constant names to
  values.
  Default: ((+ 1) (* 1) (- 0) (0 1) (1 1))

ER_POLYNOMIAL.VARIABLES                 (Default value: (X Y Z U V W))
  The list of names of the variables in the polynomials.
  The variables are associated in the given order to the subterms of terms.

ER_POLYNOMIAL.WEIGHT                    (Default value: ((+ (+ X (* 2 Y))) (* (+ X (* X Y))) (- (+ (* 2 X) -1)) (0 2) (1 2)))
  Specification of the polynomials for the function symbols and
  the values for the constants in form of an associationlist.

ER_LINK.DEPTH.WEIGHT                    (Default value: 0)
   Weight of depth in search tree when selecting a completion P-Link.
   Number between 0 and 5.

ER_UNIT.FOCUS                           (Default value: 0)
  ER_UNIT.FOCUS * number of literals of the resulting clause
  is added to the heuristic value
  of P-links.

ER_UNIT.FOCUS.WEIGHT                    (Default value: 1)
  1/ER_UNIT.FOCUS.WEIGHT is multiplied with the heuristic value
  of P-Links if the resulting clause is a unit.

ER_EQUATION.FOCUS                       (Default value: 2)
  The bigger ER_EQUATION.FOCUS the more equations are preferred to other predicates.

ER_NARROW.DEPTH                         (Default value: 0)
  Sometimes two literals with opposite sign can be made
  complementary using narrowing, that is paramodulating with
  the actually existing rewrite rules.
  This parameter determines the look ahead for such
  paramodulations on non equality literals.
  This option can only be switched on if the narrow subsystem
  is loaded (see manual).

ER_NARROW.NEXT                          (Default value: DEPTH)
    Determines how the heuristic is computed that decides which equation in the
    narrow-tree is inspected next:
  :DEPTH  the depth of the narrow-step.
  :EQ     the number of symbols in the equation.
  :CLAUSE the number of symbols in the equation and the additional literals.
  :TAU    the number of symbols in the substitution that instantiates the
          original equation to the actual one.
  :ALL    the sum of :DEPTH and :EQ.
  :TRICK  allows to use an own function (USER:NAR=TRICK).

ER_NARROW.TEST                          (Default value: (NORM C DELTA SL N))
    choosing the narrowing-strategy and -tests :
  :NORM   normal-narrowing, normalisation after each narrow-step.
  :C      commutative-narrowing.
  :N      normalisation-test, successful if the substitution that instantiates
          the original equation to the actual one is reducible.
  :DELTA  delta-test, successful if the substitution of a narrow-step from one
          equation has been computed for another narrow-step before.
  :SL     sufficient-large-test, successful if a non-basic occurrence is reducible.

ER_COMPILE                              (Default value: NIL)
  NIL            Single non compiled rules are used for rewriting.
  1 - 1000       Specifies the number of steps after which
                 the single rewrite rules are compiled.
  tree-interpreter A tree is constructed for each function symbol
                 and dynamically updated if when deleting and inserting rules.
  always-tree-compile These trees are newly compiled to Lisp after
                 each dynamical change.
  canonical-tree-compile The trees are only compiled once, when it
                 is clear wether the system of rules is canonical.




GEN    (various general options, not belonging to any other option-area.)

GEN_SPLITTING                           (Default value: 0)
    And-split of theorem :
  nil/n/no     Switched off.
  nat number   Switched on.  Maximal nesting depth up to
               which multiplication into dnf takes place
               in order to enable splitting.
  t/y/yes      Switched on. Multiplication in all nesting
               depths.

GEN_PRESIMPLIFICATION                   (Default value: T)
   Removing obviously true and false components and
   expanding definitions.
  nil/n/no     Switched off.
  partial/p    Switched on only the removal of obviously true and false components.
  t/y/yes      Switched on.

GEN_MIN.EXPRESSION.LENGTH.FOR.FILE      (Default value: NIL)
    Usage of a file to store the splitparts:
nil/n/no   Store in main memory.
t/y/yes    Store in file.
nat number If expression resulting from normalization is longer
           than this number, store in file, els in main memory.

GEN_MIN.EXPRESSION.SIZE.FOR.FILE        (Default value: NIL)
    Usage of a file to store the splitparts:
nil/n/no   Store in main memory.
t/y/yes    Store in file.
nat number If expression resulting from normalization is larger
           than this number, store in file, els in main memory.

GEN_MANUAL.CONTROL                      (Default value: NIL)
    influence of user on proof :
  t/y/yes      switched on,
  nil/n/no     switched off.

GEN_MAXIMUM.STEPS                       (Default value: NIL)
  positive integer   (nil means 'infinite')
    this is the maximum number of deduction-steps of a proof.

GEN_GRAPH.SAVING                        (Default value: NIL)
  nil   _  no effect.
  positive interger _   number of deduction-steps between two
                        savings of the graph (see gen_save.file).

GEN_SAVE.FILE                           (Default value: SAVEDEFAULT)
  <filename>           system saves graph on this file (if
                       gen_graph.saving not nil ])

GEN_LISP.GARBAGE.COLLECTION             (Default value: NIL)
    switch on the lisp garbage collector before address space becomes low.
    t/y/yse        eingeschaltet.
    nil/n/no       ausgeschaltet.

GEN_COMMON.LISP                         (Default value: NIL)
    Says whether to use pure Common Lisp.
    t/y/yes        Use pure Common Lisp.
    nil/n/no       Use SYMBOLICS features (editor options).




TR    (options for various program traces.)

TR_PREPROCESSING                        (Default value: NIL)
    trace of the intermediate results of the preprocessors
  t/y/yes        switched on
  nil/n/no       switched off

TR_STEP.MODE                            (Default value: LR)
    trace of each deductionstep
  nil/n/no       no trace is done
  i/impl         detailed implementational protocol of all changes
                 (clauses and links)
  l/log          protocol of all changes in a more logical form
                 (clauses)
  lr             same as under l, additionally variables are renamed

TR_DUMP                                 (Default value: NIL)
    dump of the current graph after certain intervals
  nil/n/no        no dump is done
  pos. integer    number of deduction-steps between two subsequent dumps

TR_CLAUSE.MODE                          (Default value: I)
    format of the output of clauses if tr_dump is set
  nil/n/no      no output at all
  i/impl        output is i]plementational
  l/log         logical output
  lr            same as under l, additionally variables are renamed

TR_LINK.MODE                            (Default value: I)
    format of the output of links if tr_dump is set
  nil/n/no      no output at all
  i/impl        output is implementational

TR_TRACE.FILE                           (Default value: NIL)
    outputfile for traces and dumps
  nil/n/no      no output at all
  t/terminal    output on terminal
  <file>        output on <file>

TR_TERMINAL                             (Default value: T)
    brief information about the proof displayed on terminnal
    (in addition to the displyed statistics)
  nil/n/no      switched off
  t/y/yes       switched on




PR    (options to select from different proof-protocols.)

PR_LATEX                                (Default value: NIL)
   The protocol is written in a latex readable way
   The program automatically selects widths and heights of characters
   and formulae parts.
    t/y/yes        switched on
    nil/n/no       switched off

PR_INFIX.FORM                           (Default value: T)
  infix form of input formulae in protocol :
    t/y/yes        switched on
    nil/n/no       switched off

PR_PREFIX.FORM                          (Default value: NIL)
 prefix form of input formulae in protocol :
    t/y/yes        switched on
    nil/n/no       switched off

PR_OPTIONS                              (Default value: NIL)
  values of proof options in protocol :
    t/y/yes        switched on
    nil/n/no       switched off

PR_AXIOM.CLAUSES                        (Default value: T)
   axiom clauses in protocol :
    t/y/yes        switched on
    nil/n/no       switched off

PR_SYMBOLS                              (Default value: NIL)
   symbol table in protocol :
    t/y/yes        switched on
    nil/n/no       switched off

PR_DIRECT.PROOF                         (Default value: T)
    t/j/ja         Only steps leading to proof
    nil/n/nein          All proof steps
  are written onto the list file.

PR_VARIABLE.PRINT.NAMES                 (Default value: (X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW))
  Alte Namen: Dieselben Namen werden verwendet
              wie waehrend der Beweissuche
  Neue Namen: Neue Namen werden verwendet,
              die in jeder Klausel durchnumeriert sind
  Other:      Eine Liste von Symbolen oder Strings, die als
              Variablennamen verwendet werden sollen
     default: (x y z u v w xx yy zz uu vv ww xxx yyy zzz uuu vvv www)

PR_STATISTICS                           (Default value: NIL)
   statistics at the end of each split part :
    t/y/yes        switched on
    nil/n/no       switched off

PR_PROTOCOL                             (Default value: T)
    Raw data for the protocol is written on file.
    t/y/yes     switched on
    nil/n/no    switched off

PR_LEFT.MARGIN                          (Default value: 3)
   First position to be printed in each line :

PR_RIGHT.MARGIN                         (Default value: 117)
   First position to be printed in each line

PR_LINELENGTH                           (Default value: 114)
  number of characters per line :

PR_LITERALS                             (Default value: NIL)
    Protocol assignment of literals in clauses to atoms in original input formulae.
    t/y/yes     switched on
    nil/n/no    switched off





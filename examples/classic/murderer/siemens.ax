(COND ((FMT-LOAD " 6-SEP-84 23:14:34" NIL (((MAN (THEO) AND MAN (DIETER) AND MAN (FRIEDRICH)) (AND (+ 4 (3) NIL)
(AND (+ 4 (5) NIL) (+ 4 (6) NIL))) QUANTIFICATION) ((NOT (MAN (SABINE) OR MAN (MECHTHILD) OR MAN (NINA))) (NOT
(OR (+ 4 (7) NIL) (OR (+ 4 (8) NIL) (+ 4 (9) NIL)))) QUANTIFICATION) ((LEFT (THEO) AND LEFT (SABINE) AND LEFT (DIETER))
(AND (+ 10 (3) NIL) (AND (+ 10 (7) NIL) (+ 10 (5) NIL))) QUANTIFICATION) ((NOT (LEFT (MECHTHILD) OR LEFT (NINA)
OR LEFT (FRIEDRICH))) (NOT (OR (+ 10 (8) NIL) (OR (+ 10 (9) NIL) (+ 10 (6) NIL)))) QUANTIFICATION) ((RELATED (THEO
SABINE) AND RELATED (THEO MECHTHILD)) (AND (+ 11 (3 7) NIL) (+ 11 (3 8) NIL)) QUANTIFICATION) ((RELATED (NINA DIETER)
AND RELATED (NINA FRIEDRICH)) (AND (+ 11 (9 5) NIL) (+ 11 (9 6) NIL)) QUANTIFICATION) ((NOT RELATED (THEO NINA))
(NOT (+ 11 (3 9) NIL)) QUANTIFICATION) ((ALL X,Y,Z RELATED (X Y) AND RELATED (Y Z) IMPL RELATED (X Z)) (ALL 14
(ALL 13 (ALL 12 (IMPL (AND (+ 11 (12 13) NIL) (+ 11 (13 14) NIL)) (+ 11 (12 14) NIL))))) QUANTIFICATION) ((SYMMETRIC
(RELATED)) (+ 1 NIL) PROPERTY) ((KILLED (FRIEDRICH DIETER) OR KILLED (FRIEDRICH NINA) OR KILLED (FRIEDRICH MECHTHILD)
OR KILLED (FRIEDRICH SABINE) OR KILLED (FRIEDRICH THEO) OR KILLED (DIETER FRIEDRICH) OR KILLED (DIETER NINA) OR
KILLED (DIETER MECHTHILD) OR KILLED (DIETER SABINE) OR KILLED (DIETER THEO) OR KILLED (NINA FRIEDRICH) OR KILLED
(NINA DIETER) OR KILLED (NINA MECHTHILD) OR KILLED (NINA SABINE) OR KILLED (NINA THEO) OR KILLED (MECHTHILD FRIEDRICH)
OR KILLED (MECHTHILD DIETER) OR KILLED (MECHTHILD NINA) OR KILLED (MECHTHILD SABINE) OR KILLED (MECHTHILD THEO)
OR KILLED (SABINE FRIEDRICH) OR KILLED (SABINE DIETER) OR KILLED (SABINE NINA) OR KILLED (SABINE MECHTHILD) OR
KILLED (SABINE THEO) OR KILLED (THEO FRIEDRICH) OR KILLED (THEO DIETER) OR KILLED (THEO NINA) OR KILLED (THEO MECHTHILD)
OR KILLED (THEO SABINE)) (OR (+ 15 (6 5) NIL) (OR (+ 15 (6 9) NIL) (OR (+ 15 (6 8) NIL) (OR (+ 15 (6 7) NIL) (OR
(+ 15 (6 3) NIL) (OR (+ 15 (5 6) NIL) (OR (+ 15 (5 9) NIL) (OR (+ 15 (5 8) NIL) (OR (+ 15 (5 7) NIL) (OR (+ 15
(5 3) NIL) (OR (+ 15 (9 6) NIL) (OR (+ 15 (9 5) NIL) (OR (+ 15 (9 8) NIL) (OR (+ 15 (9 7) NIL) (OR (+ 15 (9 3)
NIL) (OR (+ 15 (8 6) NIL) (OR (+ 15 (8 5) NIL) (OR (+ 15 (8 9) NIL) (OR (+ 15 (8 7) NIL) (OR (+ 15 (8 3) NIL) (OR
(+ 15 (7 6) NIL) (OR (+ 15 (7 5) NIL) (OR (+ 15 (7 9) NIL) (OR (+ 15 (7 8) NIL) (OR (+ 15 (7 3) NIL) (OR (+ 15
(3 6) NIL) (OR (+ 15 (3 5) NIL) (OR (+ 15 (3 9) NIL) (OR (+ 15 (3 8) NIL) (+ 15 (3 7) NIL))))))))))))))))))))))))))))))
QUANTIFICATION) ((IRREFLEXIVE (KILLED)) (+ 1 NIL) PROPERTY) ((ALL X,Y KILLED (X Y) AND RELATED (X Y) IMPL MAN (X))
(ALL 17 (ALL 16 (IMPL (AND (+ 15 (16 17) NIL) (+ 11 (16 17) NIL)) (+ 4 (16) NIL)))) QUANTIFICATION) ((ALL X,Y KILLED
(X Y) AND NOT RELATED (X Y) IMPL LEFT (X)) (ALL 19 (ALL 18 (IMPL (AND (+ 15 (18 19) NIL) (NOT (+ 11 (18 19) NIL)))
(+ 10 (18) NIL)))) QUANTIFICATION) ((ALL X,Y KILLED (X Y) AND ((LEFT (X) AND LEFT (Y)) OR (NOT LEFT (X) AND NOT
LEFT (Y))) IMPL MAN (Y)) (ALL 21 (ALL 20 (IMPL (AND (+ 15 (20 21) NIL) (OR (AND (+ 10 (20) NIL) (+ 10 (21) NIL))
(AND (NOT (+ 10 (20) NIL)) (NOT (+ 10 (21) NIL))))) (+ 4 (21) NIL)))) QUANTIFICATION) ((ALL X,Y KILLED (X Y) AND
((LEFT (X) AND NOT LEFT (Y)) OR (NOT LEFT (X) AND LEFT (Y))) IMPL NOT MAN (Y)) (ALL 23 (ALL 22 (IMPL (AND (+ 15
(22 23) NIL) (OR (AND (+ 10 (22) NIL) (NOT (+ 10 (23) NIL))) (AND (NOT (+ 10 (22) NIL)) (+ 10 (23) NIL)))) (NOT
(+ 4 (23) NIL))))) QUANTIFICATION) ((ALL X,Y KILLED (X Y) AND ((MAN (X) AND MAN (Y)) OR (NOT MAN (X) AND NOT MAN
(Y))) IMPL NOT LEFT (X)) (ALL 25 (ALL 24 (IMPL (AND (+ 15 (24 25) NIL) (OR (AND (+ 4 (24) NIL) (+ 4 (25) NIL))
(AND (NOT (+ 4 (24) NIL)) (NOT (+ 4 (25) NIL))))) (NOT (+ 10 (24) NIL))))) QUANTIFICATION) ((ALL X,Y KILLED (X
Y) AND ((MAN (X) AND NOT MAN (Y)) OR (NOT MAN (X) AND MAN (Y))) IMPL LEFT (Y)) (ALL 27 (ALL 26 (IMPL (AND (+ 15
(26 27) NIL) (OR (AND (+ 4 (26) NIL) (NOT (+ 4 (27) NIL))) (AND (NOT (+ 4 (26) NIL)) (+ 4 (27) NIL)))) (+ 10 (27)
NIL)))) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (10050 10055 10060
10065 10070 10075 10080 10085 10090 10095 10100 10105 10120 10125 10130 10135 10150 10165 10170 10175 10180 10185
10190 10205 10210 10225 10240))) (DATALIST (QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))
) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE)))
((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 THEO ANY (DT*ST-KIND NIL) CONSTANT
15 MAN NIL NIL (ANY) NIL NIL ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE))) ((+ 4 (NIL))) ((- 4 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 5 DIETER ANY (DT*ST-KIND NIL) CONSTANT 5 FRIEDRICH ANY (DT*ST-KIND NIL) CONSTANT 5 SABINE ANY (DT*ST-KIND
NIL) CONSTANT 5 MECHTHILD ANY (DT*ST-KIND NIL) CONSTANT 5 NINA ANY (DT*ST-KIND NIL) CONSTANT 15 LEFT NIL NIL (ANY)
NIL NIL ((- 10 (POSITIVE))) ((+ 10 (NEGATIVE))) ((+ 10 (NIL))) ((- 10 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
15 RELATED NIL NIL (ANY ANY) (SYMMETRIC) NIL ((- 11 (POSITIVE . SYMMETRIC))) ((+ 11 (NEGATIVE . SYMMETRIC))) ((+
11 (NIL . SYMMETRIC))) ((- 11 (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 15 KILLED NIL NIL (ANY ANY) (IRREFLEXIVE) NIL ((- 15 (POSITIVE))) ((+ 15 (NEGATIVE))) ((+ 15 (NIL))) ((-
15 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE
MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE 28 1) (IDIFFERENCE 10240 10045)) MEM*SIZE)
(MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ COUNTER1 28) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA
MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA
(DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 28) (MAPC ADDRLIST (FUNCTION
(LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR)
((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC
DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR
(IPLUS 10045 INCREMENT)) (RPAQ MEM*NEXT.VADR 28) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR)))
(RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR
1) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE
DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ 
DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (9 8 7 6 5 3)) (RPAQQ DT*ABBREVIATIONS
NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL NIL) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE))
(RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS
(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC 
ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE))
(RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ
DT*NONEQUALITY.PREDICATES (15 11 10 4 2 1)) (RPAQQ DT*PREDICATE.ALL (15 11 10 4 2 1)) (RPAQQ 
DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES
DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))
(RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ 
DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++))) (PROGN) (PROGN (SETPROPLIST (QUOTE 
DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (IRREFLEXIVE (15))))) (PROGN (SETPROPLIST (QUOTE ANY) (QUOTE (
DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY ANY))
DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ ST*STACK1 (NIL ((X_27 PROGN (DT-VARIABLE.DELETE
27) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_27) ST*SYMBOL.ADDRESSES))) (X_26 PROGN (DT-VARIABLE.DELETE 26)
(RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_26) ST*SYMBOL.ADDRESSES)))) ((X_25 PROGN (DT-VARIABLE.DELETE 25) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_25) ST*SYMBOL.ADDRESSES))) (X_24 PROGN (DT-VARIABLE.DELETE 24) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_24) ST*SYMBOL.ADDRESSES)))) ((X_23 PROGN (DT-VARIABLE.DELETE 23) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_23) ST*SYMBOL.ADDRESSES))) (X_22 PROGN (DT-VARIABLE.DELETE 22) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_22) ST*SYMBOL.ADDRESSES)))) ((X_21 PROGN (DT-VARIABLE.DELETE 21) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) ST*SYMBOL.ADDRESSES))) (X_20 PROGN (DT-VARIABLE.DELETE 20) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_20) ST*SYMBOL.ADDRESSES)))) ((X_19 PROGN (DT-VARIABLE.DELETE 19) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_19) ST*SYMBOL.ADDRESSES))) (X_18 PROGN (DT-VARIABLE.DELETE 18) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18) ST*SYMBOL.ADDRESSES)))) ((X_17 PROGN (DT-VARIABLE.DELETE 17) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17) ST*SYMBOL.ADDRESSES))) (X_16 PROGN (DT-VARIABLE.DELETE 16) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES)))) ((KILLED PROG1 NIL (DT-PREDICATE.PUTSORT 15
(QUOTE (ANY ANY))) (DT-PREDICATE.PUT.ATTRIBUTES 15 (QUOTE NIL))) (KILLED PROG1 NIL (DT-PUTPROP 15 (QUOTE NIL))
(DT-PUTPROP 15 (QUOTE NIL)))) ((KILLED PROGN (DT-PREDICATE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
KILLED) ST*SYMBOL.ADDRESSES)))) ((RELATED PROG1 NIL (DT-PREDICATE.PUTSORT 11 (QUOTE (ANY ANY))) (
DT-PREDICATE.PUT.ATTRIBUTES 11 (QUOTE NIL))) (RELATED PROG1 NIL (DT-PUTPROP 11 (QUOTE NIL)) (DT-PUTPROP 11 (QUOTE
NIL)))) ((X_14 PROGN (DT-VARIABLE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES)))
(X_13 PROGN (DT-VARIABLE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_13) ST*SYMBOL.ADDRESSES))) (X_12
PROGN (DT-VARIABLE.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_12) ST*SYMBOL.ADDRESSES)))) NIL NIL
((RELATED PROGN (DT-PREDICATE.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE RELATED) ST*SYMBOL.ADDRESSES))))
NIL ((LEFT PROGN (DT-PREDICATE.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE LEFT) ST*SYMBOL.ADDRESSES))))
((NINA PROGN (DT-CONSTANT.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NINA) ST*SYMBOL.ADDRESSES))) (MECHTHILD
PROGN (DT-CONSTANT.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MECHTHILD) ST*SYMBOL.ADDRESSES))) (SABINE
PROGN (DT-CONSTANT.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SABINE) ST*SYMBOL.ADDRESSES)))) ((FRIEDRICH
PROGN (DT-CONSTANT.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FRIEDRICH) ST*SYMBOL.ADDRESSES))) (DIETER
PROGN (DT-CONSTANT.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE DIETER) ST*SYMBOL.ADDRESSES))) (MAN PROGN
(DT-PREDICATE.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MAN) ST*SYMBOL.ADDRESSES))) (THEO PROGN (
DT-CONSTANT.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE THEO) ST*SYMBOL.ADDRESSES)))) ((FALSE PROGN (
DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (
DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (
DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP
(QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (THEO . 3) (MAN
. 4) (DIETER . 5) (FRIEDRICH . 6) (SABINE . 7) (MECHTHILD . 8) (NINA . 9) (LEFT . 10) (RELATED . 11) (X_12 . 12)
(X_13 . 13) (X_14 . 14) (KILLED . 15) (X_16 . 16) (X_17 . 17) (X_18 . 18) (X_19 . 19) (X_20 . 20) (X_21 . 21) (X_22
. 22) (X_23 . 23) (X_24 . 24) (X_25 . 25) (X_26 . 26) (X_27 . 27))))))))STOP
 

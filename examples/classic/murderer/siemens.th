(COND ((FMT-LOAD " 6-SEP-84 23:14:46" NIL (((KILLED (SABINE DIETER)) (+ 15 (7 5) NIL) QUANTIFICATION))) (COND (
ST*LOAD.FLAG (PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (10050 10055 10060 10065 10070 10075 10080 10085
10090 10095 10100 10105 10120 10125 10130 10135 10150 10165 10170 10175 10180 10185 10190 10205 10210 10225 10240)))
(DATALIST (QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
NIL NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+
2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 THEO ANY (DT*ST-KIND NIL) CONSTANT 15 MAN NIL NIL
(ANY) NIL NIL ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE))) ((+ 4 (NIL))) ((- 4 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
5 DIETER ANY (DT*ST-KIND NIL) CONSTANT 5 FRIEDRICH ANY (DT*ST-KIND NIL) CONSTANT 5 SABINE ANY (DT*ST-KIND NIL)
CONSTANT 5 MECHTHILD ANY (DT*ST-KIND NIL) CONSTANT 5 NINA ANY (DT*ST-KIND NIL) CONSTANT 15 LEFT NIL NIL (ANY) NIL
NIL ((- 10 (POSITIVE))) ((+ 10 (NEGATIVE))) ((+ 10 (NIL))) ((- 10 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
RELATED NIL NIL (ANY ANY) (SYMMETRIC) NIL ((- 11 (POSITIVE . SYMMETRIC))) ((+ 11 (NEGATIVE . SYMMETRIC))) ((+ 11
(NIL . SYMMETRIC))) ((- 11 (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 15 KILLED NIL NIL (ANY ANY) (IRREFLEXIVE) NIL ((- 15 (POSITIVE))) ((+ 15 (NEGATIVE))) ((+ 15 (NIL))) ((-
15 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE
MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE 28 1) (IDIFFERENCE 10240 10045)) MEM*SIZE)
(MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ COUNTER1 28) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA
MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA
(DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 28) (MAPC ADDRLIST (FUNCTION
(LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR)
((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC
DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR
(IPLUS 10045 INCREMENT)) (RPAQ MEM*NEXT.VADR 28) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR)))
(RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR
1) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE
DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ 
DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (9 8 7 6 5 3)) (RPAQQ DT*ABBREVIATIONS
NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL NIL) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE))
(RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS
(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC 
ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE))
(RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ
DT*NONEQUALITY.PREDICATES (15 11 10 4 2 1)) (RPAQQ DT*PREDICATE.ALL (15 11 10 4 2 1)) (RPAQQ 
DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES
DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))
(RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ 
DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++))) (PROGN) (PROGN (SETPROPLIST (QUOTE 
DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (IRREFLEXIVE (15))))) (PROGN (SETPROPLIST (QUOTE ANY) (QUOTE (
DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY ANY))
DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ ST*STACK1 (NIL NIL NIL)) (RPAQQ ST*SYMBOL.ADDRESSES
(NIL (ANY . T) (TRUE . 1) (FALSE . 2) (THEO . 3) (MAN . 4) (DIETER . 5) (FRIEDRICH . 6) (SABINE . 7) (MECHTHILD
. 8) (NINA . 9) (LEFT . 10) (RELATED . 11) (X_12 . 12) (X_13 . 13) (X_14 . 14) (KILLED . 15) (X_16 . 16) (X_17
. 17) (X_18 . 18) (X_19 . 19) (X_20 . 20) (X_21 . 21) (X_22 . 22) (X_23 . 23) (X_24 . 24) (X_25 . 25) (X_26 . 26)
(X_27 . 27))))))))STOP
 

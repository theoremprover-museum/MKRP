;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(COND ((FMT-LOAD "27-NOV-1987 00:45"
  NIL
  (((ALL X1,X2,X3,X4,X5,X6 R (X1 X2 X3 X4 X5 X6) IMPL R (X3 X2 X1 X4 X5 X6))
  (ALL 7
   (ALL 6
    (ALL 5 (ALL 4 (ALL 3 (ALL 2 (IMPL (+ 8 (2 3 4 5 6 7) NIL) (+ 8 (4 3 2 5 6 7) NIL))))))))
  QUANTIFICATION)
 ((ALL X1,X2,X3,X4,X5,X6 R (X1 X2 X3 X4 X5 X6) IMPL R (X4 X5 X6 X1 X2 X3))
  (ALL 14
   (ALL 13
    (ALL 12
     (ALL 11 (ALL 10 (ALL 9 (IMPL (+ 8 (9 10 11 12 13 14) NIL) (+ 8 (12 13 14 9 10 11) NIL)))))
     )))
  QUANTIFICATION)
 ((ALL X1,X2,X3,X4,X5,X6,X7,Y1,Y2,Y3,Y4,Y5 R (X1 X2 X3 X4 X5 X6) AND R (X7 Y1 Y2 Y3 Y4 Y5)
   IMPL R (X1 X2 X3 Y3 Y4 Y5))
  (ALL 26
   (ALL 25
    (ALL 24
     (ALL 23
      (ALL 22
       (ALL 21
        (ALL 20
         (ALL 19
          (ALL 18
           (ALL 17
            (ALL 16
             (ALL 15
              (IMPL
               (AND (+ 8 (15 16 17 18 19 20) NIL)
                    (+ 8 (21 22 23 24 25 26) NIL))
               (+ 8 (15 16 17 24 25 26) NIL))))))))))))))
  QUANTIFICATION)
 ((ALL X,Y,Z,U R (X Y Z U Z U) IMPL R (X Y U X Y U))
  (ALL 30
   (ALL 29 (ALL 28 (ALL 27 (IMPL (+ 8 (27 28 29 30 29 30) NIL) (+ 8 (27 28 30 27 28 30) NIL))))
    ))
  QUANTIFICATION)
 ((ALL X,Y,Z,V,U R (X Y Z Y U V) IMPL (EX W R (X U W Z W V)))
  (ALL 35
   (ALL 34
    (ALL 33
     (ALL 32
      (ALL 31 (IMPL (+ 8 (31 32 33 32 35 34) NIL) (EX 36 (+ 8 (31 35 36 33 36 34) NIL))))))))
  QUANTIFICATION)
 ((ALL X,Y,Z,V,U R (X Y Z U V Z) IMPL (EX W R (X W V U W Y)))
  (ALL 41
   (ALL 40
    (ALL 39
     (ALL 38
      (ALL 37 (IMPL (+ 8 (37 38 39 41 40 39) NIL) (EX 42 (+ 8 (37 42 40 41 42 38) NIL))))))))
  QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(219759 219764 219769 219774 219779 219784 219789 219794 219799 219804 219809 219814
          219819 219824 219829 219834 219839 219844 219849 219854 219859 219864 219869 219874
          219879 219884 219889 219894 219899 219904 219909 219914 219919 219924 219939 219944
          219949 219954 219959 219964 219969 219984 219999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "R" NIL NIL (ANY ANY ANY ANY ANY ANY)
          NIL NIL ((- 8 (POSITIVE))) ((+ 8 (NEGATIVE))) ((+ 8 (NIL))) ((- 8 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY
          NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE))
       (INCREMENT (- MEM*SIZE 220000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 220000)
             (SETQ COUNTER1 43)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 220000)
                 (MEM-INITIALIZE 220000))
               (SETQ COUNTER1 43)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (COND ((> MEM*SIZE 220000) (SETQ MEM*NEXT.RADR (+ 219754 INCREMENT)))
            (T (SETQ MEM*NEXT.RADR 219754)))
      (SETQ MEM*NEXT.VADR 43)
      (SETQ MEM*REST (1+ (- MEM*NEXT.RADR MEM*NEXT.VADR)))
      (SETQ MEM*FIRST.REUSABLE.VADR NIL)
      (SETQ MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL '(ANY))
       (SETQ DT*SORT.NR '2)
       (SETQ DT*SORT.PROPERTIES
              '(DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE
                DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS
                DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))
       (SETQ DT*SORT.COMMON.COMPUTE.FLAG 'NIL)
       (SETQ DT*VARIABLE.COUNTER '0)
       (SETQ DT*CONSTANT.COUNTER '0)
       (SETQ DT*CONSTANT.ALL 'NIL)
       (SETQ DT*ABBREVIATIONS 'NIL)
       (SETQ DT*FUNCTION.COUNTER '0)
       (SETQ DT*FUNCTION.ALL 'NIL)
       (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES '(ASSOCIATIVE))
       (SETQ DT*FUNCTION.ACTUAL.THEORIES 'NIL)
       (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES 'NIL)
       (SETQ DT*FUNCTION.COMPONENTS
              '(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST
                SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
       (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES '(SYMMETRIC DEFINED REFLEXIVE))
       (SETQ DT*PREDICATE.COUNTER '0)
       (SETQ DT*EQUALITY.SYMBOLS '("=" ":=" "=:" ":=:"))
       (SETQ DT*EQUALITY.PREDICATES 'NIL)
       (SETQ DT*NONEQUALITY.PREDICATES '(8 1 0))
       (SETQ DT*PREDICATE.ALL '(8 1 0))
       (SETQ DT*PREDICATE.WITH.ATTRIBUTES 'NIL)
       (SETQ DT*PREDICATE.COMPONENTS
              '(PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES
                REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES
                -TOTHERSIDES))
       (SETQ DT*TRUE.PREDICATE '0)
       (SETQ DT*FALSE.PREDICATE '1)
       (SETQ DT*UNI.CREATES.VARIABLES 'NIL)
       (SETQ DT*SIGN.MINUS.SYMBOLS '(- --))
       (SETQ DT*SIGN.PLUS.SYMBOLS '(+ ++))
       (SETQ DT*SYMBOL.KINDS '(CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET 'ANY 'DT*SORT.NUMBER) '1)
              (SETF (GET 'ANY 'DT*DIRECT.SUBSORTS) 'NIL)
              (SETF (GET 'ANY 'DT*TRANSITIVE.CLOSURE) '(ANY))
              (SETF (GET 'ANY 'DT*MAX.SUBSORTS) '((ANY ANY)))
              (SETF (GET 'ANY 'DT*MINIMAL.SUBSORTS) '(ANY))
              (SETF (GET 'ANY 'DT*DIRECT.SUPERSORTS) 'NIL)
              (SETF (GET 'ANY 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY)))) (PROGN (SETQ ST*STACK1 ST*STACK1)
       (SETQ ST*SYMBOL.ADDRESSES
              '(NIL (ANY . T) (TRUE . 0) (FALSE . 1) (X_2 . 2) (X_3 . 3) (X_4 . 4) (X_5 . 5)
                (X_6 . 6) (X_7 . 7) (R . 8) (X_9 . 9) (X_10 . 10) (X_11 . 11) (X_12 . 12)
                (X_13 . 13) (X_14 . 14) (X_15 . 15) (X_16 . 16) (X_17 . 17) (X_18 . 18)
                (X_19 . 19) (X_20 . 20) (X_21 . 21) (X_22 . 22) (X_23 . 23) (X_24 . 24)
                (X_25 . 25) (X_26 . 26) (X_27 . 27) (X_28 . 28) (X_29 . 29) (X_30 . 30)
                (X_31 . 31) (X_32 . 32) (X_33 . 33) (X_34 . 34) (X_35 . 35) (X_36 . 36)
                (X_37 . 37) (X_38 . 38) (X_39 . 39) (X_40 . 40) (X_41 . 41) (X_42 . 42))))))))
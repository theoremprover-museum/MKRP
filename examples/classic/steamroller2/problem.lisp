;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((EX X1,X2,X3,X4,X5,X6 WOLF (X1) AND FOX (X2) AND BIRD (X3) AND CATERPILLAR (X4) AND SNAIL (X5) AND GRAIN (X6)) (ALL X (WOLF (X) OR FOX (X) OR BIRD (X) OR CATERPILLAR (X) OR SNAIL (X)) IMPL ANIMAL (X)) (ALL X GRAIN (X) IMPL PLANT (X)) (ALL X ANIMAL (X) IMPL (ALL Y PLANT (Y) IMPL EATS (X Y)) OR (ALL Y ANIMAL (Y) AND SMALLER (Y X) AND (EX Z PLANT (Z) AND EATS (Y Z)) IMPL EATS (X Y))) (ALL X,Y (CATERPILLAR (X) OR SNAIL (X)) AND BIRD (Y) IMPL SMALLER (X Y)) (ALL X,Y BIRD (X) AND FOX (Y) IMPL SMALLER (X Y)) (ALL X,Y FOX (X) AND WOLF (Y) IMPL SMALLER (X Y)) (ALL X,Y (FOX (X) OR GRAIN (X)) AND WOLF (Y) IMPL NOT EATS (Y X)) (ALL X,Y BIRD (X) AND CATERPILLAR (Y) IMPL EATS (X Y)) (ALL X,Y BIRD (X) AND SNAIL (Y) IMPL NOT EATS (X Y)) (ALL X (CATERPILLAR (X) OR SNAIL (X)) IMPL (EX Y PLANT (Y) AND EATS (X Y))))) (QUOTE ((EX 8 (EX 7 (EX 6 (EX 5 (EX 4 (EX 3 (AND (+ 9 (3) NIL) (AND (+ 10 (4) NIL) (AND (+ 11 (5) NIL) (AND (+ 12 (6) NIL) (AND (+ 13 (7) NIL) (+ 14 (8) NIL)))))))))))) (ALL 15 (IMPL (OR (+ 9 (15) NIL) (OR (+ 10 (15) NIL) (OR (+ 11 (15) NIL) (OR (+ 12 (15) NIL) (+ 13 (15) NIL))))) (+ 16 (15) NIL))) (ALL 17 (IMPL (+ 14 (17) NIL) (+ 18 (17) NIL))) (ALL 19 (IMPL (+ 16 (19) NIL) (OR (ALL 20 (IMPL (+ 18 (20) NIL) (+ 21 (19 20) NIL))) (ALL 22 (IMPL (AND (+ 16 (22) NIL) (AND (+ 23 (22 19) NIL) (EX 24 (AND (+ 18 (24) NIL) (+ 21 (22 24) NIL))))) (+ 21 (19 22) NIL)))))) (ALL 26 (ALL 25 (IMPL (AND (OR (+ 12 (25) NIL) (+ 13 (25) NIL)) (+ 11 (26) NIL)) (+ 23 (25 26) NIL)))) (ALL 28 (ALL 27 (IMPL (AND (+ 11 (27) NIL) (+ 10 (28) NIL)) (+ 23 (27 28) NIL)))) (ALL 30 (ALL 29 (IMPL (AND (+ 10 (29) NIL) (+ 9 (30) NIL)) (+ 23 (29 30) NIL)))) (ALL 32 (ALL 31 (IMPL (AND (OR (+ 10 (31) NIL) (+ 14 (31) NIL)) (+ 9 (32) NIL)) (NOT (+ 21 (32 31) NIL))))) (ALL 34 (ALL 33 (IMPL (AND (+ 11 (33) NIL) (+ 12 (34) NIL)) (+ 21 (33 34) NIL)))) (ALL 36 (ALL 35 (IMPL (AND (+ 11 (35) NIL) (+ 13 (36) NIL)) (NOT (+ 21 (35 36) NIL))))) (ALL 37 (IMPL (OR (+ 12 (37) NIL) (+ 13 (37) NIL)) (EX 38 (AND (+ 18 (38) NIL) (+ 21 (37 38) NIL))))))) (QUOTE ((EX X,Y (ANIMAL (X) AND ANIMAL (Y) AND (EATS (X Y) AND (EX Z (GRAIN (Z) AND EATS (Y Z)))))))) (QUOTE ((EX 40 (EX 39 (AND (+ 16 (39) NIL) (AND (+ 16 (40) NIL) (AND (+ 21 (39 40) NIL) (EX 41 (AND (+ 14 (41) NIL) (+ 21 (40 41) NIL)))))))))) (QUOTE ("Edit:     Axioms and Theorems edited: 12-JUL,1990 22:30 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(59664 59669 59674 59679 59684 59689 59694 59699 59704 59709 59714 59719 59724 59729
          59734 59739 59744 59749 59764 59769 59784 59789 59794 59809 59814 59829 59834 59849
          59864 59879 59894 59909 59924 59929 59934 59939 59944 59949 59954 59969 59984
          59999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC)))
          ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "WOLF" NIL NIL (ANY) NIL NIL
          ((- 9 (POSITIVE))) ((+ 9 (NEGATIVE))) ((+ 9 (NIL))) ((- 9 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "FOX" NIL NIL (ANY) NIL NIL ((- 10 (POSITIVE)))
          ((+ 10 (NEGATIVE))) ((+ 10 (NIL))) ((- 10 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          15 "BIRD" NIL NIL (ANY) NIL NIL ((- 11 (POSITIVE))) ((+ 11 (NEGATIVE)))
          ((+ 11 (NIL))) ((- 11 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "CATERPILLAR"
          NIL NIL (ANY) NIL NIL ((- 12 (POSITIVE))) ((+ 12 (NEGATIVE))) ((+ 12 (NIL)))
          ((- 12 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "SNAIL" NIL NIL (ANY) NIL NIL
          ((- 13 (POSITIVE))) ((+ 13 (NEGATIVE))) ((+ 13 (NIL))) ((- 13 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "GRAIN" NIL NIL (ANY) NIL NIL ((- 14 (POSITIVE)))
          ((+ 14 (NEGATIVE))) ((+ 14 (NIL))) ((- 14 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "ANIMAL" NIL NIL (ANY) NIL
          NIL ((- 16 (POSITIVE))) ((+ 16 (NEGATIVE))) ((+ 16 (NIL))) ((- 16 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15
          "PLANT" NIL NIL (ANY) NIL NIL ((- 18 (POSITIVE))) ((+ 18 (NEGATIVE))) ((+ 18 (NIL)))
          ((- 18 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "EATS" NIL NIL (ANY ANY) NIL NIL ((- 21 (POSITIVE))) ((+ 21 (NEGATIVE)))
          ((+ 21 (NIL))) ((- 21 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "SMALLER" NIL NIL (ANY ANY) NIL NIL
          ((- 23 (POSITIVE))) ((+ 23 (NEGATIVE))) ((+ 23 (NIL))) ((- 23 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY
          NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 60000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 60000)
             (SETQ COUNTER1 42)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 60000)
                 (MEM-INITIALIZE 60000))
               (SETQ COUNTER1 42)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 60000) (+ 59659 INCREMENT) 59659))
      (SETQ MEM*NEXT.VADR 42
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ANY))) (SETQ DT*SORT.NR (QUOTE 2)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE NIL)) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE NIL)) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (23 21 18 16 14 13 12 11 10 9 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (23 21 18 16 14 13 12 11 10 9 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
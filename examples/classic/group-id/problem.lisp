;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((TYPE SUBSET (SET SET)) (TYPE MEMBER (ELEMENT SET)) (TYPE GROUP (SET)) (TYPE ID (SET) : ELEMENT) (ALL X,Y : SET SUBSET (X Y) IMPL (ALL Z : ELEMENT (MEMBER (Z X) IMPL MEMBER (Z Y)))) (TYPE * (ELEMENT ELEMENT) : ELEMENT) (ASSOCIATIVE (*)) (TYPE - (ELEMENT) : ELEMENT) (ALL G : SET ALL X : ELEMENT GROUP (G) AND MEMBER (X G) IMPL * (- (X) X) = ID (G)) (ALL G : SET GROUP (G) IMPL MEMBER (ID (G) G)) (TYPE A : SET) (TYPE B : SET))) (QUOTE ((+ 0 NIL) (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) (ALL 8 (ALL 7 (IMPL (+ 3 (7 8) NIL) (ALL 9 (IMPL (+ 4 (9 7) NIL) (+ 4 (9 8) NIL)))))) (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) (ALL 12 (ALL 13 (IMPL (AND (+ 5 (12) NIL) (+ 4 (13 12) NIL)) (+ 2 ((10 (11 13) 13) (6 12)) NIL)))) (ALL 14 (IMPL (+ 5 (14) NIL) (+ 4 ((6 14) 14) NIL))) (+ 0 NIL) (+ 0 NIL))) (QUOTE ((GROUP (A) AND GROUP (B) AND SUBSET (A B) IMPL ID (A) = ID (B)))) (QUOTE ((IMPL (AND (+ 5 (15) NIL) (AND (+ 5 (16) NIL) (+ 3 (15 16) NIL))) (+ 2 ((6 15) (6 16)) NIL)))) (QUOTE ("Edit:     Axioms and Theorems edited: 19-FEB,1990 17:26 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(9832 9837 9842 9847 9852 9866 9880 9885 9890 9895 9909 9924 9939 9954 9969 9984 9999)
        )
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC)))
          ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "SUBSET" NIL NIL (SET SET) NIL NIL
          ((- 3 (POSITIVE))) ((+ 3 (NEGATIVE))) ((+ 3 (NIL))) ((- 3 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "MEMBER" NIL NIL (ELEMENT SET) NIL NIL
          ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE))) ((+ 4 (NIL))) ((- 4 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "GROUP" NIL NIL (SET) NIL NIL ((- 5 (POSITIVE)))
          ((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14
          "ID" NIL ELEMENT (SET) NIL NIL NIL NIL NIL 1 ELEMENT (DT*ST-KIND NIL) FUNCTION 5 SET
          NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 "*" (ASSOCIATIVE) ELEMENT
          (ELEMENT ELEMENT) NIL NIL NIL NIL NIL 2 ELEMENT (DT*ST-KIND NIL) FUNCTION 14 "-" NIL
          ELEMENT (ELEMENT) NIL NIL NIL NIL NIL 1 ELEMENT (DT*ST-KIND NIL) FUNCTION 5 SET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 SET "A" (DT*ST-KIND NIL) CONSTANT 5 SET "B" (DT*ST-KIND NIL) CONSTANT))
       (INCREMENT (- MEM*SIZE 10000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 10000)
             (SETQ COUNTER1 17)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 10000)
                 (MEM-INITIALIZE 10000))
               (SETQ COUNTER1 17)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9827 INCREMENT) 9827))
      (SETQ MEM*NEXT.VADR 17
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ELEMENT SET ANY))) (SETQ DT*SORT.NR (QUOTE 4)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (16 15))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE (11 10 6))) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (5 4 3 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (5 4 3 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ELEMENT) (QUOTE DT*SORT.NUMBER)) (QUOTE 3)) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ELEMENT))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ELEMENT ELEMENT) (SET) (ANY ELEMENT)))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ELEMENT))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ELEMENT)))) (PROGN (SETF (GET (QUOTE SET) (QUOTE DT*SORT.NUMBER)) (QUOTE 2)) (SETF (GET (QUOTE SET) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE SET) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (SET))) (SETF (GET (QUOTE SET) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ELEMENT) (SET SET) (ANY SET)))) (SETF (GET (QUOTE SET) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (SET))) (SETF (GET (QUOTE SET) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE SET) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY SET)))) (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (ELEMENT SET))) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY ELEMENT SET))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ELEMENT ELEMENT) (SET SET) (ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (SET))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
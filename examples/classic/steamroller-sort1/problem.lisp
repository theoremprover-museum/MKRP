;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((SORT WOLF,FOX,BIRD,CATERPILLAR,SNAIL : ANIMAL) (SORT GRAIN : PLANT) (ALL X : ANIMAL (ALL Y : PLANT EATS (X Y)) OR (ALL Y : ANIMAL SMALLER (Y X) AND (EX Z : PLANT EATS (Y Z)) IMPL EATS (X Y))) (ALL X : CATERPILLAR ALL Y : BIRD SMALLER (X Y)) (ALL X : SNAIL ALL Y : BIRD SMALLER (X Y)) (ALL X : BIRD ALL Y : FOX SMALLER (X Y)) (ALL X : FOX ALL Y : WOLF SMALLER (X Y)) (ALL X : FOX ALL Y : WOLF NOT EATS (Y X)) (ALL X : GRAIN ALL Y : WOLF NOT EATS (Y X)) (ALL X : BIRD ALL Y : CATERPILLAR EATS (X Y)) (ALL X : BIRD ALL Y : SNAIL NOT EATS (X Y)) (ALL X : CATERPILLAR EX Y : PLANT EATS (X Y)) (ALL X : SNAIL EX Y : PLANT EATS (X Y)))) (QUOTE ((+ 0 NIL NIL) (+ 0 NIL NIL) (ALL 3 (OR (ALL 4 (+ 5 (3 4) NIL)) (ALL 6 (IMPL (AND (+ 7 (6 3) NIL) (EX 8 (+ 5 (6 8) NIL))) (+ 5 (3 6) NIL))))) (ALL 9 (ALL 10 (+ 7 (9 10) NIL))) (ALL 11 (ALL 12 (+ 7 (11 12) NIL))) (ALL 13 (ALL 14 (+ 7 (13 14) NIL))) (ALL 15 (ALL 16 (+ 7 (15 16) NIL))) (ALL 17 (ALL 18 (NOT (+ 5 (18 17) NIL)))) (ALL 19 (ALL 20 (NOT (+ 5 (20 19) NIL)))) (ALL 21 (ALL 22 (+ 5 (21 22) NIL))) (ALL 23 (ALL 24 (NOT (+ 5 (23 24) NIL)))) (ALL 25 (EX 26 (+ 5 (25 26) NIL))) (ALL 27 (EX 28 (+ 5 (27 28) NIL))))) (QUOTE ((ALL X,Y : ANIMAL ALL Z : GRAIN EATS (X Y) AND EATS (Y Z)))) (QUOTE ((ALL 30 (ALL 29 (ALL 31 (AND (+ 5 (29 30) NIL) (+ 5 (30 31) NIL))))))) (QUOTE ("Edit:     Axioms and Theorems edited: 09-JUL,1991 10:42 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(9794 9799 9804 9809 9814 9819 9824 9829 9834 9839 9844 9849 9854 9859 9864 9869 9874
          9879 9884 9889 9894 9899 9904 9909 9924 9929 9944 9949 9954 9969 9984 9999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC)))
          ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANIMAL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 PLANT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "EATS" NIL NIL
          (ANY ANY) NIL NIL ((- 5 (POSITIVE))) ((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANIMAL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "SMALLER" NIL NIL (ANY ANY) NIL NIL ((- 7 (POSITIVE))) ((+ 7 (NEGATIVE)))
          ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 PLANT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CATERPILLAR NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 BIRD NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 SNAIL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 BIRD NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 BIRD NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 FOX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 FOX NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 WOLF NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 FOX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 WOLF NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 GRAIN NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 WOLF NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 BIRD NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CATERPILLAR NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 BIRD NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 SNAIL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CATERPILLAR NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PLANT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SNAIL NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PLANT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANIMAL NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANIMAL NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 GRAIN NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 10000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 10000)
             (SETQ COUNTER1 32)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 10000)
                 (MEM-INITIALIZE 10000))
               (SETQ COUNTER1 32)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9789 INCREMENT) 9789))
      (SETQ MEM*NEXT.VADR 32
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (PLANT GRAIN SNAIL CATERPILLAR BIRD FOX ANIMAL WOLF ANY))) (SETQ DT*SORT.NR (QUOTE 10)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*ELEMENT.PREDICATE (QUOTE NIL)) (SETQ DT*OMEGA.CONSTANT (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE NIL)) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE NIL)) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (7 5 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (7 5 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE PLANT) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (GRAIN))) (SETF (GET (QUOTE PLANT) (QUOTE DT*SORT.NUMBER)) (QUOTE 9)) (SETF (GET (QUOTE PLANT) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (PLANT GRAIN))) (SETF (GET (QUOTE PLANT) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT PLANT) (GRAIN GRAIN) (SNAIL) (CATERPILLAR) (BIRD) (FOX) (ANIMAL) (WOLF) (ANY PLANT)))) (SETF (GET (QUOTE PLANT) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (PLANT))) (SETF (GET (QUOTE PLANT) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE PLANT) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY PLANT)))) (PROGN (SETF (GET (QUOTE GRAIN) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE GRAIN) (QUOTE DT*SORT.NUMBER)) (QUOTE 8)) (SETF (GET (QUOTE GRAIN) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (GRAIN))) (SETF (GET (QUOTE GRAIN) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT GRAIN) (GRAIN GRAIN) (SNAIL) (CATERPILLAR) (BIRD) (FOX) (ANIMAL) (WOLF) (ANY GRAIN)))) (SETF (GET (QUOTE GRAIN) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (GRAIN))) (SETF (GET (QUOTE GRAIN) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (PLANT))) (SETF (GET (QUOTE GRAIN) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY PLANT GRAIN)))) (PROGN (SETF (GET (QUOTE SNAIL) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE SNAIL) (QUOTE DT*SORT.NUMBER)) (QUOTE 7)) (SETF (GET (QUOTE SNAIL) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (SNAIL))) (SETF (GET (QUOTE SNAIL) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT) (GRAIN) (SNAIL SNAIL) (CATERPILLAR) (BIRD) (FOX) (ANIMAL SNAIL) (WOLF) (ANY SNAIL)))) (SETF (GET (QUOTE SNAIL) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (SNAIL))) (SETF (GET (QUOTE SNAIL) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANIMAL))) (SETF (GET (QUOTE SNAIL) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ANIMAL SNAIL)))) (PROGN (SETF (GET (QUOTE CATERPILLAR) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE CATERPILLAR) (QUOTE DT*SORT.NUMBER)) (QUOTE 6)) (SETF (GET (QUOTE CATERPILLAR) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (CATERPILLAR))) (SETF (GET (QUOTE CATERPILLAR) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT) (GRAIN) (SNAIL) (CATERPILLAR CATERPILLAR) (BIRD) (FOX) (ANIMAL CATERPILLAR) (WOLF) (ANY CATERPILLAR)))) (SETF (GET (QUOTE CATERPILLAR) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (CATERPILLAR))) (SETF (GET (QUOTE CATERPILLAR) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANIMAL))) (SETF (GET (QUOTE CATERPILLAR) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ANIMAL CATERPILLAR)))) (PROGN (SETF (GET (QUOTE BIRD) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE BIRD) (QUOTE DT*SORT.NUMBER)) (QUOTE 5)) (SETF (GET (QUOTE BIRD) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (BIRD))) (SETF (GET (QUOTE BIRD) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT) (GRAIN) (SNAIL) (CATERPILLAR) (BIRD BIRD) (FOX) (ANIMAL BIRD) (WOLF) (ANY BIRD)))) (SETF (GET (QUOTE BIRD) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (BIRD))) (SETF (GET (QUOTE BIRD) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANIMAL))) (SETF (GET (QUOTE BIRD) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ANIMAL BIRD)))) (PROGN (SETF (GET (QUOTE FOX) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE FOX) (QUOTE DT*SORT.NUMBER)) (QUOTE 4)) (SETF (GET (QUOTE FOX) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (FOX))) (SETF (GET (QUOTE FOX) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT) (GRAIN) (SNAIL) (CATERPILLAR) (BIRD) (FOX FOX) (ANIMAL FOX) (WOLF) (ANY FOX)))) (SETF (GET (QUOTE FOX) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (FOX))) (SETF (GET (QUOTE FOX) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANIMAL))) (SETF (GET (QUOTE FOX) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ANIMAL FOX)))) (PROGN (SETF (GET (QUOTE ANIMAL) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (SNAIL CATERPILLAR BIRD FOX WOLF))) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*SORT.NUMBER)) (QUOTE 3)) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANIMAL SNAIL CATERPILLAR BIRD FOX WOLF))) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT) (GRAIN) (SNAIL SNAIL) (CATERPILLAR CATERPILLAR) (BIRD BIRD) (FOX FOX) (ANIMAL ANIMAL) (WOLF WOLF) (ANY ANIMAL)))) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (SNAIL CATERPILLAR BIRD FOX WOLF))) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ANIMAL)))) (PROGN (SETF (GET (QUOTE WOLF) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE WOLF) (QUOTE DT*SORT.NUMBER)) (QUOTE 2)) (SETF (GET (QUOTE WOLF) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (WOLF))) (SETF (GET (QUOTE WOLF) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT) (GRAIN) (SNAIL) (CATERPILLAR) (BIRD) (FOX) (ANIMAL WOLF) (WOLF WOLF) (ANY WOLF)))) (SETF (GET (QUOTE WOLF) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (WOLF))) (SETF (GET (QUOTE WOLF) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANIMAL))) (SETF (GET (QUOTE WOLF) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ANIMAL WOLF)))) (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (PLANT ANIMAL))) (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (GRAIN ANY PLANT ANIMAL SNAIL CATERPILLAR BIRD FOX WOLF))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT PLANT) (GRAIN GRAIN) (SNAIL SNAIL) (CATERPILLAR CATERPILLAR) (BIRD BIRD) (FOX FOX) (ANIMAL ANIMAL) (WOLF WOLF) (ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (SNAIL CATERPILLAR BIRD FOX WOLF))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
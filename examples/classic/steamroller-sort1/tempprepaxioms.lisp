;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PROGN (PREP=CREATE.EMPTY.PARTIAL.GRAPH) (PROGN (SETQ TWO*RULES.MAXLEVEL (QUOTE 1)) (SETQ TWO*CONTROL (QUOTE NIL)) (SETQ TWO*SUPPRESS.NORULES (QUOTE NIL)) (SETQ TWO*DIALOG (QUOTE NIL)) (SETQ TWO*EXTERNAL.RULE.COLOURS (QUOTE (R S T))) (SETQ TWO*INTERNAL.RULE.COLOURS (QUOTE (RIW SI SIW TI TIW))) (SETQ TWO*RULES (QUOTE NIL)) (SETQ TWO*ADDED.RULES (QUOTE NIL)) (SETQ TWO*EMPTY.CLAUSE.FOUND (QUOTE NIL)) (SETQ TWO*NEW.RULES (QUOTE NIL)) (SETQ TWO*NORULE.CLAUSES (QUOTE NIL)) (SETQ TWO*TR.RULES (QUOTE NIL)) (SETQ TWO*TR.NORULES (QUOTE NIL))) (PROGN (C "Save expression of reduction.") (SETQ RED*RW_RULES (QUOTE NIL) RDS*RW_ASSIGN (QUOTE NIL) RDS*RW_VARIABLES (QUOTE NIL) RED*RW_RULES.COMPLETION (QUOTE NIL) RED*RW_RULES.UNFAILING (QUOTE ((34 . 1))) RED*GRAPH.ISOLATION (QUOTE T)) (RDS-RULE.PUT (QUOTE RECHECK.INFO) (QUOTE RED*CLAUSE.TAUTOLOGY) (QUOTE NIL)) (RDS-RULE.PUT (QUOTE RECHECK.INFO) (QUOTE RED*CLAUSE.REPL.RESOLUTION.SUBJECT) (QUOTE NIL)) (RDS-RULE.PUT (QUOTE RECHECK.INFO) (QUOTE RED*CLAUSE.SUBSUMPTION.SUBJECT) (QUOTE NIL)) (RDS-RULE.PUT (QUOTE RECHECK.INFO) (QUOTE RED*LINK.SUBSUMPTION.SUBJECT) (QUOTE NIL)) (RDS-RULE.PUT (QUOTE RECHECK.INFO) (QUOTE RED*LINK.TAUTOLOGY) (QUOTE NIL))) (PROGN (PROGN (PROGN (PROGN (DS-RESET) (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (8892 8887 8882 8877 END -102 -101 -100 -99 -98 -97 -96 -95 -94 -93 -92 -91 -90 -89 -88 -87 -86 -85 -84 8910 8928 8946 8964 8982 9000 9018 9036 9054 9072 9090 9108 9126 9144 9162 9270 9275 9280 9285 9290 9326 9331 9367 9372 9408 9413 9418 9454 9459 9464 9500 9505 9510 9546 9551 9556 9592 9597 9602 9638 9643 9648 9684 9689 9694 9730 9735 9740 9776 9781 9814 -83 -31 -30 9786 9819 9800 9824 9829 9834 9839 9844 9849 9854 9859 9864 9869 9874 9879 9884 9889 9894 9899 9904 9909 9924 9929 9944 9949 9954 9969 9984 9999))) (DATALIST (QUOTE (15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE))) ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" ((34 1)) NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) 34 ((- 2 (POSITIVE . SYMMETRIC))) ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANIMAL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PLANT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "EATS" ((67 1 4) (62 1) (60 1) (55 1)) ((67 3) (58 1) (52 1) (49 1)) (ANY ANY) NIL NIL ((- 5 (POSITIVE))) ((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANIMAL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "SMALLER" ((46 1) (43 1) (40 1) (37 1)) ((67 2)) (ANY ANY) NIL NIL ((- 7 (POSITIVE))) ((+ 7 (NEGATIVE))) ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 PLANT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CATERPILLAR NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 BIRD NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SNAIL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 BIRD NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 BIRD NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 FOX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 FOX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 WOLF NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 FOX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 WOLF NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 GRAIN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 WOLF NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 BIRD NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CATERPILLAR NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 BIRD NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SNAIL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CATERPILLAR NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SNAIL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 "F_1" NIL PLANT (CATERPILLAR) NIL NIL NIL NIL NIL 1 PLANT (DT-ST*KIND SYS-FUNCT) FUNCTION 14 "F_2" NIL PLANT (SNAIL) NIL NIL NIL NIL NIL 1 PLANT (DT-ST*KIND SYS-FUNCT) FUNCTION 5 ANY NIL NIL VARIABLE 5 ANY NIL NIL VARIABLE 36 "R.=" AXIOM 0 (28) (28 33) 1 (REFLEXIVITY) NIL NIL ((1) (2)) NIL T + 2 (28 28) (RED*UNFAIL NIL) (28) NIL ATP.MEMORY.NOBIND NIL ATP.MEMORY.NOBIND NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL CLAUSE 5 BIRD NIL NIL VARIABLE 5 CATERPILLAR NIL NIL VARIABLE 36 "A1" AXIOM 0 (10 9) (10 35 9 36) 1 NIL NIL NIL NIL NIL T + 7 (9 10) (INDEX 5) (10 9) (75) ATP.MEMORY.NOBIND NIL ATP.MEMORY.NOBIND NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL CLAUSE 5 BIRD NIL NIL VARIABLE 5 SNAIL NIL NIL VARIABLE 36 "A2" AXIOM 0 (12 11) (12 38 11 39) 1 NIL NIL NIL NIL NIL T + 7 (11 12) (INDEX 6) (12 11) (74) ATP.MEMORY.NOBIND NIL ATP.MEMORY.NOBIND NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL CLAUSE 5 FOX NIL NIL VARIABLE 5 BIRD NIL NIL VARIABLE 36 "A3" AXIOM 0 (14 13) (14 41 13 42) 1 NIL NIL NIL NIL NIL T + 7 (13 14) (INDEX 7) (14 13) (73) ATP.MEMORY.NOBIND NIL ATP.MEMORY.NOBIND NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL CLAUSE 5 WOLF NIL NIL VARIABLE 5 FOX NIL NIL VARIABLE 36 "A4" AXIOM 0 (16 15) (16 44 15 45) 1 NIL NIL NIL NIL NIL T + 7 (15 16) (INDEX 8) (16 15) (72) ATP.MEMORY.NOBIND NIL ATP.MEMORY.NOBIND NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL CLAUSE 5 FOX NIL NIL VARIABLE 5 WOLF NIL NIL VARIABLE 36 "A5" AXIOM 0 (17 18) (17 47 18 48) 1 NIL NIL NIL NIL NIL T - 5 (18 17) (INDEX 9) (17 18) (69) ATP.MEMORY.NOBIND NIL ATP.MEMORY.NOBIND NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL CLAUSE 5 GRAIN NIL NIL VARIABLE 5 WOLF NIL NIL VARIABLE 36 "A6" AXIOM 0 (19 20) (19 50 20 51) 1 NIL NIL NIL NIL NIL T - 5 (20 19) (INDEX 10) (19 20) (76) ATP.MEMORY.NOBIND NIL ATP.MEMORY.NOBIND NIL NIL (79) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL CLAUSE 5 CATERPILLAR NIL NIL VARIABLE 5 BIRD NIL NIL VARIABLE 36 "A7" AXIOM 0 (22 21) (22 53 21 54) 1 NIL NIL NIL NIL NIL T + 5 (21 22) (INDEX 11) (22 21) NIL ATP.MEMORY.NOBIND NIL ATP.MEMORY.NOBIND NIL NIL (78) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL CLAUSE 5 SNAIL NIL NIL VARIABLE 5 BIRD NIL NIL VARIABLE 36 "A8" AXIOM 0 (24 23) (24 56 23 57) 1 NIL NIL NIL NIL NIL T - 5 (23 24) (INDEX 12) (24 23) (68) ATP.MEMORY.NOBIND NIL ATP.MEMORY.NOBIND NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL CLAUSE 5 CATERPILLAR NIL NIL VARIABLE 36 "A9" AXIOM 0 (25) (25 59) 1 NIL NIL NIL NIL NIL T + 5 (25 (32 25)) (INDEX 13) (25) (71) ATP.MEMORY.NOBIND NIL ATP.MEMORY.NOBIND NIL NIL (81) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL CLAUSE 5 SNAIL NIL NIL VARIABLE 36 "A10" AXIOM 0 (27) (27 61) 1 NIL NIL NIL NIL NIL T + 5 (27 (26 27)) (INDEX 14) (27) (70) ATP.MEMORY.NOBIND NIL ATP.MEMORY.NOBIND NIL NIL (80) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL CLAUSE 5 PLANT NIL NIL VARIABLE 5 ANIMAL NIL NIL VARIABLE 5 PLANT NIL NIL VARIABLE 5 ANIMAL NIL NIL VARIABLE 108 "A11" AXIOM 0 (8 6 4 3) (8 63 6 64 4 65 3 66) 4 NIL NIL NIL NIL NIL T + 5 (3 4) (INDEX 1) (4 3) (76) ATP.MEMORY.NOBIND (77) ATP.MEMORY.NOBIND NIL NIL (81 80) NIL NIL NIL NIL (82) NIL NIL NIL NIL NIL NIL T - 7 (6 3) (INDEX 2) (3 6) (75 74 73 72) ATP.MEMORY.NOBIND NIL ATP.MEMORY.NOBIND NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL T - 5 (6 8) (INDEX 3) (8 6) (71 70) ATP.MEMORY.NOBIND (77) ATP.MEMORY.NOBIND NIL NIL (79) NIL NIL NIL NIL (82) NIL NIL NIL NIL NIL NIL NIL + 5 (3 6) (INDEX 4) (6 3) (69 68) ATP.MEMORY.NOBIND NIL ATP.MEMORY.NOBIND NIL NIL (78) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL CLAUSE 18 67 4 1 ((3 23 6 24)) NIL 58 NIL NIL NIL NIL NIL NIL NIL ATP.MEMORY.NOBIND ATP.MEMORY.NOBIND NIL R 18 67 4 1 ((3 18 6 17)) NIL 49 NIL NIL NIL NIL NIL NIL NIL ATP.MEMORY.NOBIND ATP.MEMORY.NOBIND NIL R 18 62 1 3 ((6 27 8 (26 27))) NIL 67 NIL NIL NIL NIL NIL NIL NIL ATP.MEMORY.NOBIND ATP.MEMORY.NOBIND NIL R 18 60 1 3 ((6 25 8 (32 25))) NIL 67 NIL NIL NIL NIL NIL NIL NIL ATP.MEMORY.NOBIND ATP.MEMORY.NOBIND NIL R 18 46 1 2 ((6 15 3 16)) NIL 67 NIL NIL NIL NIL NIL NIL NIL ATP.MEMORY.NOBIND ATP.MEMORY.NOBIND NIL R 18 43 1 2 ((6 13 3 14)) NIL 67 NIL NIL NIL NIL NIL NIL NIL ATP.MEMORY.NOBIND ATP.MEMORY.NOBIND NIL R 18 40 1 2 ((6 11 3 12)) NIL 67 NIL NIL NIL NIL NIL NIL NIL ATP.MEMORY.NOBIND ATP.MEMORY.NOBIND NIL R 18 37 1 2 ((6 9 3 10)) NIL 67 NIL NIL NIL NIL NIL NIL NIL ATP.MEMORY.NOBIND ATP.MEMORY.NOBIND NIL R 18 67 1 1 ((3 20 4 19)) NIL 52 NIL NIL NIL NIL NIL NIL NIL ATP.MEMORY.NOBIND ATP.MEMORY.NOBIND NIL R 18 67 1 3 ((6 66 8 65)) NIL 67 NIL NIL NIL NIL NIL NIL NIL ATP.MEMORY.NOBIND ATP.MEMORY.NOBIND NIL RIW 18 67 4 1 ((3 21 6 22)) NIL 55 NIL NIL NIL NIL NIL NIL NIL ATP.MEMORY.NOBIND ATP.MEMORY.NOBIND NIL S 18 67 3 1 ((6 20 8 19)) NIL 52 NIL NIL NIL NIL NIL NIL NIL ATP.MEMORY.NOBIND ATP.MEMORY.NOBIND NIL S 18 67 1 1 ((3 27 4 (26 27))) NIL 62 NIL NIL NIL NIL NIL NIL NIL ATP.MEMORY.NOBIND ATP.MEMORY.NOBIND NIL S 18 67 1 1 ((3 25 4 (32 25))) NIL 60 NIL NIL NIL NIL NIL NIL NIL ATP.MEMORY.NOBIND ATP.MEMORY.NOBIND NIL S 18 67 1 3 ((6 3 8 4)) NIL 67 NIL NIL NIL NIL NIL NIL NIL ATP.MEMORY.NOBIND ATP.MEMORY.NOBIND NIL TI 5 ANIMAL "C_1" (DT*ST-KIND SYS-CONST) CONSTANT 5 ANIMAL "C_2" (DT*ST-KIND SYS-CONST) CONSTANT 5 ANIMAL "C_3" (DT*ST-KIND SYS-CONST) CONSTANT 5 GRAIN "C_4" (DT*ST-KIND SYS-CONST) CONSTANT))) (INCREMENT (- MEM*SIZE 10000)) COUNTER1) (MEM-RESET) (COND ((> MEM*SIZE 10000) (SETQ COUNTER1 107) (MAPC (FUNCTION (LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) (COND ((EQL RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((EQL (QUOTE END) RADDR) RADDR) ((OR (EQL RADDR 0) (MINUSP RADDR)) RADDR) (T (+ RADDR INCREMENT)))))) ADDRLIST) (SETQ COUNTER1 MEM*SIZE) (MAPC (FUNCTION (LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA))) DATALIST)) (T (UNLESS (= MEM*SIZE 10000) (MEM-INITIALIZE 10000)) (SETQ COUNTER1 107) (MAPC (FUNCTION (LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))) ADDRLIST) (SETQ COUNTER1 MEM*SIZE) (MAPC (FUNCTION (LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA))) DATALIST))) (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 8872 INCREMENT) 8872)) (SETQ MEM*NEXT.VADR 107 MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1) MEM*FIRST.REUSABLE.VADR 29 MEM*LAST.REUSABLE.VADR 102)) (PROGN (SETQ DT*SORT.ALL (QUOTE (PLANT GRAIN SNAIL CATERPILLAR BIRD FOX ANIMAL WOLF ANY))) (SETQ DT*SORT.NR (QUOTE 10)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*ELEMENT.PREDICATE (QUOTE NIL)) (SETQ DT*OMEGA.CONSTANT (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (103 104 105 106))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE (26 32))) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (7 5 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (7 5 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) (PROGN) (PROGN (PROGN)) (PROGN (PROGN (SETF (GET (QUOTE PLANT) (QUOTE DT*SORT.NUMBER)) (QUOTE 9)) (SETF (GET (QUOTE PLANT) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (GRAIN))) (SETF (GET (QUOTE PLANT) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (PLANT GRAIN))) (SETF (GET (QUOTE PLANT) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT PLANT) (GRAIN GRAIN) (SNAIL) (CATERPILLAR) (BIRD) (FOX) (ANIMAL) (WOLF) (ANY PLANT)))) (SETF (GET (QUOTE PLANT) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (PLANT))) (SETF (GET (QUOTE PLANT) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE PLANT) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY PLANT)))) (PROGN (SETF (GET (QUOTE GRAIN) (QUOTE DT*SORT.NUMBER)) (QUOTE 8)) (SETF (GET (QUOTE GRAIN) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE GRAIN) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (GRAIN))) (SETF (GET (QUOTE GRAIN) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT GRAIN) (GRAIN GRAIN) (SNAIL) (CATERPILLAR) (BIRD) (FOX) (ANIMAL) (WOLF) (ANY GRAIN)))) (SETF (GET (QUOTE GRAIN) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (GRAIN))) (SETF (GET (QUOTE GRAIN) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (PLANT))) (SETF (GET (QUOTE GRAIN) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY PLANT GRAIN)))) (PROGN (SETF (GET (QUOTE SNAIL) (QUOTE DT*SORT.NUMBER)) (QUOTE 7)) (SETF (GET (QUOTE SNAIL) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE SNAIL) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (SNAIL))) (SETF (GET (QUOTE SNAIL) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT) (GRAIN) (SNAIL SNAIL) (CATERPILLAR) (BIRD) (FOX) (ANIMAL SNAIL) (WOLF) (ANY SNAIL)))) (SETF (GET (QUOTE SNAIL) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (SNAIL))) (SETF (GET (QUOTE SNAIL) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANIMAL))) (SETF (GET (QUOTE SNAIL) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ANIMAL SNAIL)))) (PROGN (SETF (GET (QUOTE CATERPILLAR) (QUOTE DT*SORT.NUMBER)) (QUOTE 6)) (SETF (GET (QUOTE CATERPILLAR) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE CATERPILLAR) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (CATERPILLAR))) (SETF (GET (QUOTE CATERPILLAR) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT) (GRAIN) (SNAIL) (CATERPILLAR CATERPILLAR) (BIRD) (FOX) (ANIMAL CATERPILLAR) (WOLF) (ANY CATERPILLAR)))) (SETF (GET (QUOTE CATERPILLAR) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (CATERPILLAR))) (SETF (GET (QUOTE CATERPILLAR) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANIMAL))) (SETF (GET (QUOTE CATERPILLAR) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ANIMAL CATERPILLAR)))) (PROGN (SETF (GET (QUOTE BIRD) (QUOTE DT*SORT.NUMBER)) (QUOTE 5)) (SETF (GET (QUOTE BIRD) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE BIRD) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (BIRD))) (SETF (GET (QUOTE BIRD) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT) (GRAIN) (SNAIL) (CATERPILLAR) (BIRD BIRD) (FOX) (ANIMAL BIRD) (WOLF) (ANY BIRD)))) (SETF (GET (QUOTE BIRD) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (BIRD))) (SETF (GET (QUOTE BIRD) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANIMAL))) (SETF (GET (QUOTE BIRD) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ANIMAL BIRD)))) (PROGN (SETF (GET (QUOTE FOX) (QUOTE DT*SORT.NUMBER)) (QUOTE 4)) (SETF (GET (QUOTE FOX) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE FOX) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (FOX))) (SETF (GET (QUOTE FOX) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT) (GRAIN) (SNAIL) (CATERPILLAR) (BIRD) (FOX FOX) (ANIMAL FOX) (WOLF) (ANY FOX)))) (SETF (GET (QUOTE FOX) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (FOX))) (SETF (GET (QUOTE FOX) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANIMAL))) (SETF (GET (QUOTE FOX) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ANIMAL FOX)))) (PROGN (SETF (GET (QUOTE ANIMAL) (QUOTE DT*SORT.NUMBER)) (QUOTE 3)) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (SNAIL CATERPILLAR BIRD FOX WOLF))) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANIMAL SNAIL CATERPILLAR BIRD FOX WOLF))) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT) (GRAIN) (SNAIL SNAIL) (CATERPILLAR CATERPILLAR) (BIRD BIRD) (FOX FOX) (ANIMAL ANIMAL) (WOLF WOLF) (ANY ANIMAL)))) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (SNAIL CATERPILLAR BIRD FOX WOLF))) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ANIMAL)))) (PROGN (SETF (GET (QUOTE WOLF) (QUOTE DT*SORT.NUMBER)) (QUOTE 2)) (SETF (GET (QUOTE WOLF) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE WOLF) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (WOLF))) (SETF (GET (QUOTE WOLF) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT) (GRAIN) (SNAIL) (CATERPILLAR) (BIRD) (FOX) (ANIMAL WOLF) (WOLF WOLF) (ANY WOLF)))) (SETF (GET (QUOTE WOLF) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (WOLF))) (SETF (GET (QUOTE WOLF) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANIMAL))) (SETF (GET (QUOTE WOLF) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ANIMAL WOLF)))) (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (PLANT ANIMAL))) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (GRAIN ANY PLANT ANIMAL SNAIL CATERPILLAR BIRD FOX WOLF))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((PLANT PLANT) (GRAIN GRAIN) (SNAIL SNAIL) (CATERPILLAR CATERPILLAR) (BIRD BIRD) (FOX FOX) (ANIMAL ANIMAL) (WOLF WOLF) (ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (SNAIL CATERPILLAR BIRD FOX WOLF))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY)))))) (PROGN (SETQ DS*RULES (QUOTE NIL)) (SETQ DS*FINITE.DOMAIN (QUOTE NIL))) (PROGN) (PROGN) (PROGN)) (PROGN (SETQ CG*RECOLOUR (QUOTE ((R . RD) (P . PD) (SI . SID) (RIW . RIWD)))) (SETQ CG*OBJECTCLASSES (QUOTE (CLAUSES R RIW RD S SI SIW SID T TI TIW P PIW PD RIWD))) (SETQ CG*SAVESTACK (QUOTE NIL)) (SETQ CG*GRAPH.REGISTER (QUOTE (PROGN (PROG ((ALL.PROPLIST (QUOTE (CLAUSES ((0) 0) R ((0) 0) RIW ((0) 0) RD ((0) 0) S ((0) 0) SI ((0) 0) SIW ((0) 0) SID ((0) 0) T ((0) 0) TI ((0) 0) TIW ((0) 0) P ((0) 0) PIW ((0) 0) PD ((0) 0) RIWD ((0) 0)))) (INSERTED.PROPLIST (QUOTE (CLAUSES ((0) 0) R ((0) 0) RIW ((0) 0) RD ((0) 0) S ((0) 0) SI ((0) 0) SIW ((0) 0) SID ((0) 0) T ((0) 0) TI ((0) 0) TIW ((0) 0) P ((0) 0) PIW ((0) 0) PD ((0) 0) RIWD ((0) 0)))) (CHANGED.PROPLIST (QUOTE (CLAUSES ((0) 0) R ((0) 0) RIW ((0) 0) RD ((0) 0) S ((0) 0) SI ((0) 0) SIW ((0) 0) SID ((0) 0) T ((0) 0) TI ((0) 0) TIW ((0) 0) P ((0) 0) PIW ((0) 0) PD ((0) 0) RIWD ((0) 0)))) (REMOVED.PROPLIST (QUOTE (CLAUSES ((0) 0) R ((0) 0) RIW ((0) 0) RD ((0) 0) S ((0) 0) SI ((0) 0) SIW ((0) 0) SID ((0) 0) T ((0) 0) TI ((0) 0) TIW ((0) 0) P ((0) 0) PIW ((0) 0) PD ((0) 0) RIWD ((0) 0))))) (SMAPC (FUNCTION (LAMBDA (OBJECTLIST) (RPLACA OBJECTLIST (LAST OBJECTLIST)))) (FUNCTION CDDR) (CDR ALL.PROPLIST)) (SETF (SYMBOL-PLIST (QUOTE CG*OBJECTS.ALL)) ALL.PROPLIST) (SMAPC (FUNCTION (LAMBDA (OBJECTLIST) (RPLACA OBJECTLIST (LAST OBJECTLIST)))) (FUNCTION CDDR) (CDR INSERTED.PROPLIST)) (SETF (SYMBOL-PLIST (QUOTE CG*OBJECTS.INSERTED)) INSERTED.PROPLIST) (SMAPC (FUNCTION (LAMBDA (OBJECTLIST) (RPLACA OBJECTLIST (LAST OBJECTLIST)))) (FUNCTION CDDR) (CDR CHANGED.PROPLIST)) (SETF (SYMBOL-PLIST (QUOTE CG*OBJECTS.CHANGED)) CHANGED.PROPLIST) (SMAPC (FUNCTION (LAMBDA (OBJECTLIST) (RPLACA OBJECTLIST (LAST OBJECTLIST)))) (FUNCTION CDDR) (CDR REMOVED.PROPLIST)) (SETF (SYMBOL-PLIST (QUOTE CG*OBJECTS.REMOVED)) REMOVED.PROPLIST))))) (SETQ CG*CHANGE.QUEUE.LITERALS (QUOTE (NIL))) (PROG ((ALL.PROPLIST (QUOTE (CLAUSES ((67) 12 34 37 40 43 46 49 52 55 58 60 62 67) R ((76) 9 68 69 70 71 72 73 74 75 76) RIW ((77) 1 77) RD ((0) 0) S ((81) 4 78 79 80 81) SI ((0) 0) SIW ((0) 0) SID ((0) 0) T ((0) 0) TI ((82) 1 82) TIW ((0) 0) P ((0) 0) PIW ((0) 0) PD ((0) 0) RIWD ((0) 0)))) (INSERTED.PROPLIST (QUOTE (CLAUSES ((0) 0) R ((0) 0) RIW ((0) 0) RD ((0) 0) S ((0) 0) SI ((0) 0) SIW ((0) 0) SID ((0) 0) T ((0) 0) TI ((0) 0) TIW ((0) 0) P ((0) 0) PIW ((0) 0) PD ((0) 0) RIWD ((0) 0)))) (CHANGED.PROPLIST (QUOTE (CLAUSES ((0) 0) R ((0) 0) RIW ((0) 0) RD ((0) 0) S ((0) 0) SI ((0) 0) SIW ((0) 0) SID ((0) 0) T ((0) 0) TI ((0) 0) TIW ((0) 0) P ((0) 0) PIW ((0) 0) PD ((0) 0) RIWD ((0) 0)))) (REMOVED.PROPLIST (QUOTE (CLAUSES ((0) 0) R ((0) 0) RIW ((0) 0) RD ((0) 0) S ((0) 0) SI ((0) 0) SIW ((0) 0) SID ((0) 0) T ((0) 0) TI ((0) 0) TIW ((0) 0) P ((0) 0) PIW ((0) 0) PD ((0) 0) RIWD ((0) 0))))) (SMAPC (FUNCTION (LAMBDA (OBJECTLIST) (RPLACA OBJECTLIST (LAST OBJECTLIST)))) (FUNCTION CDDR) (CDR ALL.PROPLIST)) (SETF (SYMBOL-PLIST (QUOTE CG*OBJECTS.ALL)) ALL.PROPLIST) (SMAPC (FUNCTION (LAMBDA (OBJECTLIST) (RPLACA OBJECTLIST (LAST OBJECTLIST)))) (FUNCTION CDDR) (CDR INSERTED.PROPLIST)) (SETF (SYMBOL-PLIST (QUOTE CG*OBJECTS.INSERTED)) INSERTED.PROPLIST) (SMAPC (FUNCTION (LAMBDA (OBJECTLIST) (RPLACA OBJECTLIST (LAST OBJECTLIST)))) (FUNCTION CDDR) (CDR CHANGED.PROPLIST)) (SETF (SYMBOL-PLIST (QUOTE CG*OBJECTS.CHANGED)) CHANGED.PROPLIST) (SMAPC (FUNCTION (LAMBDA (OBJECTLIST) (RPLACA OBJECTLIST (LAST OBJECTLIST)))) (FUNCTION CDDR) (CDR REMOVED.PROPLIST)) (SETF (SYMBOL-PLIST (QUOTE CG*OBJECTS.REMOVED)) REMOVED.PROPLIST)))) (PROGN (C "Operation save expression.") (SETQ OP*LINK.COLOURS.LITERAL.INITIAL (QUOTE (R S T RI SI TI RIW SIW TIW))) (SETQ OP*CLAUSECOUNTER (QUOTE 11)) (SETQ OP*COUNTER.RESOLVENTS (QUOTE 0)) (SETQ OP*COUNTER.PARAMODULANTS (QUOTE 0)) (SETQ OP*COUNTER.FACTORS (QUOTE 0)) (SETQ OP*COLOURS.CIRCLE.LINKS (QUOTE (SIW))))) (PROGN (SETQ CONS*CLAUSES (QUOTE (67))) (SETQ CONS*CLAUSECOUNTER (QUOTE NIL)) (SETQ CONS*LINK.COLOURS (QUOTE (R RIW S SI SIW T TI TIW P PIW))) (SETQ CONS*EQ.OCCURRENCES.NEG (QUOTE NIL)) (SETQ CONS*EQ.OCCURRENCES.POS (QUOTE NIL)) (SETQ CONS*RW.CLAUSES (QUOTE NIL)) (SETQ CONS*RW_EQ.OCCURRENCES.NEG (QUOTE NIL)) (SETQ CONS*RW_EQ.OCCURRENCES.POS (QUOTE NIL)) (SETQ CONS*NO.LINK.CLAUSES (QUOTE NIL)))))
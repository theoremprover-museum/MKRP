(COND ((FMT-LOAD " 6-SEP-84 20:01:59" NIL (((NOT A = B AND NOT A = C AND NOT B = C) (AND (NOT (+ 3 (5 4) NIL))
(AND (NOT (+ 3 (5 6) NIL)) (NOT (+ 3 (4 6) NIL)))) QUANTIFICATION) ((SCHULDIG (A) OR SCHULDIG (B) OR SCHULDIG (C))
(OR (+ 7 (5) NIL) (OR (+ 7 (4) NIL) (+ 7 (6) NIL))) QUANTIFICATION) ((SCHULDIG (A) IMPL (SCHULDIG (B) OR SCHULDIG
(C)) AND NOT (SCHULDIG (B) AND SCHULDIG (C))) (IMPL (+ 7 (5) NIL) (AND (OR (+ 7 (4) NIL) (+ 7 (6) NIL)) (NOT (AND
(+ 7 (4) NIL) (+ 7 (6) NIL))))) QUANTIFICATION) ((NOT SCHULDIG (B) IMPL NOT SCHULDIG (C)) (IMPL (NOT (+ 7 (4) NIL))
(NOT (+ 7 (6) NIL))) QUANTIFICATION) (((EX X,Y,Z NOT X = Y AND NOT X = Z AND NOT Y = Z AND SCHULDIG (X) AND SCHULDIG
(Y) AND NOT SCHULDIG (Z)) IMPL SCHULDIG (A)) (IMPL (EX 10 (EX 9 (EX 8 (AND (NOT (+ 3 (8 9) NIL)) (AND (NOT (+ 3
(8 10) NIL)) (AND (NOT (+ 3 (9 10) NIL)) (AND (+ 7 (8) NIL) (AND (+ 7 (9) NIL) (NOT (+ 7 (10) NIL)))))))))) (+
7 (5) NIL)) QUANTIFICATION) ((NOT SCHULDIG (C) IMPL NOT SCHULDIG (B)) (IMPL (NOT (+ 7 (6) NIL)) (NOT (+ 7 (4) NIL)))
QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (10155 10160 10165 10180
10185 10190 10195 10210 10225 10240))) (DATALIST (QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+
1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL
((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 = NIL NIL
(ANY ANY) (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 3 (POSITIVE . SYMMETRIC))) ((+ 3 (NEGATIVE
. SYMMETRIC))) ((+ 3 (NIL . SYMMETRIC))) ((- 3 (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 B ANY (
DT*ST-KIND NIL) CONSTANT 5 A ANY (DT*ST-KIND NIL) CONSTANT 5 C ANY (DT*ST-KIND NIL) CONSTANT 15 SCHULDIG NIL NIL
(ANY) NIL NIL ((- 7 (POSITIVE))) ((+ 7 (NEGATIVE))) ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND
((IGREATERP (IPLUS (IDIFFERENCE 11 1) (IDIFFERENCE 10240 10150)) MEM*SIZE) (MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE
10240) (SETQ COUNTER1 11) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1
(SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 11) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ
COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR)
(T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA
MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR (IPLUS 10150 INCREMENT)) (RPAQ MEM*NEXT.VADR
11) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ 
MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 1) (RPAQQ DT*SORT.PROPERTIES (
DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS 
DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ
DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (6 5 4)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER
0) (RPAQQ DT*FUNCTION.ALL NIL) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES
NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES (3)) (RPAQQ DT*NONEQUALITY.PREDICATES (7 2 1))
(RPAQQ DT*PREDICATE.ALL (7 3 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME
POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES
-SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ 
DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++))) (PROGN)
(PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (REFLEXIVE (3 3) SYMMETRIC (3 3) DEFINED (3 2 1)))))
(PROGN (SETPROPLIST (QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS
(ANY) DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ ST*STACK1 (NIL
NIL ((X_10 PROGN (DT-VARIABLE.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_10) ST*SYMBOL.ADDRESSES)))
(X_9 PROGN (DT-VARIABLE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_9) ST*SYMBOL.ADDRESSES))) (X_8 PROGN
(DT-VARIABLE.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_8) ST*SYMBOL.ADDRESSES)))) NIL NIL ((SCHULDIG
PROGN (DT-PREDICATE.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SCHULDIG) ST*SYMBOL.ADDRESSES)))) ((C
PROGN (DT-CONSTANT.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE C) ST*SYMBOL.ADDRESSES))) (A PROGN (
DT-CONSTANT.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) ST*SYMBOL.ADDRESSES))) (B PROGN (DT-CONSTANT.DELETE
4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B) ST*SYMBOL.ADDRESSES))) (= PROGN (DT-PREDICATE.DELETE 3) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE =) ST*SYMBOL.ADDRESSES)))) ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ
ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (= . 3) (B . 4) (A . 5) (C . 6) (SCHULDIG . 7) (X_8 .
8) (X_9 . 9) (X_10 . 10))))))))STOP
 

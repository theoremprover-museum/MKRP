;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-

(CONSTRUCTION  "Genera 8.0.1 Logical Pathnames Translation Files NEWEST IP-TCP 422.2 RPC 415.0 Embedding Support 407.0 UX Support 416.0 Experimental Network RPC 415.0 Experimental NFS Client 415.0 CLX 419.0 C Runtime 416.0 Compiler Tools Package 411.0 Compiler Tools Runtime 411.0 C Packages 413.0 Minimal Lexer Runtime 416.0 Lexer Package 415.0 Syntax Editor Runtime 411.0 Experimental X Server 409.0 X Remote Screen 418.1 PS 415.1 KKL 20.1 HADES 16.0 Waltz 7.0 COLUMN 7.0 MKRP 49.11 GENTRAFO 1.0" "02-DEC,1991 17:01" 
   ("                                                                                                                     "
   "*********************************************************************************************************************"
   "                                                                                                                     "
   " FORMULA:  Date: 21-NOV,1991 21:03"
   "           Axioms und Theorems for this proof have been read from"
   "              Axiom-File: NIL"
   "            Theorem-File: NIL"
   "                                                                                                                     "
   "*********************************************************************************************************************"
   ))

(AXIOMS.INFIX    ((E (LUPO WOLF) AND E (FOXY FOX) AND E (TWEETY BIRD) AND E (SCHNECKI SNAIL) AND E (MEGGY CATERPILLAR) AND E (STALKY GRAIN))
   (ALL X |:| WOLF E (X ANIMAL))
   (ALL X |:| FOX E (X ANIMAL))
   (ALL X |:| BIRD E (X ANIMAL))
   (ALL X |:| CATERPILLAR E (X ANIMAL))
   (ALL X |:| SNAIL E (X ANIMAL))
   (ALL X |:| GRAIN E (X PLANT))
   (ALL X |:| ANIMAL (ALL Y |:| PLANT EATS (X Y)) OR (ALL Y |:| ANIMAL SMALLER (Y X) AND (EX Z |:| (PLANT) EATS (Y Z)) IMPL EATS (X Y)))
   (ALL X |:| CATERPILLAR ALL Y |:| BIRD SMALLER (X Y))
   (ALL X |:| SNAIL ALL Y |:| BIRD SMALLER (X Y))
   (ALL X |:| BIRD ALL Y |:| FOX SMALLER (X Y))
   (ALL X |:| FOX ALL Y |:| WOLF SMALLER (X Y))
   (ALL X |:| FOX ALL Y |:| WOLF NOT EATS (Y X))
   (ALL X |:| GRAIN ALL Y |:| WOLF NOT EATS (Y X))
   (ALL X |:| BIRD ALL Y |:| CATERPILLAR EATS (X Y))
   (ALL X |:| BIRD ALL Y |:| SNAIL NOT EATS (X Y))
   (ALL X |:| CATERPILLAR EX Y |:| PLANT EATS (X Y))
   (ALL X |:| SNAIL EX Y |:| PLANT EATS (X Y))))

(THEOREMS.INFIX ((* THEOREMS)
   (EX |X,Y| |:| ANIMAL ALL Z |:| GRAIN EATS (X Y) AND EATS (Y Z))))

(AXIOMS.PREFIX   ((AND (+ 4 (5 6) NIL) (AND (+ 4 (7 8) NIL) (AND (+ 4 (9 10) NIL) (AND (+ 4 (11 12) NIL) (AND (+ 4 (13 14) NIL) (+ 4 (15 16) NIL))))))
   (ALL 17 (+ 4 (17 18) NIL))
   (ALL 19 (+ 4 (19 18) NIL))
   (ALL 20 (+ 4 (20 18) NIL))
   (ALL 21 (+ 4 (21 18) NIL))
   (ALL 22 (+ 4 (22 18) NIL))
   (ALL 23 (+ 4 (23 24) NIL))
   (ALL 25 (OR (ALL 26 (+ 27 (25 26) NIL)) (ALL 28 (IMPL (AND (+ 29 (28 25) NIL) (EX 30 (+ 27 (28 30) NIL))) (+ 27 (25 28) NIL)))))
   (ALL 31 (ALL 32 (+ 29 (31 32) NIL)))
   (ALL 33 (ALL 34 (+ 29 (33 34) NIL)))
   (ALL 35 (ALL 36 (+ 29 (35 36) NIL)))
   (ALL 37 (ALL 38 (+ 29 (37 38) NIL)))
   (ALL 39 (ALL 40 (NOT (+ 27 (40 39) NIL))))
   (ALL 41 (ALL 42 (NOT (+ 27 (42 41) NIL))))
   (ALL 43 (ALL 44 (+ 27 (43 44) NIL)))
   (ALL 45 (ALL 46 (NOT (+ 27 (45 46) NIL))))
   (ALL 47 (EX 48 (+ 27 (47 48) NIL)))
   (ALL 49 (EX 50 (+ 27 (49 50) NIL)))))

(THEOREMS.PREFIX (COMMENT
   (EX 52 (EX 51 (ALL 53 (AND (+ 27 (51 52) NIL) (+ 27 (52 53) NIL)))))))

(OPTIONS (TWO_RULES)
    (TWO_RULES.MAXLEVEL . 1)
    (TWO_SUPPRESS.NORULES)
    (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.I_CLAUSE.PURITY . PARTIAL)
    (RED.I_CLAUSE.TAUTOLOGY . T)
    (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
    (RED.I_CLAUSE.SUBSUMPTION . T)
    (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
    (RED.I_CLAUSE.REPL.FACTORING . T)
    (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.I_CLAUSE.REWRITING . DEM)
    (RED.I_LINK.INCOMPATIBILITY . T)
    (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.I_LINK.TAUTOLOGY.RECHECK)
    (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.I_LINK.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.D_CLAUSE.PURITY . PARTIAL)
    (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
    (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
    (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
    (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.REPL.FACTORING . T)
    (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.D_CLAUSE.REWRITING . DEM)
    (RED.D_LINK.INCOMPATIBILITY . T)
    (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_LINK.TAUTOLOGY.RECHECK)
    (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.D_LINK.SUBSUMPTION.RECHECK)
    (FAC_INITIAL)
    (FAC_EACH.STEP)
    (STR_RESOLUTION . SET-OF-SUPPORT)
    (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
    (STR_LINK.DEPTH)
    (STR_TERM.DEPTH)
    (STR_FINITE.DOMAIN . T)
    (TERM_UNITS . T)
    (TERM_ITERATIONS . 0)
    (TERM_SET.OF.SUPPORT)
    (TERM_BREADTH.FIRST)
    (SORT_LITERALS . T)
    (ER_PARAMODULATION . HEURISTIC-COMPLETION)
    (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
    (ER_COMPLETION . UNFAILING)
    (ER_CP.REDUCTION . T)
    (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
    (ER_OPERATOR.ORDERING * - + 0 1)
    (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
    (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ X (* 2 Y))) (* (X Y) (+ X (* X Y))) (- (X) (+ (* 2 X) -1)) (0 NIL 2) (1 NIL 2))
    (ER_NARROW.DEPTH . 0)
    (ER_NARROW.NEXT . DEPTH)
    (ER_NARROW.TEST NORM C DELTA SL N)
    (ER_COMPILE)
    (GEN_SPLITTING . 0)
    (GEN_PRESIMPLIFICATION . T)
    (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
    (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
    (GEN_MANUAL.CONTROL)
    (GEN_MAXIMUM.STEPS)
    (GEN_GRAPH.SAVING)
    (GEN_SAVE.FILE . SAVEDEFAULT)
    (GEN_LISP.GARBAGE.COLLECTION)
    (GEN_COMMON.LISP)
    (TR_PREPROCESSING)
    (TR_STEP.MODE . LR)
    (TR_DUMP)
    (TR_CLAUSE.MODE . I)
    (TR_LINK.MODE . I)
    (TR_TRACE.FILE)
    (TR_TERMINAL . T)
    (PR_LATEX)
    (PR_INFIX.FORM . T)
    (PR_PREFIX.FORM)
    (PR_OPTIONS)
    (PR_AXIOM.CLAUSES . T)
    (PR_SYMBOLS)
    (PR_DIRECT.PROOF . T)
    (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
    (PR_PROTOCOL . T)
    (PR_LEFT.MARGIN . 3)
    (PR_RIGHT.MARGIN . 117)
    (PR_LINELENGTH . 114)
    (PR_LITERALS)
   )

(LINK.COLOURS (R RIW RD S SI SIW SID T TI TIW P PIW PD RIWD))

(AXIOMS (START.TIME 220734291)
   (PARTIAL   (CLAUSE 58 R.= AXIOM ((56 . 3)) ((+ 2 (56 56)) ))(CLAUSE 59 A1 AXIOM () ((+ 4 (5 6)) )))
   (PARTIAL   (CLAUSE 60 A2 AXIOM () ((+ 4 (7 8)) )))
   (PARTIAL   (CLAUSE 61 A3 AXIOM () ((+ 4 (9 10)) )))
   (PARTIAL   (CLAUSE 62 A4 AXIOM () ((+ 4 (11 12)) )))
   (PARTIAL   (CLAUSE 63 A5 AXIOM () ((+ 4 (13 14)) )))
   (PARTIAL   (CLAUSE 64 A6 AXIOM () ((+ 4 (15 16)) )))
   (PARTIAL   (CLAUSE 66 A7 AXIOM ((17 . 6)) ((+ 4 (17 18)) )))
   (PARTIAL   (CLAUSE 68 A8 AXIOM ((19 . 8)) ((+ 4 (19 18)) )))
   (PARTIAL   (CLAUSE 70 A9 AXIOM ((20 . 10)) ((+ 4 (20 18)) )))
   (PARTIAL   (CLAUSE 72 A10 AXIOM ((21 . 14)) ((+ 4 (21 18)) )))
   (PARTIAL   (CLAUSE 74 A11 AXIOM ((22 . 12)) ((+ 4 (22 18)) )))
   (PARTIAL   (CLAUSE 76 A12 AXIOM ((23 . 16)) ((+ 4 (23 24)) )))
   (PARTIAL   (CLAUSE 79 A13 AXIOM ((32 . 10)(31 . 14)) ((+ 29 (31 32)) )))
   (PARTIAL   (CLAUSE 82 A14 AXIOM ((34 . 10)(33 . 12)) ((+ 29 (33 34)) )))
   (PARTIAL   (CLAUSE 85 A15 AXIOM ((36 . 8)(35 . 10)) ((+ 29 (35 36)) )))
   (PARTIAL   (CLAUSE 88 A16 AXIOM ((38 . 6)(37 . 8)) ((+ 29 (37 38)) )))
   (PARTIAL   (CLAUSE 91 A17 AXIOM ((39 . 8)(40 . 6)) ((- 27 (40 39)) )))
   (PARTIAL   (CLAUSE 94 A18 AXIOM ((41 . 16)(42 . 6)) ((- 27 (42 41)) )))
   (PARTIAL   (CLAUSE 97 A19 AXIOM ((44 . 14)(43 . 10)) ((+ 27 (43 44)) )))
   (PARTIAL   (CLAUSE 100 A20 AXIOM ((46 . 12)(45 . 10)) ((- 27 (45 46)) )))
   (PARTIAL   (CLAUSE 102 A21 AXIOM ((47 . 14)) ((+ 27 (47 (54 47))) )))
   (PARTIAL   (CLAUSE 104 A22 AXIOM ((48 . 14)) ((+ 4 ((54 48) 24)) )))
   (PARTIAL   (CLAUSE 106 A23 AXIOM ((49 . 12)) ((+ 27 (49 (55 49))) )))
   (PARTIAL   (CLAUSE 108 A24 AXIOM ((50 . 12)) ((+ 4 ((55 50) 24)) )))
   (PARTIAL   (CLAUSE 113 A25 AXIOM ((30 . 24)(28 . 18)(26 . 24)(25 . 18))
   ((+ 27 (25 26)) (- 29 (28 25)) (- 27 (28 30)) (+ 27 (25 28)) )))
   (END.TIME 220759355)
   (FINAL 58 59 60 61 62 63 64 66 68 70 72 74 76 79 82 85 88 91 94 97 100 102 104 106 108 113)
   (SYMBOLS 
   (LET (NEW.ADDRESS)
   (LIST (CONS   29 (DT-PREDICATE.CREATE "SMALLER" '(ANY ANY)))
   (CONS   27 (DT-PREDICATE.CREATE "EATS" '(ANY ANY)))
   (PROG1 (CONS    4 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "E" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
   (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (CONS   24 (DT-CONSTANT.CREATE "plant" 'ANY))
   (CONS   18 (DT-CONSTANT.CREATE "animal" 'ANY))
   (CONS   16 (DT-CONSTANT.CREATE "grain" 'ANY))
   (CONS   15 (DT-CONSTANT.CREATE "stalky" 'ANY))
   (CONS   14 (DT-CONSTANT.CREATE "caterpillar" 'ANY))
   (CONS   13 (DT-CONSTANT.CREATE "meggy" 'ANY))
   (CONS   12 (DT-CONSTANT.CREATE "snail" 'ANY))
   (CONS   11 (DT-CONSTANT.CREATE "schnecki" 'ANY))
   (CONS   10 (DT-CONSTANT.CREATE "bird" 'ANY))
   (CONS    9 (DT-CONSTANT.CREATE "tweety" 'ANY))
   (CONS    8 (DT-CONSTANT.CREATE "fox" 'ANY))
   (CONS    7 (DT-CONSTANT.CREATE "foxy" 'ANY))
   (CONS    6 (DT-CONSTANT.CREATE "wolf" 'ANY))
   (CONS    5 (DT-CONSTANT.CREATE "lupo" 'ANY))
   (CONS    3 (DT-CONSTANT.CREATE "omega" 'ANY))
   (CONS   55 (DT-FUNCTION.CREATE "f_2" 'ANY '(ANY) 'NIL))
   (CONS   54 (DT-FUNCTION.CREATE "f_1" 'ANY '(ANY) 'NIL)))))
   (RESULT))

(THEOREMS (SPLITPART.IDENTIFIER 1)
   (START.TIME 220759636)
   (PARTIAL   (CLAUSE 118 T26 THEOREM ((52 . 18)(51 . 18))
   ((- 27 (51 52)) (- 27 (52 (53 52))) )))
   (PARTIAL   (CLAUSE 121 T27 THEOREM ((115 . 18)(114 . 18))
   ((- 27 (114 115)) (+ 4 ((53 115) 16)) )))
   (OPERATION (CLAUSE 121 T27 THEOREM ((115 . 18)(114 . 18))
   ((- 27 (114 115)) (+ 4 ((53 115) 16)) ))
   (REPLACEMENT.OPERATION (115 44 114 43) (121 97)
  (((121 . 1) (97 . 1) NIL))
  (NIL)
  ((43 . 10) (44 . 14))))
   (INITIAL   (CLAUSE 58 R.= AXIOM ((56 . 3)) ((+ 2 (56 56)) ))
(CLAUSE 59 A1 AXIOM () ((+ 4 (5 6)) ))
(CLAUSE 60 A2 AXIOM () ((+ 4 (7 8)) ))
(CLAUSE 61 A3 AXIOM () ((+ 4 (9 10)) ))
(CLAUSE 62 A4 AXIOM () ((+ 4 (11 12)) ))
(CLAUSE 63 A5 AXIOM () ((+ 4 (13 14)) ))
(CLAUSE 64 A6 AXIOM () ((+ 4 (15 16)) ))
(CLAUSE 66 A7 AXIOM ((17 . 6)) ((+ 4 (17 18)) ))
(CLAUSE 68 A8 AXIOM ((19 . 8)) ((+ 4 (19 18)) ))
(CLAUSE 70 A9 AXIOM ((20 . 10)) ((+ 4 (20 18)) ))
(CLAUSE 72 A10 AXIOM ((21 . 14)) ((+ 4 (21 18)) ))
(CLAUSE 74 A11 AXIOM ((22 . 12)) ((+ 4 (22 18)) ))
(CLAUSE 76 A12 AXIOM ((23 . 16)) ((+ 4 (23 24)) ))
(CLAUSE 104 A22 AXIOM ((48 . 14)) ((+ 4 ((54 48) 24)) ))
(CLAUSE 108 A24 AXIOM ((50 . 12)) ((+ 4 ((55 50) 24)) ))
(CLAUSE 121 T27 THEOREM ((115 . 18)) ((+ 4 ((53 115) 16)) ))   )
   (END.TIME 221097679)
   (FINAL 58 59 60 61 62 63 64 66 68 70 72 74 76 104 108 121)
   (SYMBOLS 
   (LET (NEW.ADDRESS)
   (LIST (CONS   29 (DT-PREDICATE.CREATE "SMALLER" '(ANY ANY)))
   (CONS   27 (DT-PREDICATE.CREATE "EATS" '(ANY ANY)))
   (PROG1 (CONS    4 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "E" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
   (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (CONS   24 (DT-CONSTANT.CREATE "plant" 'ANY))
   (CONS   18 (DT-CONSTANT.CREATE "animal" 'ANY))
   (CONS   16 (DT-CONSTANT.CREATE "grain" 'ANY))
   (CONS   15 (DT-CONSTANT.CREATE "stalky" 'ANY))
   (CONS   14 (DT-CONSTANT.CREATE "caterpillar" 'ANY))
   (CONS   13 (DT-CONSTANT.CREATE "meggy" 'ANY))
   (CONS   12 (DT-CONSTANT.CREATE "snail" 'ANY))
   (CONS   11 (DT-CONSTANT.CREATE "schnecki" 'ANY))
   (CONS   10 (DT-CONSTANT.CREATE "bird" 'ANY))
   (CONS    9 (DT-CONSTANT.CREATE "tweety" 'ANY))
   (CONS    8 (DT-CONSTANT.CREATE "fox" 'ANY))
   (CONS    7 (DT-CONSTANT.CREATE "foxy" 'ANY))
   (CONS    6 (DT-CONSTANT.CREATE "wolf" 'ANY))
   (CONS    5 (DT-CONSTANT.CREATE "lupo" 'ANY))
   (CONS    3 (DT-CONSTANT.CREATE "omega" 'ANY))
   (CONS   53 (DT-FUNCTION.CREATE "f_3" 'ANY '(ANY) 'NIL))
   (CONS   55 (DT-FUNCTION.CREATE "f_2" 'ANY '(ANY) 'NIL))
   (CONS   54 (DT-FUNCTION.CREATE "f_1" 'ANY '(ANY) 'NIL)))))
   (RESULT))
(indices ((121 27 NIL) (118 27 28) (113 13 14 15 16) (108 NIL) (106 26) (104 NIL) (102 25) (100 24) (97 23) (94 22) (91 21) (88 20) (85 19) (82 18) (79 17) (76 12) (74 11) (72 10) (70 9) (68 8) (66 7) (64 6) (63 5) (62 4) (61 3) (60 2) (59 1) (58 NIL)))
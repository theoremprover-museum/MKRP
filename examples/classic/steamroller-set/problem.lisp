;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((E (LUPO WOLF) AND E (FOXY FOX) AND E (TWEETY BIRD) AND E (SCHNECKI SNAIL) AND E (MEGGY CATERPILLAR) AND E (STALKY GRAIN)) (ALL X : WOLF E (X ANIMAL)) (ALL X : FOX E (X ANIMAL)) (ALL X : BIRD E (X ANIMAL)) (ALL X : CATERPILLAR E (X ANIMAL)) (ALL X : SNAIL E (X ANIMAL)) (ALL X : GRAIN E (X PLANT)) (ALL X : ANIMAL (ALL Y : PLANT EATS (X Y)) OR (ALL Y : ANIMAL SMALLER (Y X) AND (EX Z : (PLANT) EATS (Y Z)) IMPL EATS (X Y))) (ALL X : CATERPILLAR ALL Y : BIRD SMALLER (X Y)) (ALL X : SNAIL ALL Y : BIRD SMALLER (X Y)) (ALL X : BIRD ALL Y : FOX SMALLER (X Y)) (ALL X : FOX ALL Y : WOLF SMALLER (X Y)) (ALL X : FOX ALL Y : WOLF NOT EATS (Y X)) (ALL X : GRAIN ALL Y : WOLF NOT EATS (Y X)) (ALL X : BIRD ALL Y : CATERPILLAR EATS (X Y)) (ALL X : BIRD ALL Y : SNAIL NOT EATS (X Y)) (ALL X : CATERPILLAR EX Y : PLANT EATS (X Y)) (ALL X : SNAIL EX Y : PLANT EATS (X Y)))) (QUOTE ((AND (+ 4 (5 6) NIL) (AND (+ 4 (7 8) NIL) (AND (+ 4 (9 10) NIL) (AND (+ 4 (11 12) NIL) (AND (+ 4 (13 14) NIL) (+ 4 (15 16) NIL)))))) (ALL 17 (+ 4 (17 18) NIL)) (ALL 19 (+ 4 (19 18) NIL)) (ALL 20 (+ 4 (20 18) NIL)) (ALL 21 (+ 4 (21 18) NIL)) (ALL 22 (+ 4 (22 18) NIL)) (ALL 23 (+ 4 (23 24) NIL)) (ALL 25 (OR (ALL 26 (+ 27 (25 26) NIL)) (ALL 28 (IMPL (AND (+ 29 (28 25) NIL) (EX 30 (+ 27 (28 30) NIL))) (+ 27 (25 28) NIL))))) (ALL 31 (ALL 32 (+ 29 (31 32) NIL))) (ALL 33 (ALL 34 (+ 29 (33 34) NIL))) (ALL 35 (ALL 36 (+ 29 (35 36) NIL))) (ALL 37 (ALL 38 (+ 29 (37 38) NIL))) (ALL 39 (ALL 40 (NOT (+ 27 (40 39) NIL)))) (ALL 41 (ALL 42 (NOT (+ 27 (42 41) NIL)))) (ALL 43 (ALL 44 (+ 27 (43 44) NIL))) (ALL 45 (ALL 46 (NOT (+ 27 (45 46) NIL)))) (ALL 47 (EX 48 (+ 27 (47 48) NIL))) (ALL 49 (EX 50 (+ 27 (49 50) NIL))))) (QUOTE ((* THEOREMS) (EX X,Y : ANIMAL ALL Z : GRAIN EATS (X Y) AND EATS (Y Z)))) (QUOTE (COMMENT (EX 52 (EX 51 (ALL 53 (AND (+ 27 (51 52) NIL) (+ 27 (52 53) NIL))))))) (QUOTE ("                                                                                                                     " "*********************************************************************************************************************" "                                                                                                                     " " FORMULA:  Date: 21-NOV,1991 21:03" "           Axioms und Theorems for this proof have been read from" "              Axiom-File: NIL" "            Theorem-File: NIL" "                                                                                                                     " "*********************************************************************************************************************")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(9674 9679 9684 9689 9694 9699 9704 9709 9714 9719 9724 9729 9734 9739 9744 9749 9754
          9759 9764 9769 9774 9779 9784 9789 9804 9809 9824 9829 9834 9839 9844 9849 9854 9859
          9864 9869 9874 9879 9884 9889 9894 9899 9904 9909 9914 9919 9924 9929 9934 9949 9954
          9969 9984 9999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC)))
          ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY "OMEGA" (DT*ST-KIND NIL) CONSTANT 15 "E"
          NIL NIL (ANY ANY) (DEFINED) NIL ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE))) ((+ 4 (NIL)))
          ((- 4 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY "LUPO" (DT*ST-KIND NIL)
          CONSTANT 5 ANY "WOLF" (DT*ST-KIND NIL) CONSTANT 5 ANY "FOXY" (DT*ST-KIND NIL)
          CONSTANT 5 ANY "FOX" (DT*ST-KIND NIL) CONSTANT 5 ANY "TWEETY" (DT*ST-KIND NIL)
          CONSTANT 5 ANY "BIRD" (DT*ST-KIND NIL) CONSTANT 5 ANY "SCHNECKI" (DT*ST-KIND NIL)
          CONSTANT 5 ANY "SNAIL" (DT*ST-KIND NIL) CONSTANT 5 ANY "MEGGY" (DT*ST-KIND NIL)
          CONSTANT 5 ANY "CATERPILLAR" (DT*ST-KIND NIL) CONSTANT 5 ANY "STALKY"
          (DT*ST-KIND NIL) CONSTANT 5 ANY "GRAIN" (DT*ST-KIND NIL) CONSTANT 5 6 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY "ANIMAL" (DT*ST-KIND NIL) CONSTANT 5
          8 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 10 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 14 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 12 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 16 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY "PLANT" (DT*ST-KIND NIL) CONSTANT 5
          18 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 24 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "EATS" NIL NIL (ANY ANY) NIL NIL
          ((- 27 (POSITIVE))) ((+ 27 (NEGATIVE))) ((+ 27 (NIL))) ((- 27 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 18 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15
          "SMALLER" NIL NIL (ANY ANY) NIL NIL ((- 29 (POSITIVE))) ((+ 29 (NEGATIVE)))
          ((+ 29 (NIL))) ((- 29 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 24 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 14 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 10 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 12 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 10 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 10 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 8 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 8 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 6 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 8 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 6 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 16 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 6 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 10 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 14 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 10 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 12 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 14 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 24 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 12 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 24 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 18 NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 18 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 16 NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 10000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 10000)
             (SETQ COUNTER1 54)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 10000)
                 (MEM-INITIALIZE 10000))
               (SETQ COUNTER1 54)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9669 INCREMENT) 9669))
      (SETQ MEM*NEXT.VADR 54
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ANY))) (SETQ DT*SORT.NR (QUOTE 2)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*ELEMENT.PREDICATE (QUOTE 4)) (SETQ DT*OMEGA.CONSTANT (QUOTE 3)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (24 18 16 15 14 13 12 11 10 9 8 7 6 5 3))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE NIL)) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (29 27 4 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (29 27 4 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
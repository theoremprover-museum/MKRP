;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION 'NIL 'NIL '((((EX X ALL Y ((EX U ALL V S (X U) EQV S (X V)) EQV ((EX U S (U X)) EQV (ALL V S (V X))))
     EQV ((ALL U ALL V S (U Y) EQV S (V Y)) EQV ((EX U S (Y U)) EQV (ALL V S (Y V)))))
    EQV
    (EX X ((EX U ALL V R (U X) EQV R (V X)) EQV (ALL U ALL V R (X U) EQV R (X V))) EQV
     (ALL Y (ALL U ALL V S (Y U) EQV S (Y V)) EQV ((EX U S (U Y)) EQV (ALL V S (V Y))))))
   EQV
   ((EX X ALL Y ((EX U ALL V R (X U) EQV R (X V)) EQV ((EX U R (U X)) EQV (ALL V R (V X))))
     EQV ((ALL U ALL V R (U Y) EQV R (V Y)) EQV ((EX U R (Y U)) EQV (ALL V R (Y V)))))
    EQV
    (EX X ((EX U ALL V S (X U) EQV S (X V)) EQV (ALL U ALL V S (U X) EQV S (V X))) EQV
     (ALL Y (ALL U ALL V R (Y U) EQV R (Y V)) EQV ((EX U R (U Y)) EQV (ALL V R (V Y)))))))) '((EQV
   (EQV
    (EX 2
     (ALL 3
      (EQV
       (EQV
        (EX 4
         (ALL 5
          (EQV (+ 6 (2 4) (KIND (EQV T 20 EQV T 22 EQV T 26 EQV T 214 EQV T 230)))
           (+ 6 (2 5) (KIND (EQV NIL 20 EQV T 22 EQV T 26 EQV T 214 EQV T 230))))))
        (EQV (EX 7 (+ 6 (7 2) (KIND (EQV T 21 EQV NIL 22 EQV T 26 EQV T 214 EQV T 230))))
         (ALL 8 (+ 6 (8 2) (KIND (EQV NIL 21 EQV NIL 22 EQV T 26 EQV T 214 EQV T 230))))))
       (EQV
        (ALL 9
         (ALL 10
          (EQV (+ 6 (9 3) (KIND (EQV T 23 EQV T 25 EQV NIL 26 EQV T 214 EQV T 230)))
           (+ 6 (10 3) (KIND (EQV NIL 23 EQV T 25 EQV NIL 26 EQV T 214 EQV T 230))))))
        (EQV (EX 11 (+ 6 (3 11) (KIND (EQV T 24 EQV NIL 25 EQV NIL 26 EQV T 214 EQV T 230))))
         (ALL 12 (+ 6 (3 12) (KIND (EQV NIL 24 EQV NIL 25 EQV NIL 26 EQV T 214 EQV T 230)))))))
      ))
    (EX 13
     (EQV
      (EQV
       (EX 14
        (ALL 15
         (EQV (+ 16 (14 13) (KIND (EQV T 27 EQV T 29 EQV T 213 EQV NIL 214 EQV T 230)))
          (+ 16 (15 13) (KIND (EQV NIL 27 EQV T 29 EQV T 213 EQV NIL 214 EQV T 230))))))
       (ALL 17
        (ALL 18
         (EQV (+ 16 (13 17) (KIND (EQV T 28 EQV NIL 29 EQV T 213 EQV NIL 214 EQV T 230)))
          (+ 16 (13 18) (KIND (EQV NIL 28 EQV NIL 29 EQV T 213 EQV NIL 214 EQV T 230)))))))
      (ALL 19
       (EQV
        (ALL 20
         (ALL 21
          (EQV (+ 6 (19 20) (KIND (EQV T 210 EQV T 212 EQV NIL 213 EQV NIL 214 EQV T 230)))
           (+ 6 (19 21) (KIND (EQV NIL 210 EQV T 212 EQV NIL 213 EQV NIL 214 EQV T 230))))))
        (EQV
         (EX 22 (+ 6 (22 19) (KIND (EQV T 211 EQV NIL 212 EQV NIL 213 EQV NIL 214 EQV T 230))))
         (ALL 23
          (+ 6 (23 19) (KIND (EQV NIL 211 EQV NIL 212 EQV NIL 213 EQV NIL 214 EQV T 230))))))))
     ))
   (EQV
    (EX 24
     (ALL 25
      (EQV
       (EQV
        (EX 26
         (ALL 27
          (EQV (+ 16 (24 26) (KIND (EQV T 215 EQV T 217 EQV T 221 EQV T 229 EQV NIL 230)))
           (+ 16 (24 27) (KIND (EQV NIL 215 EQV T 217 EQV T 221 EQV T 229 EQV NIL 230))))))
        (EQV
         (EX 28 (+ 16 (28 24) (KIND (EQV T 216 EQV NIL 217 EQV T 221 EQV T 229 EQV NIL 230))))
         (ALL 29
          (+ 16 (29 24) (KIND (EQV NIL 216 EQV NIL 217 EQV T 221 EQV T 229 EQV NIL 230))))))
       (EQV
        (ALL 30
         (ALL 31
          (EQV (+ 16 (30 25) (KIND (EQV T 218 EQV T 220 EQV NIL 221 EQV T 229 EQV NIL 230)))
           (+ 16 (31 25) (KIND (EQV NIL 218 EQV T 220 EQV NIL 221 EQV T 229 EQV NIL 230))))))
        (EQV
         (EX 32 (+ 16 (25 32) (KIND (EQV T 219 EQV NIL 220 EQV NIL 221 EQV T 229 EQV NIL 230)))
          )
         (ALL 33
          (+ 16 (25 33) (KIND (EQV NIL 219 EQV NIL 220 EQV NIL 221 EQV T 229 EQV NIL 230)))))))
      ))
    (EX 34
     (EQV
      (EQV
       (EX 35
        (ALL 36
         (EQV (+ 6 (34 35) (KIND (EQV T 222 EQV T 224 EQV T 228 EQV NIL 229 EQV NIL 230)))
          (+ 6 (34 36) (KIND (EQV NIL 222 EQV T 224 EQV T 228 EQV NIL 229 EQV NIL 230))))))
       (ALL 37
        (ALL 38
         (EQV (+ 6 (37 34) (KIND (EQV T 223 EQV NIL 224 EQV T 228 EQV NIL 229 EQV NIL 230)))
          (+ 6 (38 34) (KIND (EQV NIL 223 EQV NIL 224 EQV T 228 EQV NIL 229 EQV NIL 230)))))))
      (ALL 39
       (EQV
        (ALL 40
         (ALL 41
          (EQV (+ 16 (39 40) (KIND (EQV T 225 EQV T 227 EQV NIL 228 EQV NIL 229 EQV NIL 230)))
           (+ 16 (39 41) (KIND (EQV NIL 225 EQV T 227 EQV NIL 228 EQV NIL 229 EQV NIL 230))))))
        (EQV
         (EX 42
          (+ 16 (42 39) (KIND (EQV T 226 EQV NIL 227 EQV NIL 228 EQV NIL 229 EQV NIL 230))))
         (ALL 43
          (+ 16 (43 39) (KIND (EQV NIL 226 EQV NIL 227 EQV NIL 228 EQV NIL 229 EQV NIL 230)))))
        ))))))) '("                                                                                                                     "
  "*********************************************************************************************************************"
  " EDIT:     Axioms and Theorems edited: 04-AUG,1989 14:44 "
  "*********************************************************************************************************************"
  ) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(89744 89749 89754 89759 89764 89769 89774 89779 89784 89789 89794 89799 89804 89809
          89814 89819 89824 89829 89834 89839 89844 89849 89854 89859 89864 89869 89874 89889
          89894 89899 89904 89909 89914 89919 89924 89929 89934 89949 89954 89959 89964 89969
          89984 89999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "S" NIL NIL (ANY ANY) NIL NIL ((- 6 (POSITIVE))) ((+ 6 (NEGATIVE)))
          ((+ 6 (NIL))) ((- 6 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "R" NIL NIL (ANY ANY)
          NIL NIL ((- 16 (POSITIVE))) ((+ 16 (NEGATIVE))) ((+ 16 (NIL))) ((- 16 (NIL))) NIL
          NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5
          ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 90000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 90000)
             (SETQ COUNTER1 44)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 90000)
                 (MEM-INITIALIZE 90000))
               (SETQ COUNTER1 44)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 90000) (+ 89739 INCREMENT) 89739))
      (SETQ MEM*NEXT.VADR 44
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL '(ANY))
       (SETQ DT*SORT.NR '2)
       (SETQ DT*SORT.PROPERTIES
              '(DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE
                DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS
                DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))
       (SETQ DT*SORT.COMMON.COMPUTE.FLAG 'NIL)
       (SETQ DT*VARIABLE.COUNTER '0)
       (SETQ DT*CONSTANT.COUNTER '0)
       (SETQ DT*CONSTANT.ALL 'NIL)
       (SETQ DT*ABBREVIATIONS 'NIL)
       (SETQ DT*FUNCTION.COUNTER '0)
       (SETQ DT*FUNCTION.ALL 'NIL)
       (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES '(ASSOCIATIVE))
       (SETQ DT*FUNCTION.ACTUAL.THEORIES 'NIL)
       (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES 'NIL)
       (SETQ DT*FUNCTION.COMPONENTS
              '(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST
                SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
       (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES '(SYMMETRIC DEFINED REFLEXIVE))
       (SETQ DT*PREDICATE.COUNTER '0)
       (SETQ DT*EQUALITY.SYMBOLS '("=" ":=" "=:" ":=:"))
       (SETQ DT*EQUALITY.PREDICATES 'NIL)
       (SETQ DT*NONEQUALITY.PREDICATES '(16 6 1 0))
       (SETQ DT*PREDICATE.ALL '(16 6 1 0))
       (SETQ DT*PREDICATE.WITH.ATTRIBUTES 'NIL)
       (SETQ DT*PREDICATE.COMPONENTS
              '(PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES
                REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES
                -TOTHERSIDES))
       (SETQ DT*TRUE.PREDICATE '0)
       (SETQ DT*FALSE.PREDICATE '1)
       (SETQ DT*UNI.CREATES.VARIABLES 'NIL)
       (SETQ DT*SIGN.MINUS.SYMBOLS '(- --))
       (SETQ DT*SIGN.PLUS.SYMBOLS '(+ ++))
       (SETQ DT*SYMBOL.KINDS '(CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET 'ANY 'DT*DIRECT.SUBSORTS) 'NIL)
              (SETF (GET 'ANY 'DT*SORT.NUMBER) '1)
              (SETF (GET 'ANY 'DT*TRANSITIVE.CLOSURE) '(ANY))
              (SETF (GET 'ANY 'DT*MAX.SUBSORTS) '((ANY ANY)))
              (SETF (GET 'ANY 'DT*MINIMAL.SUBSORTS) '(ANY))
              (SETF (GET 'ANY 'DT*DIRECT.SUPERSORTS) 'NIL)
              (SETF (GET 'ANY 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY)))) ))
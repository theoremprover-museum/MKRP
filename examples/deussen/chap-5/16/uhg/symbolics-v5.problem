;;; -*- Package: IL; Base: 10. -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((SORT SET:ANY) (SORT FUNCTION:ANY) (SORT ELEMENT:SET) (SORT ELEMENT.F:ELEMENT) (SORT NAT:SET) (SORT REL:SET) (SORT UNARY.FUNC:FUNCTION) (SORT BINARY.FUNC:FUNCTION) (SORT EQU.REL-S:REL) (SORT L.CONGRUENCE-S:EQU.REL-S) (SORT R.CONGRUENCE-S:EQU.REL-S) (SORT CONGRUENCE-S:L.CONGRUENCE-S) (SORT CONGRUENCE-S:R.CONGRUENCE-S) (* CONSTANTS *) (TYPE F:SET) (TYPE CONN.F:BINARY.FUNC) (TYPE 1:NAT) (TYPE CONN.F.RHO:BINARY.FUNC) (* PREDICATES *) (TYPE SEMIGROUP (SET BINARY.FUNC)) (TYPE L.CONGRUENCE (REL)) (TYPE R.CONGRUENCE (REL)) (TYPE CONGRUENCE (EQU.REL-S)) (TYPE IN.RELATION (REL ELEMENT.F ELEMENT.F)) (TYPE INJECTIVE (UNARY.FUNC SET SET)) (TYPE SURJECTIVE (UNARY.FUNC SET SET)) (TYPE BIJECTIVE (UNARY.FUNC SET SET)) (TYPE HOMOMORPH (UNARY.FUNC SET SET)) (TYPE ISOMORPH (UNARY.FUNC SET SET)) (TYPE EPIMORPH (UNARY.FUNC SET SET)) (TYPE MAPPING (UNARY.FUNC SET SET)) (TYPE MEMBER (SET SET)) (TYPE SUBSET (SET SET)) (* FUNCTIONS *) (TYPE INVERSE.EL (SET BINARY.FUNC ELEMENT) :ELEMENT) (TYPE APPLY1 (UNARY.FUNC SET) :SET) (TYPE APPLY1-EL (UNARY.FUNC ELEMENT) :ELEMENT) (TYPE APPLY2 (BINARY.FUNC SET SET) :SET) (TYPE APPLY2-EL (BINARY.FUNC ELEMENT ELEMENT) :ELEMENT) (TYPE APPLY2-EL.F (BINARY.FUNC ELEMENT.F ELEMENT.F) :ELEMENT.F) (TYPE PREIMAGE (REL ELEMENT) :SET) (TYPE POWER (REL NAT) :REL) (TYPE PLUS (NAT NAT) :NAT) (TYPE MODULO (EQU.REL-S) :SET) (TYPE COMP (REL REL) :REL) (TYPE TRANS.CLOS (REL) :REL) (TYPE UNION-REL (REL REL) :REL) (TYPE TRANS.UNION (EQU.REL-S EQU.REL-S) :EQU.REL-S) (TYPE CAN.PROJ (EQU.REL-S) :UNARY.FUNC) (TYPE IND.EQU.REL (UNARY.FUNC SET) :EQU.REL-S) (TYPE MOD.PHI (UNARY.FUNC SET) :UNARY.FUNC) (TYPE NORMALISATOR (SET) : SET) (*) (* DEFINTION SUBSEMIGROUP *) (ALL U:SET SEMIGROUP (F CONN.F) AND SUBSET (U F) AND NOT.EMPTY (U) AND SUBSET (APPLY2 (CONN.F U U) U) IMPL SUBSEMIGROUP (U F CONN.F)) (* PART OF DEFINITION GROUP *) (ALL E:ELEMENT.F GROUP (F CONN.F E) IMPL SEMIGROUP (F CONN.F)) (* PROPERTY NORMALISATOR OF A SUBGROUP *) (ALL U:SET SUBGROUP (U F CONN.F E) IMPL SUBSET (NORMALISATOR (U) F) AND NOT.EMPTY (NORMALISATOR (U))) (* THEOREM 5.9 *) (ALL RHO:L.CONGRUENCE-S ALL E:ELEMENT.F GROUP (F CONN.F E) IMPL SUBGROUP (PREIMAGE (RHO E) F CONN.F E)) (* PROPERTY APPLY2 *) (ALL A,B,C:SET SEMIGROUP (F CONN.F) AND SUBSET (A F) AND SUBSET (B F) IMPL ((ALL X,Y:ELEMENT.F MEMBER (X A) AND MEMBER (Y B) IMPL MEMBER (APPLY2 (CONN.F X Y) C)) IMPL SUBSET (APPLY2 (CONN.F A B) C))) (* DEFINITION NORMALISATOR OF A SUBGROUP *) (ALL U:SET ALL E:ELEMENT.F GROUP (F CONN.F E) IMPL (ALL X:ELEMENT.F APPLY2 (CONN.F INVERSE.EL (X CONN.F E) APPLY2 (CONN.F U X)) = U EQV MEMBER (X NORMALISATOR (U)))) (* PROPERTY OF THE INVERSE-MAPPING *) (ALL E:ELEMENT.F GROUP (F CONN.F E) IMPL (ALL X,Y:ELEMENT.F INVERSE.EL (APPLY2 (CONN.F X Y) CONN.F E) = APPLY2 (CONN.F INVERSE.EL (Y CONN.F E) INVERSE.EL (X CONN.F E)))) (* ASSOCIATIVITY *) (ALL X,Y,Z:SET APPLY2 (CONN.F X APPLY2 (CONN.F Y Z)) = APPLY2 (CONN.F APPLY2 (CONN.F X Y) Z)))) (QUOTE ((+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) COMMENT (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) COMMENT (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) COMMENT (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) COMMENT COMMENT (ALL 386. (IMPL (AND (+ 254. (219. 220.) NIL) (AND (+ 299. (386. 219.) NIL) (AND (+ 379. (386.) NIL) (+ 299. ((357. 220. 386. 386.) 386.) NIL)))) (+ 377. (386. 219. 220.) NIL))) COMMENT (ALL 376. (IMPL (+ 374. (219. 220. 376.) NIL) (+ 254. (219. 220.) NIL))) COMMENT (ALL 373. (IMPL (+ 370. (373. 219. 220. 371.) NIL) (AND (+ 299. ((339. 373.) 219.) NIL) (+ 379. ((339. 373.)) NIL)))) COMMENT (ALL 385. (ALL 380. (IMPL (+ 374. (219. 220. 380.) NIL) (+ 370. ((353. 385. 380.) 219. 220. 380.) NIL)))) COMMENT (ALL 383. (ALL 382. (ALL 381. (IMPL (AND (+ 254. (219. 220.) NIL) (AND (+ 299. (381. 219.) NIL) (+ 299. (382. 219.) NIL))) (IMPL (ALL 369. (ALL 384. (IMPL (AND (+ 300. (384. 381.) NIL) (+ 300. (369. 382.) NIL)) (+ 300. ((357. 220. 384. 369.) 383.) NIL)))) (+ 299. ((357. 220. 381. 382.) 383.) NIL)))))) COMMENT (ALL 392. (ALL 391. (IMPL (+ 374. (219. 220. 391.) NIL) (ALL 390. (EQV (+ 389. ((357. 220. (360. 390. 220. 391.) (357. 220. 392. 390.)) 392.) (KIND (EQV T 660.))) (+ 300. (390. (339. 392.)) (KIND (EQV NIL 660.)))))))) COMMENT (ALL 388. (IMPL (+ 374. (219. 220. 388.) NIL) (ALL 363. (ALL 387. (+ 389. ((360. (357. 220. 387. 363.) 220. 388.) (357. 220. (360. 363. 220. 388.) (360. 387. 220. 388.))) NIL))))) COMMENT (ALL 393. (ALL 368. (ALL 365. (+ 389. ((357. 220. 365. (357. 220. 368. 393.)) (357. 220. (357. 220. 365. 368.) 393.)) NIL)))))) (QUOTE ((* THEOREM 5.16.UHG *) (ALL RHO:L.CONGRUENCE-S ALL E:ELEMENT.F GROUP (F CONN.F E) IMPL SUBSEMIGROUP (NORMALISATOR (PREIMAGE (RHO E)) F CONN.F)))) (QUOTE (COMMENT (ALL 394. (ALL 395. (IMPL (+ 374. (219. 220. 395.) NIL) (+ 377. ((339. (353. 394. 395.)) 219. 220.) NIL)))))) (QUOTE ("                                                                         " "*************************************************************************" " EDIT:     AXIOMS AND THEOREMS EDITED:   10-MAR-86 10:25:01" "*************************************************************************")) (PROGN(PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (99308. 99313. 99318. 99373. 99368. 99363. 99358. 99343. 99338. 99488. 99408. 99383. 99388. 99393. 99398. 99403. 99483. ATP.MEMORY.NIL 99468. 99453. ATP.MEMORY.NIL 99448. 99433. ATP.MEMORY.NIL 99428. 99423. 99378. 99323. ATP.MEMORY.NIL ATP.MEMORY.NIL 99328. ATP.MEMORY.NIL 99333. ATP.MEMORY.NIL ATP.MEMORY.NIL 99740. 99726. 99712. 99698. 99684. 99670. ATP.MEMORY.NIL 99656. 99642. 99628. 99614. 99600. 99586. 99572. 99558. 99544. 99530. ATP.MEMORY.NIL ATP.MEMORY.NIL 99516. ATP.MEMORY.NIL 99502. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 99770. 99755. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 99785. 99800. 99815. 99830. 99845. 99860. 99875. 99890. 99905. 99920. 99935. 99950. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 99955. 99960. 99965. 99970. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 99985. 100000.))) (DATALIST (QUOTE (15. "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1. (POSITIVE))) ((+ 1. (NEGATIVE))) ((+ 1. (NIL))) ((- 1. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2. (POSITIVE))) ((+ 2. (NEGATIVE))) ((+ 2. (NIL))) ((- 2. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. SET "F" (DT*ST-KIND NIL) CONSTANT 5. BINARY.FUNC "CONN.F" (DT*ST-KIND NIL) CONSTANT 5. NAT "1" (DT*ST-KIND NIL) CONSTANT 5. BINARY.FUNC "CONN.F.RHO" (DT*ST-KIND NIL) CONSTANT 15. "SEMIGROUP" NIL NIL (SET BINARY.FUNC) NIL NIL ((- 254. (POSITIVE))) ((+ 254. (NEGATIVE))) ((+ 254. (NIL))) ((- 254. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "L.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 255. (POSITIVE))) ((+ 255. (NEGATIVE))) ((+ 255. (NIL))) ((- 255. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "R.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 256. (POSITIVE))) ((+ 256. (NEGATIVE))) ((+ 256. (NIL))) ((- 256. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "CONGRUENCE" NIL NIL (EQU.REL-S) NIL NIL ((- 257. (POSITIVE))) ((+ 257. (NEGATIVE))) ((+ 257. (NIL))) ((- 257. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "IN.RELATION" NIL NIL (REL ELEMENT.F ELEMENT.F) NIL NIL ((- 258. (POSITIVE))) ((+ 258. (NEGATIVE))) ((+ 258. (NIL))) ((- 258. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "INJECTIVE" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 259. (POSITIVE))) ((+ 259. (NEGATIVE))) ((+ 259. (NIL))) ((- 259. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "SURJECTIVE" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 260. (POSITIVE))) ((+ 260. (NEGATIVE))) ((+ 260. (NIL))) ((- 260. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "BIJECTIVE" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 261. (POSITIVE))) ((+ 261. (NEGATIVE))) ((+ 261. (NIL))) ((- 261. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "HOMOMORPH" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 262. (POSITIVE))) ((+ 262. (NEGATIVE))) ((+ 262. (NIL))) ((- 262. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "ISOMORPH" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 263. (POSITIVE))) ((+ 263. (NEGATIVE))) ((+ 263. (NIL))) ((- 263. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "EPIMORPH" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 264. (POSITIVE))) ((+ 264. (NEGATIVE))) ((+ 264. (NIL))) ((- 264. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MAPPING" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 265. (POSITIVE))) ((+ 265. (NEGATIVE))) ((+ 265. (NIL))) ((- 265. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MEMBER" NIL NIL (SET SET) NIL NIL ((- 300. (POSITIVE))) ((+ 300. (NEGATIVE))) ((+ 300. (NIL))) ((- 300. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "SUBSET" NIL NIL (SET SET) NIL NIL ((- 299. (POSITIVE))) ((+ 299. (NEGATIVE))) ((+ 299. (NIL))) ((- 299. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "INVERSE.EL" NIL ELEMENT (SET BINARY.FUNC ELEMENT) NIL NIL NIL NIL NIL 3. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY1" NIL SET (UNARY.FUNC SET) NIL NIL NIL NIL NIL 2. SET (DT*ST-KIND NIL) FUNCTION 14. "APPLY1-EL" NIL ELEMENT (UNARY.FUNC ELEMENT) NIL NIL NIL NIL NIL 2. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY2" NIL SET (BINARY.FUNC SET SET) NIL NIL NIL NIL NIL 3. SET (DT*ST-KIND NIL) FUNCTION 14. "APPLY2-EL" NIL ELEMENT (BINARY.FUNC ELEMENT ELEMENT) NIL NIL NIL NIL NIL 3. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY2-EL.F" NIL ELEMENT.F (BINARY.FUNC ELEMENT.F ELEMENT.F) NIL NIL NIL NIL NIL 3. ELEMENT.F (DT*ST-KIND NIL) FUNCTION 14. "PREIMAGE" NIL SET (REL ELEMENT) NIL NIL NIL NIL NIL 2. SET (DT*ST-KIND NIL) FUNCTION 14. "POWER" NIL REL (REL NAT) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "PLUS" NIL NAT (NAT NAT) NIL NIL NIL NIL NIL 2. NAT (DT*ST-KIND NIL) FUNCTION 14. "MODULO" NIL SET (EQU.REL-S) NIL NIL NIL NIL NIL 1. SET (DT*ST-KIND NIL) FUNCTION 14. "COMP" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.CLOS" NIL REL (REL) NIL NIL NIL NIL NIL 1. REL (DT*ST-KIND NIL) FUNCTION 14. "UNION-REL" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.UNION" NIL EQU.REL-S (EQU.REL-S EQU.REL-S) NIL NIL NIL NIL NIL 2. EQU.REL-S (DT*ST-KIND NIL) FUNCTION 14. "CAN.PROJ" NIL UNARY.FUNC (EQU.REL-S) NIL NIL NIL NIL NIL 1. UNARY.FUNC (DT*ST-KIND NIL) FUNCTION 14. "IND.EQU.REL" NIL EQU.REL-S (UNARY.FUNC SET) NIL NIL NIL NIL NIL 2. EQU.REL-S (DT*ST-KIND NIL) FUNCTION 14. "MOD.PHI" NIL UNARY.FUNC (UNARY.FUNC SET) NIL NIL NIL NIL NIL 2. UNARY.FUNC (DT*ST-KIND NIL) FUNCTION 14. "NORMALISATOR" NIL SET (SET) NIL NIL NIL NIL NIL 1. SET (DT*ST-KIND NIL) FUNCTION 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "NOT.EMPTY" NIL NIL (ANY) NIL NIL ((- 379. (POSITIVE))) ((+ 379. (NEGATIVE))) ((+ 379. (NIL))) ((- 379. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "SUBSEMIGROUP" NIL NIL (ANY ANY ANY) NIL NIL ((- 377. (POSITIVE))) ((+ 377. (NEGATIVE))) ((+ 377. (NIL))) ((- 377. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "GROUP" NIL NIL (ANY ANY ANY) NIL NIL ((- 374. (POSITIVE))) ((+ 374. (NEGATIVE))) ((+ 374. (NIL))) ((- 374. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ANY "E" (DT*ST-KIND NIL) CONSTANT 15. "SUBGROUP" NIL NIL (ANY ANY ANY ANY) NIL NIL ((- 370. (POSITIVE))) ((+ 370. (NEGATIVE))) ((+ 370. (NIL))) ((- 370. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. L.CONGRUENCE-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 389. (POSITIVE . SYMMETRIC))) ((+ 389. (NEGATIVE . SYMMETRIC))) ((+ 389. (NIL . SYMMETRIC))) ((- 389. (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. L.CONGRUENCE-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 100000.)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 100000.) (SETQ COUNTER1 396.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0.) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 100000.) (MEM-INITIALIZE 100000.))) (SETQ COUNTER1 396.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 100000.) (RPAQ MEM*NEXT.RADR (IPLUS 99303. INCREMENT))) (T (RPAQ MEM*NEXT.RADR 99303.))) (RPAQ MEM*NEXT.VADR 396.) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S EQU.REL-S BINARY.FUNC UNARY.FUNC REL NAT ELEMENT.F ELEMENT FUNCTION SET ANY)) (RPAQQ DT*SORT.NR 103.) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0.) (RPAQQ DT*CONSTANT.COUNTER 0.) (RPAQQ DT*CONSTANT.ALL (371. 222. 221. 220. 219.)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0.) (RPAQQ DT*FUNCTION.ALL (339. 341. 344. 345. 346. 347. 348. 349. 350. 351. 352. 353. 355. 356. 357. 358. 359. 360.)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0.) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES (389.)) (RPAQQ DT*NONEQUALITY.PREDICATES (370. 374. 377. 379. 299. 300. 265. 264. 263. 262. 261. 260. 259. 258. 257. 256. 255. 254. 2. 1.)) (RPAQQ DT*PREDICATE.ALL (389. 370. 374. 377. 379. 299. 300. 265. 264. 263. 262. 261. 260. 259. 258. 257. 256. 255. 254. 2. 1.)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1.) (RPAQQ DT*FALSE.PREDICATE 2.) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (PROGN (REMPROPS (QUOTE DT*PREDICATE.WITH.ATTRIBUTES)) (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (NCONC (QUOTE (DEFINED (389.) SYMMETRIC (389.) REFLEXIVE (389.))) (GETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES))))))
(PROGN (PROGN (REMPROPS (QUOTE CONGRUENCE-S)) (SETPROPLIST (QUOTE CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 102. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (CONGRUENCE-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S CONGRUENCE-S) (L.CONGRUENCE-S CONGRUENCE-S) (EQU.REL-S CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET CONGRUENCE-S) (ANY CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (CONGRUENCE-S) DT*DIRECT.SUPERSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*INVERSE.TRANSITIVE.CLOSURE (CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE R.CONGRUENCE-S)) (SETPROPLIST (QUOTE R.CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 101. DT*DIRECT.SUBSORTS (CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (CONGRUENCE-S R.CONGRUENCE-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S CONGRUENCE-S) (EQU.REL-S R.CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL R.CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET R.CONGRUENCE-S) (ANY R.CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (R.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (EQU.REL-S) DT*INVERSE.TRANSITIVE.CLOSURE (R.CONGRUENCE-S EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE R.CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE L.CONGRUENCE-S)) (SETPROPLIST (QUOTE L.CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 100. DT*DIRECT.SUBSORTS (CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (CONGRUENCE-S L.CONGRUENCE-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S L.CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL L.CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET L.CONGRUENCE-S) (ANY L.CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (L.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (EQU.REL-S) DT*INVERSE.TRANSITIVE.CLOSURE (L.CONGRUENCE-S EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE L.CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE EQU.REL-S)) (SETPROPLIST (QUOTE EQU.REL-S) (NCONC (QUOTE (DT*SORT.NUMBER 99. DT*DIRECT.SUBSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (R.CONGRUENCE-S L.CONGRUENCE-S CONGRUENCE-S EQU.REL-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL EQU.REL-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET EQU.REL-S) (ANY EQU.REL-S)) DT*MINIMAL.SUBSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (REL) DT*INVERSE.TRANSITIVE.CLOSURE (EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE EQU.REL-S))))) (PROGN (REMPROPS (QUOTE BINARY.FUNC)) (SETPROPLIST (QUOTE BINARY.FUNC) (NCONC (QUOTE (DT*SORT.NUMBER 98. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (BINARY.FUNC) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION BINARY.FUNC) (SET) (ANY BINARY.FUNC)) DT*MINIMAL.SUBSORTS (BINARY.FUNC) DT*DIRECT.SUPERSORTS (FUNCTION) DT*INVERSE.TRANSITIVE.CLOSURE (BINARY.FUNC FUNCTION ANY))) (GETPROPLIST (QUOTE BINARY.FUNC))))) (PROGN (REMPROPS (QUOTE UNARY.FUNC)) (SETPROPLIST (QUOTE UNARY.FUNC) (NCONC (QUOTE (DT*SORT.NUMBER 97. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (UNARY.FUNC) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION UNARY.FUNC) (SET) (ANY UNARY.FUNC)) DT*MINIMAL.SUBSORTS (UNARY.FUNC) DT*DIRECT.SUPERSORTS (FUNCTION) DT*INVERSE.TRANSITIVE.CLOSURE (UNARY.FUNC FUNCTION ANY))) (GETPROPLIST (QUOTE UNARY.FUNC))))) (PROGN (REMPROPS (QUOTE REL)) (SETPROPLIST (QUOTE REL) (NCONC (QUOTE (DT*SORT.NUMBER 96. DT*DIRECT.SUBSORTS (EQU.REL-S) DT*TRANSITIVE.CLOSURE (EQU.REL-S CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S REL) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET REL) (ANY REL)) DT*MINIMAL.SUBSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (REL SET ANY))) (GETPROPLIST (QUOTE REL))))) (PROGN (REMPROPS (QUOTE NAT)) (SETPROPLIST (QUOTE NAT) (NCONC (QUOTE (DT*SORT.NUMBER 95. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (NAT) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET NAT) (ANY NAT)) DT*MINIMAL.SUBSORTS (NAT) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (NAT SET ANY))) (GETPROPLIST (QUOTE NAT))))) (PROGN (REMPROPS (QUOTE ELEMENT.F)) (SETPROPLIST (QUOTE ELEMENT.F) (NCONC (QUOTE (DT*SORT.NUMBER 94. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (ELEMENT.F) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT.F) (FUNCTION) (SET ELEMENT.F) (ANY ELEMENT.F)) DT*MINIMAL.SUBSORTS (ELEMENT.F) DT*DIRECT.SUPERSORTS (ELEMENT) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT.F ELEMENT SET ANY))) (GETPROPLIST (QUOTE ELEMENT.F))))) (PROGN (REMPROPS (QUOTE ELEMENT)) (SETPROPLIST (QUOTE ELEMENT) (NCONC (QUOTE (DT*SORT.NUMBER 93. DT*DIRECT.SUBSORTS (ELEMENT.F) DT*TRANSITIVE.CLOSURE (ELEMENT.F ELEMENT) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION) (SET ELEMENT) (ANY ELEMENT)) DT*MINIMAL.SUBSORTS (ELEMENT.F) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT SET ANY))) (GETPROPLIST (QUOTE ELEMENT))))) (PROGN (REMPROPS (QUOTE FUNCTION)) (SETPROPLIST (QUOTE FUNCTION) (NCONC (QUOTE (DT*SORT.NUMBER 92. DT*DIRECT.SUBSORTS (BINARY.FUNC UNARY.FUNC) DT*TRANSITIVE.CLOSURE (BINARY.FUNC UNARY.FUNC FUNCTION) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION FUNCTION) (SET) (ANY FUNCTION)) DT*MINIMAL.SUBSORTS (BINARY.FUNC UNARY.FUNC) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (FUNCTION ANY))) (GETPROPLIST (QUOTE FUNCTION))))) (PROGN (REMPROPS (QUOTE SET)) (SETPROPLIST (QUOTE SET) (NCONC (QUOTE (DT*SORT.NUMBER 91. DT*DIRECT.SUBSORTS (REL NAT ELEMENT) DT*TRANSITIVE.CLOSURE (REL NAT ELEMENT R.CONGRUENCE-S L.CONGRUENCE-S CONGRUENCE-S ELEMENT.F EQU.REL-S SET) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL REL) (NAT NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION) (SET SET) (ANY SET)) DT*MINIMAL.SUBSORTS (R.CONGRUENCE-S NAT ELEMENT.F L.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SET ANY))) (GETPROPLIST (QUOTE SET))))) (PROGN (REMPROPS (QUOTE ANY)) (SETPROPLIST (QUOTE ANY) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (FUNCTION SET) DT*SORT.NUMBER 1. DT*TRANSITIVE.CLOSURE (FUNCTION SET ELEMENT.F EQU.REL-S CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S REL NAT ELEMENT BINARY.FUNC UNARY.FUNC ANY) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL REL) (NAT NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION FUNCTION) (SET SET) (ANY ANY)) DT*MINIMAL.SUBSORTS (BINARY.FUNC ELEMENT.F R.CONGRUENCE-S L.CONGRUENCE-S NAT UNARY.FUNC) DT*DIRECT.SUPERSORTS NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*LEAST.SUPERSORTS ((ANY ANY)))) (GETPROPLIST (QUOTE ANY))))))
))
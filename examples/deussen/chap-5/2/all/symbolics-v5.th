;;; -*- Package: IL; Base: 10. -*-
(COND ((FMT-LOAD "11-SEP-85 10:04:05"
NIL(((* THEOREM 5.2) COMMENT COMMENT) ((ALL RHO:EQU.RELATION SEMIGROUP (F MAL.F) IMPL (L.CONGRUENCE (RHO) EQV (ALL G,H:EL.F SUBSET (EL*SUBSET.F (MAL.F H PREIMAGE (RHO G)) PREIMAGE (RHO APPLY2 (MAL.F H G)))))) (ALL 47. (IMPL (+ 25. (27. 26.) NIL) (EQV (+ 22. (47.) (KIND (EQV T 30.))) (ALL 49. (ALL 48. (+ 30. ((15. 26. 49. (14. 47. 48.)) (14. 47. (17. 26. 49. 48.))) (KIND (EQV NIL 30.)))))))) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (49694. 49699. 49704. 49709. 49714. 49719. 49724. 49729. 49734. 49739. 49744. 49749. 49764. 49769. 49774. 49779. 49784. 49799. 49804. 49819. 49824. 49829. 49970. 49965. 49960. 49945. ATP.MEMORY.NIL 49930. 49915. 49900. 49885. ATP.MEMORY.NIL 49871. ATP.MEMORY.NIL 49857. 49843. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 49985. 50000.))) (DATALIST (QUOTE (15. "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1. (POSITIVE))) ((+ 1. (NEGATIVE))) ((+ 1. (NIL))) ((- 1. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2. (POSITIVE))) ((+ 2. (NEGATIVE))) ((+ 2. (NIL))) ((- 2. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. SET "F" (DT*ST-KIND NIL) CONSTANT 5. SYMB.FUNCTION2 "MAL.F" (DT*ST-KIND NIL) CONSTANT 15. "SEMIGROUP" NIL NIL (SET SYMB.FUNCTION2) NIL NIL ((- 25. (POSITIVE))) ((+ 25. (NEGATIVE))) ((+ 25. (NIL))) ((- 25. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "IN.RELATION" NIL NIL (REL ELEMENT ELEMENT) NIL NIL ((- 24. (POSITIVE))) ((+ 24. (NEGATIVE))) ((+ 24. (NIL))) ((- 24. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "L.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 22. (POSITIVE))) ((+ 22. (NEGATIVE))) ((+ 22. (NIL))) ((- 22. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "R.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 21. (POSITIVE))) ((+ 21. (NEGATIVE))) ((+ 21. (NIL))) ((- 21. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "CONGRUENCE" NIL NIL (REL) NIL NIL ((- 20. (POSITIVE))) ((+ 20. (NEGATIVE))) ((+ 20. (NIL))) ((- 20. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "PAIR" NIL ELEMENT (ELEMENT ELEMENT) NIL NIL NIL NIL NIL 2. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY2" NIL ELEMENT (SYMB.FUNCTION2 ELEMENT ELEMENT) NIL NIL NIL NIL NIL 3. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "EL*SUBSET.F" NIL SET (SYMB.FUNCTION2 ELEMENT SET) NIL NIL NIL NIL NIL 3. SET (DT*ST-KIND NIL) FUNCTION 14. "PREIMAGE" NIL SET (REL ELEMENT) NIL NIL NIL NIL NIL 2. SET (DT*ST-KIND NIL) FUNCTION 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "SUBSET" NIL NIL (ANY ANY) NIL NIL ((- 30. (POSITIVE))) ((+ 30. (NEGATIVE))) ((+ 30. (NIL))) ((- 30. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "EL" NIL NIL (ANY ANY) NIL NIL ((- 32. (POSITIVE))) ((+ 32. (NEGATIVE))) ((+ 32. (NIL))) ((- 32. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 37. (POSITIVE . SYMMETRIC))) ((+ 37. (NEGATIVE . SYMMETRIC))) ((+ 37. (NIL . SYMMETRIC))) ((- 37. (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. EQU.RELATION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EQU.RELATION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 50000.)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 50000.) (SETQ COUNTER1 50.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0.) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 50000.) (MEM-INITIALIZE 50000.))) (SETQ COUNTER1 50.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 50000.) (RPAQ MEM*NEXT.RADR (IPLUS 49689. INCREMENT))) (T (RPAQ MEM*NEXT.RADR 49689.))) (RPAQ MEM*NEXT.VADR 50.) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (SYMB.FUNCTION2 EL.F ELEMENT EQU.RELATION REL SET ANY)) (RPAQQ DT*SORT.NR 14.) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0.) (RPAQQ DT*CONSTANT.COUNTER 0.) (RPAQQ DT*CONSTANT.ALL (26. 27.)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0.) (RPAQQ DT*FUNCTION.ALL (14. 15. 17. 19.)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0.) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES (37.)) (RPAQQ DT*NONEQUALITY.PREDICATES (32. 30. 20. 21. 22. 24. 25. 2. 1.)) (RPAQQ DT*PREDICATE.ALL (37. 32. 30. 20. 21. 22. 24. 25. 2. 1.)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1.) (RPAQQ DT*FALSE.PREDICATE 2.) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (PROGN (REMPROPS (QUOTE DT*PREDICATE.WITH.ATTRIBUTES)) (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (NCONC (QUOTE (SYMMETRIC (37. 37.) REFLEXIVE (37. 37.) DEFINED (37.))) (GETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES))))))
(PROGN (PROGN (REMPROPS (QUOTE SYMB.FUNCTION2)) (SETPROPLIST (QUOTE SYMB.FUNCTION2) (NCONC (QUOTE (DT*SORT.NUMBER 13. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (SYMB.FUNCTION2) DT*MAX.SUBSORTS ((SYMB.FUNCTION2 SYMB.FUNCTION2) (EL.F) (ELEMENT) (EQU.RELATION) (REL) (SET) (ANY SYMB.FUNCTION2)) DT*MINIMAL.SUBSORTS (SYMB.FUNCTION2) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SYMB.FUNCTION2 ANY))) (GETPROPLIST (QUOTE SYMB.FUNCTION2))))) (PROGN (REMPROPS (QUOTE EL.F)) (SETPROPLIST (QUOTE EL.F) (NCONC (QUOTE (DT*SORT.NUMBER 12. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (EL.F) DT*MAX.SUBSORTS ((SYMB.FUNCTION2) (EL.F EL.F) (ELEMENT EL.F) (EQU.RELATION) (REL) (SET EL.F) (ANY EL.F)) DT*MINIMAL.SUBSORTS (EL.F) DT*DIRECT.SUPERSORTS (ELEMENT) DT*INVERSE.TRANSITIVE.CLOSURE (EL.F ELEMENT SET ANY))) (GETPROPLIST (QUOTE EL.F))))) (PROGN (REMPROPS (QUOTE ELEMENT)) (SETPROPLIST (QUOTE ELEMENT) (NCONC (QUOTE (DT*SORT.NUMBER 11. DT*DIRECT.SUBSORTS (EL.F) DT*TRANSITIVE.CLOSURE (EL.F ELEMENT) DT*MAX.SUBSORTS ((SYMB.FUNCTION2) (EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION) (REL) (SET ELEMENT) (ANY ELEMENT)) DT*MINIMAL.SUBSORTS (EL.F) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT SET ANY))) (GETPROPLIST (QUOTE ELEMENT))))) (PROGN (REMPROPS (QUOTE EQU.RELATION)) (SETPROPLIST (QUOTE EQU.RELATION) (NCONC (QUOTE (DT*SORT.NUMBER 10. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (EQU.RELATION) DT*MAX.SUBSORTS ((SYMB.FUNCTION2) (EL.F) (ELEMENT) (EQU.RELATION EQU.RELATION) (REL EQU.RELATION) (SET EQU.RELATION) (ANY EQU.RELATION)) DT*MINIMAL.SUBSORTS (EQU.RELATION) DT*DIRECT.SUPERSORTS (REL) DT*INVERSE.TRANSITIVE.CLOSURE (EQU.RELATION REL SET ANY))) (GETPROPLIST (QUOTE EQU.RELATION))))) (PROGN (REMPROPS (QUOTE REL)) (SETPROPLIST (QUOTE REL) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (EQU.RELATION) DT*SORT.NUMBER 3. DT*TRANSITIVE.CLOSURE (EQU.RELATION REL) DT*MAX.SUBSORTS ((SYMB.FUNCTION2) (EL.F) (ELEMENT) (EQU.RELATION EQU.RELATION) (REL REL) (SET REL) (ANY REL)) DT*MINIMAL.SUBSORTS (EQU.RELATION) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (REL SET ANY) DT*LEAST.SUPERSORTS ((REL REL) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE REL))))) (PROGN (REMPROPS (QUOTE SET)) (SETPROPLIST (QUOTE SET) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (ELEMENT REL) DT*SORT.NUMBER 2. DT*TRANSITIVE.CLOSURE (ELEMENT REL EQU.RELATION EL.F SET) DT*MAX.SUBSORTS ((SYMB.FUNCTION2) (EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION EQU.RELATION) (REL REL) (SET SET) (ANY SET)) DT*MINIMAL.SUBSORTS (EL.F EQU.RELATION) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SET ANY) DT*LEAST.SUPERSORTS ((REL SET) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE SET))))) (PROGN (REMPROPS (QUOTE ANY)) (SETPROPLIST (QUOTE ANY) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (SYMB.FUNCTION2 SET) DT*SORT.NUMBER 1. DT*TRANSITIVE.CLOSURE (SYMB.FUNCTION2 SET EQU.RELATION EL.F ELEMENT REL ANY) DT*MAX.SUBSORTS ((SYMB.FUNCTION2 SYMB.FUNCTION2) (EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION EQU.RELATION) (REL REL) (SET SET) (ANY ANY)) DT*MINIMAL.SUBSORTS (EQU.RELATION EL.F) DT*DIRECT.SUPERSORTS NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*LEAST.SUPERSORTS ((REL ANY) (SET ANY) (ANY ANY)))) (GETPROPLIST (QUOTE ANY))))))
(PROGN (RPAQQ ST*STACK1 (NIL ((X_49 PROGN (DT-VARIABLE.DELETE 49.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_49) ST*SYMBOL.ADDRESSES))) (X_48 PROGN (DT-VARIABLE.DELETE 48.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_48) ST*SYMBOL.ADDRESSES))) (X_47 PROGN (DT-VARIABLE.DELETE 47.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_47) ST*SYMBOL.ADDRESSES)))) NIL NIL)) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1.) (FALSE . 2.) (SET . T) (REL . T) (EQU.RELATION . T) (ELEMENT . T) (EL.F . T) (SYMB.FUNCTION2 . T) (F . 27.) (MAL.F . 26.) (SEMIGROUP . 25.) (IN.RELATION . 24.) (L.CONGRUENCE . 22.) (R.CONGRUENCE . 21.) (CONGRUENCE . 20.) (PAIR . 19.) (APPLY2 . 17.) (EL*SUBSET.F . 15.) (PREIMAGE . 14.) (X_28 . 28.) (X_29 . 29.) (SUBSET . 30.) (X_31 . 31.) (EL . 32.) (X_33 . 33.) (X_34 . 34.) (X_35 . 35.) (X_36 . 36.) (= . 37.) (X_38 . 38.) (X_39 . 39.) (X_40 . 40.) (X_41 . 41.) (X_42 . 42.) (X_43 . 43.) (X_44 . 44.) (X_45 . 45.) (X_46 . 46.) (X_47 . 47.) (X_48 . 48.) (X_49 . 49.))))))))
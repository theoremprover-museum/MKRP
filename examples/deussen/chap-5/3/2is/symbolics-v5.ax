;;; -*- Package: IL; Base: 10. -*-
(COND ((FMT-LOAD "12-SEP-85 11:44:04"
NIL(((SORT SET:ANY) (+ 1. NIL) TYPE) ((SORT REL:SET) (+ 1. NIL) TYPE) ((SORT EQU.RELATION:REL) (+ 1. NIL) TYPE) ((SORT ELEMENT:SET) (+ 1. NIL) TYPE) ((SORT EL.F:ELEMENT) (+ 1. NIL) TYPE) ((SORT SYMB.FUNCTION2:ANY) (+ 1. NIL) TYPE) ((SORT NAT:SET) (+ 1. NIL) TYPE) ((TYPE 1:NAT) (+ 1. NIL) TYPE) ((TYPE PLUS (NAT NAT) :NAT) (+ 1. NIL) TYPE) ((TYPE F:SET) (+ 1. NIL) TYPE) ((TYPE MAL.F:SYMB.FUNCTION2) (+ 1. NIL) TYPE) ((TYPE SEMIGROUP (SET SYMB.FUNCTION2)) (+ 1. NIL) TYPE) ((TYPE IN.RELATION (REL EL.F EL.F)) (+ 1. NIL) TYPE) ((TYPE L.CONGRUENCE (REL)) (+ 1. NIL) TYPE) ((TYPE R.CONGRUENCE (REL)) (+ 1. NIL) TYPE) ((TYPE CONGRUENCE (REL)) (+ 1. NIL) TYPE) ((TYPE APPLY2.F (SYMB.FUNCTION2 EL.F EL.F) :EL.F) (+ 1. NIL) TYPE) ((TYPE EL*SUBSET.F (SYMB.FUNCTION2 ELEMENT SET) :SET) (+ 1. NIL) TYPE) ((TYPE PREIMAGE (REL EL.F) :SET) (+ 1. NIL) TYPE) ((TYPE COMP (REL REL) :REL) (+ 1. NIL) TYPE) ((TYPE UNION.REL (REL REL) :REL) (+ 1. NIL) TYPE) ((TYPE POWER (REL NAT) :REL) (+ 1. NIL) TYPE) ((TYPE TRANS.CLOS (REL) :REL) (+ 1. NIL) TYPE) ((TYPE TRANS.UNION (EQU.RELATION EQU.RELATION) :EQU.RELATION) (+ 1. NIL) TYPE) ((* DEFINITION P) COMMENT COMMENT) ((ALL RHO,SIGMA:EQU.RELATION ALL N:NAT L.CONGRUENCE (RHO) AND L.CONGRUENCE (SIGMA) IMPL (P (RHO SIGMA N) EQV (ALL F1,F2,G:EL.F IN.RELATION (POWER (UNION.REL (RHO SIGMA) N) F1 F2) IMPL IN.RELATION (POWER (UNION.REL (RHO SIGMA) N) APPLY2.F (MAL.F G F1) APPLY2.F (MAL.F G F2))))) (ALL 59. (ALL 58. (ALL 60. (IMPL (AND (+ 47. (58.) NIL) (+ 47. (59.) NIL)) (EQV (+ 61. (58. 59. 60.) (KIND (EQV T 270.))) (ALL 64. (ALL 63. (ALL 62. (IMPL (+ 46. ((55. (54. 58. 59.) 60.) 62. 63.) (KIND (EQV NIL 270.))) (+ 46. ((55. (54. 58. 59.) 60.) (50. 44. 64. 62.) (50. 44. 64. 63.)) (KIND (EQV NIL 270.)))))))))))) QUANTIFICATION) ((* DEFINITION POWER) COMMENT COMMENT) ((ALL RHO:REL POWER (RHO 1.) = RHO) (ALL 65. (+ 66. ((55. 65. 41.) 65.) NIL)) QUANTIFICATION) ((ALL RHO:REL ALL N:NAT POWER (RHO PLUS (N 1.)) = COMP (POWER (RHO N) RHO)) (ALL 67. (ALL 68. (+ 66. ((55. 67. (42. 68. 41.)) (53. (55. 67. 68.) 67.)) NIL))) QUANTIFICATION) ((* DEFINITION COMP) COMMENT COMMENT) ((ALL RHO,SIGMA:REL ALL A,B:EL.F IN.RELATION (COMP (RHO SIGMA) A B) EQV (EX C:EL.F IN.RELATION (RHO A C) AND IN.RELATION (SIGMA C B))) (ALL 70. (ALL 69. (ALL 72. (ALL 71. (EQV (+ 46. ((53. 69. 70.) 71. 72.) (KIND (EQV T 320.))) (EX 73. (AND (+ 46. (69. 71. 73.) (KIND (EQV NIL 320.))) (+ 46. (70. 73. 72.) (KIND (EQV NIL 320.)))))))))) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (49659. 49664. 49669. 49674. 49679. 49684. 49689. 49704. 49709. 49714. 49719. 49724. 49739. 49744. 49749. 49754. 49768. 49782. 49796. 49810. 49824. 49838. 49852. 49866. 49881. 49896. 49911. 49926. 49941. 49946. 49951. 49965. 49970. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 49985. 50000.))) (DATALIST (QUOTE (15. "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1. (POSITIVE))) ((+ 1. (NEGATIVE))) ((+ 1. (NIL))) ((- 1. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2. (POSITIVE))) ((+ 2. (NEGATIVE))) ((+ 2. (NIL))) ((- 2. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. NAT "1" (DT*ST-KIND NIL) CONSTANT 14. "PLUS" NIL NAT (NAT NAT) NIL NIL NIL NIL NIL 2. NAT (DT*ST-KIND NIL) FUNCTION 5. SET "F" (DT*ST-KIND NIL) CONSTANT 5. SYMB.FUNCTION2 "MAL.F" (DT*ST-KIND NIL) CONSTANT 15. "SEMIGROUP" NIL NIL (SET SYMB.FUNCTION2) NIL NIL ((- 45. (POSITIVE))) ((+ 45. (NEGATIVE))) ((+ 45. (NIL))) ((- 45. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "IN.RELATION" NIL NIL (REL EL.F EL.F) NIL NIL ((- 46. (POSITIVE))) ((+ 46. (NEGATIVE))) ((+ 46. (NIL))) ((- 46. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "L.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 47. (POSITIVE))) ((+ 47. (NEGATIVE))) ((+ 47. (NIL))) ((- 47. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "R.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 48. (POSITIVE))) ((+ 48. (NEGATIVE))) ((+ 48. (NIL))) ((- 48. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "CONGRUENCE" NIL NIL (REL) NIL NIL ((- 49. (POSITIVE))) ((+ 49. (NEGATIVE))) ((+ 49. (NIL))) ((- 49. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "APPLY2.F" NIL EL.F (SYMB.FUNCTION2 EL.F EL.F) NIL NIL NIL NIL NIL 3. EL.F (DT*ST-KIND NIL) FUNCTION 14. "EL*SUBSET.F" NIL SET (SYMB.FUNCTION2 ELEMENT SET) NIL NIL NIL NIL NIL 3. SET (DT*ST-KIND NIL) FUNCTION 14. "PREIMAGE" NIL SET (REL EL.F) NIL NIL NIL NIL NIL 2. SET (DT*ST-KIND NIL) FUNCTION 14. "COMP" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "UNION.REL" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "POWER" NIL REL (REL NAT) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.CLOS" NIL REL (REL) NIL NIL NIL NIL NIL 1. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.UNION" NIL EQU.RELATION (EQU.RELATION EQU.RELATION) NIL NIL NIL NIL NIL 2. EQU.RELATION (DT*ST-KIND NIL) FUNCTION 5. EQU.RELATION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EQU.RELATION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. NAT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "P" NIL NIL (ANY ANY ANY) NIL NIL ((- 61. (POSITIVE))) ((+ 61. (NEGATIVE))) ((+ 61. (NIL))) ((- 61. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 66. (POSITIVE . SYMMETRIC))) ((+ 66. (NEGATIVE . SYMMETRIC))) ((+ 66. (NIL . SYMMETRIC))) ((- 66. (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. NAT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 50000.)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 50000.) (SETQ COUNTER1 74.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0.) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 50000.) (MEM-INITIALIZE 50000.))) (SETQ COUNTER1 74.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 50000.) (RPAQ MEM*NEXT.RADR (IPLUS 49654. INCREMENT))) (T (RPAQ MEM*NEXT.RADR 49654.))) (RPAQ MEM*NEXT.VADR 74.) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (NAT SYMB.FUNCTION2 EL.F ELEMENT EQU.RELATION REL SET ANY)) (RPAQQ DT*SORT.NR 15.) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0.) (RPAQQ DT*CONSTANT.COUNTER 0.) (RPAQQ DT*CONSTANT.ALL (44. 43. 41.)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0.) (RPAQQ DT*FUNCTION.ALL (57. 56. 55. 54. 53. 52. 51. 50. 42.)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0.) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES (66.)) (RPAQQ DT*NONEQUALITY.PREDICATES (61. 49. 48. 47. 46. 45. 2. 1.)) (RPAQQ DT*PREDICATE.ALL (66. 61. 49. 48. 47. 46. 45. 2. 1.)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1.) (RPAQQ DT*FALSE.PREDICATE 2.) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (PROGN (REMPROPS (QUOTE DT*PREDICATE.WITH.ATTRIBUTES)) (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (NCONC (QUOTE (DEFINED (66.) SYMMETRIC (66.) REFLEXIVE (66.))) (GETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES))))))
(PROGN (PROGN (REMPROPS (QUOTE NAT)) (SETPROPLIST (QUOTE NAT) (NCONC (QUOTE (DT*DIRECT.SUBSORTS NIL DT*SORT.NUMBER 14. DT*TRANSITIVE.CLOSURE (NAT) DT*MAX.SUBSORTS ((NAT NAT) (SYMB.FUNCTION2) (EL.F) (ELEMENT) (EQU.RELATION) (REL) (SET NAT) (ANY NAT)) DT*MINIMAL.SUBSORTS (NAT) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (NAT SET ANY))) (GETPROPLIST (QUOTE NAT))))) (PROGN (REMPROPS (QUOTE SYMB.FUNCTION2)) (SETPROPLIST (QUOTE SYMB.FUNCTION2) (NCONC (QUOTE (DT*SORT.NUMBER 13. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (SYMB.FUNCTION2) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2 SYMB.FUNCTION2) (EL.F) (ELEMENT) (EQU.RELATION) (REL) (SET) (ANY SYMB.FUNCTION2)) DT*MINIMAL.SUBSORTS (SYMB.FUNCTION2) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SYMB.FUNCTION2 ANY))) (GETPROPLIST (QUOTE SYMB.FUNCTION2))))) (PROGN (REMPROPS (QUOTE EL.F)) (SETPROPLIST (QUOTE EL.F) (NCONC (QUOTE (DT*SORT.NUMBER 12. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (EL.F) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (EL.F EL.F) (ELEMENT EL.F) (EQU.RELATION) (REL) (SET EL.F) (ANY EL.F)) DT*MINIMAL.SUBSORTS (EL.F) DT*DIRECT.SUPERSORTS (ELEMENT) DT*INVERSE.TRANSITIVE.CLOSURE (EL.F ELEMENT SET ANY))) (GETPROPLIST (QUOTE EL.F))))) (PROGN (REMPROPS (QUOTE ELEMENT)) (SETPROPLIST (QUOTE ELEMENT) (NCONC (QUOTE (DT*SORT.NUMBER 11. DT*DIRECT.SUBSORTS (EL.F) DT*TRANSITIVE.CLOSURE (EL.F ELEMENT) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION) (REL) (SET ELEMENT) (ANY ELEMENT)) DT*MINIMAL.SUBSORTS (EL.F) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT SET ANY))) (GETPROPLIST (QUOTE ELEMENT))))) (PROGN (REMPROPS (QUOTE EQU.RELATION)) (SETPROPLIST (QUOTE EQU.RELATION) (NCONC (QUOTE (DT*SORT.NUMBER 10. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (EQU.RELATION) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (EL.F) (ELEMENT) (EQU.RELATION EQU.RELATION) (REL EQU.RELATION) (SET EQU.RELATION) (ANY EQU.RELATION)) DT*MINIMAL.SUBSORTS (EQU.RELATION) DT*DIRECT.SUPERSORTS (REL) DT*INVERSE.TRANSITIVE.CLOSURE (EQU.RELATION REL SET ANY))) (GETPROPLIST (QUOTE EQU.RELATION))))) (PROGN (REMPROPS (QUOTE REL)) (SETPROPLIST (QUOTE REL) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (EQU.RELATION) DT*SORT.NUMBER 3. DT*TRANSITIVE.CLOSURE (EQU.RELATION REL) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (EL.F) (ELEMENT) (EQU.RELATION EQU.RELATION) (REL REL) (SET REL) (ANY REL)) DT*MINIMAL.SUBSORTS (EQU.RELATION) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (REL SET ANY) DT*LEAST.SUPERSORTS ((REL REL) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE REL))))) (PROGN (REMPROPS (QUOTE SET)) (SETPROPLIST (QUOTE SET) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (NAT ELEMENT REL) DT*SORT.NUMBER 2. DT*TRANSITIVE.CLOSURE (NAT ELEMENT REL EQU.RELATION EL.F SET) DT*MAX.SUBSORTS ((NAT NAT) (SYMB.FUNCTION2) (EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION EQU.RELATION) (REL REL) (SET SET) (ANY SET)) DT*MINIMAL.SUBSORTS (EL.F EQU.RELATION) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SET ANY) DT*LEAST.SUPERSORTS ((REL SET) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE SET))))) (PROGN (REMPROPS (QUOTE ANY)) (SETPROPLIST (QUOTE ANY) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (SYMB.FUNCTION2 SET) DT*SORT.NUMBER 1. DT*TRANSITIVE.CLOSURE (SYMB.FUNCTION2 SET EQU.RELATION EL.F NAT ELEMENT REL ANY) DT*MAX.SUBSORTS ((NAT NAT) (SYMB.FUNCTION2 SYMB.FUNCTION2) (EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION EQU.RELATION) (REL REL) (SET SET) (ANY ANY)) DT*MINIMAL.SUBSORTS (SYMB.FUNCTION2 EQU.RELATION EL.F) DT*DIRECT.SUPERSORTS NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*LEAST.SUPERSORTS ((REL ANY) (SET ANY) (ANY ANY)))) (GETPROPLIST (QUOTE ANY))))))
(PROGN (RPAQQ ST*STACK1 (NIL ((X_73 PROGN (DT-VARIABLE.DELETE 73.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_73) ST*SYMBOL.ADDRESSES))) (X_72 PROGN (DT-VARIABLE.DELETE 72.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_72) ST*SYMBOL.ADDRESSES))) (X_71 PROGN (DT-VARIABLE.DELETE 71.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_71) ST*SYMBOL.ADDRESSES))) (X_70 PROGN (DT-VARIABLE.DELETE 70.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_70) ST*SYMBOL.ADDRESSES))) (X_69 PROGN (DT-VARIABLE.DELETE 69.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_69) ST*SYMBOL.ADDRESSES)))) NIL ((= PROG1 NIL (DT-PREDICATE.PUTSORT 66. (QUOTE (ANY ANY))) (DT-PREDICATE.PUT.ATTRIBUTES 66. (QUOTE (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))) (= PROG1 NIL (DT-PUTPROP 66. NIL) (DT-PUTPROP 66. NIL)) (X_68 PROGN (DT-VARIABLE.DELETE 68.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_68) ST*SYMBOL.ADDRESSES))) (X_67 PROGN (DT-VARIABLE.DELETE 67.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_67) ST*SYMBOL.ADDRESSES)))) ((= PROGN (DT-PREDICATE.DELETE 66.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE =) ST*SYMBOL.ADDRESSES))) (X_65 PROGN (DT-VARIABLE.DELETE 65.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_65) ST*SYMBOL.ADDRESSES)))) NIL ((X_64 PROGN (DT-VARIABLE.DELETE 64.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_64) ST*SYMBOL.ADDRESSES))) (X_63 PROGN (DT-VARIABLE.DELETE 63.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_63) ST*SYMBOL.ADDRESSES))) (X_62 PROGN (DT-VARIABLE.DELETE 62.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_62) ST*SYMBOL.ADDRESSES))) (P PROGN (DT-PREDICATE.DELETE 61.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P) ST*SYMBOL.ADDRESSES))) (X_60 PROGN (DT-VARIABLE.DELETE 60.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_60) ST*SYMBOL.ADDRESSES))) (X_59 PROGN (DT-VARIABLE.DELETE 59.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_59) ST*SYMBOL.ADDRESSES))) (X_58 PROGN (DT-VARIABLE.DELETE 58.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_58) ST*SYMBOL.ADDRESSES)))) NIL ((TRANS.UNION PROGN (DT-FUNCTION.DELETE 57.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRANS.UNION) ST*SYMBOL.ADDRESSES)))) ((TRANS.CLOS PROGN (DT-FUNCTION.DELETE 56.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRANS.CLOS) ST*SYMBOL.ADDRESSES)))) ((POWER PROGN (DT-FUNCTION.DELETE 55.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE POWER) ST*SYMBOL.ADDRESSES)))) ((UNION.REL PROGN (DT-FUNCTION.DELETE 54.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UNION.REL) ST*SYMBOL.ADDRESSES)))) ((COMP PROGN (DT-FUNCTION.DELETE 53.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE COMP) ST*SYMBOL.ADDRESSES)))) ((PREIMAGE PROGN (DT-FUNCTION.DELETE 52.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PREIMAGE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((EL*SUBSET.F PROGN (DT-FUNCTION.DELETE 51.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EL*SUBSET.F) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SYMB.FUNCTION2 DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SYMB.FUNCTION2) (QUOTE (ANY))) (SYMB.FUNCTION2 PUTPROP (QUOTE SYMB.FUNCTION2) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((APPLY2.F PROGN (DT-FUNCTION.DELETE 50.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2.F) ST*SYMBOL.ADDRESSES))) (SYMB.FUNCTION2 DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SYMB.FUNCTION2) (QUOTE (ANY))) (SYMB.FUNCTION2 PUTPROP (QUOTE SYMB.FUNCTION2) NIL)) ((CONGRUENCE PROGN (DT-PREDICATE.DELETE 49.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((R.CONGRUENCE PROGN (DT-PREDICATE.DELETE 48.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R.CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((L.CONGRUENCE PROGN (DT-PREDICATE.DELETE 47.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE L.CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((IN.RELATION PROGN (DT-PREDICATE.DELETE 46.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IN.RELATION) ST*SYMBOL.ADDRESSES)))) ((SEMIGROUP PROGN (DT-PREDICATE.DELETE 45.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SEMIGROUP) ST*SYMBOL.ADDRESSES))) (SYMB.FUNCTION2 DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SYMB.FUNCTION2) (QUOTE (ANY))) (SYMB.FUNCTION2 PUTPROP (QUOTE SYMB.FUNCTION2) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((MAL.F PROGN (DT-CONSTANT.DELETE 44.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MAL.F) ST*SYMBOL.ADDRESSES))) (SYMB.FUNCTION2 DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SYMB.FUNCTION2) (QUOTE (ANY))) (SYMB.FUNCTION2 PUTPROP (QUOTE SYMB.FUNCTION2) NIL)) ((F PROGN (DT-CONSTANT.DELETE 43.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE F) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((PLUS PROGN (DT-FUNCTION.DELETE 42.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PLUS) ST*SYMBOL.ADDRESSES)))) ((1. PROGN (DT-CONSTANT.DELETE 41.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC 1. ST*SYMBOL.ADDRESSES)))) ((NAT PROGN (DT-SORT.ST.REMOVE (QUOTE NAT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NAT) ST*SYMBOL.ADDRESSES))) (NAT REMPROP (QUOTE NAT) (QUOTE ST*DATA))) ((SYMB.FUNCTION2 PROGN (DT-SORT.ST.REMOVE (QUOTE SYMB.FUNCTION2)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SYMB.FUNCTION2) ST*SYMBOL.ADDRESSES))) (SYMB.FUNCTION2 REMPROP (QUOTE SYMB.FUNCTION2) (QUOTE ST*DATA))) ((EL.F PROGN (DT-SORT.ST.REMOVE (QUOTE EL.F)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EL.F) ST*SYMBOL.ADDRESSES))) (EL.F REMPROP (QUOTE EL.F) (QUOTE ST*DATA))) ((ELEMENT PROGN (DT-SORT.ST.REMOVE (QUOTE ELEMENT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ELEMENT) ST*SYMBOL.ADDRESSES))) (ELEMENT REMPROP (QUOTE ELEMENT) (QUOTE ST*DATA))) ((EQU.RELATION PROGN (DT-SORT.ST.REMOVE (QUOTE EQU.RELATION)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EQU.RELATION) ST*SYMBOL.ADDRESSES))) (EQU.RELATION REMPROP (QUOTE EQU.RELATION) (QUOTE ST*DATA))) ((REL PROGN (DT-SORT.ST.REMOVE (QUOTE REL)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE REL) ST*SYMBOL.ADDRESSES))) (REL REMPROP (QUOTE REL) (QUOTE ST*DATA))) ((SET PROGN (DT-SORT.ST.REMOVE (QUOTE SET)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SET) ST*SYMBOL.ADDRESSES))) (SET REMPROP (QUOTE SET) (QUOTE ST*DATA))) ((FALSE PROGN (DT-PREDICATE.DELETE 2.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1.) (FALSE . 2.) (SET . T) (REL . T) (EQU.RELATION . T) (ELEMENT . T) (EL.F . T) (SYMB.FUNCTION2 . T) (NAT . T) (1. . 41.) (PLUS . 42.) (F . 43.) (MAL.F . 44.) (SEMIGROUP . 45.) (IN.RELATION . 46.) (L.CONGRUENCE . 47.) (R.CONGRUENCE . 48.) (CONGRUENCE . 49.) (APPLY2.F . 50.) (EL*SUBSET.F . 51.) (PREIMAGE . 52.) (COMP . 53.) (UNION.REL . 54.) (POWER . 55.) (TRANS.CLOS . 56.) (TRANS.UNION . 57.) (X_58 . 58.) (X_59 . 59.) (X_60 . 60.) (P . 61.) (X_62 . 62.) (X_63 . 63.) (X_64 . 64.) (X_65 . 65.) (= . 66.) (X_67 . 67.) (X_68 . 68.) (X_69 . 69.) (X_70 . 70.) (X_71 . 71.) (X_72 . 72.) (X_73 . 73.))))))))
;;; -*- Package: IL; Base: 10. -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((SORT SET:ANY) (SORT REL:SET) (SORT EQU.RELATION:REL) (SORT ELEMENT:SET) (SORT EL.F:ELEMENT) (SORT SYMB.FUNCTION2:ANY) (SORT NAT:SET) (TYPE 1:NAT) (TYPE PLUS (NAT NAT) :NAT) (TYPE F:SET) (TYPE MAL.F:SYMB.FUNCTION2) (TYPE SEMIGROUP (SET SYMB.FUNCTION2)) (TYPE IN.RELATION (REL EL.F EL.F)) (TYPE L.CONGRUENCE (REL)) (TYPE R.CONGRUENCE (REL)) (TYPE CONGRUENCE (REL)) (TYPE APPLY2.F (SYMB.FUNCTION2 EL.F EL.F) :EL.F) (TYPE EL*SUBSET.F (SYMB.FUNCTION2 ELEMENT SET) :SET) (TYPE PREIMAGE (REL EL.F) :SET) (TYPE COMP (REL REL) :REL) (TYPE UNION.REL (REL REL) :REL) (TYPE POWER (REL NAT) :REL) (TYPE TRANS.CLOS (REL) :REL) (TYPE TRANS.UNION (EQU.RELATION EQU.RELATION) :EQU.RELATION) (* DEFINITION P) (ALL RHO,SIGMA:EQU.RELATION ALL N:NAT L.CONGRUENCE (RHO) AND L.CONGRUENCE (SIGMA) IMPL (P (RHO SIGMA N) EQV (ALL F1,F2,G:EL.F IN.RELATION (POWER (UNION.REL (RHO SIGMA) N) F1 F2) IMPL IN.RELATION (POWER (UNION.REL (RHO SIGMA) N) APPLY2.F (MAL.F G F1) APPLY2.F (MAL.F G F2))))) (* DEFINITION POWER) (ALL RHO:REL POWER (RHO 1.) = RHO) (ALL RHO:REL ALL N:NAT POWER (RHO PLUS (N 1.)) = COMP (POWER (RHO N) RHO)) (* DEFINITION COMP) (ALL RHO,SIGMA:REL ALL A,B:EL.F IN.RELATION (COMP (RHO SIGMA) A B) EQV (EX C:EL.F IN.RELATION (RHO A C) AND IN.RELATION (SIGMA C B))))) (QUOTE ((+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) (+ 1. NIL) COMMENT (ALL 59. (ALL 58. (ALL 60. (IMPL (AND (+ 47. (58.) NIL) (+ 47. (59.) NIL)) (EQV (+ 61. (58. 59. 60.) (KIND (EQV T 270.))) (ALL 64. (ALL 63. (ALL 62. (IMPL (+ 46. ((55. (54. 58. 59.) 60.) 62. 63.) (KIND (EQV NIL 270.))) (+ 46. ((55. (54. 58. 59.) 60.) (50. 44. 64. 62.) (50. 44. 64. 63.)) (KIND (EQV NIL 270.)))))))))))) COMMENT (ALL 65. (+ 66. ((55. 65. 41.) 65.) NIL)) (ALL 67. (ALL 68. (+ 66. ((55. 67. (42. 68. 41.)) (53. (55. 67. 68.) 67.)) NIL))) COMMENT (ALL 70. (ALL 69. (ALL 72. (ALL 71. (EQV (+ 46. ((53. 69. 70.) 71. 72.) (KIND (EQV T 320.))) (EX 73. (AND (+ 46. (69. 71. 73.) (KIND (EQV NIL 320.))) (+ 46. (70. 73. 72.) (KIND (EQV NIL 320.)))))))))))) (QUOTE ((* THEOREM 5.3.2 INDUKTIONSSCHRITT) (ALL RHO,SIGMA:EQU.RELATION SEMIGROUP (F MAL.F) AND L.CONGRUENCE (RHO) AND L.CONGRUENCE (SIGMA) IMPL (ALL N:NAT P (RHO SIGMA 1.) AND P (RHO SIGMA N) IMPL P (RHO SIGMA PLUS (N 1.)))))) (QUOTE (COMMENT (ALL 74. (ALL 75. (IMPL (AND (+ 45. (43. 44.) NIL) (AND (+ 47. (75.) NIL) (+ 47. (74.) NIL))) (ALL 77. (IMPL (AND (+ 61. (75. 74. 41.) NIL) (+ 61. (75. 74. 77.) NIL)) (+ 61. (75. 74. (42. 77. 41.)) NIL)))))))) (QUOTE ("                                                                         " "*************************************************************************" " EDIT:     AXIOMS AND THEOREMS EDITED:   12-SEP-85 11:47:09" "*************************************************************************")) (PROGN(PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (49644. ATP.MEMORY.NIL 49654. 49649. 49659. 49664. 49669. 49674. 49679. 49684. 49689. 49704. 49709. 49714. 49719. 49724. 49739. 49744. 49749. 49754. 49768. 49782. 49796. 49810. 49824. 49838. 49852. 49866. 49881. 49896. 49911. 49926. 49941. 49946. 49951. 49965. 49970. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 49985. 50000.))) (DATALIST (QUOTE (15. "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1. (POSITIVE))) ((+ 1. (NEGATIVE))) ((+ 1. (NIL))) ((- 1. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2. (POSITIVE))) ((+ 2. (NEGATIVE))) ((+ 2. (NIL))) ((- 2. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. NAT "1" (DT*ST-KIND NIL) CONSTANT 14. "PLUS" NIL NAT (NAT NAT) NIL NIL NIL NIL NIL 2. NAT (DT*ST-KIND NIL) FUNCTION 5. SET "F" (DT*ST-KIND NIL) CONSTANT 5. SYMB.FUNCTION2 "MAL.F" (DT*ST-KIND NIL) CONSTANT 15. "SEMIGROUP" NIL NIL (SET SYMB.FUNCTION2) NIL NIL ((- 45. (POSITIVE))) ((+ 45. (NEGATIVE))) ((+ 45. (NIL))) ((- 45. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "IN.RELATION" NIL NIL (REL EL.F EL.F) NIL NIL ((- 46. (POSITIVE))) ((+ 46. (NEGATIVE))) ((+ 46. (NIL))) ((- 46. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "L.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 47. (POSITIVE))) ((+ 47. (NEGATIVE))) ((+ 47. (NIL))) ((- 47. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "R.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 48. (POSITIVE))) ((+ 48. (NEGATIVE))) ((+ 48. (NIL))) ((- 48. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "CONGRUENCE" NIL NIL (REL) NIL NIL ((- 49. (POSITIVE))) ((+ 49. (NEGATIVE))) ((+ 49. (NIL))) ((- 49. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "APPLY2.F" NIL EL.F (SYMB.FUNCTION2 EL.F EL.F) NIL NIL NIL NIL NIL 3. EL.F (DT*ST-KIND NIL) FUNCTION 14. "EL*SUBSET.F" NIL SET (SYMB.FUNCTION2 ELEMENT SET) NIL NIL NIL NIL NIL 3. SET (DT*ST-KIND NIL) FUNCTION 14. "PREIMAGE" NIL SET (REL EL.F) NIL NIL NIL NIL NIL 2. SET (DT*ST-KIND NIL) FUNCTION 14. "COMP" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "UNION.REL" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "POWER" NIL REL (REL NAT) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.CLOS" NIL REL (REL) NIL NIL NIL NIL NIL 1. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.UNION" NIL EQU.RELATION (EQU.RELATION EQU.RELATION) NIL NIL NIL NIL NIL 2. EQU.RELATION (DT*ST-KIND NIL) FUNCTION 5. EQU.RELATION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EQU.RELATION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. NAT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "P" NIL NIL (ANY ANY ANY) NIL NIL ((- 61. (POSITIVE))) ((+ 61. (NEGATIVE))) ((+ 61. (NIL))) ((- 61. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 66. (POSITIVE . SYMMETRIC))) ((+ 66. (NEGATIVE . SYMMETRIC))) ((+ 66. (NIL . SYMMETRIC))) ((- 66. (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. NAT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EQU.RELATION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EQU.RELATION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. NAT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 50000.)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 50000.) (SETQ COUNTER1 78.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0.) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 50000.) (MEM-INITIALIZE 50000.))) (SETQ COUNTER1 78.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 50000.) (RPAQ MEM*NEXT.RADR (IPLUS 49639. INCREMENT))) (T (RPAQ MEM*NEXT.RADR 49639.))) (RPAQ MEM*NEXT.VADR 78.) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (NAT SYMB.FUNCTION2 EL.F ELEMENT EQU.RELATION REL SET ANY)) (RPAQQ DT*SORT.NR 15.) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0.) (RPAQQ DT*CONSTANT.COUNTER 0.) (RPAQQ DT*CONSTANT.ALL (44. 43. 41.)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0.) (RPAQQ DT*FUNCTION.ALL (57. 56. 55. 54. 53. 52. 51. 50. 42.)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0.) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES (66.)) (RPAQQ DT*NONEQUALITY.PREDICATES (61. 49. 48. 47. 46. 45. 2. 1.)) (RPAQQ DT*PREDICATE.ALL (66. 61. 49. 48. 47. 46. 45. 2. 1.)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1.) (RPAQQ DT*FALSE.PREDICATE 2.) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (PROGN (REMPROPS (QUOTE DT*PREDICATE.WITH.ATTRIBUTES)) (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (NCONC (QUOTE (DEFINED (66.) SYMMETRIC (66.) REFLEXIVE (66.))) (GETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES))))))
(PROGN (PROGN (REMPROPS (QUOTE NAT)) (SETPROPLIST (QUOTE NAT) (NCONC (QUOTE (DT*DIRECT.SUBSORTS NIL DT*SORT.NUMBER 14. DT*TRANSITIVE.CLOSURE (NAT) DT*MAX.SUBSORTS ((NAT NAT) (SYMB.FUNCTION2) (EL.F) (ELEMENT) (EQU.RELATION) (REL) (SET NAT) (ANY NAT)) DT*MINIMAL.SUBSORTS (NAT) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (NAT SET ANY))) (GETPROPLIST (QUOTE NAT))))) (PROGN (REMPROPS (QUOTE SYMB.FUNCTION2)) (SETPROPLIST (QUOTE SYMB.FUNCTION2) (NCONC (QUOTE (DT*SORT.NUMBER 13. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (SYMB.FUNCTION2) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2 SYMB.FUNCTION2) (EL.F) (ELEMENT) (EQU.RELATION) (REL) (SET) (ANY SYMB.FUNCTION2)) DT*MINIMAL.SUBSORTS (SYMB.FUNCTION2) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SYMB.FUNCTION2 ANY))) (GETPROPLIST (QUOTE SYMB.FUNCTION2))))) (PROGN (REMPROPS (QUOTE EL.F)) (SETPROPLIST (QUOTE EL.F) (NCONC (QUOTE (DT*SORT.NUMBER 12. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (EL.F) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (EL.F EL.F) (ELEMENT EL.F) (EQU.RELATION) (REL) (SET EL.F) (ANY EL.F)) DT*MINIMAL.SUBSORTS (EL.F) DT*DIRECT.SUPERSORTS (ELEMENT) DT*INVERSE.TRANSITIVE.CLOSURE (EL.F ELEMENT SET ANY))) (GETPROPLIST (QUOTE EL.F))))) (PROGN (REMPROPS (QUOTE ELEMENT)) (SETPROPLIST (QUOTE ELEMENT) (NCONC (QUOTE (DT*SORT.NUMBER 11. DT*DIRECT.SUBSORTS (EL.F) DT*TRANSITIVE.CLOSURE (EL.F ELEMENT) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION) (REL) (SET ELEMENT) (ANY ELEMENT)) DT*MINIMAL.SUBSORTS (EL.F) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT SET ANY))) (GETPROPLIST (QUOTE ELEMENT))))) (PROGN (REMPROPS (QUOTE EQU.RELATION)) (SETPROPLIST (QUOTE EQU.RELATION) (NCONC (QUOTE (DT*SORT.NUMBER 10. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (EQU.RELATION) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (EL.F) (ELEMENT) (EQU.RELATION EQU.RELATION) (REL EQU.RELATION) (SET EQU.RELATION) (ANY EQU.RELATION)) DT*MINIMAL.SUBSORTS (EQU.RELATION) DT*DIRECT.SUPERSORTS (REL) DT*INVERSE.TRANSITIVE.CLOSURE (EQU.RELATION REL SET ANY))) (GETPROPLIST (QUOTE EQU.RELATION))))) (PROGN (REMPROPS (QUOTE REL)) (SETPROPLIST (QUOTE REL) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (EQU.RELATION) DT*SORT.NUMBER 3. DT*TRANSITIVE.CLOSURE (EQU.RELATION REL) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (EL.F) (ELEMENT) (EQU.RELATION EQU.RELATION) (REL REL) (SET REL) (ANY REL)) DT*MINIMAL.SUBSORTS (EQU.RELATION) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (REL SET ANY) DT*LEAST.SUPERSORTS ((REL REL) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE REL))))) (PROGN (REMPROPS (QUOTE SET)) (SETPROPLIST (QUOTE SET) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (NAT ELEMENT REL) DT*SORT.NUMBER 2. DT*TRANSITIVE.CLOSURE (NAT ELEMENT REL EQU.RELATION EL.F SET) DT*MAX.SUBSORTS ((NAT NAT) (SYMB.FUNCTION2) (EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION EQU.RELATION) (REL REL) (SET SET) (ANY SET)) DT*MINIMAL.SUBSORTS (EL.F EQU.RELATION) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SET ANY) DT*LEAST.SUPERSORTS ((REL SET) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE SET))))) (PROGN (REMPROPS (QUOTE ANY)) (SETPROPLIST (QUOTE ANY) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (SYMB.FUNCTION2 SET) DT*SORT.NUMBER 1. DT*TRANSITIVE.CLOSURE (SYMB.FUNCTION2 SET EQU.RELATION EL.F NAT ELEMENT REL ANY) DT*MAX.SUBSORTS ((NAT NAT) (SYMB.FUNCTION2 SYMB.FUNCTION2) (EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION EQU.RELATION) (REL REL) (SET SET) (ANY ANY)) DT*MINIMAL.SUBSORTS (SYMB.FUNCTION2 EQU.RELATION EL.F) DT*DIRECT.SUPERSORTS NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*LEAST.SUPERSORTS ((REL ANY) (SET ANY) (ANY ANY)))) (GETPROPLIST (QUOTE ANY))))))
))
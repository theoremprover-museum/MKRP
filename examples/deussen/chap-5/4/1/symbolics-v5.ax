;;; -*- Package: IL; Base: 10. -*-
(COND ((FMT-LOAD "21-NOV-85 14:09:27"
NIL(((SORT SET:ANY) (+ 1. NIL) TYPE) ((SORT FUNCTION:ANY) (+ 1. NIL) TYPE) ((SORT ELEMENT:SET) (+ 1. NIL) TYPE) ((SORT ELEMENT.F:ELEMENT) (+ 1. NIL) TYPE) ((SORT NAT:SET) (+ 1. NIL) TYPE) ((SORT REL:SET) (+ 1. NIL) TYPE) ((SORT UNARY.FUNC:FUNCTION) (+ 1. NIL) TYPE) ((SORT BINARY.FUNC:FUNCTION) (+ 1. NIL) TYPE) ((SORT EQU.REL-S:REL) (+ 1. NIL) TYPE) ((SORT L.CONGRUENCE-S:EQU.REL-S) (+ 1. NIL) TYPE) ((SORT R.CONGRUENCE-S:EQU.REL-S) (+ 1. NIL) TYPE) ((SORT CONGRUENCE-S:L.CONGRUENCE-S) (+ 1. NIL) TYPE) ((SORT CONGRUENCE-S:R.CONGRUENCE-S) (+ 1. NIL) TYPE) ((* CONSTANTS *) COMMENT COMMENT) ((TYPE F:SET) (+ 1. NIL) TYPE) ((TYPE CONN.F:BINARY.FUNC) (+ 1. NIL) TYPE) ((TYPE 1:NAT) (+ 1. NIL) TYPE) ((TYPE CONN.F.RHO:BINARY.FUNCTION) (+ 1. NIL) TYPE) ((* PREDICATS *) COMMENT COMMENT) ((TYPE SEMIGROUP (SET BINARY.FUNC)) (+ 1. NIL) TYPE) ((TYPE L.CONGRUENCE (REL)) (+ 1. NIL) TYPE) ((TYPE R.CONGRUENCE (REL)) (+ 1. NIL) TYPE) ((TYPE CONGRUENCE (EQU.REL-S)) (+ 1. NIL) TYPE) ((TYPE IN.RELATION (REL ELEMENT.F ELEMENT.F)) (+ 1. NIL) TYPE) ((* FUNCTIONS *) COMMENT COMMENT) ((TYPE APPLY2 (BINARY.FUNC SET SET) :SET) (+ 1. NIL) TYPE) ((TYPE APPLY2-EL (BINARY.FUNC ELEMENT ELEMENT) :ELEMENT) (+ 1. NIL) TYPE) ((TYPE APPLY2-EL.F (BINARY.FUNC ELEMENT.F ELEMENT.F) :ELEMENT.F) (+ 1. NIL) TYPE) ((TYPE PREIMAGE (REL ELEMENT.F) :SET) (+ 1. NIL) TYPE) ((TYPE POWER (REL NAT) :REL) (+ 1. NIL) TYPE) ((TYPE PLUS (NAT NAT) :NAT) (+ 1. NIL) TYPE) ((TYPE COMP (REL REL) :REL) (+ 1. NIL) TYPE) ((TYPE TRANS.CLOS (REL) :REL) (+ 1. NIL) TYPE) ((TYPE UNION-REL (REL REL) :REL) (+ 1. NIL) TYPE) ((TYPE TRANS.UNION (EQU.REL-S EQU.REL-S) :EQU.REL-S) (+ 1. NIL) TYPE) ((* DEFINITION PREIMAGE) COMMENT COMMENT) ((* ALL RHO:REL ALL A,B:ELEMENT.F EL (B PREIMAGE (RHO A)) EQV IN.RELATION (RHO B A)) COMMENT COMMENT) ((* DEFINITION CONGRUENCE) COMMENT COMMENT) ((ALL RHO:EQU.REL-S SEMIGROUP (F CONN.F) IMPL (CONGRUENCE (RHO) IMPL L.CONGRUENCE (RHO) AND R.CONGRUENCE (RHO))) (ALL 117. (IMPL (+ 102. (98. 99.) NIL) (IMPL (+ 105. (117.) NIL) (AND (+ 103. (117.) NIL) (+ 104. (117.) NIL))))) QUANTIFICATION) ((* DEFINITON LEFT-CONGRUENCE) COMMENT COMMENT) ((ALL RHO:EQU.REL-S SEMIGROUP (F CONN.F) IMPL (L.CONGRUENCE (RHO) IMPL (ALL F1,F2,G:ELEMENT.F IN.RELATION (RHO F1 F2) IMPL IN.RELATION (RHO APPLY2-EL.F (CONN.F G F1) APPLY2-EL.F (CONN.F G F2))))) (ALL 118. (IMPL (+ 102. (98. 99.) NIL) (IMPL (+ 103. (118.) NIL) (ALL 121. (ALL 120. (ALL 119. (IMPL (+ 106. (118. 119. 120.) NIL) (+ 106. (118. (109. 99. 121. 119.) (109. 99. 121. 120.)) NIL)))))))) QUANTIFICATION) ((* DEFINITON RIGHT-CONGRUENCE) COMMENT COMMENT) ((ALL RHO:EQU.REL-S SEMIGROUP (F CONN.F) IMPL (R.CONGRUENCE (RHO) IMPL (ALL F1,F2,G:ELEMENT.F IN.RELATION (RHO F1 F2) IMPL IN.RELATION (RHO APPLY2-EL.F (CONN.F F1 G) APPLY2-EL.F (CONN.F F2 G))))) (ALL 122. (IMPL (+ 102. (98. 99.) NIL) (IMPL (+ 104. (122.) NIL) (ALL 125. (ALL 124. (ALL 123. (IMPL (+ 106. (122. 123. 124.) NIL) (+ 106. (122. (109. 99. 123. 125.) (109. 99. 124. 125.)) NIL)))))))) QUANTIFICATION) ((* DEFINITION EQU.RELATION) COMMENT COMMENT) ((ALL RHO:EQU.REL-S REFLEXIV (RHO) AND SYMMETRISCH (RHO) AND TRANSITIV (RHO)) (ALL 126. (AND (+ 127. (126.) NIL) (AND (+ 128. (126.) NIL) (+ 129. (126.) NIL)))) QUANTIFICATION) ((* DEFINITION TRANSITIV) COMMENT COMMENT) ((ALL RHO:REL TRANSITIV (RHO) IMPL (ALL A,B,C:ELEMENT.F IN.RELATION (RHO A B) AND IN.RELATION (RHO B C) IMPL IN.RELATION (RHO A C))) (ALL 130. (IMPL (+ 129. (130.) NIL) (ALL 133. (ALL 132. (ALL 131. (IMPL (AND (+ 106. (130. 131. 132.) NIL) (+ 106. (130. 132. 133.) NIL)) (+ 106. (130. 131. 133.) NIL))))))) QUANTIFICATION) ((* EQUALITY OF SETS) COMMENT COMMENT) ((* ALL A,B:SET A = B EQV (ALL X:ELEMENT EL (X A) EQV EL (X B))) COMMENT COMMENT) ((* PROPERTY OF EQUIVALENCE-CLASSES) COMMENT COMMENT) ((* ALL X:ELEMENT.F ALL RHO:EQU.REL-S EL (X PREIMAGE (RHO X))) COMMENT COMMENT) ((* COMBINATION OF SEVERAL DIFFERENT AXIOMS) COMMENT COMMENT) ((ALL RHO:EQU.REL-S ALL F1,F2:ELEMENT.F PREIMAGE (RHO F1) = PREIMAGE (RHO F2) EQV IN.RELATION (RHO F1 F2)) (ALL 134. (ALL 136. (ALL 135. (EQV (+ 137. ((110. 134. 135.) (110. 134. 136.)) (KIND (EQV T 540.))) (+ 106. (134. 135. 136.) (KIND (EQV NIL 540.))))))) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (49605. 49610. 49615. 49620. 49625. 49630. 49635. 49640. 49655. 49670. 49685. 49690. 49695. 49700. 49705. 49710. 49715. 49720. 49725. 49730. 49735. 49749. 49763. 49777. 49791. 49805. 49819. 49833. 49847. 49861. 49875. 49890. 49905. 49920. 49935. 49950. 49955. 49960. 49965. 49970. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 49985. 50000.))) (DATALIST (QUOTE (15. "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1. (POSITIVE))) ((+ 1. (NEGATIVE))) ((+ 1. (NIL))) ((- 1. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2. (POSITIVE))) ((+ 2. (NEGATIVE))) ((+ 2. (NIL))) ((- 2. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. SET "F" (DT*ST-KIND NIL) CONSTANT 5. BINARY.FUNC "CONN.F" (DT*ST-KIND NIL) CONSTANT 5. NAT "1" (DT*ST-KIND NIL) CONSTANT 5. BINARY.FUNCTION "CONN.F.RHO" (DT*ST-KIND NIL) CONSTANT 15. "SEMIGROUP" NIL NIL (SET BINARY.FUNC) NIL NIL ((- 102. (POSITIVE))) ((+ 102. (NEGATIVE))) ((+ 102. (NIL))) ((- 102. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "L.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 103. (POSITIVE))) ((+ 103. (NEGATIVE))) ((+ 103. (NIL))) ((- 103. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "R.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 104. (POSITIVE))) ((+ 104. (NEGATIVE))) ((+ 104. (NIL))) ((- 104. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "CONGRUENCE" NIL NIL (EQU.REL-S) NIL NIL ((- 105. (POSITIVE))) ((+ 105. (NEGATIVE))) ((+ 105. (NIL))) ((- 105. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "IN.RELATION" NIL NIL (REL ELEMENT.F ELEMENT.F) NIL NIL ((- 106. (POSITIVE))) ((+ 106. (NEGATIVE))) ((+ 106. (NIL))) ((- 106. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "APPLY2" NIL SET (BINARY.FUNC SET SET) NIL NIL NIL NIL NIL 3. SET (DT*ST-KIND NIL) FUNCTION 14. "APPLY2-EL" NIL ELEMENT (BINARY.FUNC ELEMENT ELEMENT) NIL NIL NIL NIL NIL 3. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY2-EL.F" NIL ELEMENT.F (BINARY.FUNC ELEMENT.F ELEMENT.F) NIL NIL NIL NIL NIL 3. ELEMENT.F (DT*ST-KIND NIL) FUNCTION 14. "PREIMAGE" NIL SET (REL ELEMENT.F) NIL NIL NIL NIL NIL 2. SET (DT*ST-KIND NIL) FUNCTION 14. "POWER" NIL REL (REL NAT) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "PLUS" NIL NAT (NAT NAT) NIL NIL NIL NIL NIL 2. NAT (DT*ST-KIND NIL) FUNCTION 14. "COMP" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.CLOS" NIL REL (REL) NIL NIL NIL NIL NIL 1. REL (DT*ST-KIND NIL) FUNCTION 14. "UNION-REL" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.UNION" NIL EQU.REL-S (EQU.REL-S EQU.REL-S) NIL NIL NIL NIL NIL 2. EQU.REL-S (DT*ST-KIND NIL) FUNCTION 5. EQU.REL-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EQU.REL-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EQU.REL-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EQU.REL-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "REFLEXIV" NIL NIL (ANY) NIL NIL ((- 127. (POSITIVE))) ((+ 127. (NEGATIVE))) ((+ 127. (NIL))) ((- 127. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "SYMMETRISCH" NIL NIL (ANY) NIL NIL ((- 128. (POSITIVE))) ((+ 128. (NEGATIVE))) ((+ 128. (NIL))) ((- 128. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "TRANSITIV" NIL NIL (ANY) NIL NIL ((- 129. (POSITIVE))) ((+ 129. (NEGATIVE))) ((+ 129. (NIL))) ((- 129. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EQU.REL-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 137. (POSITIVE . SYMMETRIC))) ((+ 137. (NEGATIVE . SYMMETRIC))) ((+ 137. (NIL . SYMMETRIC))) ((- 137. (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE))) (INCREMENT (IDIFFERENCE MEM*SIZE 50000.)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 50000.) (SETQ COUNTER1 138.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0.) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 50000.) (MEM-INITIALIZE 50000.))) (SETQ COUNTER1 138.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 50000.) (RPAQ MEM*NEXT.RADR (IPLUS 49590. INCREMENT))) (T (RPAQ MEM*NEXT.RADR 49590.))) (RPAQ MEM*NEXT.VADR 138.) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (BINARY.FUNCTION CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S EQU.REL-S BINARY.FUNC UNARY.FUNC REL NAT ELEMENT.F ELEMENT FUNCTION SET ANY)) (RPAQQ DT*SORT.NR 51.) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0.) (RPAQQ DT*CONSTANT.COUNTER 0.) (RPAQQ DT*CONSTANT.ALL (101. 100. 99. 98.)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0.) (RPAQQ DT*FUNCTION.ALL (116. 115. 114. 113. 112. 111. 110. 109. 108. 107.)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0.) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES (137.)) (RPAQQ DT*NONEQUALITY.PREDICATES (129. 128. 127. 106. 105. 104. 103. 102. 2. 1.)) (RPAQQ DT*PREDICATE.ALL (137. 129. 128. 127. 106. 105. 104. 103. 102. 2. 1.)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1.) (RPAQQ DT*FALSE.PREDICATE 2.) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (PROGN (REMPROPS (QUOTE DT*PREDICATE.WITH.ATTRIBUTES)) (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (NCONC (QUOTE (SYMMETRIC (137. 137.) REFLEXIVE (137. 137.) DEFINED (137.))) (GETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES))))))
(PROGN (PROGN (REMPROPS (QUOTE BINARY.FUNCTION)) (SETPROPLIST (QUOTE BINARY.FUNCTION) (NCONC (QUOTE (DT*SORT.NUMBER 50. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (BINARY.FUNCTION) DT*MAX.SUBSORTS ((BINARY.FUNCTION BINARY.FUNCTION) (CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET) (ANY BINARY.FUNCTION)) DT*MINIMAL.SUBSORTS (BINARY.FUNCTION) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (BINARY.FUNCTION ANY))) (GETPROPLIST (QUOTE BINARY.FUNCTION))))) (PROGN (REMPROPS (QUOTE CONGRUENCE-S)) (SETPROPLIST (QUOTE CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 49. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (CONGRUENCE-S) DT*MAX.SUBSORTS ((BINARY.FUNCTION) (CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S CONGRUENCE-S) (L.CONGRUENCE-S CONGRUENCE-S) (EQU.REL-S CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET CONGRUENCE-S) (ANY CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (CONGRUENCE-S) DT*DIRECT.SUPERSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*INVERSE.TRANSITIVE.CLOSURE (CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE R.CONGRUENCE-S)) (SETPROPLIST (QUOTE R.CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 48. DT*DIRECT.SUBSORTS (CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (CONGRUENCE-S R.CONGRUENCE-S) DT*MAX.SUBSORTS ((BINARY.FUNCTION) (CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S CONGRUENCE-S) (EQU.REL-S R.CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL R.CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET R.CONGRUENCE-S) (ANY R.CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (CONGRUENCE-S) DT*DIRECT.SUPERSORTS (EQU.REL-S) DT*INVERSE.TRANSITIVE.CLOSURE (R.CONGRUENCE-S EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE R.CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE L.CONGRUENCE-S)) (SETPROPLIST (QUOTE L.CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 47. DT*DIRECT.SUBSORTS (CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (CONGRUENCE-S L.CONGRUENCE-S) DT*MAX.SUBSORTS ((BINARY.FUNCTION) (CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S L.CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL L.CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET L.CONGRUENCE-S) (ANY L.CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (CONGRUENCE-S) DT*DIRECT.SUPERSORTS (EQU.REL-S) DT*INVERSE.TRANSITIVE.CLOSURE (L.CONGRUENCE-S EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE L.CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE EQU.REL-S)) (SETPROPLIST (QUOTE EQU.REL-S) (NCONC (QUOTE (DT*SORT.NUMBER 46. DT*DIRECT.SUBSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (R.CONGRUENCE-S L.CONGRUENCE-S CONGRUENCE-S EQU.REL-S) DT*MAX.SUBSORTS ((BINARY.FUNCTION) (CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL EQU.REL-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET EQU.REL-S) (ANY EQU.REL-S)) DT*MINIMAL.SUBSORTS (CONGRUENCE-S) DT*DIRECT.SUPERSORTS (REL) DT*INVERSE.TRANSITIVE.CLOSURE (EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE EQU.REL-S))))) (PROGN (REMPROPS (QUOTE BINARY.FUNC)) (SETPROPLIST (QUOTE BINARY.FUNC) (NCONC (QUOTE (DT*SORT.NUMBER 45. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (BINARY.FUNC) DT*MAX.SUBSORTS ((BINARY.FUNCTION) (CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION BINARY.FUNC) (SET) (ANY BINARY.FUNC)) DT*MINIMAL.SUBSORTS (BINARY.FUNC) DT*DIRECT.SUPERSORTS (FUNCTION) DT*INVERSE.TRANSITIVE.CLOSURE (BINARY.FUNC FUNCTION ANY))) (GETPROPLIST (QUOTE BINARY.FUNC))))) (PROGN (REMPROPS (QUOTE UNARY.FUNC)) (SETPROPLIST (QUOTE UNARY.FUNC) (NCONC (QUOTE (DT*SORT.NUMBER 44. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (UNARY.FUNC) DT*MAX.SUBSORTS ((BINARY.FUNCTION) (CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION UNARY.FUNC) (SET) (ANY UNARY.FUNC)) DT*MINIMAL.SUBSORTS (UNARY.FUNC) DT*DIRECT.SUPERSORTS (FUNCTION) DT*INVERSE.TRANSITIVE.CLOSURE (UNARY.FUNC FUNCTION ANY))) (GETPROPLIST (QUOTE UNARY.FUNC))))) (PROGN (REMPROPS (QUOTE REL)) (SETPROPLIST (QUOTE REL) (NCONC (QUOTE (DT*SORT.NUMBER 43. DT*DIRECT.SUBSORTS (EQU.REL-S) DT*TRANSITIVE.CLOSURE (EQU.REL-S CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S REL) DT*MAX.SUBSORTS ((BINARY.FUNCTION) (CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET REL) (ANY REL)) DT*MINIMAL.SUBSORTS (CONGRUENCE-S) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (REL SET ANY))) (GETPROPLIST (QUOTE REL))))) (PROGN (REMPROPS (QUOTE NAT)) (SETPROPLIST (QUOTE NAT) (NCONC (QUOTE (DT*SORT.NUMBER 42. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (NAT) DT*MAX.SUBSORTS ((BINARY.FUNCTION) (CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET NAT) (ANY NAT)) DT*MINIMAL.SUBSORTS (NAT) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (NAT SET ANY))) (GETPROPLIST (QUOTE NAT))))) (PROGN (REMPROPS (QUOTE ELEMENT.F)) (SETPROPLIST (QUOTE ELEMENT.F) (NCONC (QUOTE (DT*SORT.NUMBER 41. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (ELEMENT.F) DT*MAX.SUBSORTS ((BINARY.FUNCTION) (CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT.F) (FUNCTION) (SET ELEMENT.F) (ANY ELEMENT.F)) DT*MINIMAL.SUBSORTS (ELEMENT.F) DT*DIRECT.SUPERSORTS (ELEMENT) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT.F ELEMENT SET ANY))) (GETPROPLIST (QUOTE ELEMENT.F))))) (PROGN (REMPROPS (QUOTE ELEMENT)) (SETPROPLIST (QUOTE ELEMENT) (NCONC (QUOTE (DT*SORT.NUMBER 40. DT*DIRECT.SUBSORTS (ELEMENT.F) DT*TRANSITIVE.CLOSURE (ELEMENT.F ELEMENT) DT*MAX.SUBSORTS ((BINARY.FUNCTION) (CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION) (SET ELEMENT) (ANY ELEMENT)) DT*MINIMAL.SUBSORTS (ELEMENT.F) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT SET ANY))) (GETPROPLIST (QUOTE ELEMENT))))) (PROGN (REMPROPS (QUOTE FUNCTION)) (SETPROPLIST (QUOTE FUNCTION) (NCONC (QUOTE (DT*SORT.NUMBER 39. DT*DIRECT.SUBSORTS (BINARY.FUNC UNARY.FUNC) DT*TRANSITIVE.CLOSURE (BINARY.FUNC UNARY.FUNC FUNCTION) DT*MAX.SUBSORTS ((BINARY.FUNCTION) (CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION FUNCTION) (SET) (ANY FUNCTION)) DT*MINIMAL.SUBSORTS (BINARY.FUNC UNARY.FUNC) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (FUNCTION ANY))) (GETPROPLIST (QUOTE FUNCTION))))) (PROGN (REMPROPS (QUOTE SET)) (SETPROPLIST (QUOTE SET) (NCONC (QUOTE (DT*SORT.NUMBER 38. DT*DIRECT.SUBSORTS (REL NAT ELEMENT) DT*TRANSITIVE.CLOSURE (REL NAT ELEMENT R.CONGRUENCE-S L.CONGRUENCE-S CONGRUENCE-S ELEMENT.F EQU.REL-S SET) DT*MAX.SUBSORTS ((BINARY.FUNCTION) (CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL REL) (NAT NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION) (SET SET) (ANY SET)) DT*MINIMAL.SUBSORTS (CONGRUENCE-S NAT ELEMENT.F) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SET ANY))) (GETPROPLIST (QUOTE SET))))) (PROGN (REMPROPS (QUOTE ANY)) (SETPROPLIST (QUOTE ANY) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (BINARY.FUNCTION FUNCTION SET) DT*SORT.NUMBER 1. DT*TRANSITIVE.CLOSURE (BINARY.FUNCTION FUNCTION SET ELEMENT.F EQU.REL-S CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S REL NAT ELEMENT BINARY.FUNC UNARY.FUNC ANY) DT*MAX.SUBSORTS ((BINARY.FUNCTION BINARY.FUNCTION) (CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL REL) (NAT NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION FUNCTION) (SET SET) (ANY ANY)) DT*MINIMAL.SUBSORTS (BINARY.FUNC ELEMENT.F CONGRUENCE-S NAT UNARY.FUNC) DT*DIRECT.SUPERSORTS NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*LEAST.SUPERSORTS ((ANY ANY)))) (GETPROPLIST (QUOTE ANY))))))
(PROGN (RPAQQ ST*STACK1 (NIL ((= PROGN (DT-PREDICATE.DELETE 137.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE =) ST*SYMBOL.ADDRESSES))) (X_136 PROGN (DT-VARIABLE.DELETE 136.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_136) ST*SYMBOL.ADDRESSES))) (X_135 PROGN (DT-VARIABLE.DELETE 135.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_135) ST*SYMBOL.ADDRESSES))) (X_134 PROGN (DT-VARIABLE.DELETE 134.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_134) ST*SYMBOL.ADDRESSES)))) NIL NIL NIL NIL NIL ((X_133 PROGN (DT-VARIABLE.DELETE 133.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_133) ST*SYMBOL.ADDRESSES))) (X_132 PROGN (DT-VARIABLE.DELETE 132.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_132) ST*SYMBOL.ADDRESSES))) (X_131 PROGN (DT-VARIABLE.DELETE 131.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_131) ST*SYMBOL.ADDRESSES))) (X_130 PROGN (DT-VARIABLE.DELETE 130.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_130) ST*SYMBOL.ADDRESSES)))) NIL ((TRANSITIV PROGN (DT-PREDICATE.DELETE 129.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRANSITIV) ST*SYMBOL.ADDRESSES))) (SYMMETRISCH PROGN (DT-PREDICATE.DELETE 128.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SYMMETRISCH) ST*SYMBOL.ADDRESSES))) (REFLEXIV PROGN (DT-PREDICATE.DELETE 127.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE REFLEXIV) ST*SYMBOL.ADDRESSES))) (X_126 PROGN (DT-VARIABLE.DELETE 126.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_126) ST*SYMBOL.ADDRESSES)))) NIL ((X_125 PROGN (DT-VARIABLE.DELETE 125.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_125) ST*SYMBOL.ADDRESSES))) (X_124 PROGN (DT-VARIABLE.DELETE 124.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_124) ST*SYMBOL.ADDRESSES))) (X_123 PROGN (DT-VARIABLE.DELETE 123.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_123) ST*SYMBOL.ADDRESSES))) (X_122 PROGN (DT-VARIABLE.DELETE 122.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_122) ST*SYMBOL.ADDRESSES)))) NIL ((X_121 PROGN (DT-VARIABLE.DELETE 121.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_121) ST*SYMBOL.ADDRESSES))) (X_120 PROGN (DT-VARIABLE.DELETE 120.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_120) ST*SYMBOL.ADDRESSES))) (X_119 PROGN (DT-VARIABLE.DELETE 119.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_119) ST*SYMBOL.ADDRESSES))) (X_118 PROGN (DT-VARIABLE.DELETE 118.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_118) ST*SYMBOL.ADDRESSES)))) NIL ((X_117 PROGN (DT-VARIABLE.DELETE 117.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_117) ST*SYMBOL.ADDRESSES)))) NIL NIL NIL ((TRANS.UNION PROGN (DT-FUNCTION.DELETE 116.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRANS.UNION) ST*SYMBOL.ADDRESSES)))) ((UNION-REL PROGN (DT-FUNCTION.DELETE 115.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UNION-REL) ST*SYMBOL.ADDRESSES)))) ((TRANS.CLOS PROGN (DT-FUNCTION.DELETE 114.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRANS.CLOS) ST*SYMBOL.ADDRESSES)))) ((COMP PROGN (DT-FUNCTION.DELETE 113.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE COMP) ST*SYMBOL.ADDRESSES)))) ((PLUS PROGN (DT-FUNCTION.DELETE 112.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PLUS) ST*SYMBOL.ADDRESSES)))) ((POWER PROGN (DT-FUNCTION.DELETE 111.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE POWER) ST*SYMBOL.ADDRESSES)))) ((PREIMAGE PROGN (DT-FUNCTION.DELETE 110.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PREIMAGE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((APPLY2-EL.F PROGN (DT-FUNCTION.DELETE 109.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2-EL.F) ST*SYMBOL.ADDRESSES)))) ((APPLY2-EL PROGN (DT-FUNCTION.DELETE 108.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2-EL) ST*SYMBOL.ADDRESSES)))) ((APPLY2 PROGN (DT-FUNCTION.DELETE 107.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((IN.RELATION PROGN (DT-PREDICATE.DELETE 106.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IN.RELATION) ST*SYMBOL.ADDRESSES)))) ((CONGRUENCE PROGN (DT-PREDICATE.DELETE 105.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((R.CONGRUENCE PROGN (DT-PREDICATE.DELETE 104.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R.CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((L.CONGRUENCE PROGN (DT-PREDICATE.DELETE 103.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE L.CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((SEMIGROUP PROGN (DT-PREDICATE.DELETE 102.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SEMIGROUP) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((CONN.F.RHO PROGN (DT-CONSTANT.DELETE 101.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONN.F.RHO) ST*SYMBOL.ADDRESSES))) (BINARY.FUNCTION PROGN (DT-SORT.ST.REMOVE (QUOTE BINARY.FUNCTION)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BINARY.FUNCTION) ST*SYMBOL.ADDRESSES))) (BINARY.FUNCTION REMPROP (QUOTE BINARY.FUNCTION) (QUOTE ST*DATA))) ((1. PROGN (DT-CONSTANT.DELETE 100.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC 1. ST*SYMBOL.ADDRESSES)))) ((CONN.F PROGN (DT-CONSTANT.DELETE 99.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONN.F) ST*SYMBOL.ADDRESSES)))) ((F PROGN (DT-CONSTANT.DELETE 98.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE F) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((CONGRUENCE-S DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE CONGRUENCE-S) (QUOTE (L.CONGRUENCE-S))) (CONGRUENCE-S PUTPROP (QUOTE CONGRUENCE-S) NIL)) ((CONGRUENCE-S PROGN (DT-SORT.ST.REMOVE (QUOTE CONGRUENCE-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONGRUENCE-S) ST*SYMBOL.ADDRESSES))) (CONGRUENCE-S REMPROP (QUOTE CONGRUENCE-S) (QUOTE ST*DATA))) ((R.CONGRUENCE-S PROGN (DT-SORT.ST.REMOVE (QUOTE R.CONGRUENCE-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R.CONGRUENCE-S) ST*SYMBOL.ADDRESSES))) (R.CONGRUENCE-S REMPROP (QUOTE R.CONGRUENCE-S) (QUOTE ST*DATA))) ((L.CONGRUENCE-S PROGN (DT-SORT.ST.REMOVE (QUOTE L.CONGRUENCE-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE L.CONGRUENCE-S) ST*SYMBOL.ADDRESSES))) (L.CONGRUENCE-S REMPROP (QUOTE L.CONGRUENCE-S) (QUOTE ST*DATA))) ((EQU.REL-S PROGN (DT-SORT.ST.REMOVE (QUOTE EQU.REL-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EQU.REL-S) ST*SYMBOL.ADDRESSES))) (EQU.REL-S REMPROP (QUOTE EQU.REL-S) (QUOTE ST*DATA))) ((BINARY.FUNC PROGN (DT-SORT.ST.REMOVE (QUOTE BINARY.FUNC)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BINARY.FUNC) ST*SYMBOL.ADDRESSES))) (BINARY.FUNC REMPROP (QUOTE BINARY.FUNC) (QUOTE ST*DATA))) ((UNARY.FUNC PROGN (DT-SORT.ST.REMOVE (QUOTE UNARY.FUNC)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UNARY.FUNC) ST*SYMBOL.ADDRESSES))) (UNARY.FUNC REMPROP (QUOTE UNARY.FUNC) (QUOTE ST*DATA))) ((REL PROGN (DT-SORT.ST.REMOVE (QUOTE REL)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE REL) ST*SYMBOL.ADDRESSES))) (REL REMPROP (QUOTE REL) (QUOTE ST*DATA))) ((NAT PROGN (DT-SORT.ST.REMOVE (QUOTE NAT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NAT) ST*SYMBOL.ADDRESSES))) (NAT REMPROP (QUOTE NAT) (QUOTE ST*DATA))) ((ELEMENT.F PROGN (DT-SORT.ST.REMOVE (QUOTE ELEMENT.F)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ELEMENT.F) ST*SYMBOL.ADDRESSES))) (ELEMENT.F REMPROP (QUOTE ELEMENT.F) (QUOTE ST*DATA))) ((ELEMENT PROGN (DT-SORT.ST.REMOVE (QUOTE ELEMENT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ELEMENT) ST*SYMBOL.ADDRESSES))) (ELEMENT REMPROP (QUOTE ELEMENT) (QUOTE ST*DATA))) ((FUNCTION PROGN (DT-SORT.ST.REMOVE (QUOTE FUNCTION)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FUNCTION) ST*SYMBOL.ADDRESSES))) (FUNCTION REMPROP (QUOTE FUNCTION) (QUOTE ST*DATA))) ((SET PROGN (DT-SORT.ST.REMOVE (QUOTE SET)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SET) ST*SYMBOL.ADDRESSES))) (SET REMPROP (QUOTE SET) (QUOTE ST*DATA))) ((FALSE PROGN (DT-PREDICATE.DELETE 2.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1.) (FALSE . 2.) (SET . T) (FUNCTION . T) (ELEMENT . T) (ELEMENT.F . T) (NAT . T) (REL . T) (UNARY.FUNC . T) (BINARY.FUNC . T) (EQU.REL-S . T) (L.CONGRUENCE-S . T) (R.CONGRUENCE-S . T) (CONGRUENCE-S . T) (F . 98.) (CONN.F . 99.) (1. . 100.) (BINARY.FUNCTION . T) (CONN.F.RHO . 101.) (SEMIGROUP . 102.) (L.CONGRUENCE . 103.) (R.CONGRUENCE . 104.) (CONGRUENCE . 105.) (IN.RELATION . 106.) (APPLY2 . 107.) (APPLY2-EL . 108.) (APPLY2-EL.F . 109.) (PREIMAGE . 110.) (POWER . 111.) (PLUS . 112.) (COMP . 113.) (TRANS.CLOS . 114.) (UNION-REL . 115.) (TRANS.UNION . 116.) (X_117 . 117.) (X_118 . 118.) (X_119 . 119.) (X_120 . 120.) (X_121 . 121.) (X_122 . 122.) (X_123 . 123.) (X_124 . 124.) (X_125 . 125.) (X_126 . 126.) (REFLEXIV . 127.) (SYMMETRISCH . 128.) (TRANSITIV . 129.) (X_130 . 130.) (X_131 . 131.) (X_132 . 132.) (X_133 . 133.) (X_134 . 134.) (X_135 . 135.) (X_136 . 136.) (= . 137.))))))))
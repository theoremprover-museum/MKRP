;;; -*- Package: IL; Base: 10. -*-
(COND ((FMT-LOAD "07-NOV-85 13:30:35"
NIL(((SORT SET:ANY) (+ 1. NIL) TYPE) ((SORT REL:SET) (+ 1. NIL) TYPE) ((SORT EQU.RELATION:REL) (+ 1. NIL) TYPE) ((SORT ELEMENT:SET) (+ 1. NIL) TYPE) ((SORT EL.F:ELEMENT) (+ 1. NIL) TYPE) ((SORT SYMB.FUNCTION1,SYMB.FUNCTION2:ANY) (+ 1. NIL) TYPE) ((SORT NAT:SET) (+ 1. NIL) TYPE) ((TYPE 1:NAT) (+ 1. NIL) TYPE) ((TYPE PLUS (NAT NAT) :NAT) (+ 1. NIL) TYPE) ((TYPE F:SET) (+ 1. NIL) TYPE) ((TYPE MAL.F:SYMB.FUNCTION2) (+ 1. NIL) TYPE) ((TYPE SEMIGROUP (SET SYMB.FUNCTION2)) (+ 1. NIL) TYPE) ((TYPE IN.RELATION (REL EL.F EL.F)) (+ 1. NIL) TYPE) ((TYPE L.CONGRUENCE (REL)) (+ 1. NIL) TYPE) ((TYPE R.CONGRUENCE (REL)) (+ 1. NIL) TYPE) ((TYPE CONGRUENCE (REL)) (+ 1. NIL) TYPE) ((TYPE MAPPING (SYMB.FUNCTION1 SET SET)) (+ 1. NIL) TYPE) ((TYPE APPLY1.EL (SYMB.FUNCTION1 ELEMENT) :ELEMENT) (+ 1. NIL) TYPE) ((TYPE APPLY2.F (SYMB.FUNCTION2 EL.F EL.F) :EL.F) (+ 1. NIL) TYPE) ((TYPE EL*SUBSET.F (SYMB.FUNCTION2 ELEMENT SET) :SET) (+ 1. NIL) TYPE) ((TYPE PREIMAGE (REL EL.F) :SET) (+ 1. NIL) TYPE) ((TYPE IND.EQU (SYMB.FUNCTION1 SET) : EQU.RELATION) (+ 1. NIL) TYPE) ((TYPE COMP (REL REL) :REL) (+ 1. NIL) TYPE) ((TYPE UNION.REL (REL REL) :REL) (+ 1. NIL) TYPE) ((TYPE POWER (REL NAT) :REL) (+ 1. NIL) TYPE) ((TYPE TRANS.CLOS (REL) :REL) (+ 1. NIL) TYPE) ((TYPE TRANS.UNION (EQU.RELATION EQU.RELATION) :EQU.RELATION) (+ 1. NIL) TYPE) ((* GELICHHEIT VON MENGEN) COMMENT COMMENT) ((ALL A,B:SET A = B EQV (ALL X:ELEMENT EL (X A) EQV EL (X B))) (ALL 89. (ALL 88. (EQV (+ 90. (88. 89.) (KIND (EQV T 301.))) (ALL 91. (EQV (+ 92. (91. 88.) (KIND (EQV T 300. EQV NIL 301.))) (+ 92. (91. 89.) (KIND (EQV NIL 300. EQV NIL 301.)))))))) QUANTIFICATION) ((* DEFINITION PREIMAGE) COMMENT COMMENT) ((ALL RHO:REL ALL A,B:EL.F EL (B PREIMAGE (RHO A)) EQV IN.RELATION (RHO B A)) (ALL 93. (ALL 95. (ALL 94. (EQV (+ 92. (95. (81. 93. 94.)) (KIND (EQV T 320.))) (+ 73. (93. 95. 94.) (KIND (EQV NIL 320.))))))) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (49656. 49661. 49666. 49681. 49686. 49701. 49706. 49711. 49725. 49739. 49753. 49767. 49781. 49795. 49809. 49823. 49837. 49851. 49866. 49881. 49896. 49911. 49926. 49941. 49946. 49951. 49965. 49970. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 49985. 50000.))) (DATALIST (QUOTE (15. "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1. (POSITIVE))) ((+ 1. (NEGATIVE))) ((+ 1. (NIL))) ((- 1. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2. (POSITIVE))) ((+ 2. (NEGATIVE))) ((+ 2. (NIL))) ((- 2. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. NAT "1" (DT*ST-KIND NIL) CONSTANT 14. "PLUS" NIL NAT (NAT NAT) NIL NIL NIL NIL NIL 2. NAT (DT*ST-KIND NIL) FUNCTION 5. SET "F" (DT*ST-KIND NIL) CONSTANT 5. SYMB.FUNCTION2 "MAL.F" (DT*ST-KIND NIL) CONSTANT 15. "SEMIGROUP" NIL NIL (SET SYMB.FUNCTION2) NIL NIL ((- 72. (POSITIVE))) ((+ 72. (NEGATIVE))) ((+ 72. (NIL))) ((- 72. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "IN.RELATION" NIL NIL (REL EL.F EL.F) NIL NIL ((- 73. (POSITIVE))) ((+ 73. (NEGATIVE))) ((+ 73. (NIL))) ((- 73. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "L.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 74. (POSITIVE))) ((+ 74. (NEGATIVE))) ((+ 74. (NIL))) ((- 74. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "R.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 75. (POSITIVE))) ((+ 75. (NEGATIVE))) ((+ 75. (NIL))) ((- 75. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "CONGRUENCE" NIL NIL (REL) NIL NIL ((- 76. (POSITIVE))) ((+ 76. (NEGATIVE))) ((+ 76. (NIL))) ((- 76. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MAPPING" NIL NIL (SYMB.FUNCTION1 SET SET) NIL NIL ((- 77. (POSITIVE))) ((+ 77. (NEGATIVE))) ((+ 77. (NIL))) ((- 77. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "APPLY1.EL" NIL ELEMENT (SYMB.FUNCTION1 ELEMENT) NIL NIL NIL NIL NIL 2. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY2.F" NIL EL.F (SYMB.FUNCTION2 EL.F EL.F) NIL NIL NIL NIL NIL 3. EL.F (DT*ST-KIND NIL) FUNCTION 14. "EL*SUBSET.F" NIL SET (SYMB.FUNCTION2 ELEMENT SET) NIL NIL NIL NIL NIL 3. SET (DT*ST-KIND NIL) FUNCTION 14. "PREIMAGE" NIL SET (REL EL.F) NIL NIL NIL NIL NIL 2. SET (DT*ST-KIND NIL) FUNCTION 14. "IND.EQU" NIL EQU.RELATION (SYMB.FUNCTION1 SET) NIL NIL NIL NIL NIL 2. EQU.RELATION (DT*ST-KIND NIL) FUNCTION 14. "COMP" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "UNION.REL" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "POWER" NIL REL (REL NAT) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.CLOS" NIL REL (REL) NIL NIL NIL NIL NIL 1. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.UNION" NIL EQU.RELATION (EQU.RELATION EQU.RELATION) NIL NIL NIL NIL NIL 2. EQU.RELATION (DT*ST-KIND NIL) FUNCTION 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 90. (POSITIVE . SYMMETRIC))) ((+ 90. (NEGATIVE . SYMMETRIC))) ((+ 90. (NIL . SYMMETRIC))) ((- 90. (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "EL" NIL NIL (ANY ANY) NIL NIL ((- 92. (POSITIVE))) ((+ 92. (NEGATIVE))) ((+ 92. (NIL))) ((- 92. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 50000.)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 50000.) (SETQ COUNTER1 96.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0.) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 50000.) (MEM-INITIALIZE 50000.))) (SETQ COUNTER1 96.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 50000.) (RPAQ MEM*NEXT.RADR (IPLUS 49651. INCREMENT))) (T (RPAQ MEM*NEXT.RADR 49651.))) (RPAQ MEM*NEXT.VADR 96.) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (NAT SYMB.FUNCTION2 SYMB.FUNCTION1 EL.F ELEMENT EQU.RELATION REL SET ANY)) (RPAQQ DT*SORT.NR 26.) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0.) (RPAQQ DT*CONSTANT.COUNTER 0.) (RPAQQ DT*CONSTANT.ALL (71. 70. 68.)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0.) (RPAQQ DT*FUNCTION.ALL (87. 86. 85. 84. 83. 82. 81. 80. 79. 78. 69.)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0.) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES (90.)) (RPAQQ DT*NONEQUALITY.PREDICATES (92. 77. 76. 75. 74. 73. 72. 2. 1.)) (RPAQQ DT*PREDICATE.ALL (92. 90. 77. 76. 75. 74. 73. 72. 2. 1.)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1.) (RPAQQ DT*FALSE.PREDICATE 2.) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (PROGN (REMPROPS (QUOTE DT*PREDICATE.WITH.ATTRIBUTES)) (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (NCONC (QUOTE (SYMMETRIC (90. 90.) REFLEXIVE (90. 90.) DEFINED (90.))) (GETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES))))))
(PROGN (PROGN (REMPROPS (QUOTE NAT)) (SETPROPLIST (QUOTE NAT) (NCONC (QUOTE (DT*SORT.NUMBER 25. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (NAT) DT*MAX.SUBSORTS ((NAT NAT) (SYMB.FUNCTION2) (SYMB.FUNCTION1) (EL.F) (ELEMENT) (EQU.RELATION) (REL) (SET NAT) (ANY NAT)) DT*MINIMAL.SUBSORTS (NAT) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (NAT SET ANY))) (GETPROPLIST (QUOTE NAT))))) (PROGN (REMPROPS (QUOTE SYMB.FUNCTION2)) (SETPROPLIST (QUOTE SYMB.FUNCTION2) (NCONC (QUOTE (DT*SORT.NUMBER 24. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (SYMB.FUNCTION2) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2 SYMB.FUNCTION2) (SYMB.FUNCTION1) (EL.F) (ELEMENT) (EQU.RELATION) (REL) (SET) (ANY SYMB.FUNCTION2)) DT*MINIMAL.SUBSORTS (SYMB.FUNCTION2) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SYMB.FUNCTION2 ANY))) (GETPROPLIST (QUOTE SYMB.FUNCTION2))))) (PROGN (REMPROPS (QUOTE SYMB.FUNCTION1)) (SETPROPLIST (QUOTE SYMB.FUNCTION1) (NCONC (QUOTE (DT*SORT.NUMBER 23. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (SYMB.FUNCTION1) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (SYMB.FUNCTION1 SYMB.FUNCTION1) (EL.F) (ELEMENT) (EQU.RELATION) (REL) (SET) (ANY SYMB.FUNCTION1)) DT*MINIMAL.SUBSORTS (SYMB.FUNCTION1) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SYMB.FUNCTION1 ANY))) (GETPROPLIST (QUOTE SYMB.FUNCTION1))))) (PROGN (REMPROPS (QUOTE EL.F)) (SETPROPLIST (QUOTE EL.F) (NCONC (QUOTE (DT*SORT.NUMBER 19. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (EL.F) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (SYMB.FUNCTION1) (EL.F EL.F) (ELEMENT EL.F) (EQU.RELATION) (REL) (SET EL.F) (ANY EL.F)) DT*MINIMAL.SUBSORTS (EL.F) DT*DIRECT.SUPERSORTS (ELEMENT) DT*INVERSE.TRANSITIVE.CLOSURE (EL.F ELEMENT SET ANY) DT*LEAST.SUPERSORTS ((EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION SET) (REL SET) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE EL.F))))) (PROGN (REMPROPS (QUOTE ELEMENT)) (SETPROPLIST (QUOTE ELEMENT) (NCONC (QUOTE (DT*SORT.NUMBER 18. DT*DIRECT.SUBSORTS (EL.F) DT*TRANSITIVE.CLOSURE (EL.F ELEMENT) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (SYMB.FUNCTION1) (EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION) (REL) (SET ELEMENT) (ANY ELEMENT)) DT*MINIMAL.SUBSORTS (EL.F) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT SET ANY) DT*LEAST.SUPERSORTS ((EL.F ELEMENT) (ELEMENT ELEMENT) (EQU.RELATION SET) (REL SET) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE ELEMENT))))) (PROGN (REMPROPS (QUOTE EQU.RELATION)) (SETPROPLIST (QUOTE EQU.RELATION) (NCONC (QUOTE (DT*SORT.NUMBER 17. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (EQU.RELATION) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (SYMB.FUNCTION1) (EL.F) (ELEMENT) (EQU.RELATION EQU.RELATION) (REL EQU.RELATION) (SET EQU.RELATION) (ANY EQU.RELATION)) DT*MINIMAL.SUBSORTS (EQU.RELATION) DT*DIRECT.SUPERSORTS (REL) DT*INVERSE.TRANSITIVE.CLOSURE (EQU.RELATION REL SET ANY) DT*LEAST.SUPERSORTS ((EL.F SET) (ELEMENT SET) (EQU.RELATION EQU.RELATION) (REL REL) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE EQU.RELATION))))) (PROGN (REMPROPS (QUOTE REL)) (SETPROPLIST (QUOTE REL) (NCONC (QUOTE (DT*SORT.NUMBER 16. DT*DIRECT.SUBSORTS (EQU.RELATION) DT*TRANSITIVE.CLOSURE (EQU.RELATION REL) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (SYMB.FUNCTION1) (EL.F) (ELEMENT) (EQU.RELATION EQU.RELATION) (REL REL) (SET REL) (ANY REL)) DT*MINIMAL.SUBSORTS (EQU.RELATION) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (REL SET ANY) DT*LEAST.SUPERSORTS ((EL.F SET) (ELEMENT SET) (EQU.RELATION REL) (REL REL) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE REL))))) (PROGN (REMPROPS (QUOTE SET)) (SETPROPLIST (QUOTE SET) (NCONC (QUOTE (DT*SORT.NUMBER 15. DT*DIRECT.SUBSORTS (NAT ELEMENT REL) DT*TRANSITIVE.CLOSURE (NAT ELEMENT REL EQU.RELATION EL.F SET) DT*MAX.SUBSORTS ((NAT NAT) (SYMB.FUNCTION2) (SYMB.FUNCTION1) (EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION EQU.RELATION) (REL REL) (SET SET) (ANY SET)) DT*MINIMAL.SUBSORTS (EL.F EQU.RELATION) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SET ANY) DT*LEAST.SUPERSORTS ((EL.F SET) (ELEMENT SET) (EQU.RELATION SET) (REL SET) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE SET))))) (PROGN (REMPROPS (QUOTE ANY)) (SETPROPLIST (QUOTE ANY) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (SYMB.FUNCTION2 SYMB.FUNCTION1 SET) DT*SORT.NUMBER 1. DT*TRANSITIVE.CLOSURE (SYMB.FUNCTION2 SYMB.FUNCTION1 SET EQU.RELATION EL.F NAT ELEMENT REL ANY) DT*MAX.SUBSORTS ((NAT NAT) (SYMB.FUNCTION2 SYMB.FUNCTION2) (SYMB.FUNCTION1 SYMB.FUNCTION1) (EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION EQU.RELATION) (REL REL) (SET SET) (ANY ANY)) DT*MINIMAL.SUBSORTS (SYMB.FUNCTION2 SYMB.FUNCTION1 EQU.RELATION EL.F) DT*DIRECT.SUPERSORTS NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*LEAST.SUPERSORTS ((EL.F ANY) (ELEMENT ANY) (EQU.RELATION ANY) (REL ANY) (SET ANY) (ANY ANY)))) (GETPROPLIST (QUOTE ANY))))))
(PROGN (RPAQQ ST*STACK1 (NIL ((X_95 PROGN (DT-VARIABLE.DELETE 95.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_95) ST*SYMBOL.ADDRESSES))) (X_94 PROGN (DT-VARIABLE.DELETE 94.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_94) ST*SYMBOL.ADDRESSES))) (X_93 PROGN (DT-VARIABLE.DELETE 93.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_93) ST*SYMBOL.ADDRESSES)))) NIL ((EL PROGN (DT-PREDICATE.DELETE 92.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EL) ST*SYMBOL.ADDRESSES))) (X_91 PROGN (DT-VARIABLE.DELETE 91.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_91) ST*SYMBOL.ADDRESSES))) (= PROGN (DT-PREDICATE.DELETE 90.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE =) ST*SYMBOL.ADDRESSES))) (X_89 PROGN (DT-VARIABLE.DELETE 89.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_89) ST*SYMBOL.ADDRESSES))) (X_88 PROGN (DT-VARIABLE.DELETE 88.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_88) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((TRANS.UNION PROGN (DT-FUNCTION.DELETE 87.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRANS.UNION) ST*SYMBOL.ADDRESSES)))) ((TRANS.CLOS PROGN (DT-FUNCTION.DELETE 86.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRANS.CLOS) ST*SYMBOL.ADDRESSES)))) ((POWER PROGN (DT-FUNCTION.DELETE 85.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE POWER) ST*SYMBOL.ADDRESSES)))) ((UNION.REL PROGN (DT-FUNCTION.DELETE 84.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UNION.REL) ST*SYMBOL.ADDRESSES)))) ((COMP PROGN (DT-FUNCTION.DELETE 83.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE COMP) ST*SYMBOL.ADDRESSES)))) ((IND.EQU PROGN (DT-FUNCTION.DELETE 82.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IND.EQU) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SYMB.FUNCTION1 DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SYMB.FUNCTION1) (QUOTE (ANY))) (SYMB.FUNCTION1 PUTPROP (QUOTE SYMB.FUNCTION1) NIL)) ((PREIMAGE PROGN (DT-FUNCTION.DELETE 81.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PREIMAGE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((EL*SUBSET.F PROGN (DT-FUNCTION.DELETE 80.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EL*SUBSET.F) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SYMB.FUNCTION2 DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SYMB.FUNCTION2) (QUOTE (ANY))) (SYMB.FUNCTION2 PUTPROP (QUOTE SYMB.FUNCTION2) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((APPLY2.F PROGN (DT-FUNCTION.DELETE 79.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2.F) ST*SYMBOL.ADDRESSES))) (SYMB.FUNCTION2 DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SYMB.FUNCTION2) (QUOTE (ANY))) (SYMB.FUNCTION2 PUTPROP (QUOTE SYMB.FUNCTION2) NIL)) ((APPLY1.EL PROGN (DT-FUNCTION.DELETE 78.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY1.EL) ST*SYMBOL.ADDRESSES))) (SYMB.FUNCTION1 DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SYMB.FUNCTION1) (QUOTE (ANY))) (SYMB.FUNCTION1 PUTPROP (QUOTE SYMB.FUNCTION1) NIL)) ((MAPPING PROGN (DT-PREDICATE.DELETE 77.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MAPPING) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SYMB.FUNCTION1 DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SYMB.FUNCTION1) (QUOTE (ANY))) (SYMB.FUNCTION1 PUTPROP (QUOTE SYMB.FUNCTION1) NIL)) ((CONGRUENCE PROGN (DT-PREDICATE.DELETE 76.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((R.CONGRUENCE PROGN (DT-PREDICATE.DELETE 75.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R.CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((L.CONGRUENCE PROGN (DT-PREDICATE.DELETE 74.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE L.CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((IN.RELATION PROGN (DT-PREDICATE.DELETE 73.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IN.RELATION) ST*SYMBOL.ADDRESSES)))) ((SEMIGROUP PROGN (DT-PREDICATE.DELETE 72.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SEMIGROUP) ST*SYMBOL.ADDRESSES))) (SYMB.FUNCTION2 DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SYMB.FUNCTION2) (QUOTE (ANY))) (SYMB.FUNCTION2 PUTPROP (QUOTE SYMB.FUNCTION2) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((MAL.F PROGN (DT-CONSTANT.DELETE 71.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MAL.F) ST*SYMBOL.ADDRESSES))) (SYMB.FUNCTION2 DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SYMB.FUNCTION2) (QUOTE (ANY))) (SYMB.FUNCTION2 PUTPROP (QUOTE SYMB.FUNCTION2) NIL)) ((F PROGN (DT-CONSTANT.DELETE 70.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE F) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((PLUS PROGN (DT-FUNCTION.DELETE 69.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PLUS) ST*SYMBOL.ADDRESSES)))) ((1. PROGN (DT-CONSTANT.DELETE 68.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC 1. ST*SYMBOL.ADDRESSES)))) ((NAT PROGN (DT-SORT.ST.REMOVE (QUOTE NAT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NAT) ST*SYMBOL.ADDRESSES))) (NAT REMPROP (QUOTE NAT) (QUOTE ST*DATA))) ((SYMB.FUNCTION2 PROGN (DT-SORT.ST.REMOVE (QUOTE SYMB.FUNCTION2)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SYMB.FUNCTION2) ST*SYMBOL.ADDRESSES))) (SYMB.FUNCTION2 REMPROP (QUOTE SYMB.FUNCTION2) (QUOTE ST*DATA)) (SYMB.FUNCTION1 PROGN (DT-SORT.ST.REMOVE (QUOTE SYMB.FUNCTION1)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SYMB.FUNCTION1) ST*SYMBOL.ADDRESSES))) (SYMB.FUNCTION1 REMPROP (QUOTE SYMB.FUNCTION1) (QUOTE ST*DATA))) ((EL.F PROGN (DT-SORT.ST.REMOVE (QUOTE EL.F)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EL.F) ST*SYMBOL.ADDRESSES))) (EL.F REMPROP (QUOTE EL.F) (QUOTE ST*DATA))) ((ELEMENT PROGN (DT-SORT.ST.REMOVE (QUOTE ELEMENT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ELEMENT) ST*SYMBOL.ADDRESSES))) (ELEMENT REMPROP (QUOTE ELEMENT) (QUOTE ST*DATA))) ((EQU.RELATION PROGN (DT-SORT.ST.REMOVE (QUOTE EQU.RELATION)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EQU.RELATION) ST*SYMBOL.ADDRESSES))) (EQU.RELATION REMPROP (QUOTE EQU.RELATION) (QUOTE ST*DATA))) ((REL PROGN (DT-SORT.ST.REMOVE (QUOTE REL)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE REL) ST*SYMBOL.ADDRESSES))) (REL REMPROP (QUOTE REL) (QUOTE ST*DATA))) ((SET PROGN (DT-SORT.ST.REMOVE (QUOTE SET)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SET) ST*SYMBOL.ADDRESSES))) (SET REMPROP (QUOTE SET) (QUOTE ST*DATA))) ((FALSE PROGN (DT-PREDICATE.DELETE 2.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1.) (FALSE . 2.) (SET . T) (REL . T) (EQU.RELATION . T) (ELEMENT . T) (EL.F . T) (SYMB.FUNCTION1 . T) (SYMB.FUNCTION2 . T) (NAT . T) (1. . 68.) (PLUS . 69.) (F . 70.) (MAL.F . 71.) (SEMIGROUP . 72.) (IN.RELATION . 73.) (L.CONGRUENCE . 74.) (R.CONGRUENCE . 75.) (CONGRUENCE . 76.) (MAPPING . 77.) (APPLY1.EL . 78.) (APPLY2.F . 79.) (EL*SUBSET.F . 80.) (PREIMAGE . 81.) (IND.EQU . 82.) (COMP . 83.) (UNION.REL . 84.) (POWER . 85.) (TRANS.CLOS . 86.) (TRANS.UNION . 87.) (X_88 . 88.) (X_89 . 89.) (= . 90.) (X_91 . 91.) (EL . 92.) (X_93 . 93.) (X_94 . 94.) (X_95 . 95.))))))))
;;; -*- Package: IL; Base: 10. -*-
(COND ((FMT-LOAD "07-NOV-85 13:32:08"
NIL(((ALL RHO:EQU.RELATION ALL F1,F2:EL.F PREIMAGE (RHO F1) = PREIMAGE (RHO F2) EQV IN.RELATION (RHO F1 F2)) (ALL 96. (ALL 98. (ALL 97. (EQV (+ 90. ((81. 96. 97.) (81. 96. 98.)) (KIND (EQV T 20.))) (+ 73. (96. 97. 98.) (KIND (EQV NIL 20.))))))) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (49641. 49646. 49651. 49656. 49661. 49666. 49681. 49686. 49701. 49706. 49711. 49725. 49739. 49753. 49767. 49781. 49795. 49809. 49823. 49837. 49851. 49866. 49881. 49896. 49911. 49926. 49941. 49946. 49951. 49965. 49970. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 49985. 50000.))) (DATALIST (QUOTE (15. "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1. (POSITIVE))) ((+ 1. (NEGATIVE))) ((+ 1. (NIL))) ((- 1. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2. (POSITIVE))) ((+ 2. (NEGATIVE))) ((+ 2. (NIL))) ((- 2. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. NAT "1" (DT*ST-KIND NIL) CONSTANT 14. "PLUS" NIL NAT (NAT NAT) NIL NIL NIL NIL NIL 2. NAT (DT*ST-KIND NIL) FUNCTION 5. SET "F" (DT*ST-KIND NIL) CONSTANT 5. SYMB.FUNCTION2 "MAL.F" (DT*ST-KIND NIL) CONSTANT 15. "SEMIGROUP" NIL NIL (SET SYMB.FUNCTION2) NIL NIL ((- 72. (POSITIVE))) ((+ 72. (NEGATIVE))) ((+ 72. (NIL))) ((- 72. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "IN.RELATION" NIL NIL (REL EL.F EL.F) NIL NIL ((- 73. (POSITIVE))) ((+ 73. (NEGATIVE))) ((+ 73. (NIL))) ((- 73. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "L.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 74. (POSITIVE))) ((+ 74. (NEGATIVE))) ((+ 74. (NIL))) ((- 74. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "R.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 75. (POSITIVE))) ((+ 75. (NEGATIVE))) ((+ 75. (NIL))) ((- 75. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "CONGRUENCE" NIL NIL (REL) NIL NIL ((- 76. (POSITIVE))) ((+ 76. (NEGATIVE))) ((+ 76. (NIL))) ((- 76. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MAPPING" NIL NIL (SYMB.FUNCTION1 SET SET) NIL NIL ((- 77. (POSITIVE))) ((+ 77. (NEGATIVE))) ((+ 77. (NIL))) ((- 77. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "APPLY1.EL" NIL ELEMENT (SYMB.FUNCTION1 ELEMENT) NIL NIL NIL NIL NIL 2. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY2.F" NIL EL.F (SYMB.FUNCTION2 EL.F EL.F) NIL NIL NIL NIL NIL 3. EL.F (DT*ST-KIND NIL) FUNCTION 14. "EL*SUBSET.F" NIL SET (SYMB.FUNCTION2 ELEMENT SET) NIL NIL NIL NIL NIL 3. SET (DT*ST-KIND NIL) FUNCTION 14. "PREIMAGE" NIL SET (REL EL.F) NIL NIL NIL NIL NIL 2. SET (DT*ST-KIND NIL) FUNCTION 14. "IND.EQU" NIL EQU.RELATION (SYMB.FUNCTION1 SET) NIL NIL NIL NIL NIL 2. EQU.RELATION (DT*ST-KIND NIL) FUNCTION 14. "COMP" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "UNION.REL" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "POWER" NIL REL (REL NAT) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.CLOS" NIL REL (REL) NIL NIL NIL NIL NIL 1. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.UNION" NIL EQU.RELATION (EQU.RELATION EQU.RELATION) NIL NIL NIL NIL NIL 2. EQU.RELATION (DT*ST-KIND NIL) FUNCTION 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 90. (POSITIVE . SYMMETRIC))) ((+ 90. (NEGATIVE . SYMMETRIC))) ((+ 90. (NIL . SYMMETRIC))) ((- 90. (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "EL" NIL NIL (ANY ANY) NIL NIL ((- 92. (POSITIVE))) ((+ 92. (NEGATIVE))) ((+ 92. (NIL))) ((- 92. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EQU.RELATION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EL.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 50000.)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 50000.) (SETQ COUNTER1 99.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0.) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 50000.) (MEM-INITIALIZE 50000.))) (SETQ COUNTER1 99.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 50000.) (RPAQ MEM*NEXT.RADR (IPLUS 49636. INCREMENT))) (T (RPAQ MEM*NEXT.RADR 49636.))) (RPAQ MEM*NEXT.VADR 99.) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (NAT SYMB.FUNCTION2 SYMB.FUNCTION1 EL.F ELEMENT EQU.RELATION REL SET ANY)) (RPAQQ DT*SORT.NR 26.) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0.) (RPAQQ DT*CONSTANT.COUNTER 0.) (RPAQQ DT*CONSTANT.ALL (71. 70. 68.)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0.) (RPAQQ DT*FUNCTION.ALL (87. 86. 85. 84. 83. 82. 81. 80. 79. 78. 69.)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0.) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES (90.)) (RPAQQ DT*NONEQUALITY.PREDICATES (92. 77. 76. 75. 74. 73. 72. 2. 1.)) (RPAQQ DT*PREDICATE.ALL (92. 90. 77. 76. 75. 74. 73. 72. 2. 1.)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1.) (RPAQQ DT*FALSE.PREDICATE 2.) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (PROGN (REMPROPS (QUOTE DT*PREDICATE.WITH.ATTRIBUTES)) (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (NCONC (QUOTE (DEFINED (90.) SYMMETRIC (90.) REFLEXIVE (90.))) (GETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES))))))
(PROGN (PROGN (REMPROPS (QUOTE NAT)) (SETPROPLIST (QUOTE NAT) (NCONC (QUOTE (DT*SORT.NUMBER 25. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (NAT) DT*MAX.SUBSORTS ((NAT NAT) (SYMB.FUNCTION2) (SYMB.FUNCTION1) (EL.F) (ELEMENT) (EQU.RELATION) (REL) (SET NAT) (ANY NAT)) DT*MINIMAL.SUBSORTS (NAT) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (NAT SET ANY))) (GETPROPLIST (QUOTE NAT))))) (PROGN (REMPROPS (QUOTE SYMB.FUNCTION2)) (SETPROPLIST (QUOTE SYMB.FUNCTION2) (NCONC (QUOTE (DT*SORT.NUMBER 24. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (SYMB.FUNCTION2) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2 SYMB.FUNCTION2) (SYMB.FUNCTION1) (EL.F) (ELEMENT) (EQU.RELATION) (REL) (SET) (ANY SYMB.FUNCTION2)) DT*MINIMAL.SUBSORTS (SYMB.FUNCTION2) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SYMB.FUNCTION2 ANY))) (GETPROPLIST (QUOTE SYMB.FUNCTION2))))) (PROGN (REMPROPS (QUOTE SYMB.FUNCTION1)) (SETPROPLIST (QUOTE SYMB.FUNCTION1) (NCONC (QUOTE (DT*SORT.NUMBER 23. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (SYMB.FUNCTION1) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (SYMB.FUNCTION1 SYMB.FUNCTION1) (EL.F) (ELEMENT) (EQU.RELATION) (REL) (SET) (ANY SYMB.FUNCTION1)) DT*MINIMAL.SUBSORTS (SYMB.FUNCTION1) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SYMB.FUNCTION1 ANY))) (GETPROPLIST (QUOTE SYMB.FUNCTION1))))) (PROGN (REMPROPS (QUOTE EL.F)) (SETPROPLIST (QUOTE EL.F) (NCONC (QUOTE (DT*SORT.NUMBER 19. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (EL.F) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (SYMB.FUNCTION1) (EL.F EL.F) (ELEMENT EL.F) (EQU.RELATION) (REL) (SET EL.F) (ANY EL.F)) DT*MINIMAL.SUBSORTS (EL.F) DT*DIRECT.SUPERSORTS (ELEMENT) DT*INVERSE.TRANSITIVE.CLOSURE (EL.F ELEMENT SET ANY) DT*LEAST.SUPERSORTS ((EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION SET) (REL SET) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE EL.F))))) (PROGN (REMPROPS (QUOTE ELEMENT)) (SETPROPLIST (QUOTE ELEMENT) (NCONC (QUOTE (DT*SORT.NUMBER 18. DT*DIRECT.SUBSORTS (EL.F) DT*TRANSITIVE.CLOSURE (EL.F ELEMENT) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (SYMB.FUNCTION1) (EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION) (REL) (SET ELEMENT) (ANY ELEMENT)) DT*MINIMAL.SUBSORTS (EL.F) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT SET ANY) DT*LEAST.SUPERSORTS ((EL.F ELEMENT) (ELEMENT ELEMENT) (EQU.RELATION SET) (REL SET) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE ELEMENT))))) (PROGN (REMPROPS (QUOTE EQU.RELATION)) (SETPROPLIST (QUOTE EQU.RELATION) (NCONC (QUOTE (DT*SORT.NUMBER 17. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (EQU.RELATION) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (SYMB.FUNCTION1) (EL.F) (ELEMENT) (EQU.RELATION EQU.RELATION) (REL EQU.RELATION) (SET EQU.RELATION) (ANY EQU.RELATION)) DT*MINIMAL.SUBSORTS (EQU.RELATION) DT*DIRECT.SUPERSORTS (REL) DT*INVERSE.TRANSITIVE.CLOSURE (EQU.RELATION REL SET ANY) DT*LEAST.SUPERSORTS ((EL.F SET) (ELEMENT SET) (EQU.RELATION EQU.RELATION) (REL REL) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE EQU.RELATION))))) (PROGN (REMPROPS (QUOTE REL)) (SETPROPLIST (QUOTE REL) (NCONC (QUOTE (DT*SORT.NUMBER 16. DT*DIRECT.SUBSORTS (EQU.RELATION) DT*TRANSITIVE.CLOSURE (EQU.RELATION REL) DT*MAX.SUBSORTS ((NAT) (SYMB.FUNCTION2) (SYMB.FUNCTION1) (EL.F) (ELEMENT) (EQU.RELATION EQU.RELATION) (REL REL) (SET REL) (ANY REL)) DT*MINIMAL.SUBSORTS (EQU.RELATION) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (REL SET ANY) DT*LEAST.SUPERSORTS ((EL.F SET) (ELEMENT SET) (EQU.RELATION REL) (REL REL) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE REL))))) (PROGN (REMPROPS (QUOTE SET)) (SETPROPLIST (QUOTE SET) (NCONC (QUOTE (DT*SORT.NUMBER 15. DT*DIRECT.SUBSORTS (NAT ELEMENT REL) DT*TRANSITIVE.CLOSURE (NAT ELEMENT REL EQU.RELATION EL.F SET) DT*MAX.SUBSORTS ((NAT NAT) (SYMB.FUNCTION2) (SYMB.FUNCTION1) (EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION EQU.RELATION) (REL REL) (SET SET) (ANY SET)) DT*MINIMAL.SUBSORTS (EL.F EQU.RELATION) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SET ANY) DT*LEAST.SUPERSORTS ((EL.F SET) (ELEMENT SET) (EQU.RELATION SET) (REL SET) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE SET))))) (PROGN (REMPROPS (QUOTE ANY)) (SETPROPLIST (QUOTE ANY) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (SYMB.FUNCTION2 SYMB.FUNCTION1 SET) DT*SORT.NUMBER 1. DT*TRANSITIVE.CLOSURE (SYMB.FUNCTION2 SYMB.FUNCTION1 SET EQU.RELATION EL.F NAT ELEMENT REL ANY) DT*MAX.SUBSORTS ((NAT NAT) (SYMB.FUNCTION2 SYMB.FUNCTION2) (SYMB.FUNCTION1 SYMB.FUNCTION1) (EL.F EL.F) (ELEMENT ELEMENT) (EQU.RELATION EQU.RELATION) (REL REL) (SET SET) (ANY ANY)) DT*MINIMAL.SUBSORTS (SYMB.FUNCTION2 SYMB.FUNCTION1 EQU.RELATION EL.F) DT*DIRECT.SUPERSORTS NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*LEAST.SUPERSORTS ((EL.F ANY) (ELEMENT ANY) (EQU.RELATION ANY) (REL ANY) (SET ANY) (ANY ANY)))) (GETPROPLIST (QUOTE ANY))))))
(PROGN (RPAQQ ST*STACK1 (NIL ((= PROG1 NIL (DT-PREDICATE.PUTSORT 90. (QUOTE (ANY ANY))) (DT-PREDICATE.PUT.ATTRIBUTES 90. (QUOTE (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))) (= PROG1 NIL (DT-PUTPROP 90. NIL) (DT-PUTPROP 90. NIL)) (X_98 PROGN (DT-VARIABLE.DELETE 98.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_98) ST*SYMBOL.ADDRESSES))) (X_97 PROGN (DT-VARIABLE.DELETE 97.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_97) ST*SYMBOL.ADDRESSES))) (X_96 PROGN (DT-VARIABLE.DELETE 96.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_96) ST*SYMBOL.ADDRESSES)))) NIL)) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1.) (FALSE . 2.) (SET . T) (REL . T) (EQU.RELATION . T) (ELEMENT . T) (EL.F . T) (SYMB.FUNCTION1 . T) (SYMB.FUNCTION2 . T) (NAT . T) (1. . 68.) (PLUS . 69.) (F . 70.) (MAL.F . 71.) (SEMIGROUP . 72.) (IN.RELATION . 73.) (L.CONGRUENCE . 74.) (R.CONGRUENCE . 75.) (CONGRUENCE . 76.) (MAPPING . 77.) (APPLY1.EL . 78.) (APPLY2.F . 79.) (EL*SUBSET.F . 80.) (PREIMAGE . 81.) (IND.EQU . 82.) (COMP . 83.) (UNION.REL . 84.) (POWER . 85.) (TRANS.CLOS . 86.) (TRANS.UNION . 87.) (X_88 . 88.) (X_89 . 89.) (= . 90.) (X_91 . 91.) (EL . 92.) (X_93 . 93.) (X_94 . 94.) (X_95 . 95.) (X_96 . 96.) (X_97 . 97.) (X_98 . 98.))))))))
;;; -*- Package: IL; Base: 10. -*-
(COND ((FMT-LOAD "24-MAR-86 08:48:45"
NIL(((SORT SET:ANY) (+ 1. NIL) TYPE) ((SORT FUNCTION:ANY) (+ 1. NIL) TYPE) ((SORT ELEMENT:SET) (+ 1. NIL) TYPE) ((SORT ELEMENT.F:ELEMENT) (+ 1. NIL) TYPE) ((SORT NAT:SET) (+ 1. NIL) TYPE) ((SORT REL:SET) (+ 1. NIL) TYPE) ((SORT UNARY.FUNC:FUNCTION) (+ 1. NIL) TYPE) ((SORT BINARY.FUNC:FUNCTION) (+ 1. NIL) TYPE) ((SORT EQU.REL-S:REL) (+ 1. NIL) TYPE) ((SORT L.CONGRUENCE-S:EQU.REL-S) (+ 1. NIL) TYPE) ((SORT R.CONGRUENCE-S:EQU.REL-S) (+ 1. NIL) TYPE) ((SORT CONGRUENCE-S:L.CONGRUENCE-S) (+ 1. NIL) TYPE) ((SORT CONGRUENCE-S:R.CONGRUENCE-S) (+ 1. NIL) TYPE) ((* CONSTANTS *) COMMENT COMMENT) ((TYPE F:SET) (+ 1. NIL) TYPE) ((TYPE CONN.F:BINARY.FUNC) (+ 1. NIL) TYPE) ((TYPE 1:NAT) (+ 1. NIL) TYPE) ((TYPE CONN.F.RHO:BINARY.FUNC) (+ 1. NIL) TYPE) ((* PREDICATES *) COMMENT COMMENT) ((TYPE SEMIGROUP (SET BINARY.FUNC)) (+ 1. NIL) TYPE) ((TYPE L.CONGRUENCE (REL)) (+ 1. NIL) TYPE) ((TYPE R.CONGRUENCE (REL)) (+ 1. NIL) TYPE) ((TYPE CONGRUENCE (EQU.REL-S)) (+ 1. NIL) TYPE) ((TYPE IN.RELATION (REL ELEMENT.F ELEMENT.F)) (+ 1. NIL) TYPE) ((TYPE INJECTIVE (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE SURJECTIVE (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE BIJECTIVE (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE HOMOMORPH (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE ISOMORPH (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE EPIMORPH (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE MAPPING (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE MEMBER (ELEMENT SET)) (+ 1. NIL) TYPE) ((TYPE SUBSET (SET SET)) (+ 1. NIL) TYPE) ((* FUNCTIONS *) COMMENT COMMENT) ((TYPE INVERSE.EL (ELEMENT BINARY.FUNC ELEMENT) :ELEMENT) (+ 1. NIL) TYPE) ((TYPE APPLY1 (UNARY.FUNC SET) :SET) (+ 1. NIL) TYPE) ((TYPE APPLY1-EL (UNARY.FUNC ELEMENT) :ELEMENT) (+ 1. NIL) TYPE) ((TYPE APPLY2 (BINARY.FUNC SET SET) :SET) (+ 1. NIL) TYPE) ((TYPE APPLY2-EL (BINARY.FUNC ELEMENT ELEMENT) :ELEMENT) (+ 1. NIL) TYPE) ((TYPE APPLY2-EL.F (BINARY.FUNC ELEMENT.F ELEMENT.F) :ELEMENT.F) (+ 1. NIL) TYPE) ((TYPE PREIMAGE (REL ELEMENT) :SET) (+ 1. NIL) TYPE) ((TYPE POWER (REL NAT) :REL) (+ 1. NIL) TYPE) ((TYPE PLUS (NAT NAT) :NAT) (+ 1. NIL) TYPE) ((TYPE MODULO (EQU.REL-S) :SET) (+ 1. NIL) TYPE) ((TYPE COMP (REL REL) :REL) (+ 1. NIL) TYPE) ((TYPE TRANS.CLOS (REL) :REL) (+ 1. NIL) TYPE) ((TYPE UNION-REL (REL REL) :REL) (+ 1. NIL) TYPE) ((TYPE TRANS.UNION (EQU.REL-S EQU.REL-S) :EQU.REL-S) (+ 1. NIL) TYPE) ((TYPE CAN.PROJ (EQU.REL-S) :UNARY.FUNC) (+ 1. NIL) TYPE) ((TYPE IND.EQU.REL (UNARY.FUNC SET) :EQU.REL-S) (+ 1. NIL) TYPE) ((TYPE MOD.PHI (UNARY.FUNC SET) :UNARY.FUNC) (+ 1. NIL) TYPE) ((TYPE NORMALISATOR (SET) :SET) (+ 1. NIL) TYPE) ((*) COMMENT COMMENT) ((* THEOREM 5.16 *) COMMENT COMMENT) ((ALL E:ELEMENT.F ALL RHO:L.CONGRUENCE-S GROUP (F CONN.F E) IMPL SUBGROUP (NORMALISATOR (PREIMAGE (RHO E)) F CONN.F E)) (ALL 326. (ALL 327. (IMPL (+ 328. (298. 299. 326.) NIL) (+ 329. ((325. (314. 327. 326.)) 298. 299. 326.) NIL)))) QUANTIFICATION) ((* EXISTENZ INVERSER ELEMENTE *) COMMENT COMMENT) ((ALL G:SET ALL CONN:BINARY.FUNC ALL E,X:ELEMENT GROUP (G CONN E) AND MEMBER (X G) IMPL MEMBER (INVERSE.EL (X CONN E) G)) (ALL 330. (ALL 331. (ALL 333. (ALL 332. (IMPL (AND (+ 328. (330. 331. 332.) NIL) (+ 306. (333. 330.) NIL)) (+ 306. ((308. 333. 331. 332.) 330.) NIL)))))) QUANTIFICATION) ((* UNTERGRUPPE IMPL GRUPPE *) COMMENT COMMENT) ((ALL G:SET ALL E:ELEMENT SUBGROUP (G F CONN.F E) IMPL GROUP (G CONN.F E)) (ALL 334. (ALL 335. (IMPL (+ 329. (334. 298. 299. 335.) NIL) (+ 328. (334. 299. 335.) NIL)))) QUANTIFICATION) ((* FOLGERUNG AUS 5.16 *) COMMENT COMMENT) ((ALL E:ELEMENT.F ALL RHO:L.CONGRUENCE-S GROUP (F CONN.F E) IMPL SUBSET (NORMALISATOR (PREIMAGE (RHO E)) NORMALISATOR (RHO))) (ALL 336. (ALL 337. (IMPL (+ 328. (298. 299. 336.) NIL) (+ 307. ((325. (314. 337. 336.)) (325. 337.)) NIL)))) QUANTIFICATION) ((* TEILMENGENAXIOM *) COMMENT COMMENT) ((ALL X:ELEMENT ALL A,B:SET MEMBER (X A) AND SUBSET (A B) IMPL MEMBER (X B)) (ALL 338. (ALL 340. (ALL 339. (IMPL (AND (+ 306. (338. 339.) NIL) (+ 307. (339. 340.) NIL)) (+ 306. (338. 340.) NIL))))) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (99398. 99403. 99408. 99413. 99418. 99423. 99428. 99433. 99438. 99443. 99448. 99463. 99478. 99483. 99488. 99502. 99516. 99530. 99544. 99558. 99572. 99586. 99600. 99614. 99628. 99642. 99656. 99670. 99684. 99698. 99712. 99726. 99740. 99755. 99770. 99785. 99800. 99815. 99830. 99845. 99860. 99965. 99970. 99960. 99955. ATP.MEMORY.NIL ATP.MEMORY.NIL 99950. 99935. 99920. 99905. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 99890. 99875. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 99985. 100000.))) (DATALIST (QUOTE (15. "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1. (POSITIVE))) ((+ 1. (NEGATIVE))) ((+ 1. (NIL))) ((- 1. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2. (POSITIVE))) ((+ 2. (NEGATIVE))) ((+ 2. (NIL))) ((- 2. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. SET "F" (DT*ST-KIND NIL) CONSTANT 5. BINARY.FUNC "CONN.F" (DT*ST-KIND NIL) CONSTANT 5. NAT "1" (DT*ST-KIND NIL) CONSTANT 5. BINARY.FUNC "CONN.F.RHO" (DT*ST-KIND NIL) CONSTANT 15. "SEMIGROUP" NIL NIL (SET BINARY.FUNC) NIL NIL ((- 293. (POSITIVE))) ((+ 293. (NEGATIVE))) ((+ 293. (NIL))) ((- 293. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "L.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 292. (POSITIVE))) ((+ 292. (NEGATIVE))) ((+ 292. (NIL))) ((- 292. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "R.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 291. (POSITIVE))) ((+ 291. (NEGATIVE))) ((+ 291. (NIL))) ((- 291. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "CONGRUENCE" NIL NIL (EQU.REL-S) NIL NIL ((- 290. (POSITIVE))) ((+ 290. (NEGATIVE))) ((+ 290. (NIL))) ((- 290. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "IN.RELATION" NIL NIL (REL ELEMENT.F ELEMENT.F) NIL NIL ((- 286. (POSITIVE))) ((+ 286. (NEGATIVE))) ((+ 286. (NIL))) ((- 286. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "INJECTIVE" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 285. (POSITIVE))) ((+ 285. (NEGATIVE))) ((+ 285. (NIL))) ((- 285. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "SURJECTIVE" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 300. (POSITIVE))) ((+ 300. (NEGATIVE))) ((+ 300. (NIL))) ((- 300. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "BIJECTIVE" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 301. (POSITIVE))) ((+ 301. (NEGATIVE))) ((+ 301. (NIL))) ((- 301. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "HOMOMORPH" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 302. (POSITIVE))) ((+ 302. (NEGATIVE))) ((+ 302. (NIL))) ((- 302. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "ISOMORPH" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 303. (POSITIVE))) ((+ 303. (NEGATIVE))) ((+ 303. (NIL))) ((- 303. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "EPIMORPH" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 304. (POSITIVE))) ((+ 304. (NEGATIVE))) ((+ 304. (NIL))) ((- 304. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MAPPING" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 305. (POSITIVE))) ((+ 305. (NEGATIVE))) ((+ 305. (NIL))) ((- 305. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MEMBER" NIL NIL (ELEMENT SET) NIL NIL ((- 306. (POSITIVE))) ((+ 306. (NEGATIVE))) ((+ 306. (NIL))) ((- 306. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "SUBSET" NIL NIL (SET SET) NIL NIL ((- 307. (POSITIVE))) ((+ 307. (NEGATIVE))) ((+ 307. (NIL))) ((- 307. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "INVERSE.EL" NIL ELEMENT (ELEMENT BINARY.FUNC ELEMENT) NIL NIL NIL NIL NIL 3. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY1" NIL SET (UNARY.FUNC SET) NIL NIL NIL NIL NIL 2. SET (DT*ST-KIND NIL) FUNCTION 14. "APPLY1-EL" NIL ELEMENT (UNARY.FUNC ELEMENT) NIL NIL NIL NIL NIL 2. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY2" NIL SET (BINARY.FUNC SET SET) NIL NIL NIL NIL NIL 3. SET (DT*ST-KIND NIL) FUNCTION 14. "APPLY2-EL" NIL ELEMENT (BINARY.FUNC ELEMENT ELEMENT) NIL NIL NIL NIL NIL 3. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY2-EL.F" NIL ELEMENT.F (BINARY.FUNC ELEMENT.F ELEMENT.F) NIL NIL NIL NIL NIL 3. ELEMENT.F (DT*ST-KIND NIL) FUNCTION 14. "PREIMAGE" NIL SET (REL ELEMENT) NIL NIL NIL NIL NIL 2. SET (DT*ST-KIND NIL) FUNCTION 14. "POWER" NIL REL (REL NAT) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "PLUS" NIL NAT (NAT NAT) NIL NIL NIL NIL NIL 2. NAT (DT*ST-KIND NIL) FUNCTION 14. "MODULO" NIL SET (EQU.REL-S) NIL NIL NIL NIL NIL 1. SET (DT*ST-KIND NIL) FUNCTION 14. "COMP" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.CLOS" NIL REL (REL) NIL NIL NIL NIL NIL 1. REL (DT*ST-KIND NIL) FUNCTION 14. "UNION-REL" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.UNION" NIL EQU.REL-S (EQU.REL-S EQU.REL-S) NIL NIL NIL NIL NIL 2. EQU.REL-S (DT*ST-KIND NIL) FUNCTION 14. "CAN.PROJ" NIL UNARY.FUNC (EQU.REL-S) NIL NIL NIL NIL NIL 1. UNARY.FUNC (DT*ST-KIND NIL) FUNCTION 14. "IND.EQU.REL" NIL EQU.REL-S (UNARY.FUNC SET) NIL NIL NIL NIL NIL 2. EQU.REL-S (DT*ST-KIND NIL) FUNCTION 14. "MOD.PHI" NIL UNARY.FUNC (UNARY.FUNC SET) NIL NIL NIL NIL NIL 2. UNARY.FUNC (DT*ST-KIND NIL) FUNCTION 14. "NORMALISATOR" NIL SET (SET) NIL NIL NIL NIL NIL 1. SET (DT*ST-KIND NIL) FUNCTION 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. L.CONGRUENCE-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "GROUP" NIL NIL (ANY ANY ANY) NIL NIL ((- 328. (POSITIVE))) ((+ 328. (NEGATIVE))) ((+ 328. (NIL))) ((- 328. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "SUBGROUP" NIL NIL (ANY ANY ANY ANY) NIL NIL ((- 329. (POSITIVE))) ((+ 329. (NEGATIVE))) ((+ 329. (NIL))) ((- 329. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. BINARY.FUNC NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. L.CONGRUENCE-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 100000.)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 100000.) (SETQ COUNTER1 341.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0.) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 100000.) (MEM-INITIALIZE 100000.))) (SETQ COUNTER1 341.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 100000.) (RPAQ MEM*NEXT.RADR (IPLUS 99393. INCREMENT))) (T (RPAQ MEM*NEXT.RADR 99393.))) (RPAQ MEM*NEXT.VADR 341.) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S EQU.REL-S BINARY.FUNC UNARY.FUNC REL NAT ELEMENT.F ELEMENT FUNCTION SET ANY)) (RPAQQ DT*SORT.NR 115.) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0.) (RPAQQ DT*CONSTANT.COUNTER 0.) (RPAQQ DT*CONSTANT.ALL (296. 297. 299. 298.)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0.) (RPAQQ DT*FUNCTION.ALL (325. 324. 323. 322. 321. 320. 319. 318. 317. 316. 315. 314. 313. 312. 311. 310. 309. 308.)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0.) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (329. 328. 307. 306. 305. 304. 303. 302. 301. 300. 285. 286. 290. 291. 292. 293. 2. 1.)) (RPAQQ DT*PREDICATE.ALL (329. 328. 307. 306. 305. 304. 303. 302. 301. 300. 285. 286. 290. 291. 292. 293. 2. 1.)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1.) (RPAQQ DT*FALSE.PREDICATE 2.) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (PROGN (REMPROPS (QUOTE DT*PREDICATE.WITH.ATTRIBUTES)) (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (NCONC (QUOTE NIL) (GETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES))))))
(PROGN (PROGN (REMPROPS (QUOTE CONGRUENCE-S)) (SETPROPLIST (QUOTE CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 114. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (CONGRUENCE-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S CONGRUENCE-S) (L.CONGRUENCE-S CONGRUENCE-S) (EQU.REL-S CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET CONGRUENCE-S) (ANY CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (CONGRUENCE-S) DT*DIRECT.SUPERSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*INVERSE.TRANSITIVE.CLOSURE (CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE R.CONGRUENCE-S)) (SETPROPLIST (QUOTE R.CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 113. DT*DIRECT.SUBSORTS (CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (CONGRUENCE-S R.CONGRUENCE-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S CONGRUENCE-S) (EQU.REL-S R.CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL R.CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET R.CONGRUENCE-S) (ANY R.CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (R.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (EQU.REL-S) DT*INVERSE.TRANSITIVE.CLOSURE (R.CONGRUENCE-S EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE R.CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE L.CONGRUENCE-S)) (SETPROPLIST (QUOTE L.CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 112. DT*DIRECT.SUBSORTS (CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (CONGRUENCE-S L.CONGRUENCE-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S L.CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL L.CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET L.CONGRUENCE-S) (ANY L.CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (L.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (EQU.REL-S) DT*INVERSE.TRANSITIVE.CLOSURE (L.CONGRUENCE-S EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE L.CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE EQU.REL-S)) (SETPROPLIST (QUOTE EQU.REL-S) (NCONC (QUOTE (DT*SORT.NUMBER 111. DT*DIRECT.SUBSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (R.CONGRUENCE-S L.CONGRUENCE-S CONGRUENCE-S EQU.REL-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL EQU.REL-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET EQU.REL-S) (ANY EQU.REL-S)) DT*MINIMAL.SUBSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (REL) DT*INVERSE.TRANSITIVE.CLOSURE (EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE EQU.REL-S))))) (PROGN (REMPROPS (QUOTE BINARY.FUNC)) (SETPROPLIST (QUOTE BINARY.FUNC) (NCONC (QUOTE (DT*SORT.NUMBER 110. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (BINARY.FUNC) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION BINARY.FUNC) (SET) (ANY BINARY.FUNC)) DT*MINIMAL.SUBSORTS (BINARY.FUNC) DT*DIRECT.SUPERSORTS (FUNCTION) DT*INVERSE.TRANSITIVE.CLOSURE (BINARY.FUNC FUNCTION ANY))) (GETPROPLIST (QUOTE BINARY.FUNC))))) (PROGN (REMPROPS (QUOTE UNARY.FUNC)) (SETPROPLIST (QUOTE UNARY.FUNC) (NCONC (QUOTE (DT*SORT.NUMBER 109. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (UNARY.FUNC) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION UNARY.FUNC) (SET) (ANY UNARY.FUNC)) DT*MINIMAL.SUBSORTS (UNARY.FUNC) DT*DIRECT.SUPERSORTS (FUNCTION) DT*INVERSE.TRANSITIVE.CLOSURE (UNARY.FUNC FUNCTION ANY))) (GETPROPLIST (QUOTE UNARY.FUNC))))) (PROGN (REMPROPS (QUOTE REL)) (SETPROPLIST (QUOTE REL) (NCONC (QUOTE (DT*SORT.NUMBER 108. DT*DIRECT.SUBSORTS (EQU.REL-S) DT*TRANSITIVE.CLOSURE (EQU.REL-S CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S REL) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET REL) (ANY REL)) DT*MINIMAL.SUBSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (REL SET ANY))) (GETPROPLIST (QUOTE REL))))) (PROGN (REMPROPS (QUOTE NAT)) (SETPROPLIST (QUOTE NAT) (NCONC (QUOTE (DT*SORT.NUMBER 107. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (NAT) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET NAT) (ANY NAT)) DT*MINIMAL.SUBSORTS (NAT) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (NAT SET ANY))) (GETPROPLIST (QUOTE NAT))))) (PROGN (REMPROPS (QUOTE ELEMENT.F)) (SETPROPLIST (QUOTE ELEMENT.F) (NCONC (QUOTE (DT*SORT.NUMBER 106. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (ELEMENT.F) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT.F) (FUNCTION) (SET ELEMENT.F) (ANY ELEMENT.F)) DT*MINIMAL.SUBSORTS (ELEMENT.F) DT*DIRECT.SUPERSORTS (ELEMENT) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT.F ELEMENT SET ANY))) (GETPROPLIST (QUOTE ELEMENT.F))))) (PROGN (REMPROPS (QUOTE ELEMENT)) (SETPROPLIST (QUOTE ELEMENT) (NCONC (QUOTE (DT*SORT.NUMBER 105. DT*DIRECT.SUBSORTS (ELEMENT.F) DT*TRANSITIVE.CLOSURE (ELEMENT.F ELEMENT) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION) (SET ELEMENT) (ANY ELEMENT)) DT*MINIMAL.SUBSORTS (ELEMENT.F) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT SET ANY))) (GETPROPLIST (QUOTE ELEMENT))))) (PROGN (REMPROPS (QUOTE FUNCTION)) (SETPROPLIST (QUOTE FUNCTION) (NCONC (QUOTE (DT*SORT.NUMBER 104. DT*DIRECT.SUBSORTS (BINARY.FUNC UNARY.FUNC) DT*TRANSITIVE.CLOSURE (BINARY.FUNC UNARY.FUNC FUNCTION) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION FUNCTION) (SET) (ANY FUNCTION)) DT*MINIMAL.SUBSORTS (BINARY.FUNC UNARY.FUNC) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (FUNCTION ANY))) (GETPROPLIST (QUOTE FUNCTION))))) (PROGN (REMPROPS (QUOTE SET)) (SETPROPLIST (QUOTE SET) (NCONC (QUOTE (DT*SORT.NUMBER 103. DT*DIRECT.SUBSORTS (REL NAT ELEMENT) DT*TRANSITIVE.CLOSURE (REL NAT ELEMENT R.CONGRUENCE-S L.CONGRUENCE-S CONGRUENCE-S ELEMENT.F EQU.REL-S SET) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL REL) (NAT NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION) (SET SET) (ANY SET)) DT*MINIMAL.SUBSORTS (R.CONGRUENCE-S NAT ELEMENT.F L.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SET ANY))) (GETPROPLIST (QUOTE SET))))) (PROGN (REMPROPS (QUOTE ANY)) (SETPROPLIST (QUOTE ANY) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (FUNCTION SET) DT*SORT.NUMBER 1. DT*TRANSITIVE.CLOSURE (FUNCTION SET ELEMENT.F EQU.REL-S CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S REL NAT ELEMENT BINARY.FUNC UNARY.FUNC ANY) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL REL) (NAT NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION FUNCTION) (SET SET) (ANY ANY)) DT*MINIMAL.SUBSORTS (BINARY.FUNC ELEMENT.F R.CONGRUENCE-S L.CONGRUENCE-S NAT UNARY.FUNC) DT*DIRECT.SUPERSORTS NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*LEAST.SUPERSORTS ((ANY ANY)))) (GETPROPLIST (QUOTE ANY))))))
(PROGN (RPAQQ ST*STACK1 (NIL ((X_340 PROGN (DT-VARIABLE.DELETE 340.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_340) ST*SYMBOL.ADDRESSES))) (X_339 PROGN (DT-VARIABLE.DELETE 339.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_339) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (X_338 PROGN (DT-VARIABLE.DELETE 338.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_338) ST*SYMBOL.ADDRESSES)))) NIL ((X_337 PROGN (DT-VARIABLE.DELETE 337.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_337) ST*SYMBOL.ADDRESSES))) (X_336 PROGN (DT-VARIABLE.DELETE 336.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_336) ST*SYMBOL.ADDRESSES)))) NIL ((X_335 PROGN (DT-VARIABLE.DELETE 335.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_335) ST*SYMBOL.ADDRESSES))) (X_334 PROGN (DT-VARIABLE.DELETE 334.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_334) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((X_333 PROGN (DT-VARIABLE.DELETE 333.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_333) ST*SYMBOL.ADDRESSES))) (X_332 PROGN (DT-VARIABLE.DELETE 332.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_332) ST*SYMBOL.ADDRESSES))) (X_331 PROGN (DT-VARIABLE.DELETE 331.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_331) ST*SYMBOL.ADDRESSES))) (X_330 PROGN (DT-VARIABLE.DELETE 330.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_330) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((SUBGROUP PROGN (DT-PREDICATE.DELETE 329.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SUBGROUP) ST*SYMBOL.ADDRESSES))) (GROUP PROGN (DT-PREDICATE.DELETE 328.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE GROUP) ST*SYMBOL.ADDRESSES))) (X_327 PROGN (DT-VARIABLE.DELETE 327.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_327) ST*SYMBOL.ADDRESSES))) (X_326 PROGN (DT-VARIABLE.DELETE 326.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_326) ST*SYMBOL.ADDRESSES)))) NIL NIL ((NORMALISATOR PROGN (DT-FUNCTION.DELETE 325.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NORMALISATOR) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((MOD.PHI PROGN (DT-FUNCTION.DELETE 324.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MOD.PHI) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((IND.EQU.REL PROGN (DT-FUNCTION.DELETE 323.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IND.EQU.REL) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((CAN.PROJ PROGN (DT-FUNCTION.DELETE 322.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CAN.PROJ) ST*SYMBOL.ADDRESSES)))) ((TRANS.UNION PROGN (DT-FUNCTION.DELETE 321.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRANS.UNION) ST*SYMBOL.ADDRESSES)))) ((UNION-REL PROGN (DT-FUNCTION.DELETE 320.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UNION-REL) ST*SYMBOL.ADDRESSES)))) ((TRANS.CLOS PROGN (DT-FUNCTION.DELETE 319.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRANS.CLOS) ST*SYMBOL.ADDRESSES)))) ((COMP PROGN (DT-FUNCTION.DELETE 318.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE COMP) ST*SYMBOL.ADDRESSES)))) ((MODULO PROGN (DT-FUNCTION.DELETE 317.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MODULO) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((PLUS PROGN (DT-FUNCTION.DELETE 316.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PLUS) ST*SYMBOL.ADDRESSES)))) ((POWER PROGN (DT-FUNCTION.DELETE 315.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE POWER) ST*SYMBOL.ADDRESSES)))) ((PREIMAGE PROGN (DT-FUNCTION.DELETE 314.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PREIMAGE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((APPLY2-EL.F PROGN (DT-FUNCTION.DELETE 313.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2-EL.F) ST*SYMBOL.ADDRESSES)))) ((APPLY2-EL PROGN (DT-FUNCTION.DELETE 312.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2-EL) ST*SYMBOL.ADDRESSES)))) ((APPLY2 PROGN (DT-FUNCTION.DELETE 311.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((APPLY1-EL PROGN (DT-FUNCTION.DELETE 310.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY1-EL) ST*SYMBOL.ADDRESSES)))) ((APPLY1 PROGN (DT-FUNCTION.DELETE 309.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY1) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((INVERSE.EL PROGN (DT-FUNCTION.DELETE 308.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE INVERSE.EL) ST*SYMBOL.ADDRESSES)))) NIL ((SUBSET PROGN (DT-PREDICATE.DELETE 307.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SUBSET) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((MEMBER PROGN (DT-PREDICATE.DELETE 306.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MEMBER) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((MAPPING PROGN (DT-PREDICATE.DELETE 305.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MAPPING) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((EPIMORPH PROGN (DT-PREDICATE.DELETE 304.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EPIMORPH) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((ISOMORPH PROGN (DT-PREDICATE.DELETE 303.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ISOMORPH) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((HOMOMORPH PROGN (DT-PREDICATE.DELETE 302.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE HOMOMORPH) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((BIJECTIVE PROGN (DT-PREDICATE.DELETE 301.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BIJECTIVE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((SURJECTIVE PROGN (DT-PREDICATE.DELETE 300.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SURJECTIVE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((INJECTIVE PROGN (DT-PREDICATE.DELETE 285.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE INJECTIVE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((IN.RELATION PROGN (DT-PREDICATE.DELETE 286.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IN.RELATION) ST*SYMBOL.ADDRESSES)))) ((CONGRUENCE PROGN (DT-PREDICATE.DELETE 290.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((R.CONGRUENCE PROGN (DT-PREDICATE.DELETE 291.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R.CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((L.CONGRUENCE PROGN (DT-PREDICATE.DELETE 292.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE L.CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((SEMIGROUP PROGN (DT-PREDICATE.DELETE 293.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SEMIGROUP) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((CONN.F.RHO PROGN (DT-CONSTANT.DELETE 296.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONN.F.RHO) ST*SYMBOL.ADDRESSES)))) ((1. PROGN (DT-CONSTANT.DELETE 297.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC 1. ST*SYMBOL.ADDRESSES)))) ((CONN.F PROGN (DT-CONSTANT.DELETE 299.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONN.F) ST*SYMBOL.ADDRESSES)))) ((F PROGN (DT-CONSTANT.DELETE 298.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE F) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((CONGRUENCE-S DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE CONGRUENCE-S) (QUOTE (L.CONGRUENCE-S))) (CONGRUENCE-S PUTPROP (QUOTE CONGRUENCE-S) NIL)) ((CONGRUENCE-S PROGN (DT-SORT.ST.REMOVE (QUOTE CONGRUENCE-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONGRUENCE-S) ST*SYMBOL.ADDRESSES))) (CONGRUENCE-S REMPROP (QUOTE CONGRUENCE-S) (QUOTE ST*DATA))) ((R.CONGRUENCE-S PROGN (DT-SORT.ST.REMOVE (QUOTE R.CONGRUENCE-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R.CONGRUENCE-S) ST*SYMBOL.ADDRESSES))) (R.CONGRUENCE-S REMPROP (QUOTE R.CONGRUENCE-S) (QUOTE ST*DATA))) ((L.CONGRUENCE-S PROGN (DT-SORT.ST.REMOVE (QUOTE L.CONGRUENCE-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE L.CONGRUENCE-S) ST*SYMBOL.ADDRESSES))) (L.CONGRUENCE-S REMPROP (QUOTE L.CONGRUENCE-S) (QUOTE ST*DATA))) ((EQU.REL-S PROGN (DT-SORT.ST.REMOVE (QUOTE EQU.REL-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EQU.REL-S) ST*SYMBOL.ADDRESSES))) (EQU.REL-S REMPROP (QUOTE EQU.REL-S) (QUOTE ST*DATA))) ((BINARY.FUNC PROGN (DT-SORT.ST.REMOVE (QUOTE BINARY.FUNC)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BINARY.FUNC) ST*SYMBOL.ADDRESSES))) (BINARY.FUNC REMPROP (QUOTE BINARY.FUNC) (QUOTE ST*DATA))) ((UNARY.FUNC PROGN (DT-SORT.ST.REMOVE (QUOTE UNARY.FUNC)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UNARY.FUNC) ST*SYMBOL.ADDRESSES))) (UNARY.FUNC REMPROP (QUOTE UNARY.FUNC) (QUOTE ST*DATA))) ((REL PROGN (DT-SORT.ST.REMOVE (QUOTE REL)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE REL) ST*SYMBOL.ADDRESSES))) (REL REMPROP (QUOTE REL) (QUOTE ST*DATA))) ((NAT PROGN (DT-SORT.ST.REMOVE (QUOTE NAT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NAT) ST*SYMBOL.ADDRESSES))) (NAT REMPROP (QUOTE NAT) (QUOTE ST*DATA))) ((ELEMENT.F PROGN (DT-SORT.ST.REMOVE (QUOTE ELEMENT.F)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ELEMENT.F) ST*SYMBOL.ADDRESSES))) (ELEMENT.F REMPROP (QUOTE ELEMENT.F) (QUOTE ST*DATA))) ((ELEMENT PROGN (DT-SORT.ST.REMOVE (QUOTE ELEMENT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ELEMENT) ST*SYMBOL.ADDRESSES))) (ELEMENT REMPROP (QUOTE ELEMENT) (QUOTE ST*DATA))) ((FUNCTION PROGN (DT-SORT.ST.REMOVE (QUOTE FUNCTION)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FUNCTION) ST*SYMBOL.ADDRESSES))) (FUNCTION REMPROP (QUOTE FUNCTION) (QUOTE ST*DATA))) ((SET PROGN (DT-SORT.ST.REMOVE (QUOTE SET)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SET) ST*SYMBOL.ADDRESSES))) (SET REMPROP (QUOTE SET) (QUOTE ST*DATA))) ((FALSE PROGN (DT-PREDICATE.DELETE 2.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1.) (FALSE . 2.) (SET . T) (FUNCTION . T) (ELEMENT . T) (ELEMENT.F . T) (NAT . T) (REL . T) (UNARY.FUNC . T) (BINARY.FUNC . T) (EQU.REL-S . T) (L.CONGRUENCE-S . T) (R.CONGRUENCE-S . T) (CONGRUENCE-S . T) (F . 298.) (CONN.F . 299.) (1. . 297.) (CONN.F.RHO . 296.) (SEMIGROUP . 293.) (L.CONGRUENCE . 292.) (R.CONGRUENCE . 291.) (CONGRUENCE . 290.) (IN.RELATION . 286.) (INJECTIVE . 285.) (SURJECTIVE . 300.) (BIJECTIVE . 301.) (HOMOMORPH . 302.) (ISOMORPH . 303.) (EPIMORPH . 304.) (MAPPING . 305.) (MEMBER . 306.) (SUBSET . 307.) (INVERSE.EL . 308.) (APPLY1 . 309.) (APPLY1-EL . 310.) (APPLY2 . 311.) (APPLY2-EL . 312.) (APPLY2-EL.F . 313.) (PREIMAGE . 314.) (POWER . 315.) (PLUS . 316.) (MODULO . 317.) (COMP . 318.) (TRANS.CLOS . 319.) (UNION-REL . 320.) (TRANS.UNION . 321.) (CAN.PROJ . 322.) (IND.EQU.REL . 323.) (MOD.PHI . 324.) (NORMALISATOR . 325.) (X_326 . 326.) (X_327 . 327.) (GROUP . 328.) (SUBGROUP . 329.) (X_330 . 330.) (X_331 . 331.) (X_332 . 332.) (X_333 . 333.) (X_334 . 334.) (X_335 . 335.) (X_336 . 336.) (X_337 . 337.) (X_338 . 338.) (X_339 . 339.) (X_340 . 340.))))))))
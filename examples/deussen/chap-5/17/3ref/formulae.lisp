;;; -*- Package: MKRP; Base: 10.; Mode: LISP -*-

(SORT SET:ANY)
(SORT FUNCTION:ANY)
(SORT ELEMENT:SET)
(SORT ELEMENT.F:ELEMENT)
(SORT NAT:SET)
(SORT REL:SET)
(SORT UNARY.FUNC:FUNCTION)
(SORT BINARY.FUNC:FUNCTION)
(SORT EQU.REL-S:REL)
(SORT L.CONGRUENCE-S:EQU.REL-S)
(SORT R.CONGRUENCE-S:EQU.REL-S)
(SORT CONGRUENCE-S:L.CONGRUENCE-S)
(SORT CONGRUENCE-S:R.CONGRUENCE-S)
(* CONSTANTS *)
(TYPE F:SET)
(TYPE CONN.F:BINARY.FUNC)
(TYPE 1:NAT)
(TYPE CONN.F.RHO:BINARY.FUNC)
(* PREDICATES *)
(TYPE SEMIGROUP (SET BINARY.FUNC))
(TYPE L.CONGRUENCE (REL))
(TYPE R.CONGRUENCE (REL))
(TYPE CONGRUENCE (EQU.REL-S))
(TYPE IN.RELATION (REL ELEMENT.F ELEMENT.F))
(TYPE INJECTIVE (UNARY.FUNC SET SET))
(TYPE SURJECTIVE (UNARY.FUNC SET SET))
(TYPE BIJECTIVE (UNARY.FUNC SET SET))
(TYPE HOMOMORPH (UNARY.FUNC SET SET))
(TYPE ISOMORPH (UNARY.FUNC SET SET))
(TYPE EPIMORPH (UNARY.FUNC SET SET))
(TYPE MAPPING (UNARY.FUNC SET SET))
(TYPE MEMBER (ELEMENT SET))
(TYPE SUBSET (SET SET))
(* FUNCTIONS *)
(TYPE INVERSE.EL (ELEMENT BINARY.FUNC ELEMENT) :ELEMENT)
(TYPE APPLY1 (UNARY.FUNC SET) :SET)
(TYPE APPLY1-EL (UNARY.FUNC ELEMENT) :ELEMENT)
(TYPE APPLY2 (BINARY.FUNC SET SET) :SET)
(TYPE APPLY2-EL (BINARY.FUNC ELEMENT ELEMENT) :ELEMENT)
(TYPE APPLY2-EL.F (BINARY.FUNC ELEMENT.F ELEMENT.F) :ELEMENT.F)
(TYPE PREIMAGE (REL ELEMENT) :SET)
(TYPE POWER (REL NAT) :REL)
(TYPE PLUS (NAT NAT) :NAT)
(TYPE MODULO (EQU.REL-S) :SET)
(TYPE COMP (REL REL) :REL)
(TYPE TRANS.CLOS (REL) :REL)
(TYPE UNION-REL (REL REL) :REL)
(TYPE TRANS.UNION (EQU.REL-S EQU.REL-S) :EQU.REL-S)
(TYPE CAN.PROJ (EQU.REL-S) :UNARY.FUNC)
(TYPE IND.EQU.REL (UNARY.FUNC SET) :EQU.REL-S)
(TYPE MOD.PHI (UNARY.FUNC SET) :UNARY.FUNC)
(*)
(TYPE NORMALISATOR (SET) :SET)
(* DEFINITION NORMALISATOR *)
(ALL U:SET ALL RHO:L.CONGRUENCE-S ALL E:ELEMENT.F SUBGROUP (U F CONN.F E) IMPL (ALL X:ELEMENT.F MEMBER (X NORMALISATOR (RHO)) IMPL SUBSET (APPLY2 (CONN.F INVERSE.EL (X CONN.F E) APPLY2 (CONN.F U X)) U)))
(* RECHENREGEL FUER GRUPPEN *)
(ALL M,N,E:ELEMENT.F ALL RHO : L.CONGRUENCE-S GROUP (F CONN.F E) IMPL (APPLY2 (CONN.F APPLY2-EL (CONN.F INVERSE.EL (M CONN.F E) INVERSE.EL (N CONN.F E)) APPLY2 (CONN.F NORMALISATOR (PREIMAGE (RHO E)) APPLY2-EL (CONN.F N M))) = NORMALISATOR (PREIMAGE (RHO E)) IMPL APPLY2 (CONN.F APPLY2 (CONN.F INVERSE.EL (N CONN.F E) NORMALISATOR (PREIMAGE (RHO E))) N) = APPLY2 (CONN.F APPLY2 (CONN.F M NORMALISATOR (PREIMAGE (RHO E))) INVERSE.EL (M CONN.F E))))
(* THEOREM 5.15 *)
(ALL RHO:L.CONGRUENCE-S ALL E:ELEMENT.F GROUP (F CONN.F E) IMPL (ALL X:ELEMENT.F MEMBER (X NORMALISATOR (RHO)) EQV SUBSET (APPLY2 (CONN.F INVERSE.EL (X CONN.F E) APPLY2 (CONN.F PREIMAGE (RHO E) X)) PREIMAGE (RHO E))))
(* EIGENSCHAFT INVERSER ELEMENTE *)
(ALL E,M,N:ELEMENT.F GROUP (F CONN.F E) IMPL INVERSE.EL (APPLY2-EL (CONN.F N M) CONN.F E) = APPLY2-EL (CONN.F INVERSE.EL (N CONN.F E) INVERSE.EL (M CONN.F E)))
(* RECHENREGELN FUER GRUPPEN *)
(ALL M,N,E:ELEMENT.F ALL U:SET SUBSET (APPLY2 (CONN.F APPLY2 (CONN.F INVERSE.EL (M CONN.F E) U) M) U) IMPL SUBSET (U APPLY2 (CONN.F APPLY2 (CONN.F INVERSE.EL (N CONN.F E) U) N)))
(TYPE DIFFERENCE (SET SET) : SET)
(* EIGENSCHAFT DER MENGENDIFFERENCE *)
(ALL A,B:SET ALL N:ELEMENT.F MEMBER (N DIFFERENCE (A B)) IMPL MEMBER (N A))
(ALL A,B:SET ALL N:ELEMENT.F MEMBER (N A) AND MEMBER (N B) IMPL NOT MEMBER (N DIFFERENCE (A B)))
(* GLEICHHEIT ZWEIER MENGEN *)
(ALL A,B:SET SUBSET (A B) AND SUBSET (B A) IMPL A = B)


(* theorems *)

(* THEOREM 5.17 TEIL 3REF *)
(ALL E:ELEMENT.F ALL RHO:L.CONGRUENCE-S GROUP (F CONN.F E) AND NOT.EMPTY (DIFFERENCE (NORMALISATOR (RHO) NORMALISATOR (PREIMAGE (RHO E)))) IMPL (ALL N,M:ELEMENT.F MEMBER (N DIFFERENCE (NORMALISATOR (RHO) NORMALISATOR (PREIMAGE (RHO E)))) AND MEMBER (M NORMALISATOR (RHO)) IMPL (MEMBER (APPLY2-EL (CONN.F N M) NORMALISATOR (PREIMAGE (RHO E))) IMPL NOT MEMBER (N DIFFERENCE (NORMALISATOR (RHO) NORMALISATOR (PREIMAGE (RHO E)))))))

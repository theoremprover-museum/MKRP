;;; -*- Package: IL; Base: 10. -*-
(COND ((FMT-LOAD "24-MAR-86 09:52:09"
NIL(((SORT SET:ANY) (+ 1. NIL) TYPE) ((SORT FUNCTION:ANY) (+ 1. NIL) TYPE) ((SORT ELEMENT:SET) (+ 1. NIL) TYPE) ((SORT ELEMENT.F:ELEMENT) (+ 1. NIL) TYPE) ((SORT NAT:SET) (+ 1. NIL) TYPE) ((SORT REL:SET) (+ 1. NIL) TYPE) ((SORT UNARY.FUNC:FUNCTION) (+ 1. NIL) TYPE) ((SORT BINARY.FUNC:FUNCTION) (+ 1. NIL) TYPE) ((SORT EQU.REL-S:REL) (+ 1. NIL) TYPE) ((SORT L.CONGRUENCE-S:EQU.REL-S) (+ 1. NIL) TYPE) ((SORT R.CONGRUENCE-S:EQU.REL-S) (+ 1. NIL) TYPE) ((SORT CONGRUENCE-S:L.CONGRUENCE-S) (+ 1. NIL) TYPE) ((SORT CONGRUENCE-S:R.CONGRUENCE-S) (+ 1. NIL) TYPE) ((* CONSTANTS *) COMMENT COMMENT) ((TYPE F:SET) (+ 1. NIL) TYPE) ((TYPE CONN.F:BINARY.FUNC) (+ 1. NIL) TYPE) ((TYPE 1:NAT) (+ 1. NIL) TYPE) ((TYPE CONN.F.RHO:BINARY.FUNC) (+ 1. NIL) TYPE) ((* PREDICATES *) COMMENT COMMENT) ((TYPE SEMIGROUP (SET BINARY.FUNC)) (+ 1. NIL) TYPE) ((TYPE L.CONGRUENCE (REL)) (+ 1. NIL) TYPE) ((TYPE R.CONGRUENCE (REL)) (+ 1. NIL) TYPE) ((TYPE CONGRUENCE (EQU.REL-S)) (+ 1. NIL) TYPE) ((TYPE IN.RELATION (REL ELEMENT.F ELEMENT.F)) (+ 1. NIL) TYPE) ((TYPE INJECTIVE (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE SURJECTIVE (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE BIJECTIVE (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE HOMOMORPH (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE ISOMORPH (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE EPIMORPH (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE MAPPING (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE MEMBER (ELEMENT SET)) (+ 1. NIL) TYPE) ((TYPE SUBSET (SET SET)) (+ 1. NIL) TYPE) ((* FUNCTIONS *) COMMENT COMMENT) ((TYPE INVERSE.EL (ELEMENT BINARY.FUNC ELEMENT) :ELEMENT) (+ 1. NIL) TYPE) ((TYPE APPLY1 (UNARY.FUNC SET) :SET) (+ 1. NIL) TYPE) ((TYPE APPLY1-EL (UNARY.FUNC ELEMENT) :ELEMENT) (+ 1. NIL) TYPE) ((TYPE APPLY2 (BINARY.FUNC SET SET) :SET) (+ 1. NIL) TYPE) ((TYPE APPLY2-EL (BINARY.FUNC ELEMENT ELEMENT) :ELEMENT) (+ 1. NIL) TYPE) ((TYPE APPLY2-EL.F (BINARY.FUNC ELEMENT.F ELEMENT.F) :ELEMENT.F) (+ 1. NIL) TYPE) ((TYPE PREIMAGE (REL ELEMENT) :SET) (+ 1. NIL) TYPE) ((TYPE POWER (REL NAT) :REL) (+ 1. NIL) TYPE) ((TYPE PLUS (NAT NAT) :NAT) (+ 1. NIL) TYPE) ((TYPE MODULO (EQU.REL-S) :SET) (+ 1. NIL) TYPE) ((TYPE COMP (REL REL) :REL) (+ 1. NIL) TYPE) ((TYPE TRANS.CLOS (REL) :REL) (+ 1. NIL) TYPE) ((TYPE UNION-REL (REL REL) :REL) (+ 1. NIL) TYPE) ((TYPE TRANS.UNION (EQU.REL-S EQU.REL-S) :EQU.REL-S) (+ 1. NIL) TYPE) ((TYPE CAN.PROJ (EQU.REL-S) :UNARY.FUNC) (+ 1. NIL) TYPE) ((TYPE IND.EQU.REL (UNARY.FUNC SET) :EQU.REL-S) (+ 1. NIL) TYPE) ((TYPE MOD.PHI (UNARY.FUNC SET) :UNARY.FUNC) (+ 1. NIL) TYPE) ((*) COMMENT COMMENT) ((TYPE NORMALISATOR (SET) :SET) (+ 1. NIL) TYPE) ((* DEFINITION NORMALISATOR *) COMMENT COMMENT) ((ALL U:SET ALL RHO:L.CONGRUENCE-S ALL E:ELEMENT.F SUBGROUP (U F CONN.F E) IMPL (ALL X:ELEMENT.F MEMBER (X NORMALISATOR (RHO)) IMPL SUBSET (APPLY2 (CONN.F INVERSE.EL (X CONN.F E) APPLY2 (CONN.F U X)) U))) (ALL 291. (ALL 287. (ALL 289. (IMPL (+ 293. (291. 219. 220. 289.) NIL) (ALL 294. (IMPL (+ 266. (294. (285. 287.)) NIL) (+ 267. ((271. 220. (268. 294. 220. 289.) (271. 220. 291. 294.)) 291.) NIL))))))) QUANTIFICATION) ((* *) COMMENT COMMENT) ((ALL X,E:ELEMENT.F INVERSE.EL (INVERSE.EL (X CONN.F E) CONN.F E) = X) (ALL 296. (ALL 295. (+ 297. ((268. (268. 295. 220. 296.) 220. 296.) 295.) NIL))) QUANTIFICATION) ((* RECHENREGEL FUER GRUPPEN *) COMMENT COMMENT) ((ALL E:ELEMENT.F GROUP (F CONN.F E) IMPL (ALL X:ELEMENT.F ALL U:SET SUBSET (APPLY2 (CONN.F X APPLY2 (CONN.F U INVERSE.EL (X CONN.F E))) U) IMPL SUBSET (APPLY2 (CONN.F U INVERSE.EL (X CONN.F E)) APPLY2 (CONN.F INVERSE.EL (X CONN.F E) U)))) (ALL 301. (IMPL (+ 300. (219. 220. 301.) NIL) (ALL 298. (ALL 302. (IMPL (+ 267. ((271. 220. 298. (271. 220. 302. (268. 298. 220. 301.))) 302.) NIL) (+ 267. ((271. 220. 302. (268. 298. 220. 301.)) (271. 220. (268. 298. 220. 301.) 302.)) NIL)))))) QUANTIFICATION) ((* MENGENGLEICHHEIT *) COMMENT COMMENT) ((ALL A,B:SET SUBSET (A B) AND SUBSET (B A) IMPL A = B) (ALL 304. (ALL 303. (IMPL (AND (+ 267. (303. 304.) NIL) (+ 267. (304. 303.) NIL)) (+ 297. (303. 304.) NIL)))) QUANTIFICATION) ((* DEFINITION NORMALISATOR FUER GRUPPEN *) COMMENT COMMENT) ((ALL U:SET ALL RHO:L.CONGRUENCE-S ALL E:ELEMENT.F SUBGROUP (U F CONN.F E) IMPL (ALL X:ELEMENT.F APPLY2 (CONN.F INVERSE.EL (X CONN.F E) APPLY2 (CONN.F U X)) = U IMPL MEMBER (X NORMALISATOR (U)))) (ALL 305. (ALL 306. (ALL 307. (IMPL (+ 293. (305. 219. 220. 307.) NIL) (ALL 308. (IMPL (+ 297. ((271. 220. (268. 308. 220. 307.) (271. 220. 305. 308.)) 305.) NIL) (+ 266. (308. (285. 305.)) NIL))))))) QUANTIFICATION) ((* *) COMMENT COMMENT) ((ALL E:ELEMENT.F ALL RHO:L.CONGRUENCE-S GROUP (F CONN.F E) IMPL SUBGROUP (PREIMAGE (RHO E) F CONN.F E)) (ALL 309. (ALL 310. (IMPL (+ 300. (219. 220. 309.) NIL) (+ 293. ((274. 310. 309.) 219. 220. 309.) NIL)))) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (99363. 99368. 99373. 99378. 99383. 99388. 99393. 99398. 99403. 99428. 99423. ATP.MEMORY.NIL 99408. 99443. 99448. 99453. 99458. 99473. ATP.MEMORY.NIL 99488. ATP.MEMORY.NIL 99478. ATP.MEMORY.NIL 99483. ATP.MEMORY.NIL 99502. 99516. 99530. 99544. 99558. 99572. 99586. 99600. 99614. 99628. 99642. 99656. 99670. 99684. 99698. 99712. 99726. 99740. 99755. 99770. 99785. 99800. 99815. 99830. 99845. 99860. 99875. 99890. 99905. 99920. 99935. 99950. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 99955. 99960. 99965. 99970. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 99985. 100000.))) (DATALIST (QUOTE (15. "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1. (POSITIVE))) ((+ 1. (NEGATIVE))) ((+ 1. (NIL))) ((- 1. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2. (POSITIVE))) ((+ 2. (NEGATIVE))) ((+ 2. (NIL))) ((- 2. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. SET "F" (DT*ST-KIND NIL) CONSTANT 5. BINARY.FUNC "CONN.F" (DT*ST-KIND NIL) CONSTANT 5. NAT "1" (DT*ST-KIND NIL) CONSTANT 5. BINARY.FUNC "CONN.F.RHO" (DT*ST-KIND NIL) CONSTANT 15. "SEMIGROUP" NIL NIL (SET BINARY.FUNC) NIL NIL ((- 254. (POSITIVE))) ((+ 254. (NEGATIVE))) ((+ 254. (NIL))) ((- 254. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "L.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 255. (POSITIVE))) ((+ 255. (NEGATIVE))) ((+ 255. (NIL))) ((- 255. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "R.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 256. (POSITIVE))) ((+ 256. (NEGATIVE))) ((+ 256. (NIL))) ((- 256. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "CONGRUENCE" NIL NIL (EQU.REL-S) NIL NIL ((- 257. (POSITIVE))) ((+ 257. (NEGATIVE))) ((+ 257. (NIL))) ((- 257. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "IN.RELATION" NIL NIL (REL ELEMENT.F ELEMENT.F) NIL NIL ((- 258. (POSITIVE))) ((+ 258. (NEGATIVE))) ((+ 258. (NIL))) ((- 258. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "INJECTIVE" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 259. (POSITIVE))) ((+ 259. (NEGATIVE))) ((+ 259. (NIL))) ((- 259. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "SURJECTIVE" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 260. (POSITIVE))) ((+ 260. (NEGATIVE))) ((+ 260. (NIL))) ((- 260. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "BIJECTIVE" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 261. (POSITIVE))) ((+ 261. (NEGATIVE))) ((+ 261. (NIL))) ((- 261. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "HOMOMORPH" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 262. (POSITIVE))) ((+ 262. (NEGATIVE))) ((+ 262. (NIL))) ((- 262. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "ISOMORPH" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 263. (POSITIVE))) ((+ 263. (NEGATIVE))) ((+ 263. (NIL))) ((- 263. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "EPIMORPH" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 264. (POSITIVE))) ((+ 264. (NEGATIVE))) ((+ 264. (NIL))) ((- 264. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MAPPING" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 265. (POSITIVE))) ((+ 265. (NEGATIVE))) ((+ 265. (NIL))) ((- 265. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MEMBER" NIL NIL (ELEMENT SET) NIL NIL ((- 266. (POSITIVE))) ((+ 266. (NEGATIVE))) ((+ 266. (NIL))) ((- 266. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "SUBSET" NIL NIL (SET SET) NIL NIL ((- 267. (POSITIVE))) ((+ 267. (NEGATIVE))) ((+ 267. (NIL))) ((- 267. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "INVERSE.EL" NIL ELEMENT (ELEMENT BINARY.FUNC ELEMENT) NIL NIL NIL NIL NIL 3. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY1" NIL SET (UNARY.FUNC SET) NIL NIL NIL NIL NIL 2. SET (DT*ST-KIND NIL) FUNCTION 14. "APPLY1-EL" NIL ELEMENT (UNARY.FUNC ELEMENT) NIL NIL NIL NIL NIL 2. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY2" NIL SET (BINARY.FUNC SET SET) NIL NIL NIL NIL NIL 3. SET (DT*ST-KIND NIL) FUNCTION 14. "APPLY2-EL" NIL ELEMENT (BINARY.FUNC ELEMENT ELEMENT) NIL NIL NIL NIL NIL 3. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY2-EL.F" NIL ELEMENT.F (BINARY.FUNC ELEMENT.F ELEMENT.F) NIL NIL NIL NIL NIL 3. ELEMENT.F (DT*ST-KIND NIL) FUNCTION 14. "PREIMAGE" NIL SET (REL ELEMENT) NIL NIL NIL NIL NIL 2. SET (DT*ST-KIND NIL) FUNCTION 14. "POWER" NIL REL (REL NAT) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "PLUS" NIL NAT (NAT NAT) NIL NIL NIL NIL NIL 2. NAT (DT*ST-KIND NIL) FUNCTION 14. "MODULO" NIL SET (EQU.REL-S) NIL NIL NIL NIL NIL 1. SET (DT*ST-KIND NIL) FUNCTION 14. "COMP" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.CLOS" NIL REL (REL) NIL NIL NIL NIL NIL 1. REL (DT*ST-KIND NIL) FUNCTION 14. "UNION-REL" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.UNION" NIL EQU.REL-S (EQU.REL-S EQU.REL-S) NIL NIL NIL NIL NIL 2. EQU.REL-S (DT*ST-KIND NIL) FUNCTION 14. "CAN.PROJ" NIL UNARY.FUNC (EQU.REL-S) NIL NIL NIL NIL NIL 1. UNARY.FUNC (DT*ST-KIND NIL) FUNCTION 14. "IND.EQU.REL" NIL EQU.REL-S (UNARY.FUNC SET) NIL NIL NIL NIL NIL 2. EQU.REL-S (DT*ST-KIND NIL) FUNCTION 14. "MOD.PHI" NIL UNARY.FUNC (UNARY.FUNC SET) NIL NIL NIL NIL NIL 2. UNARY.FUNC (DT*ST-KIND NIL) FUNCTION 14. "NORMALISATOR" NIL SET (SET) NIL NIL NIL NIL NIL 1. SET (DT*ST-KIND NIL) FUNCTION 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. L.CONGRUENCE-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "SUBGROUP" NIL NIL (ANY ANY ANY ANY) NIL NIL ((- 293. (POSITIVE))) ((+ 293. (NEGATIVE))) ((+ 293. (NIL))) ((- 293. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 297. (POSITIVE . SYMMETRIC))) ((+ 297. (NEGATIVE . SYMMETRIC))) ((+ 297. (NIL . SYMMETRIC))) ((- 297. (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "GROUP" NIL NIL (ANY ANY ANY) NIL NIL ((- 300. (POSITIVE))) ((+ 300. (NEGATIVE))) ((+ 300. (NIL))) ((- 300. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. L.CONGRUENCE-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. L.CONGRUENCE-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 100000.)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 100000.) (SETQ COUNTER1 311.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0.) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 100000.) (MEM-INITIALIZE 100000.))) (SETQ COUNTER1 311.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 100000.) (RPAQ MEM*NEXT.RADR (IPLUS 99358. INCREMENT))) (T (RPAQ MEM*NEXT.RADR 99358.))) (RPAQ MEM*NEXT.VADR 311.) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S EQU.REL-S BINARY.FUNC UNARY.FUNC REL NAT ELEMENT.F ELEMENT FUNCTION SET ANY)) (RPAQQ DT*SORT.NR 103.) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0.) (RPAQQ DT*CONSTANT.COUNTER 0.) (RPAQQ DT*CONSTANT.ALL (222. 221. 220. 219.)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0.) (RPAQQ DT*FUNCTION.ALL (285. 284. 283. 282. 281. 280. 279. 278. 277. 276. 275. 274. 273. 272. 271. 270. 269. 268.)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0.) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES (297.)) (RPAQQ DT*NONEQUALITY.PREDICATES (300. 293. 267. 266. 265. 264. 263. 262. 261. 260. 259. 258. 257. 256. 255. 254. 2. 1.)) (RPAQQ DT*PREDICATE.ALL (300. 297. 293. 267. 266. 265. 264. 263. 262. 261. 260. 259. 258. 257. 256. 255. 254. 2. 1.)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1.) (RPAQQ DT*FALSE.PREDICATE 2.) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (PROGN (REMPROPS (QUOTE DT*PREDICATE.WITH.ATTRIBUTES)) (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (NCONC (QUOTE (DEFINED (297.) SYMMETRIC (297.) REFLEXIVE (297.))) (GETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES))))))
(PROGN (PROGN (REMPROPS (QUOTE CONGRUENCE-S)) (SETPROPLIST (QUOTE CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 102. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (CONGRUENCE-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S CONGRUENCE-S) (L.CONGRUENCE-S CONGRUENCE-S) (EQU.REL-S CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET CONGRUENCE-S) (ANY CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (CONGRUENCE-S) DT*DIRECT.SUPERSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*INVERSE.TRANSITIVE.CLOSURE (CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE R.CONGRUENCE-S)) (SETPROPLIST (QUOTE R.CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 101. DT*DIRECT.SUBSORTS (CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (CONGRUENCE-S R.CONGRUENCE-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S CONGRUENCE-S) (EQU.REL-S R.CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL R.CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET R.CONGRUENCE-S) (ANY R.CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (R.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (EQU.REL-S) DT*INVERSE.TRANSITIVE.CLOSURE (R.CONGRUENCE-S EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE R.CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE L.CONGRUENCE-S)) (SETPROPLIST (QUOTE L.CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 100. DT*DIRECT.SUBSORTS (CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (CONGRUENCE-S L.CONGRUENCE-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S L.CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL L.CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET L.CONGRUENCE-S) (ANY L.CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (L.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (EQU.REL-S) DT*INVERSE.TRANSITIVE.CLOSURE (L.CONGRUENCE-S EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE L.CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE EQU.REL-S)) (SETPROPLIST (QUOTE EQU.REL-S) (NCONC (QUOTE (DT*SORT.NUMBER 99. DT*DIRECT.SUBSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (R.CONGRUENCE-S L.CONGRUENCE-S CONGRUENCE-S EQU.REL-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL EQU.REL-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET EQU.REL-S) (ANY EQU.REL-S)) DT*MINIMAL.SUBSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (REL) DT*INVERSE.TRANSITIVE.CLOSURE (EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE EQU.REL-S))))) (PROGN (REMPROPS (QUOTE BINARY.FUNC)) (SETPROPLIST (QUOTE BINARY.FUNC) (NCONC (QUOTE (DT*SORT.NUMBER 98. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (BINARY.FUNC) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION BINARY.FUNC) (SET) (ANY BINARY.FUNC)) DT*MINIMAL.SUBSORTS (BINARY.FUNC) DT*DIRECT.SUPERSORTS (FUNCTION) DT*INVERSE.TRANSITIVE.CLOSURE (BINARY.FUNC FUNCTION ANY))) (GETPROPLIST (QUOTE BINARY.FUNC))))) (PROGN (REMPROPS (QUOTE UNARY.FUNC)) (SETPROPLIST (QUOTE UNARY.FUNC) (NCONC (QUOTE (DT*SORT.NUMBER 97. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (UNARY.FUNC) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION UNARY.FUNC) (SET) (ANY UNARY.FUNC)) DT*MINIMAL.SUBSORTS (UNARY.FUNC) DT*DIRECT.SUPERSORTS (FUNCTION) DT*INVERSE.TRANSITIVE.CLOSURE (UNARY.FUNC FUNCTION ANY))) (GETPROPLIST (QUOTE UNARY.FUNC))))) (PROGN (REMPROPS (QUOTE REL)) (SETPROPLIST (QUOTE REL) (NCONC (QUOTE (DT*SORT.NUMBER 96. DT*DIRECT.SUBSORTS (EQU.REL-S) DT*TRANSITIVE.CLOSURE (EQU.REL-S CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S REL) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET REL) (ANY REL)) DT*MINIMAL.SUBSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (REL SET ANY))) (GETPROPLIST (QUOTE REL))))) (PROGN (REMPROPS (QUOTE NAT)) (SETPROPLIST (QUOTE NAT) (NCONC (QUOTE (DT*SORT.NUMBER 95. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (NAT) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET NAT) (ANY NAT)) DT*MINIMAL.SUBSORTS (NAT) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (NAT SET ANY))) (GETPROPLIST (QUOTE NAT))))) (PROGN (REMPROPS (QUOTE ELEMENT.F)) (SETPROPLIST (QUOTE ELEMENT.F) (NCONC (QUOTE (DT*SORT.NUMBER 94. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (ELEMENT.F) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT.F) (FUNCTION) (SET ELEMENT.F) (ANY ELEMENT.F)) DT*MINIMAL.SUBSORTS (ELEMENT.F) DT*DIRECT.SUPERSORTS (ELEMENT) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT.F ELEMENT SET ANY))) (GETPROPLIST (QUOTE ELEMENT.F))))) (PROGN (REMPROPS (QUOTE ELEMENT)) (SETPROPLIST (QUOTE ELEMENT) (NCONC (QUOTE (DT*SORT.NUMBER 93. DT*DIRECT.SUBSORTS (ELEMENT.F) DT*TRANSITIVE.CLOSURE (ELEMENT.F ELEMENT) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION) (SET ELEMENT) (ANY ELEMENT)) DT*MINIMAL.SUBSORTS (ELEMENT.F) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT SET ANY))) (GETPROPLIST (QUOTE ELEMENT))))) (PROGN (REMPROPS (QUOTE FUNCTION)) (SETPROPLIST (QUOTE FUNCTION) (NCONC (QUOTE (DT*SORT.NUMBER 92. DT*DIRECT.SUBSORTS (BINARY.FUNC UNARY.FUNC) DT*TRANSITIVE.CLOSURE (BINARY.FUNC UNARY.FUNC FUNCTION) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION FUNCTION) (SET) (ANY FUNCTION)) DT*MINIMAL.SUBSORTS (BINARY.FUNC UNARY.FUNC) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (FUNCTION ANY))) (GETPROPLIST (QUOTE FUNCTION))))) (PROGN (REMPROPS (QUOTE SET)) (SETPROPLIST (QUOTE SET) (NCONC (QUOTE (DT*SORT.NUMBER 91. DT*DIRECT.SUBSORTS (REL NAT ELEMENT) DT*TRANSITIVE.CLOSURE (REL NAT ELEMENT R.CONGRUENCE-S L.CONGRUENCE-S CONGRUENCE-S ELEMENT.F EQU.REL-S SET) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL REL) (NAT NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION) (SET SET) (ANY SET)) DT*MINIMAL.SUBSORTS (R.CONGRUENCE-S NAT ELEMENT.F L.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SET ANY))) (GETPROPLIST (QUOTE SET))))) (PROGN (REMPROPS (QUOTE ANY)) (SETPROPLIST (QUOTE ANY) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (FUNCTION SET) DT*SORT.NUMBER 1. DT*TRANSITIVE.CLOSURE (FUNCTION SET ELEMENT.F EQU.REL-S CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S REL NAT ELEMENT BINARY.FUNC UNARY.FUNC ANY) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL REL) (NAT NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION FUNCTION) (SET SET) (ANY ANY)) DT*MINIMAL.SUBSORTS (BINARY.FUNC ELEMENT.F R.CONGRUENCE-S L.CONGRUENCE-S NAT UNARY.FUNC) DT*DIRECT.SUPERSORTS NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*LEAST.SUPERSORTS ((ANY ANY)))) (GETPROPLIST (QUOTE ANY))))))
(PROGN (RPAQQ ST*STACK1 (NIL ((X_310 PROGN (DT-VARIABLE.DELETE 310.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_310) ST*SYMBOL.ADDRESSES))) (X_309 PROGN (DT-VARIABLE.DELETE 309.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_309) ST*SYMBOL.ADDRESSES)))) NIL ((X_308 PROGN (DT-VARIABLE.DELETE 308.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_308) ST*SYMBOL.ADDRESSES))) (X_307 PROGN (DT-VARIABLE.DELETE 307.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_307) ST*SYMBOL.ADDRESSES))) (X_306 PROGN (DT-VARIABLE.DELETE 306.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_306) ST*SYMBOL.ADDRESSES))) (X_305 PROGN (DT-VARIABLE.DELETE 305.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_305) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((= PROG1 NIL (DT-PREDICATE.PUTSORT 297. (QUOTE (ANY ANY))) (DT-PREDICATE.PUT.ATTRIBUTES 297. (QUOTE (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))) (= PROG1 NIL (DT-PUTPROP 297. NIL) (DT-PUTPROP 297. NIL)) (X_304 PROGN (DT-VARIABLE.DELETE 304.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_304) ST*SYMBOL.ADDRESSES))) (X_303 PROGN (DT-VARIABLE.DELETE 303.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_303) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((X_302 PROGN (DT-VARIABLE.DELETE 302.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_302) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (X_298 PROGN (DT-VARIABLE.DELETE 298.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_298) ST*SYMBOL.ADDRESSES))) (GROUP PROGN (DT-PREDICATE.DELETE 300.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE GROUP) ST*SYMBOL.ADDRESSES))) (X_301 PROGN (DT-VARIABLE.DELETE 301.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_301) ST*SYMBOL.ADDRESSES)))) NIL ((= PROGN (DT-PREDICATE.DELETE 297.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE =) ST*SYMBOL.ADDRESSES))) (X_296 PROGN (DT-VARIABLE.DELETE 296.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_296) ST*SYMBOL.ADDRESSES))) (X_295 PROGN (DT-VARIABLE.DELETE 295.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_295) ST*SYMBOL.ADDRESSES)))) NIL ((X_294 PROGN (DT-VARIABLE.DELETE 294.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_294) ST*SYMBOL.ADDRESSES))) (SUBGROUP PROGN (DT-PREDICATE.DELETE 293.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SUBGROUP) ST*SYMBOL.ADDRESSES))) (X_289 PROGN (DT-VARIABLE.DELETE 289.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_289) ST*SYMBOL.ADDRESSES))) (X_287 PROGN (DT-VARIABLE.DELETE 287.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_287) ST*SYMBOL.ADDRESSES))) (X_291 PROGN (DT-VARIABLE.DELETE 291.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_291) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((NORMALISATOR PROGN (DT-FUNCTION.DELETE 285.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NORMALISATOR) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((MOD.PHI PROGN (DT-FUNCTION.DELETE 284.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MOD.PHI) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((IND.EQU.REL PROGN (DT-FUNCTION.DELETE 283.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IND.EQU.REL) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((CAN.PROJ PROGN (DT-FUNCTION.DELETE 282.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CAN.PROJ) ST*SYMBOL.ADDRESSES)))) ((TRANS.UNION PROGN (DT-FUNCTION.DELETE 281.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRANS.UNION) ST*SYMBOL.ADDRESSES)))) ((UNION-REL PROGN (DT-FUNCTION.DELETE 280.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UNION-REL) ST*SYMBOL.ADDRESSES)))) ((TRANS.CLOS PROGN (DT-FUNCTION.DELETE 279.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRANS.CLOS) ST*SYMBOL.ADDRESSES)))) ((COMP PROGN (DT-FUNCTION.DELETE 278.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE COMP) ST*SYMBOL.ADDRESSES)))) ((MODULO PROGN (DT-FUNCTION.DELETE 277.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MODULO) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((PLUS PROGN (DT-FUNCTION.DELETE 276.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PLUS) ST*SYMBOL.ADDRESSES)))) ((POWER PROGN (DT-FUNCTION.DELETE 275.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE POWER) ST*SYMBOL.ADDRESSES)))) ((PREIMAGE PROGN (DT-FUNCTION.DELETE 274.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PREIMAGE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((APPLY2-EL.F PROGN (DT-FUNCTION.DELETE 273.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2-EL.F) ST*SYMBOL.ADDRESSES)))) ((APPLY2-EL PROGN (DT-FUNCTION.DELETE 272.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2-EL) ST*SYMBOL.ADDRESSES)))) ((APPLY2 PROGN (DT-FUNCTION.DELETE 271.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((APPLY1-EL PROGN (DT-FUNCTION.DELETE 270.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY1-EL) ST*SYMBOL.ADDRESSES)))) ((APPLY1 PROGN (DT-FUNCTION.DELETE 269.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY1) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((INVERSE.EL PROGN (DT-FUNCTION.DELETE 268.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE INVERSE.EL) ST*SYMBOL.ADDRESSES)))) NIL ((SUBSET PROGN (DT-PREDICATE.DELETE 267.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SUBSET) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((MEMBER PROGN (DT-PREDICATE.DELETE 266.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MEMBER) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((MAPPING PROGN (DT-PREDICATE.DELETE 265.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MAPPING) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((EPIMORPH PROGN (DT-PREDICATE.DELETE 264.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EPIMORPH) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((ISOMORPH PROGN (DT-PREDICATE.DELETE 263.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ISOMORPH) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((HOMOMORPH PROGN (DT-PREDICATE.DELETE 262.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE HOMOMORPH) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((BIJECTIVE PROGN (DT-PREDICATE.DELETE 261.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BIJECTIVE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((SURJECTIVE PROGN (DT-PREDICATE.DELETE 260.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SURJECTIVE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((INJECTIVE PROGN (DT-PREDICATE.DELETE 259.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE INJECTIVE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((IN.RELATION PROGN (DT-PREDICATE.DELETE 258.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IN.RELATION) ST*SYMBOL.ADDRESSES)))) ((CONGRUENCE PROGN (DT-PREDICATE.DELETE 257.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((R.CONGRUENCE PROGN (DT-PREDICATE.DELETE 256.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R.CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((L.CONGRUENCE PROGN (DT-PREDICATE.DELETE 255.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE L.CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((SEMIGROUP PROGN (DT-PREDICATE.DELETE 254.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SEMIGROUP) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((CONN.F.RHO PROGN (DT-CONSTANT.DELETE 222.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONN.F.RHO) ST*SYMBOL.ADDRESSES)))) ((1. PROGN (DT-CONSTANT.DELETE 221.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC 1. ST*SYMBOL.ADDRESSES)))) ((CONN.F PROGN (DT-CONSTANT.DELETE 220.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONN.F) ST*SYMBOL.ADDRESSES)))) ((F PROGN (DT-CONSTANT.DELETE 219.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE F) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((CONGRUENCE-S DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE CONGRUENCE-S) (QUOTE (L.CONGRUENCE-S))) (CONGRUENCE-S PUTPROP (QUOTE CONGRUENCE-S) NIL)) ((CONGRUENCE-S PROGN (DT-SORT.ST.REMOVE (QUOTE CONGRUENCE-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONGRUENCE-S) ST*SYMBOL.ADDRESSES))) (CONGRUENCE-S REMPROP (QUOTE CONGRUENCE-S) (QUOTE ST*DATA))) ((R.CONGRUENCE-S PROGN (DT-SORT.ST.REMOVE (QUOTE R.CONGRUENCE-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R.CONGRUENCE-S) ST*SYMBOL.ADDRESSES))) (R.CONGRUENCE-S REMPROP (QUOTE R.CONGRUENCE-S) (QUOTE ST*DATA))) ((L.CONGRUENCE-S PROGN (DT-SORT.ST.REMOVE (QUOTE L.CONGRUENCE-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE L.CONGRUENCE-S) ST*SYMBOL.ADDRESSES))) (L.CONGRUENCE-S REMPROP (QUOTE L.CONGRUENCE-S) (QUOTE ST*DATA))) ((EQU.REL-S PROGN (DT-SORT.ST.REMOVE (QUOTE EQU.REL-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EQU.REL-S) ST*SYMBOL.ADDRESSES))) (EQU.REL-S REMPROP (QUOTE EQU.REL-S) (QUOTE ST*DATA))) ((BINARY.FUNC PROGN (DT-SORT.ST.REMOVE (QUOTE BINARY.FUNC)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BINARY.FUNC) ST*SYMBOL.ADDRESSES))) (BINARY.FUNC REMPROP (QUOTE BINARY.FUNC) (QUOTE ST*DATA))) ((UNARY.FUNC PROGN (DT-SORT.ST.REMOVE (QUOTE UNARY.FUNC)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UNARY.FUNC) ST*SYMBOL.ADDRESSES))) (UNARY.FUNC REMPROP (QUOTE UNARY.FUNC) (QUOTE ST*DATA))) ((REL PROGN (DT-SORT.ST.REMOVE (QUOTE REL)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE REL) ST*SYMBOL.ADDRESSES))) (REL REMPROP (QUOTE REL) (QUOTE ST*DATA))) ((NAT PROGN (DT-SORT.ST.REMOVE (QUOTE NAT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NAT) ST*SYMBOL.ADDRESSES))) (NAT REMPROP (QUOTE NAT) (QUOTE ST*DATA))) ((ELEMENT.F PROGN (DT-SORT.ST.REMOVE (QUOTE ELEMENT.F)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ELEMENT.F) ST*SYMBOL.ADDRESSES))) (ELEMENT.F REMPROP (QUOTE ELEMENT.F) (QUOTE ST*DATA))) ((ELEMENT PROGN (DT-SORT.ST.REMOVE (QUOTE ELEMENT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ELEMENT) ST*SYMBOL.ADDRESSES))) (ELEMENT REMPROP (QUOTE ELEMENT) (QUOTE ST*DATA))) ((FUNCTION PROGN (DT-SORT.ST.REMOVE (QUOTE FUNCTION)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FUNCTION) ST*SYMBOL.ADDRESSES))) (FUNCTION REMPROP (QUOTE FUNCTION) (QUOTE ST*DATA))) ((SET PROGN (DT-SORT.ST.REMOVE (QUOTE SET)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SET) ST*SYMBOL.ADDRESSES))) (SET REMPROP (QUOTE SET) (QUOTE ST*DATA))) ((FALSE PROGN (DT-PREDICATE.DELETE 2.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1.) (FALSE . 2.) (SET . T) (FUNCTION . T) (ELEMENT . T) (ELEMENT.F . T) (NAT . T) (REL . T) (UNARY.FUNC . T) (BINARY.FUNC . T) (EQU.REL-S . T) (L.CONGRUENCE-S . T) (R.CONGRUENCE-S . T) (CONGRUENCE-S . T) (F . 219.) (CONN.F . 220.) (1. . 221.) (CONN.F.RHO . 222.) (SEMIGROUP . 254.) (L.CONGRUENCE . 255.) (R.CONGRUENCE . 256.) (CONGRUENCE . 257.) (IN.RELATION . 258.) (INJECTIVE . 259.) (SURJECTIVE . 260.) (BIJECTIVE . 261.) (HOMOMORPH . 262.) (ISOMORPH . 263.) (EPIMORPH . 264.) (MAPPING . 265.) (MEMBER . 266.) (SUBSET . 267.) (INVERSE.EL . 268.) (APPLY1 . 269.) (APPLY1-EL . 270.) (APPLY2 . 271.) (APPLY2-EL . 272.) (APPLY2-EL.F . 273.) (PREIMAGE . 274.) (POWER . 275.) (PLUS . 276.) (MODULO . 277.) (COMP . 278.) (TRANS.CLOS . 279.) (UNION-REL . 280.) (TRANS.UNION . 281.) (CAN.PROJ . 282.) (IND.EQU.REL . 283.) (MOD.PHI . 284.) (NORMALISATOR . 285.) (X_291 . 291.) (X_287 . 287.) (X_289 . 289.) (SUBGROUP . 293.) (X_294 . 294.) (X_295 . 295.) (X_296 . 296.) (= . 297.) (X_301 . 301.) (GROUP . 300.) (X_298 . 298.) (X_302 . 302.) (X_303 . 303.) (X_304 . 304.) (X_305 . 305.) (X_306 . 306.) (X_307 . 307.) (X_308 . 308.) (X_309 . 309.) (X_310 . 310.))))))))
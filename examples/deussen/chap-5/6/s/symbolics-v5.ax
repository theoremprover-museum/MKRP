;;; -*- Package: IL; Base: 10. -*-
(COND ((FMT-LOAD "04-FEB-86 08:23:04"
NIL(((SORT SET:ANY) (+ 1. NIL) TYPE) ((SORT FUNCTION:ANY) (+ 1. NIL) TYPE) ((SORT ELEMENT:SET) (+ 1. NIL) TYPE) ((SORT ELEMENT.F:ELEMENT) (+ 1. NIL) TYPE) ((SORT NAT:SET) (+ 1. NIL) TYPE) ((SORT REL:SET) (+ 1. NIL) TYPE) ((SORT UNARY.FUNC:FUNCTION) (+ 1. NIL) TYPE) ((SORT BINARY.FUNC:FUNCTION) (+ 1. NIL) TYPE) ((SORT EQU.REL-S:REL) (+ 1. NIL) TYPE) ((SORT L.CONGRUENCE-S:EQU.REL-S) (+ 1. NIL) TYPE) ((SORT R.CONGRUENCE-S:EQU.REL-S) (+ 1. NIL) TYPE) ((SORT CONGRUENCE-S:L.CONGRUENCE-S) (+ 1. NIL) TYPE) ((SORT CONGRUENCE-S:R.CONGRUENCE-S) (+ 1. NIL) TYPE) ((* CONSTANTS *) COMMENT COMMENT) ((TYPE F:SET) (+ 1. NIL) TYPE) ((TYPE CONN.F:BINARY.FUNC) (+ 1. NIL) TYPE) ((TYPE 1:NAT) (+ 1. NIL) TYPE) ((TYPE CONN.F.RHO:BINARY.FUNC) (+ 1. NIL) TYPE) ((* PREDICATES *) COMMENT COMMENT) ((TYPE SEMIGROUP (SET BINARY.FUNC)) (+ 1. NIL) TYPE) ((TYPE L.CONGRUENCE (REL)) (+ 1. NIL) TYPE) ((TYPE R.CONGRUENCE (REL)) (+ 1. NIL) TYPE) ((TYPE CONGRUENCE (EQU.REL-S)) (+ 1. NIL) TYPE) ((TYPE IN.RELATION (REL ELEMENT.F ELEMENT.F)) (+ 1. NIL) TYPE) ((TYPE INJECTIVE (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE SURJECTIVE (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE BIJECTIVE (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE HOMOMORPH (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE ISOMORPH (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE EPIMORPH (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE MAPPING (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((* FUNCTIONS *) COMMENT COMMENT) ((TYPE APPLY1 (UNARY.FUNC SET) :SET) (+ 1. NIL) TYPE) ((TYPE APPLY1-EL (UNARY.FUNC ELEMENT) :ELEMENT) (+ 1. NIL) TYPE) ((TYPE APPLY2 (BINARY.FUNC SET SET) :SET) (+ 1. NIL) TYPE) ((TYPE APPLY2-EL (BINARY.FUNC ELEMENT ELEMENT) :ELEMENT) (+ 1. NIL) TYPE) ((TYPE APPLY2-EL.F (BINARY.FUNC ELEMENT.F ELEMENT.F) :ELEMENT.F) (+ 1. NIL) TYPE) ((TYPE PREIMAGE (REL ELEMENT) :SET) (+ 1. NIL) TYPE) ((TYPE POWER (REL NAT) :REL) (+ 1. NIL) TYPE) ((TYPE PLUS (NAT NAT) :NAT) (+ 1. NIL) TYPE) ((TYPE MODULO (EQU.REL-S) :SET) (+ 1. NIL) TYPE) ((TYPE COMP (REL REL) :REL) (+ 1. NIL) TYPE) ((TYPE TRANS.CLOS (REL) :REL) (+ 1. NIL) TYPE) ((TYPE UNION-REL (REL REL) :REL) (+ 1. NIL) TYPE) ((TYPE TRANS.UNION (EQU.REL-S EQU.REL-S) :EQU.REL-S) (+ 1. NIL) TYPE) ((TYPE CAN.PROJ (EQU.REL-S) :UNARY.FUNC) (+ 1. NIL) TYPE) ((TYPE IND.EQU.REL (UNARY.FUNC SET) :EQU.REL-S) (+ 1. NIL) TYPE) ((TYPE COMP.MAP (UNARY.FUNC UNARY.FUNC) :UNARY.FUNC) (+ 1. NIL) TYPE) ((TYPE MOD.PHI (UNARY.FUNC SET) :UNARY.FUNC) (+ 1. NIL) TYPE) ((*) COMMENT COMMENT) ((* DEFINITION OF EPIMORPH *) COMMENT COMMENT) ((ALL A,B:SET ALL PHI:UNARY.FUNC EPIMORPH (PHI A B) EQV HOMOMORPH (PHI A B) AND SURJECTIVE (PHI A B)) (ALL 241. (ALL 240. (ALL 242. (EQV (+ 201. (242. 240. 241.) (KIND (EQV T 530.))) (AND (+ 202. (242. 240. 241.) (KIND (EQV NIL 530.))) (+ 212. (242. 240. 241.) (KIND (EQV NIL 530.)))))))) QUANTIFICATION) ((* DEFINITION OF ISOMORPH *) COMMENT COMMENT) ((ALL A,B:SET ALL PHI:UNARY.FUNC ISOMORPH (PHI A B) EQV HOMOMORPH (PHI A B) AND BIJECTIVE (PHI A B)) (ALL 244. (ALL 243. (ALL 245. (EQV (+ 188. (245. 243. 244.) (KIND (EQV T 550.))) (AND (+ 202. (245. 243. 244.) (KIND (EQV NIL 550.))) (+ 195. (245. 243. 244.) (KIND (EQV NIL 550.)))))))) QUANTIFICATION) ((* THEOREM 5.5.1 *) COMMENT COMMENT) ((ALL RHO:EQU.REL-S SEMIGROUP (F CONN.F) AND SEMIGROUP (MODULO (RHO) CONN.F.RHO) AND CONGRUENCE (RHO) IMPL HOMOMORPH (CAN.PROJ (RHO) F MODULO (RHO))) (ALL 246. (IMPL (AND (+ 227. (158. 157.) NIL) (AND (+ 227. ((231. 246.) 155.) NIL) (+ 224. (246.) NIL))) (+ 202. ((236. 246.) 158. (231. 246.)) NIL))) QUANTIFICATION) ((* THEOREM 4.11 *) COMMENT COMMENT) ((ALL H:SET ALL CONN.H:BINARY.FUNC ALL PHI:UNARY.FUNC SEMIGROUP (F CONN.F) AND SEMIGROUP (H CONN.H) AND SURJECTIVE (PHI F H) IMPL SURJECTIVE (CAN.PROJ (IND.EQU.REL (PHI H)) F MODULO (IND.EQU.REL (PHI H))) AND BIJECTIVE (MOD.PHI (PHI H) MODULO (IND.EQU.REL (PHI H)) H) AND COMP.MAP (MOD.PHI (PHI H) CAN.PROJ (IND.EQU.REL (PHI H))) = PHI) (ALL 247. (ALL 248. (ALL 249. (IMPL (AND (+ 227. (158. 157.) NIL) (AND (+ 227. (247. 248.) NIL) (+ 212. (249. 158. 247.) NIL))) (AND (+ 212. ((236. (237. 249. 247.)) 158. (231. (237. 249. 247.))) NIL) (AND (+ 195. ((239. 249. 247.) (231. (237. 249. 247.)) 247.) NIL) (+ 250. ((238. (239. 249. 247.) (236. (237. 249. 247.))) 249.) NIL))))))) QUANTIFICATION) ((* LEMMA 5.6.1 *) COMMENT COMMENT) ((ALL H:SET ALL CONN.H:BINARY.FUNC ALL PHI:UNARY.FUNC SEMIGROUP (F CONN.F) AND SEMIGROUP (H CONN.H) AND EPIMORPH (PHI F H) AND CONGRUENCE (IND.EQU.REL (PHI H)) IMPL HOMOMORPH (MOD.PHI (PHI H) MODULO (IND.EQU.REL (PHI H)) H)) (ALL 251. (ALL 252. (ALL 253. (IMPL (AND (+ 227. (158. 157.) NIL) (AND (+ 227. (251. 252.) NIL) (AND (+ 201. (253. 158. 251.) NIL) (+ 224. ((237. 253. 251.)) NIL)))) (+ 202. ((239. 253. 251.) (231. (237. 253. 251.)) 251.) NIL))))) QUANTIFICATION) ((* CONSEQUENCE OF 5.4 *) COMMENT COMMENT) ((ALL RHO:EQU.REL-S CONGRUENCE (RHO) IMPL SEMIGROUP (MODULO (RHO) CONN.F.RHO)) (ALL 254. (IMPL (+ 224. (254.) NIL) (+ 227. ((231. 254.) 155.) NIL))) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (99452. 99457. 99462. 99467. 99482. 99487. 99492. 99497. 99502. 99507. 99512. 99517. 99522. 99527. 99532. 99546. 99560. 99574. 99588. 99602. 99616. 99630. 99644. 99658. 99672. 99686. 99700. 99950. 99935. 99920. 99905. 99890. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 99728. 99714. 99756. 99770. 99785. ATP.MEMORY.NIL 99860. 99875. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 99742. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 99830. 99800. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 99845. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 99815. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 99970. 99965. 99960. 99955. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 99985. 100000.))) (DATALIST (QUOTE (15. "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1. (POSITIVE))) ((+ 1. (NEGATIVE))) ((+ 1. (NIL))) ((- 1. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2. (POSITIVE))) ((+ 2. (NEGATIVE))) ((+ 2. (NIL))) ((- 2. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. SET "F" (DT*ST-KIND NIL) CONSTANT 5. BINARY.FUNC "CONN.F" (DT*ST-KIND NIL) CONSTANT 5. NAT "1" (DT*ST-KIND NIL) CONSTANT 5. BINARY.FUNC "CONN.F.RHO" (DT*ST-KIND NIL) CONSTANT 15. "SEMIGROUP" NIL NIL (SET BINARY.FUNC) NIL NIL ((- 227. (POSITIVE))) ((+ 227. (NEGATIVE))) ((+ 227. (NIL))) ((- 227. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "L.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 226. (POSITIVE))) ((+ 226. (NEGATIVE))) ((+ 226. (NIL))) ((- 226. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "R.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 225. (POSITIVE))) ((+ 225. (NEGATIVE))) ((+ 225. (NIL))) ((- 225. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "CONGRUENCE" NIL NIL (EQU.REL-S) NIL NIL ((- 224. (POSITIVE))) ((+ 224. (NEGATIVE))) ((+ 224. (NIL))) ((- 224. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "IN.RELATION" NIL NIL (REL ELEMENT.F ELEMENT.F) NIL NIL ((- 223. (POSITIVE))) ((+ 223. (NEGATIVE))) ((+ 223. (NIL))) ((- 223. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "INJECTIVE" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 211. (POSITIVE))) ((+ 211. (NEGATIVE))) ((+ 211. (NIL))) ((- 211. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "SURJECTIVE" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 212. (POSITIVE))) ((+ 212. (NEGATIVE))) ((+ 212. (NIL))) ((- 212. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "BIJECTIVE" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 195. (POSITIVE))) ((+ 195. (NEGATIVE))) ((+ 195. (NIL))) ((- 195. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "HOMOMORPH" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 202. (POSITIVE))) ((+ 202. (NEGATIVE))) ((+ 202. (NIL))) ((- 202. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "ISOMORPH" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 188. (POSITIVE))) ((+ 188. (NEGATIVE))) ((+ 188. (NIL))) ((- 188. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "EPIMORPH" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 201. (POSITIVE))) ((+ 201. (NEGATIVE))) ((+ 201. (NIL))) ((- 201. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MAPPING" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 214. (POSITIVE))) ((+ 214. (NEGATIVE))) ((+ 214. (NIL))) ((- 214. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "APPLY1" NIL SET (UNARY.FUNC SET) NIL NIL NIL NIL NIL 2. SET (DT*ST-KIND NIL) FUNCTION 14. "APPLY1-EL" NIL ELEMENT (UNARY.FUNC ELEMENT) NIL NIL NIL NIL NIL 2. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY2" NIL SET (BINARY.FUNC SET SET) NIL NIL NIL NIL NIL 3. SET (DT*ST-KIND NIL) FUNCTION 14. "APPLY2-EL" NIL ELEMENT (BINARY.FUNC ELEMENT ELEMENT) NIL NIL NIL NIL NIL 3. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY2-EL.F" NIL ELEMENT.F (BINARY.FUNC ELEMENT.F ELEMENT.F) NIL NIL NIL NIL NIL 3. ELEMENT.F (DT*ST-KIND NIL) FUNCTION 14. "PREIMAGE" NIL SET (REL ELEMENT) NIL NIL NIL NIL NIL 2. SET (DT*ST-KIND NIL) FUNCTION 14. "POWER" NIL REL (REL NAT) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "PLUS" NIL NAT (NAT NAT) NIL NIL NIL NIL NIL 2. NAT (DT*ST-KIND NIL) FUNCTION 14. "MODULO" NIL SET (EQU.REL-S) NIL NIL NIL NIL NIL 1. SET (DT*ST-KIND NIL) FUNCTION 14. "COMP" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.CLOS" NIL REL (REL) NIL NIL NIL NIL NIL 1. REL (DT*ST-KIND NIL) FUNCTION 14. "UNION-REL" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.UNION" NIL EQU.REL-S (EQU.REL-S EQU.REL-S) NIL NIL NIL NIL NIL 2. EQU.REL-S (DT*ST-KIND NIL) FUNCTION 14. "CAN.PROJ" NIL UNARY.FUNC (EQU.REL-S) NIL NIL NIL NIL NIL 1. UNARY.FUNC (DT*ST-KIND NIL) FUNCTION 14. "IND.EQU.REL" NIL EQU.REL-S (UNARY.FUNC SET) NIL NIL NIL NIL NIL 2. EQU.REL-S (DT*ST-KIND NIL) FUNCTION 14. "COMP.MAP" NIL UNARY.FUNC (UNARY.FUNC UNARY.FUNC) NIL NIL NIL NIL NIL 2. UNARY.FUNC (DT*ST-KIND NIL) FUNCTION 14. "MOD.PHI" NIL UNARY.FUNC (UNARY.FUNC SET) NIL NIL NIL NIL NIL 2. UNARY.FUNC (DT*ST-KIND NIL) FUNCTION 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. UNARY.FUNC NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. UNARY.FUNC NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EQU.REL-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. BINARY.FUNC NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. UNARY.FUNC NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 250. (POSITIVE . SYMMETRIC))) ((+ 250. (NEGATIVE . SYMMETRIC))) ((+ 250. (NIL . SYMMETRIC))) ((- 250. (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. BINARY.FUNC NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. UNARY.FUNC NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EQU.REL-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 100000.)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 100000.) (SETQ COUNTER1 255.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0.) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 100000.) (MEM-INITIALIZE 100000.))) (SETQ COUNTER1 255.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 100000.) (RPAQ MEM*NEXT.RADR (IPLUS 99447. INCREMENT))) (T (RPAQ MEM*NEXT.RADR 99447.))) (RPAQ MEM*NEXT.VADR 255.) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S EQU.REL-S BINARY.FUNC UNARY.FUNC REL NAT ELEMENT.F ELEMENT FUNCTION SET ANY)) (RPAQQ DT*SORT.NR 79.) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0.) (RPAQQ DT*CONSTANT.COUNTER 0.) (RPAQQ DT*CONSTANT.ALL (155. 156. 157. 158.)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0.) (RPAQQ DT*FUNCTION.ALL (239. 238. 237. 236. 235. 234. 233. 232. 231. 230. 229. 228. 217. 218. 206. 216. 215.)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0.) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES (250.)) (RPAQQ DT*NONEQUALITY.PREDICATES (214. 201. 188. 202. 195. 212. 211. 223. 224. 225. 226. 227. 2. 1.)) (RPAQQ DT*PREDICATE.ALL (250. 214. 201. 188. 202. 195. 212. 211. 223. 224. 225. 226. 227. 2. 1.)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1.) (RPAQQ DT*FALSE.PREDICATE 2.) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (PROGN (REMPROPS (QUOTE DT*PREDICATE.WITH.ATTRIBUTES)) (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (NCONC (QUOTE (SYMMETRIC (250. 250.) REFLEXIVE (250. 250.) DEFINED (250.))) (GETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES))))))
(PROGN (PROGN (REMPROPS (QUOTE CONGRUENCE-S)) (SETPROPLIST (QUOTE CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 76. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (CONGRUENCE-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S CONGRUENCE-S) (L.CONGRUENCE-S CONGRUENCE-S) (EQU.REL-S CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET CONGRUENCE-S) (ANY CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (CONGRUENCE-S) DT*DIRECT.SUPERSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*INVERSE.TRANSITIVE.CLOSURE (CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S EQU.REL-S REL SET ANY) DT*LEAST.SUPERSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC ANY) (UNARY.FUNC ANY) (REL REL) (NAT SET) (ELEMENT.F SET) (ELEMENT SET) (FUNCTION ANY) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE R.CONGRUENCE-S)) (SETPROPLIST (QUOTE R.CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 75. DT*DIRECT.SUBSORTS (CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (CONGRUENCE-S R.CONGRUENCE-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S CONGRUENCE-S) (EQU.REL-S R.CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL R.CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET R.CONGRUENCE-S) (ANY R.CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (CONGRUENCE-S) DT*DIRECT.SUPERSORTS (EQU.REL-S) DT*INVERSE.TRANSITIVE.CLOSURE (R.CONGRUENCE-S EQU.REL-S REL SET ANY) DT*LEAST.SUPERSORTS ((CONGRUENCE-S R.CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S EQU.REL-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC ANY) (UNARY.FUNC ANY) (REL REL) (NAT SET) (ELEMENT.F SET) (ELEMENT SET) (FUNCTION ANY) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE R.CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE L.CONGRUENCE-S)) (SETPROPLIST (QUOTE L.CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 74. DT*DIRECT.SUBSORTS (CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (CONGRUENCE-S L.CONGRUENCE-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S L.CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL L.CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET L.CONGRUENCE-S) (ANY L.CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (CONGRUENCE-S) DT*DIRECT.SUPERSORTS (EQU.REL-S) DT*INVERSE.TRANSITIVE.CLOSURE (L.CONGRUENCE-S EQU.REL-S REL SET ANY) DT*LEAST.SUPERSORTS ((CONGRUENCE-S L.CONGRUENCE-S) (R.CONGRUENCE-S EQU.REL-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC ANY) (UNARY.FUNC ANY) (REL REL) (NAT SET) (ELEMENT.F SET) (ELEMENT SET) (FUNCTION ANY) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE L.CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE EQU.REL-S)) (SETPROPLIST (QUOTE EQU.REL-S) (NCONC (QUOTE (DT*SORT.NUMBER 73. DT*DIRECT.SUBSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (R.CONGRUENCE-S L.CONGRUENCE-S CONGRUENCE-S EQU.REL-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL EQU.REL-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET EQU.REL-S) (ANY EQU.REL-S)) DT*MINIMAL.SUBSORTS (CONGRUENCE-S) DT*DIRECT.SUPERSORTS (REL) DT*INVERSE.TRANSITIVE.CLOSURE (EQU.REL-S REL SET ANY) DT*LEAST.SUPERSORTS ((CONGRUENCE-S EQU.REL-S) (R.CONGRUENCE-S EQU.REL-S) (L.CONGRUENCE-S EQU.REL-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC ANY) (UNARY.FUNC ANY) (REL REL) (NAT SET) (ELEMENT.F SET) (ELEMENT SET) (FUNCTION ANY) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE EQU.REL-S))))) (PROGN (REMPROPS (QUOTE BINARY.FUNC)) (SETPROPLIST (QUOTE BINARY.FUNC) (NCONC (QUOTE (DT*SORT.NUMBER 72. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (BINARY.FUNC) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION BINARY.FUNC) (SET) (ANY BINARY.FUNC)) DT*MINIMAL.SUBSORTS (BINARY.FUNC) DT*DIRECT.SUPERSORTS (FUNCTION) DT*INVERSE.TRANSITIVE.CLOSURE (BINARY.FUNC FUNCTION ANY) DT*LEAST.SUPERSORTS ((CONGRUENCE-S ANY) (R.CONGRUENCE-S ANY) (L.CONGRUENCE-S ANY) (EQU.REL-S ANY) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC FUNCTION) (REL ANY) (NAT ANY) (ELEMENT.F ANY) (ELEMENT ANY) (FUNCTION FUNCTION) (SET ANY) (ANY ANY)))) (GETPROPLIST (QUOTE BINARY.FUNC))))) (PROGN (REMPROPS (QUOTE UNARY.FUNC)) (SETPROPLIST (QUOTE UNARY.FUNC) (NCONC (QUOTE (DT*SORT.NUMBER 71. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (UNARY.FUNC) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION UNARY.FUNC) (SET) (ANY UNARY.FUNC)) DT*MINIMAL.SUBSORTS (UNARY.FUNC) DT*DIRECT.SUPERSORTS (FUNCTION) DT*INVERSE.TRANSITIVE.CLOSURE (UNARY.FUNC FUNCTION ANY) DT*LEAST.SUPERSORTS ((CONGRUENCE-S ANY) (R.CONGRUENCE-S ANY) (L.CONGRUENCE-S ANY) (EQU.REL-S ANY) (BINARY.FUNC FUNCTION) (UNARY.FUNC UNARY.FUNC) (REL ANY) (NAT ANY) (ELEMENT.F ANY) (ELEMENT ANY) (FUNCTION FUNCTION) (SET ANY) (ANY ANY)))) (GETPROPLIST (QUOTE UNARY.FUNC))))) (PROGN (REMPROPS (QUOTE REL)) (SETPROPLIST (QUOTE REL) (NCONC (QUOTE (DT*SORT.NUMBER 70. DT*DIRECT.SUBSORTS (EQU.REL-S) DT*TRANSITIVE.CLOSURE (EQU.REL-S CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S REL) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET REL) (ANY REL)) DT*MINIMAL.SUBSORTS (CONGRUENCE-S) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (REL SET ANY) DT*LEAST.SUPERSORTS ((CONGRUENCE-S REL) (R.CONGRUENCE-S REL) (L.CONGRUENCE-S REL) (EQU.REL-S REL) (BINARY.FUNC ANY) (UNARY.FUNC ANY) (REL REL) (NAT SET) (ELEMENT.F SET) (ELEMENT SET) (FUNCTION ANY) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE REL))))) (PROGN (REMPROPS (QUOTE NAT)) (SETPROPLIST (QUOTE NAT) (NCONC (QUOTE (DT*SORT.NUMBER 69. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (NAT) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET NAT) (ANY NAT)) DT*MINIMAL.SUBSORTS (NAT) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (NAT SET ANY) DT*LEAST.SUPERSORTS ((CONGRUENCE-S SET) (R.CONGRUENCE-S SET) (L.CONGRUENCE-S SET) (EQU.REL-S SET) (BINARY.FUNC ANY) (UNARY.FUNC ANY) (REL SET) (NAT NAT) (ELEMENT.F SET) (ELEMENT SET) (FUNCTION ANY) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE NAT))))) (PROGN (REMPROPS (QUOTE ELEMENT.F)) (SETPROPLIST (QUOTE ELEMENT.F) (NCONC (QUOTE (DT*SORT.NUMBER 68. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (ELEMENT.F) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT.F) (FUNCTION) (SET ELEMENT.F) (ANY ELEMENT.F)) DT*MINIMAL.SUBSORTS (ELEMENT.F) DT*DIRECT.SUPERSORTS (ELEMENT) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT.F ELEMENT SET ANY) DT*LEAST.SUPERSORTS ((CONGRUENCE-S SET) (R.CONGRUENCE-S SET) (L.CONGRUENCE-S SET) (EQU.REL-S SET) (BINARY.FUNC ANY) (UNARY.FUNC ANY) (REL SET) (NAT SET) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION ANY) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE ELEMENT.F))))) (PROGN (REMPROPS (QUOTE ELEMENT)) (SETPROPLIST (QUOTE ELEMENT) (NCONC (QUOTE (DT*SORT.NUMBER 67. DT*DIRECT.SUBSORTS (ELEMENT.F) DT*TRANSITIVE.CLOSURE (ELEMENT.F ELEMENT) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION) (SET ELEMENT) (ANY ELEMENT)) DT*MINIMAL.SUBSORTS (ELEMENT.F) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT SET ANY) DT*LEAST.SUPERSORTS ((CONGRUENCE-S SET) (R.CONGRUENCE-S SET) (L.CONGRUENCE-S SET) (EQU.REL-S SET) (BINARY.FUNC ANY) (UNARY.FUNC ANY) (REL SET) (NAT SET) (ELEMENT.F ELEMENT) (ELEMENT ELEMENT) (FUNCTION ANY) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE ELEMENT))))) (PROGN (REMPROPS (QUOTE FUNCTION)) (SETPROPLIST (QUOTE FUNCTION) (NCONC (QUOTE (DT*SORT.NUMBER 66. DT*DIRECT.SUBSORTS (BINARY.FUNC UNARY.FUNC) DT*TRANSITIVE.CLOSURE (BINARY.FUNC UNARY.FUNC FUNCTION) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION FUNCTION) (SET) (ANY FUNCTION)) DT*MINIMAL.SUBSORTS (BINARY.FUNC UNARY.FUNC) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (FUNCTION ANY) DT*LEAST.SUPERSORTS ((CONGRUENCE-S ANY) (R.CONGRUENCE-S ANY) (L.CONGRUENCE-S ANY) (EQU.REL-S ANY) (BINARY.FUNC FUNCTION) (UNARY.FUNC FUNCTION) (REL ANY) (NAT ANY) (ELEMENT.F ANY) (ELEMENT ANY) (FUNCTION FUNCTION) (SET ANY) (ANY ANY)))) (GETPROPLIST (QUOTE FUNCTION))))) (PROGN (REMPROPS (QUOTE SET)) (SETPROPLIST (QUOTE SET) (NCONC (QUOTE (DT*SORT.NUMBER 65. DT*DIRECT.SUBSORTS (REL NAT ELEMENT) DT*TRANSITIVE.CLOSURE (REL NAT ELEMENT R.CONGRUENCE-S L.CONGRUENCE-S CONGRUENCE-S ELEMENT.F EQU.REL-S SET) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL REL) (NAT NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION) (SET SET) (ANY SET)) DT*MINIMAL.SUBSORTS (CONGRUENCE-S NAT ELEMENT.F) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SET ANY) DT*LEAST.SUPERSORTS ((CONGRUENCE-S SET) (R.CONGRUENCE-S SET) (L.CONGRUENCE-S SET) (EQU.REL-S SET) (BINARY.FUNC ANY) (UNARY.FUNC ANY) (REL SET) (NAT SET) (ELEMENT.F SET) (ELEMENT SET) (FUNCTION ANY) (SET SET) (ANY ANY)))) (GETPROPLIST (QUOTE SET))))) (PROGN (REMPROPS (QUOTE ANY)) (SETPROPLIST (QUOTE ANY) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (FUNCTION SET) DT*SORT.NUMBER 1. DT*TRANSITIVE.CLOSURE (FUNCTION SET ELEMENT.F EQU.REL-S CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S REL NAT ELEMENT BINARY.FUNC UNARY.FUNC ANY) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL REL) (NAT NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION FUNCTION) (SET SET) (ANY ANY)) DT*MINIMAL.SUBSORTS (BINARY.FUNC ELEMENT.F CONGRUENCE-S NAT UNARY.FUNC) DT*DIRECT.SUPERSORTS NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*LEAST.SUPERSORTS ((CONGRUENCE-S ANY) (R.CONGRUENCE-S ANY) (L.CONGRUENCE-S ANY) (EQU.REL-S ANY) (BINARY.FUNC ANY) (UNARY.FUNC ANY) (REL ANY) (NAT ANY) (ELEMENT.F ANY) (ELEMENT ANY) (FUNCTION ANY) (SET ANY) (ANY ANY)))) (GETPROPLIST (QUOTE ANY))))))
(PROGN (RPAQQ ST*STACK1 (NIL ((X_254 PROGN (DT-VARIABLE.DELETE 254.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_254) ST*SYMBOL.ADDRESSES)))) NIL ((X_253 PROGN (DT-VARIABLE.DELETE 253.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_253) ST*SYMBOL.ADDRESSES))) (X_252 PROGN (DT-VARIABLE.DELETE 252.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_252) ST*SYMBOL.ADDRESSES))) (X_251 PROGN (DT-VARIABLE.DELETE 251.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_251) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((= PROGN (DT-PREDICATE.DELETE 250.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE =) ST*SYMBOL.ADDRESSES))) (X_249 PROGN (DT-VARIABLE.DELETE 249.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_249) ST*SYMBOL.ADDRESSES))) (X_248 PROGN (DT-VARIABLE.DELETE 248.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_248) ST*SYMBOL.ADDRESSES))) (X_247 PROGN (DT-VARIABLE.DELETE 247.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_247) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((X_246 PROGN (DT-VARIABLE.DELETE 246.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_246) ST*SYMBOL.ADDRESSES)))) NIL ((X_245 PROGN (DT-VARIABLE.DELETE 245.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_245) ST*SYMBOL.ADDRESSES))) (X_244 PROGN (DT-VARIABLE.DELETE 244.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_244) ST*SYMBOL.ADDRESSES))) (X_243 PROGN (DT-VARIABLE.DELETE 243.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_243) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((X_242 PROGN (DT-VARIABLE.DELETE 242.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_242) ST*SYMBOL.ADDRESSES))) (X_241 PROGN (DT-VARIABLE.DELETE 241.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_241) ST*SYMBOL.ADDRESSES))) (X_240 PROGN (DT-VARIABLE.DELETE 240.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_240) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL NIL ((MOD.PHI PROGN (DT-FUNCTION.DELETE 239.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MOD.PHI) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((COMP.MAP PROGN (DT-FUNCTION.DELETE 238.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE COMP.MAP) ST*SYMBOL.ADDRESSES)))) ((IND.EQU.REL PROGN (DT-FUNCTION.DELETE 237.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IND.EQU.REL) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((CAN.PROJ PROGN (DT-FUNCTION.DELETE 236.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CAN.PROJ) ST*SYMBOL.ADDRESSES)))) ((TRANS.UNION PROGN (DT-FUNCTION.DELETE 235.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRANS.UNION) ST*SYMBOL.ADDRESSES)))) ((UNION-REL PROGN (DT-FUNCTION.DELETE 234.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UNION-REL) ST*SYMBOL.ADDRESSES)))) ((TRANS.CLOS PROGN (DT-FUNCTION.DELETE 233.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRANS.CLOS) ST*SYMBOL.ADDRESSES)))) ((COMP PROGN (DT-FUNCTION.DELETE 232.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE COMP) ST*SYMBOL.ADDRESSES)))) ((MODULO PROGN (DT-FUNCTION.DELETE 231.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MODULO) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((PLUS PROGN (DT-FUNCTION.DELETE 230.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PLUS) ST*SYMBOL.ADDRESSES)))) ((POWER PROGN (DT-FUNCTION.DELETE 229.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE POWER) ST*SYMBOL.ADDRESSES)))) ((PREIMAGE PROGN (DT-FUNCTION.DELETE 228.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PREIMAGE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((APPLY2-EL.F PROGN (DT-FUNCTION.DELETE 217.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2-EL.F) ST*SYMBOL.ADDRESSES)))) ((APPLY2-EL PROGN (DT-FUNCTION.DELETE 218.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2-EL) ST*SYMBOL.ADDRESSES)))) ((APPLY2 PROGN (DT-FUNCTION.DELETE 206.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((APPLY1-EL PROGN (DT-FUNCTION.DELETE 216.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY1-EL) ST*SYMBOL.ADDRESSES)))) ((APPLY1 PROGN (DT-FUNCTION.DELETE 215.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY1) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((MAPPING PROGN (DT-PREDICATE.DELETE 214.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MAPPING) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((EPIMORPH PROGN (DT-PREDICATE.DELETE 201.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EPIMORPH) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((ISOMORPH PROGN (DT-PREDICATE.DELETE 188.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ISOMORPH) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((HOMOMORPH PROGN (DT-PREDICATE.DELETE 202.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE HOMOMORPH) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((BIJECTIVE PROGN (DT-PREDICATE.DELETE 195.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BIJECTIVE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((SURJECTIVE PROGN (DT-PREDICATE.DELETE 212.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SURJECTIVE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((INJECTIVE PROGN (DT-PREDICATE.DELETE 211.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE INJECTIVE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((IN.RELATION PROGN (DT-PREDICATE.DELETE 223.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IN.RELATION) ST*SYMBOL.ADDRESSES)))) ((CONGRUENCE PROGN (DT-PREDICATE.DELETE 224.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((R.CONGRUENCE PROGN (DT-PREDICATE.DELETE 225.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R.CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((L.CONGRUENCE PROGN (DT-PREDICATE.DELETE 226.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE L.CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((SEMIGROUP PROGN (DT-PREDICATE.DELETE 227.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SEMIGROUP) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((CONN.F.RHO PROGN (DT-CONSTANT.DELETE 155.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONN.F.RHO) ST*SYMBOL.ADDRESSES)))) ((1. PROGN (DT-CONSTANT.DELETE 156.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC 1. ST*SYMBOL.ADDRESSES)))) ((CONN.F PROGN (DT-CONSTANT.DELETE 157.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONN.F) ST*SYMBOL.ADDRESSES)))) ((F PROGN (DT-CONSTANT.DELETE 158.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE F) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((CONGRUENCE-S DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE CONGRUENCE-S) (QUOTE (L.CONGRUENCE-S))) (CONGRUENCE-S PUTPROP (QUOTE CONGRUENCE-S) NIL)) ((CONGRUENCE-S PROGN (DT-SORT.ST.REMOVE (QUOTE CONGRUENCE-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONGRUENCE-S) ST*SYMBOL.ADDRESSES))) (CONGRUENCE-S REMPROP (QUOTE CONGRUENCE-S) (QUOTE ST*DATA))) ((R.CONGRUENCE-S PROGN (DT-SORT.ST.REMOVE (QUOTE R.CONGRUENCE-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R.CONGRUENCE-S) ST*SYMBOL.ADDRESSES))) (R.CONGRUENCE-S REMPROP (QUOTE R.CONGRUENCE-S) (QUOTE ST*DATA))) ((L.CONGRUENCE-S PROGN (DT-SORT.ST.REMOVE (QUOTE L.CONGRUENCE-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE L.CONGRUENCE-S) ST*SYMBOL.ADDRESSES))) (L.CONGRUENCE-S REMPROP (QUOTE L.CONGRUENCE-S) (QUOTE ST*DATA))) ((EQU.REL-S PROGN (DT-SORT.ST.REMOVE (QUOTE EQU.REL-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EQU.REL-S) ST*SYMBOL.ADDRESSES))) (EQU.REL-S REMPROP (QUOTE EQU.REL-S) (QUOTE ST*DATA))) ((BINARY.FUNC PROGN (DT-SORT.ST.REMOVE (QUOTE BINARY.FUNC)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BINARY.FUNC) ST*SYMBOL.ADDRESSES))) (BINARY.FUNC REMPROP (QUOTE BINARY.FUNC) (QUOTE ST*DATA))) ((UNARY.FUNC PROGN (DT-SORT.ST.REMOVE (QUOTE UNARY.FUNC)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UNARY.FUNC) ST*SYMBOL.ADDRESSES))) (UNARY.FUNC REMPROP (QUOTE UNARY.FUNC) (QUOTE ST*DATA))) ((REL PROGN (DT-SORT.ST.REMOVE (QUOTE REL)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE REL) ST*SYMBOL.ADDRESSES))) (REL REMPROP (QUOTE REL) (QUOTE ST*DATA))) ((NAT PROGN (DT-SORT.ST.REMOVE (QUOTE NAT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NAT) ST*SYMBOL.ADDRESSES))) (NAT REMPROP (QUOTE NAT) (QUOTE ST*DATA))) ((ELEMENT.F PROGN (DT-SORT.ST.REMOVE (QUOTE ELEMENT.F)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ELEMENT.F) ST*SYMBOL.ADDRESSES))) (ELEMENT.F REMPROP (QUOTE ELEMENT.F) (QUOTE ST*DATA))) ((ELEMENT PROGN (DT-SORT.ST.REMOVE (QUOTE ELEMENT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ELEMENT) ST*SYMBOL.ADDRESSES))) (ELEMENT REMPROP (QUOTE ELEMENT) (QUOTE ST*DATA))) ((FUNCTION PROGN (DT-SORT.ST.REMOVE (QUOTE FUNCTION)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FUNCTION) ST*SYMBOL.ADDRESSES))) (FUNCTION REMPROP (QUOTE FUNCTION) (QUOTE ST*DATA))) ((SET PROGN (DT-SORT.ST.REMOVE (QUOTE SET)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SET) ST*SYMBOL.ADDRESSES))) (SET REMPROP (QUOTE SET) (QUOTE ST*DATA))) ((FALSE PROGN (DT-PREDICATE.DELETE 2.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1.) (FALSE . 2.) (SET . T) (FUNCTION . T) (ELEMENT . T) (ELEMENT.F . T) (NAT . T) (REL . T) (UNARY.FUNC . T) (BINARY.FUNC . T) (EQU.REL-S . T) (L.CONGRUENCE-S . T) (R.CONGRUENCE-S . T) (CONGRUENCE-S . T) (F . 158.) (CONN.F . 157.) (1. . 156.) (CONN.F.RHO . 155.) (SEMIGROUP . 227.) (L.CONGRUENCE . 226.) (R.CONGRUENCE . 225.) (CONGRUENCE . 224.) (IN.RELATION . 223.) (INJECTIVE . 211.) (SURJECTIVE . 212.) (BIJECTIVE . 195.) (HOMOMORPH . 202.) (ISOMORPH . 188.) (EPIMORPH . 201.) (MAPPING . 214.) (APPLY1 . 215.) (APPLY1-EL . 216.) (APPLY2 . 206.) (APPLY2-EL . 218.) (APPLY2-EL.F . 217.) (PREIMAGE . 228.) (POWER . 229.) (PLUS . 230.) (MODULO . 231.) (COMP . 232.) (TRANS.CLOS . 233.) (UNION-REL . 234.) (TRANS.UNION . 235.) (CAN.PROJ . 236.) (IND.EQU.REL . 237.) (COMP.MAP . 238.) (MOD.PHI . 239.) (X_240 . 240.) (X_241 . 241.) (X_242 . 242.) (X_243 . 243.) (X_244 . 244.) (X_245 . 245.) (X_246 . 246.) (X_247 . 247.) (X_248 . 248.) (X_249 . 249.) (= . 250.) (X_251 . 251.) (X_252 . 252.) (X_253 . 253.) (X_254 . 254.))))))))
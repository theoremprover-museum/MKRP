;;; -*- Package: IL; Base: 10. -*-
(COND ((FMT-LOAD "21-JAN-86 09:18:04"
NIL(((SORT SET:ANY) (+ 1. NIL) TYPE) ((SORT FUNCTION:ANY) (+ 1. NIL) TYPE) ((SORT ELEMENT:SET) (+ 1. NIL) TYPE) ((SORT ELEMENT.F:ELEMENT) (+ 1. NIL) TYPE) ((SORT NAT:SET) (+ 1. NIL) TYPE) ((SORT REL:SET) (+ 1. NIL) TYPE) ((SORT UNARY.FUNC:FUNCTION) (+ 1. NIL) TYPE) ((SORT BINARY.FUNC:FUNCTION) (+ 1. NIL) TYPE) ((SORT EQU.REL-S:REL) (+ 1. NIL) TYPE) ((SORT L.CONGRUENCE-S:EQU.REL-S) (+ 1. NIL) TYPE) ((SORT R.CONGRUENCE-S:EQU.REL-S) (+ 1. NIL) TYPE) ((SORT CONGRUENCE-S:L.CONGRUENCE-S) (+ 1. NIL) TYPE) ((SORT CONGRUENCE-S:R.CONGRUENCE-S) (+ 1. NIL) TYPE) ((* CONSTANTS *) COMMENT COMMENT) ((TYPE F:SET) (+ 1. NIL) TYPE) ((TYPE CONN.F:BINARY.FUNC) (+ 1. NIL) TYPE) ((TYPE 1:NAT) (+ 1. NIL) TYPE) ((TYPE CONN.F.RHO:BINARY.FUNC) (+ 1. NIL) TYPE) ((* PREDICATS *) COMMENT COMMENT) ((TYPE SEMIGROUP (SET BINARY.FUNC)) (+ 1. NIL) TYPE) ((TYPE L.CONGRUENCE (REL)) (+ 1. NIL) TYPE) ((TYPE R.CONGRUENCE (REL)) (+ 1. NIL) TYPE) ((TYPE CONGRUENCE (EQU.REL-S)) (+ 1. NIL) TYPE) ((TYPE IN.RELATION (REL ELEMENT.F ELEMENT.F)) (+ 1. NIL) TYPE) ((TYPE INJECTIVE (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE SURJECTIVE (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE BIJECTIVE (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE HOMOMORPH (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE ISOMORPH (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE EPIMORPH (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((TYPE MAPPING (UNARY.FUNC SET SET)) (+ 1. NIL) TYPE) ((* FUNCTIONS *) COMMENT COMMENT) ((TYPE APPLY1 (UNARY.FUNC SET) :SET) (+ 1. NIL) TYPE) ((TYPE APPLY1-EL (UNARY.FUNC ELEMENT) :ELEMENT) (+ 1. NIL) TYPE) ((TYPE APPLY2 (BINARY.FUNC SET SET) :SET) (+ 1. NIL) TYPE) ((TYPE APPLY2-EL (BINARY.FUNC ELEMENT ELEMENT) :ELEMENT) (+ 1. NIL) TYPE) ((TYPE APPLY2-EL.F (BINARY.FUNC ELEMENT.F ELEMENT.F) :ELEMENT.F) (+ 1. NIL) TYPE) ((TYPE PREIMAGE (REL ELEMENT) :SET) (+ 1. NIL) TYPE) ((TYPE POWER (REL NAT) :REL) (+ 1. NIL) TYPE) ((TYPE PLUS (NAT NAT) :NAT) (+ 1. NIL) TYPE) ((TYPE MODULO (EQU.REL-S) :SET) (+ 1. NIL) TYPE) ((TYPE COMP (REL REL) :REL) (+ 1. NIL) TYPE) ((TYPE TRANS.CLOS (REL) :REL) (+ 1. NIL) TYPE) ((TYPE UNION-REL (REL REL) :REL) (+ 1. NIL) TYPE) ((TYPE TRANS.UNION (EQU.REL-S EQU.REL-S) :EQU.REL-S) (+ 1. NIL) TYPE) ((TYPE CAN.PROJ (EQU.REL-S) :UNARY.FUNC) (+ 1. NIL) TYPE) ((TYPE IND.EQU.REL (UNARY.FUNC SET) :EQU.REL-S) (+ 1. NIL) TYPE) ((TYPE MOD.PHI (UNARY.FUNC SET) :UNARY.FUNC) (+ 1. NIL) TYPE) ((*) COMMENT COMMENT) ((* EQUALITY OF SETS *) COMMENT COMMENT) ((ALL A,B:SET SUBSET (A B) AND SUBSET (B A) IMPL A = B) (ALL 224. (ALL 223. (IMPL (AND (+ 225. (223. 224.) NIL) (+ 225. (224. 223.) NIL)) (+ 226. (223. 224.) NIL)))) QUANTIFICATION) ((* GROUP IMPL SEMIGROUP *) COMMENT COMMENT) ((ALL A:SET ALL CONN:BINARY.FUNC ALL E :ELEMENT GROUP (A CONN E) IMPL SEMIGROUP (A CONN)) (ALL 227. (ALL 228. (ALL 229. (IMPL (+ 230. (227. 228. 229.) NIL) (+ 183. (227. 228.) NIL))))) QUANTIFICATION) ((* PART OF DEFINITION OF GROUP *) COMMENT COMMENT) ((ALL E,X:ELEMENT.F GROUP (F CONN.F E) IMPL APPLY2-EL.F (CONN.F X E) := X) (ALL 237. (ALL 238. (IMPL (+ 230. (203. 202. 238.) NIL) (+ 226. ((211. 202. 237. 238.) 237.) NIL)))) QUANTIFICATION) ((* LEMMA 5.9.1.1 *) COMMENT COMMENT) ((ALL E,X:ELEMENT.F ALL RHO:L.CONGRUENCE-S GROUP (F CONN.F E) IMPL SUBSET (PREIMAGE (RHO X) APPLY2 (CONN.F X PREIMAGE (RHO E)))) (ALL 235. (ALL 236. (ALL 234. (IMPL (+ 230. (203. 202. 236.) NIL) (+ 225. ((212. 234. 235.) (209. 202. 235. (212. 234. 236.))) NIL))))) QUANTIFICATION) ((* THEOREM 5.2 *) COMMENT COMMENT) ((ALL RHO:EQU.REL-S SEMIGROUP (F CONN.F) IMPL (L.CONGRUENCE (RHO) EQV (ALL G,H:ELEMENT.F SUBSET (APPLY2 (CONN.F H PREIMAGE (RHO G)) PREIMAGE (RHO APPLY2-EL.F (CONN.F H G)))))) (ALL 233. (IMPL (+ 183. (203. 202.) NIL) (EQV (+ 186. (233.) (KIND (EQV T 600.))) (ALL 231. (ALL 232. (+ 225. ((209. 202. 231. (212. 233. 232.)) (212. 233. (211. 202. 231. 232.))) (KIND (EQV NIL 600.)))))))) QUANTIFICATION) ((* *) COMMENT COMMENT) ((ALL RHO:L.CONGRUENCE-S L.CONGRUENCE (RHO)) (ALL 239. (+ 186. (239.) NIL)) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (49436. 49476. 49471. 49466. 49461. 49456. 49451. 49446. 49441. 49491. 49496. 49501. 49506. 49521. 49536. 49541. 49546. 49560. 49574. 49588. 49602. 49616. 49630. 49644. 49658. 49672. 49686. 49700. 49714. 49728. 49742. 49756. 49770. 49785. 49800. 49815. 49970. 49965. 49960. 49830. 49845. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 49860. 49875. 49890. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 49905. 49920. 49935. ATP.MEMORY.NIL ATP.MEMORY.NIL 49950. 49955. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 49985. 50000.))) (DATALIST (QUOTE (15. "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1. (POSITIVE))) ((+ 1. (NEGATIVE))) ((+ 1. (NIL))) ((- 1. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2. (POSITIVE))) ((+ 2. (NEGATIVE))) ((+ 2. (NIL))) ((- 2. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. SET "F" (DT*ST-KIND NIL) CONSTANT 5. BINARY.FUNC "CONN.F" (DT*ST-KIND NIL) CONSTANT 5. NAT "1" (DT*ST-KIND NIL) CONSTANT 5. BINARY.FUNC "CONN.F.RHO" (DT*ST-KIND NIL) CONSTANT 15. "SEMIGROUP" NIL NIL (SET BINARY.FUNC) NIL NIL ((- 183. (POSITIVE))) ((+ 183. (NEGATIVE))) ((+ 183. (NIL))) ((- 183. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "L.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 186. (POSITIVE))) ((+ 186. (NEGATIVE))) ((+ 186. (NIL))) ((- 186. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "R.CONGRUENCE" NIL NIL (REL) NIL NIL ((- 187. (POSITIVE))) ((+ 187. (NEGATIVE))) ((+ 187. (NIL))) ((- 187. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "CONGRUENCE" NIL NIL (EQU.REL-S) NIL NIL ((- 188. (POSITIVE))) ((+ 188. (NEGATIVE))) ((+ 188. (NIL))) ((- 188. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "IN.RELATION" NIL NIL (REL ELEMENT.F ELEMENT.F) NIL NIL ((- 192. (POSITIVE))) ((+ 192. (NEGATIVE))) ((+ 192. (NIL))) ((- 192. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "INJECTIVE" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 193. (POSITIVE))) ((+ 193. (NEGATIVE))) ((+ 193. (NIL))) ((- 193. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "SURJECTIVE" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 194. (POSITIVE))) ((+ 194. (NEGATIVE))) ((+ 194. (NIL))) ((- 194. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "BIJECTIVE" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 199. (POSITIVE))) ((+ 199. (NEGATIVE))) ((+ 199. (NIL))) ((- 199. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "HOMOMORPH" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 200. (POSITIVE))) ((+ 200. (NEGATIVE))) ((+ 200. (NIL))) ((- 200. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "ISOMORPH" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 204. (POSITIVE))) ((+ 204. (NEGATIVE))) ((+ 204. (NIL))) ((- 204. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "EPIMORPH" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 205. (POSITIVE))) ((+ 205. (NEGATIVE))) ((+ 205. (NIL))) ((- 205. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MAPPING" NIL NIL (UNARY.FUNC SET SET) NIL NIL ((- 206. (POSITIVE))) ((+ 206. (NEGATIVE))) ((+ 206. (NIL))) ((- 206. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "APPLY1" NIL SET (UNARY.FUNC SET) NIL NIL NIL NIL NIL 2. SET (DT*ST-KIND NIL) FUNCTION 14. "APPLY1-EL" NIL ELEMENT (UNARY.FUNC ELEMENT) NIL NIL NIL NIL NIL 2. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY2" NIL SET (BINARY.FUNC SET SET) NIL NIL NIL NIL NIL 3. SET (DT*ST-KIND NIL) FUNCTION 14. "APPLY2-EL" NIL ELEMENT (BINARY.FUNC ELEMENT ELEMENT) NIL NIL NIL NIL NIL 3. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "APPLY2-EL.F" NIL ELEMENT.F (BINARY.FUNC ELEMENT.F ELEMENT.F) NIL NIL NIL NIL NIL 3. ELEMENT.F (DT*ST-KIND NIL) FUNCTION 14. "PREIMAGE" NIL SET (REL ELEMENT) NIL NIL NIL NIL NIL 2. SET (DT*ST-KIND NIL) FUNCTION 14. "POWER" NIL REL (REL NAT) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "PLUS" NIL NAT (NAT NAT) NIL NIL NIL NIL NIL 2. NAT (DT*ST-KIND NIL) FUNCTION 14. "MODULO" NIL SET (EQU.REL-S) NIL NIL NIL NIL NIL 1. SET (DT*ST-KIND NIL) FUNCTION 14. "COMP" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.CLOS" NIL REL (REL) NIL NIL NIL NIL NIL 1. REL (DT*ST-KIND NIL) FUNCTION 14. "UNION-REL" NIL REL (REL REL) NIL NIL NIL NIL NIL 2. REL (DT*ST-KIND NIL) FUNCTION 14. "TRANS.UNION" NIL EQU.REL-S (EQU.REL-S EQU.REL-S) NIL NIL NIL NIL NIL 2. EQU.REL-S (DT*ST-KIND NIL) FUNCTION 14. "CAN.PROJ" NIL UNARY.FUNC (EQU.REL-S) NIL NIL NIL NIL NIL 1. UNARY.FUNC (DT*ST-KIND NIL) FUNCTION 14. "IND.EQU.REL" NIL EQU.REL-S (UNARY.FUNC SET) NIL NIL NIL NIL NIL 2. EQU.REL-S (DT*ST-KIND NIL) FUNCTION 14. "MOD.PHI" NIL UNARY.FUNC (UNARY.FUNC SET) NIL NIL NIL NIL NIL 2. UNARY.FUNC (DT*ST-KIND NIL) FUNCTION 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "SUBSET" NIL NIL (ANY ANY) NIL NIL ((- 225. (POSITIVE))) ((+ 225. (NEGATIVE))) ((+ 225. (NIL))) ((- 225. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 226. (POSITIVE . SYMMETRIC))) ((+ 226. (NEGATIVE . SYMMETRIC))) ((+ 226. (NIL . SYMMETRIC))) ((- 226. (NIL . SYMMETRIC))) NIL NIL (NIL NIL DT*ST-KIND NIL) PREDICATE 5. SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. BINARY.FUNC NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "GROUP" NIL NIL (ANY ANY ANY) NIL NIL ((- 230. (POSITIVE))) ((+ 230. (NEGATIVE))) ((+ 230. (NIL))) ((- 230. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. L.CONGRUENCE-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. EQU.REL-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT.F NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. L.CONGRUENCE-S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 50000.)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 50000.) (SETQ COUNTER1 240.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0.) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 50000.) (MEM-INITIALIZE 50000.))) (SETQ COUNTER1 240.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 50000.) (RPAQ MEM*NEXT.RADR (IPLUS 49431. INCREMENT))) (T (RPAQ MEM*NEXT.RADR 49431.))) (RPAQ MEM*NEXT.VADR 240.) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S EQU.REL-S BINARY.FUNC UNARY.FUNC REL NAT ELEMENT.F ELEMENT FUNCTION SET ANY)) (RPAQQ DT*SORT.NR 91.) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0.) (RPAQQ DT*CONSTANT.COUNTER 0.) (RPAQQ DT*CONSTANT.ALL (182. 201. 202. 203.)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0.) (RPAQQ DT*FUNCTION.ALL (222. 221. 220. 219. 218. 217. 216. 215. 214. 213. 212. 211. 210. 209. 208. 207.)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0.) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES (226.)) (RPAQQ DT*NONEQUALITY.PREDICATES (230. 225. 206. 205. 204. 200. 199. 194. 193. 192. 188. 187. 186. 183. 2. 1.)) (RPAQQ DT*PREDICATE.ALL (230. 226. 225. 206. 205. 204. 200. 199. 194. 193. 192. 188. 187. 186. 183. 2. 1.)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1.) (RPAQQ DT*FALSE.PREDICATE 2.) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (PROGN (REMPROPS (QUOTE DT*PREDICATE.WITH.ATTRIBUTES)) (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (NCONC (QUOTE (DEFINED (226.) SYMMETRIC (226.) REFLEXIVE (226.))) (GETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES))))))
(PROGN (PROGN (REMPROPS (QUOTE CONGRUENCE-S)) (SETPROPLIST (QUOTE CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 90. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (CONGRUENCE-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S CONGRUENCE-S) (L.CONGRUENCE-S CONGRUENCE-S) (EQU.REL-S CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET CONGRUENCE-S) (ANY CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (CONGRUENCE-S) DT*DIRECT.SUPERSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*INVERSE.TRANSITIVE.CLOSURE (CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE R.CONGRUENCE-S)) (SETPROPLIST (QUOTE R.CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 89. DT*DIRECT.SUBSORTS (CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (CONGRUENCE-S R.CONGRUENCE-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S CONGRUENCE-S) (EQU.REL-S R.CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL R.CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET R.CONGRUENCE-S) (ANY R.CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (R.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (EQU.REL-S) DT*INVERSE.TRANSITIVE.CLOSURE (R.CONGRUENCE-S EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE R.CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE L.CONGRUENCE-S)) (SETPROPLIST (QUOTE L.CONGRUENCE-S) (NCONC (QUOTE (DT*SORT.NUMBER 88. DT*DIRECT.SUBSORTS (CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (CONGRUENCE-S L.CONGRUENCE-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S L.CONGRUENCE-S) (BINARY.FUNC) (UNARY.FUNC) (REL L.CONGRUENCE-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET L.CONGRUENCE-S) (ANY L.CONGRUENCE-S)) DT*MINIMAL.SUBSORTS (L.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (EQU.REL-S) DT*INVERSE.TRANSITIVE.CLOSURE (L.CONGRUENCE-S EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE L.CONGRUENCE-S))))) (PROGN (REMPROPS (QUOTE EQU.REL-S)) (SETPROPLIST (QUOTE EQU.REL-S) (NCONC (QUOTE (DT*SORT.NUMBER 87. DT*DIRECT.SUBSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*TRANSITIVE.CLOSURE (R.CONGRUENCE-S L.CONGRUENCE-S CONGRUENCE-S EQU.REL-S) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL EQU.REL-S) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET EQU.REL-S) (ANY EQU.REL-S)) DT*MINIMAL.SUBSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (REL) DT*INVERSE.TRANSITIVE.CLOSURE (EQU.REL-S REL SET ANY))) (GETPROPLIST (QUOTE EQU.REL-S))))) (PROGN (REMPROPS (QUOTE BINARY.FUNC)) (SETPROPLIST (QUOTE BINARY.FUNC) (NCONC (QUOTE (DT*SORT.NUMBER 86. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (BINARY.FUNC) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION BINARY.FUNC) (SET) (ANY BINARY.FUNC)) DT*MINIMAL.SUBSORTS (BINARY.FUNC) DT*DIRECT.SUPERSORTS (FUNCTION) DT*INVERSE.TRANSITIVE.CLOSURE (BINARY.FUNC FUNCTION ANY))) (GETPROPLIST (QUOTE BINARY.FUNC))))) (PROGN (REMPROPS (QUOTE UNARY.FUNC)) (SETPROPLIST (QUOTE UNARY.FUNC) (NCONC (QUOTE (DT*SORT.NUMBER 85. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (UNARY.FUNC) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION UNARY.FUNC) (SET) (ANY UNARY.FUNC)) DT*MINIMAL.SUBSORTS (UNARY.FUNC) DT*DIRECT.SUPERSORTS (FUNCTION) DT*INVERSE.TRANSITIVE.CLOSURE (UNARY.FUNC FUNCTION ANY))) (GETPROPLIST (QUOTE UNARY.FUNC))))) (PROGN (REMPROPS (QUOTE REL)) (SETPROPLIST (QUOTE REL) (NCONC (QUOTE (DT*SORT.NUMBER 84. DT*DIRECT.SUBSORTS (EQU.REL-S) DT*TRANSITIVE.CLOSURE (EQU.REL-S CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S REL) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET REL) (ANY REL)) DT*MINIMAL.SUBSORTS (R.CONGRUENCE-S L.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (REL SET ANY))) (GETPROPLIST (QUOTE REL))))) (PROGN (REMPROPS (QUOTE NAT)) (SETPROPLIST (QUOTE NAT) (NCONC (QUOTE (DT*SORT.NUMBER 83. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (NAT) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT NAT) (ELEMENT.F) (ELEMENT) (FUNCTION) (SET NAT) (ANY NAT)) DT*MINIMAL.SUBSORTS (NAT) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (NAT SET ANY))) (GETPROPLIST (QUOTE NAT))))) (PROGN (REMPROPS (QUOTE ELEMENT.F)) (SETPROPLIST (QUOTE ELEMENT.F) (NCONC (QUOTE (DT*SORT.NUMBER 82. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (ELEMENT.F) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT.F) (FUNCTION) (SET ELEMENT.F) (ANY ELEMENT.F)) DT*MINIMAL.SUBSORTS (ELEMENT.F) DT*DIRECT.SUPERSORTS (ELEMENT) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT.F ELEMENT SET ANY))) (GETPROPLIST (QUOTE ELEMENT.F))))) (PROGN (REMPROPS (QUOTE ELEMENT)) (SETPROPLIST (QUOTE ELEMENT) (NCONC (QUOTE (DT*SORT.NUMBER 81. DT*DIRECT.SUBSORTS (ELEMENT.F) DT*TRANSITIVE.CLOSURE (ELEMENT.F ELEMENT) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL) (NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION) (SET ELEMENT) (ANY ELEMENT)) DT*MINIMAL.SUBSORTS (ELEMENT.F) DT*DIRECT.SUPERSORTS (SET) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT SET ANY))) (GETPROPLIST (QUOTE ELEMENT))))) (PROGN (REMPROPS (QUOTE FUNCTION)) (SETPROPLIST (QUOTE FUNCTION) (NCONC (QUOTE (DT*SORT.NUMBER 80. DT*DIRECT.SUBSORTS (BINARY.FUNC UNARY.FUNC) DT*TRANSITIVE.CLOSURE (BINARY.FUNC UNARY.FUNC FUNCTION) DT*MAX.SUBSORTS ((CONGRUENCE-S) (R.CONGRUENCE-S) (L.CONGRUENCE-S) (EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL) (NAT) (ELEMENT.F) (ELEMENT) (FUNCTION FUNCTION) (SET) (ANY FUNCTION)) DT*MINIMAL.SUBSORTS (BINARY.FUNC UNARY.FUNC) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (FUNCTION ANY))) (GETPROPLIST (QUOTE FUNCTION))))) (PROGN (REMPROPS (QUOTE SET)) (SETPROPLIST (QUOTE SET) (NCONC (QUOTE (DT*SORT.NUMBER 79. DT*DIRECT.SUBSORTS (REL NAT ELEMENT) DT*TRANSITIVE.CLOSURE (REL NAT ELEMENT R.CONGRUENCE-S L.CONGRUENCE-S CONGRUENCE-S ELEMENT.F EQU.REL-S SET) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC) (UNARY.FUNC) (REL REL) (NAT NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION) (SET SET) (ANY SET)) DT*MINIMAL.SUBSORTS (R.CONGRUENCE-S NAT ELEMENT.F L.CONGRUENCE-S) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (SET ANY))) (GETPROPLIST (QUOTE SET))))) (PROGN (REMPROPS (QUOTE ANY)) (SETPROPLIST (QUOTE ANY) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (FUNCTION SET) DT*SORT.NUMBER 1. DT*TRANSITIVE.CLOSURE (FUNCTION SET ELEMENT.F EQU.REL-S CONGRUENCE-S R.CONGRUENCE-S L.CONGRUENCE-S REL NAT ELEMENT BINARY.FUNC UNARY.FUNC ANY) DT*MAX.SUBSORTS ((CONGRUENCE-S CONGRUENCE-S) (R.CONGRUENCE-S R.CONGRUENCE-S) (L.CONGRUENCE-S L.CONGRUENCE-S) (EQU.REL-S EQU.REL-S) (BINARY.FUNC BINARY.FUNC) (UNARY.FUNC UNARY.FUNC) (REL REL) (NAT NAT) (ELEMENT.F ELEMENT.F) (ELEMENT ELEMENT) (FUNCTION FUNCTION) (SET SET) (ANY ANY)) DT*MINIMAL.SUBSORTS (BINARY.FUNC ELEMENT.F R.CONGRUENCE-S L.CONGRUENCE-S NAT UNARY.FUNC) DT*DIRECT.SUPERSORTS NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*LEAST.SUPERSORTS ((ANY ANY)))) (GETPROPLIST (QUOTE ANY))))))
(PROGN (RPAQQ ST*STACK1 (NIL ((X_239 PROGN (DT-VARIABLE.DELETE 239.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_239) ST*SYMBOL.ADDRESSES)))) NIL ((X_231 PROGN (DT-VARIABLE.DELETE 231.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_231) ST*SYMBOL.ADDRESSES))) (X_232 PROGN (DT-VARIABLE.DELETE 232.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_232) ST*SYMBOL.ADDRESSES))) (X_233 PROGN (DT-VARIABLE.DELETE 233.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_233) ST*SYMBOL.ADDRESSES)))) NIL ((X_234 PROGN (DT-VARIABLE.DELETE 234.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_234) ST*SYMBOL.ADDRESSES))) (X_235 PROGN (DT-VARIABLE.DELETE 235.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_235) ST*SYMBOL.ADDRESSES))) (X_236 PROGN (DT-VARIABLE.DELETE 236.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_236) ST*SYMBOL.ADDRESSES)))) NIL ((= PROG1 NIL (DT-PREDICATE.PUTSORT 226. (QUOTE (ANY ANY))) (DT-PREDICATE.PUT.ATTRIBUTES 226. (QUOTE (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))) (= PROG1 NIL (DT-PUTPROP 226. NIL) (DT-PUTPROP 226. NIL)) (X_237 PROGN (DT-VARIABLE.DELETE 237.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_237) ST*SYMBOL.ADDRESSES))) (X_238 PROGN (DT-VARIABLE.DELETE 238.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_238) ST*SYMBOL.ADDRESSES)))) NIL ((GROUP PROGN (DT-PREDICATE.DELETE 230.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE GROUP) ST*SYMBOL.ADDRESSES))) (X_229 PROGN (DT-VARIABLE.DELETE 229.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_229) ST*SYMBOL.ADDRESSES))) (X_228 PROGN (DT-VARIABLE.DELETE 228.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_228) ST*SYMBOL.ADDRESSES))) (X_227 PROGN (DT-VARIABLE.DELETE 227.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_227) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((= PROGN (DT-PREDICATE.DELETE 226.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE =) ST*SYMBOL.ADDRESSES))) (SUBSET PROGN (DT-PREDICATE.DELETE 225.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SUBSET) ST*SYMBOL.ADDRESSES))) (X_224 PROGN (DT-VARIABLE.DELETE 224.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_224) ST*SYMBOL.ADDRESSES))) (X_223 PROGN (DT-VARIABLE.DELETE 223.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_223) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL NIL ((MOD.PHI PROGN (DT-FUNCTION.DELETE 222.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MOD.PHI) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((IND.EQU.REL PROGN (DT-FUNCTION.DELETE 221.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IND.EQU.REL) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((CAN.PROJ PROGN (DT-FUNCTION.DELETE 220.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CAN.PROJ) ST*SYMBOL.ADDRESSES)))) ((TRANS.UNION PROGN (DT-FUNCTION.DELETE 219.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRANS.UNION) ST*SYMBOL.ADDRESSES)))) ((UNION-REL PROGN (DT-FUNCTION.DELETE 218.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UNION-REL) ST*SYMBOL.ADDRESSES)))) ((TRANS.CLOS PROGN (DT-FUNCTION.DELETE 217.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRANS.CLOS) ST*SYMBOL.ADDRESSES)))) ((COMP PROGN (DT-FUNCTION.DELETE 216.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE COMP) ST*SYMBOL.ADDRESSES)))) ((MODULO PROGN (DT-FUNCTION.DELETE 215.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MODULO) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((PLUS PROGN (DT-FUNCTION.DELETE 214.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PLUS) ST*SYMBOL.ADDRESSES)))) ((POWER PROGN (DT-FUNCTION.DELETE 213.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE POWER) ST*SYMBOL.ADDRESSES)))) ((PREIMAGE PROGN (DT-FUNCTION.DELETE 212.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PREIMAGE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((APPLY2-EL.F PROGN (DT-FUNCTION.DELETE 211.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2-EL.F) ST*SYMBOL.ADDRESSES)))) ((APPLY2-EL PROGN (DT-FUNCTION.DELETE 210.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2-EL) ST*SYMBOL.ADDRESSES)))) ((APPLY2 PROGN (DT-FUNCTION.DELETE 209.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY2) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((APPLY1-EL PROGN (DT-FUNCTION.DELETE 208.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY1-EL) ST*SYMBOL.ADDRESSES)))) ((APPLY1 PROGN (DT-FUNCTION.DELETE 207.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLY1) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((MAPPING PROGN (DT-PREDICATE.DELETE 206.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MAPPING) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((EPIMORPH PROGN (DT-PREDICATE.DELETE 205.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EPIMORPH) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((ISOMORPH PROGN (DT-PREDICATE.DELETE 204.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ISOMORPH) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((HOMOMORPH PROGN (DT-PREDICATE.DELETE 200.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE HOMOMORPH) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((BIJECTIVE PROGN (DT-PREDICATE.DELETE 199.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BIJECTIVE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((SURJECTIVE PROGN (DT-PREDICATE.DELETE 194.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SURJECTIVE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((INJECTIVE PROGN (DT-PREDICATE.DELETE 193.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE INJECTIVE) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) ((IN.RELATION PROGN (DT-PREDICATE.DELETE 192.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IN.RELATION) ST*SYMBOL.ADDRESSES)))) ((CONGRUENCE PROGN (DT-PREDICATE.DELETE 188.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((R.CONGRUENCE PROGN (DT-PREDICATE.DELETE 187.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R.CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((L.CONGRUENCE PROGN (DT-PREDICATE.DELETE 186.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE L.CONGRUENCE) ST*SYMBOL.ADDRESSES)))) ((SEMIGROUP PROGN (DT-PREDICATE.DELETE 183.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SEMIGROUP) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((CONN.F.RHO PROGN (DT-CONSTANT.DELETE 182.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONN.F.RHO) ST*SYMBOL.ADDRESSES)))) ((1. PROGN (DT-CONSTANT.DELETE 201.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC 1. ST*SYMBOL.ADDRESSES)))) ((CONN.F PROGN (DT-CONSTANT.DELETE 202.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONN.F) ST*SYMBOL.ADDRESSES)))) ((F PROGN (DT-CONSTANT.DELETE 203.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE F) ST*SYMBOL.ADDRESSES))) (SET DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE SET) (QUOTE (ANY))) (SET PUTPROP (QUOTE SET) NIL)) NIL ((CONGRUENCE-S DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE CONGRUENCE-S) (QUOTE (L.CONGRUENCE-S))) (CONGRUENCE-S PUTPROP (QUOTE CONGRUENCE-S) NIL)) ((CONGRUENCE-S PROGN (DT-SORT.ST.REMOVE (QUOTE CONGRUENCE-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CONGRUENCE-S) ST*SYMBOL.ADDRESSES))) (CONGRUENCE-S REMPROP (QUOTE CONGRUENCE-S) (QUOTE ST*DATA))) ((R.CONGRUENCE-S PROGN (DT-SORT.ST.REMOVE (QUOTE R.CONGRUENCE-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R.CONGRUENCE-S) ST*SYMBOL.ADDRESSES))) (R.CONGRUENCE-S REMPROP (QUOTE R.CONGRUENCE-S) (QUOTE ST*DATA))) ((L.CONGRUENCE-S PROGN (DT-SORT.ST.REMOVE (QUOTE L.CONGRUENCE-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE L.CONGRUENCE-S) ST*SYMBOL.ADDRESSES))) (L.CONGRUENCE-S REMPROP (QUOTE L.CONGRUENCE-S) (QUOTE ST*DATA))) ((EQU.REL-S PROGN (DT-SORT.ST.REMOVE (QUOTE EQU.REL-S)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EQU.REL-S) ST*SYMBOL.ADDRESSES))) (EQU.REL-S REMPROP (QUOTE EQU.REL-S) (QUOTE ST*DATA))) ((BINARY.FUNC PROGN (DT-SORT.ST.REMOVE (QUOTE BINARY.FUNC)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BINARY.FUNC) ST*SYMBOL.ADDRESSES))) (BINARY.FUNC REMPROP (QUOTE BINARY.FUNC) (QUOTE ST*DATA))) ((UNARY.FUNC PROGN (DT-SORT.ST.REMOVE (QUOTE UNARY.FUNC)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UNARY.FUNC) ST*SYMBOL.ADDRESSES))) (UNARY.FUNC REMPROP (QUOTE UNARY.FUNC) (QUOTE ST*DATA))) ((REL PROGN (DT-SORT.ST.REMOVE (QUOTE REL)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE REL) ST*SYMBOL.ADDRESSES))) (REL REMPROP (QUOTE REL) (QUOTE ST*DATA))) ((NAT PROGN (DT-SORT.ST.REMOVE (QUOTE NAT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NAT) ST*SYMBOL.ADDRESSES))) (NAT REMPROP (QUOTE NAT) (QUOTE ST*DATA))) ((ELEMENT.F PROGN (DT-SORT.ST.REMOVE (QUOTE ELEMENT.F)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ELEMENT.F) ST*SYMBOL.ADDRESSES))) (ELEMENT.F REMPROP (QUOTE ELEMENT.F) (QUOTE ST*DATA))) ((ELEMENT PROGN (DT-SORT.ST.REMOVE (QUOTE ELEMENT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ELEMENT) ST*SYMBOL.ADDRESSES))) (ELEMENT REMPROP (QUOTE ELEMENT) (QUOTE ST*DATA))) ((FUNCTION PROGN (DT-SORT.ST.REMOVE (QUOTE FUNCTION)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FUNCTION) ST*SYMBOL.ADDRESSES))) (FUNCTION REMPROP (QUOTE FUNCTION) (QUOTE ST*DATA))) ((SET PROGN (DT-SORT.ST.REMOVE (QUOTE SET)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SET) ST*SYMBOL.ADDRESSES))) (SET REMPROP (QUOTE SET) (QUOTE ST*DATA))) ((FALSE PROGN (DT-PREDICATE.DELETE 2.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1.) (FALSE . 2.) (SET . T) (FUNCTION . T) (ELEMENT . T) (ELEMENT.F . T) (NAT . T) (REL . T) (UNARY.FUNC . T) (BINARY.FUNC . T) (EQU.REL-S . T) (L.CONGRUENCE-S . T) (R.CONGRUENCE-S . T) (CONGRUENCE-S . T) (F . 203.) (CONN.F . 202.) (1. . 201.) (CONN.F.RHO . 182.) (SEMIGROUP . 183.) (L.CONGRUENCE . 186.) (R.CONGRUENCE . 187.) (CONGRUENCE . 188.) (IN.RELATION . 192.) (INJECTIVE . 193.) (SURJECTIVE . 194.) (BIJECTIVE . 199.) (HOMOMORPH . 200.) (ISOMORPH . 204.) (EPIMORPH . 205.) (MAPPING . 206.) (APPLY1 . 207.) (APPLY1-EL . 208.) (APPLY2 . 209.) (APPLY2-EL . 210.) (APPLY2-EL.F . 211.) (PREIMAGE . 212.) (POWER . 213.) (PLUS . 214.) (MODULO . 215.) (COMP . 216.) (TRANS.CLOS . 217.) (UNION-REL . 218.) (TRANS.UNION . 219.) (CAN.PROJ . 220.) (IND.EQU.REL . 221.) (MOD.PHI . 222.) (X_223 . 223.) (X_224 . 224.) (SUBSET . 225.) (= . 226.) (X_227 . 227.) (X_228 . 228.) (X_229 . 229.) (GROUP . 230.) (X_238 . 238.) (X_237 . 237.) (X_236 . 236.) (X_235 . 235.) (X_234 . 234.) (X_233 . 233.) (X_232 . 232.) (X_231 . 231.) (X_239 . 239.))))))))
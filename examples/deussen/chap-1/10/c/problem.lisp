;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((SORT ELEM,MENGE,VERKN : ANY) (ALL U,F : MENGE ALL PHI : VERKN ALL E : ELEM UG (U F PHI E) IMPL G (U PHI E)) (ALL F : MENGE ALL PHI : VERKN ALL E : ELEM G (F PHI E) IMPL HG (F PHI)) (ALL U,F : MENGE ALL PHI : VERKN ALL E : ELEM HG (U PHI) AND ME (U F) AND HG (F PHI) IMPL UHG (U F PHI)))) (QUOTE ((+ 0 NIL NIL) (ALL 4 (ALL 3 (ALL 5 (ALL 6 (IMPL (+ 7 (3 4 5 6) NIL) (+ 8 (3 5 6) NIL)))))) (ALL 9 (ALL 10 (ALL 11 (IMPL (+ 8 (9 10 11) NIL) (+ 12 (9 10) NIL))))) (ALL 14 (ALL 13 (ALL 15 (ALL 16 (IMPL (AND (+ 12 (13 15) NIL) (AND (+ 17 (13 14) NIL) (+ 12 (14 15) NIL))) (+ 18 (13 14 15) NIL)))))))) (QUOTE ((ALL U,F : MENGE ALL PHI : VERKN ALL E : ELEM G (F PHI E) AND ME (U F) AND ENDLICH (U) AND UG (U F PHI E) IMPL UHG (U F PHI)))) (QUOTE ((ALL 20 (ALL 19 (ALL 21 (ALL 22 (IMPL (AND (+ 8 (20 21 22) NIL) (AND (+ 17 (19 20) NIL) (AND (+ 23 (19) NIL) (+ 7 (19 20 21 22) NIL)))) (+ 18 (19 20 21) NIL)))))))) (QUOTE ("Edit:     Axioms and Theorems edited: 24-OCT,1991 19:02 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(9804 9809 9814 9819 9824 9839 9854 9859 9864 9869 9874 9889 9894 9899 9904 9919 9934
          9939 9944 9949 9954 9969 9984 9999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC)))
          ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 VERKN NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEM NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "UG" NIL NIL (ANY ANY ANY ANY) NIL NIL ((- 7 (POSITIVE)))
          ((+ 7 (NEGATIVE))) ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
          "G" NIL NIL (ANY ANY ANY) NIL NIL ((- 8 (POSITIVE))) ((+ 8 (NEGATIVE))) ((+ 8 (NIL)))
          ((- 8 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 VERKN NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEM NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "HG" NIL NIL (ANY ANY) NIL NIL ((- 12 (POSITIVE))) ((+ 12 (NEGATIVE)))
          ((+ 12 (NIL))) ((- 12 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 VERKN NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEM NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "ME" NIL NIL (ANY ANY) NIL NIL ((- 17 (POSITIVE))) ((+ 17 (NEGATIVE)))
          ((+ 17 (NIL))) ((- 17 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "UHG" NIL NIL
          (ANY ANY ANY) NIL NIL ((- 18 (POSITIVE))) ((+ 18 (NEGATIVE))) ((+ 18 (NIL)))
          ((- 18 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 VERKN NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEM NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "ENDLICH" NIL NIL (ANY) NIL NIL ((- 23 (POSITIVE))) ((+ 23 (NEGATIVE)))
          ((+ 23 (NIL))) ((- 23 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE))
       (INCREMENT (- MEM*SIZE 10000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 10000)
             (SETQ COUNTER1 24)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 10000)
                 (MEM-INITIALIZE 10000))
               (SETQ COUNTER1 24)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9789 INCREMENT) 9789))
      (SETQ MEM*NEXT.VADR 24
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (VERKN MENGE ELEM ANY))) (SETQ DT*SORT.NR (QUOTE 5)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*ELEMENT.PREDICATE (QUOTE NIL)) (SETQ DT*OMEGA.CONSTANT (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE NIL)) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE NIL)) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (23 18 17 12 8 7 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (23 18 17 12 8 7 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE VERKN) (QUOTE DT*SORT.NUMBER)) (QUOTE 4)) (SETF (GET (QUOTE VERKN) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE VERKN) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (VERKN))) (SETF (GET (QUOTE VERKN) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((VERKN VERKN) (MENGE) (ELEM) (ANY VERKN)))) (SETF (GET (QUOTE VERKN) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (VERKN))) (SETF (GET (QUOTE VERKN) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE VERKN) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY VERKN)))) (PROGN (SETF (GET (QUOTE MENGE) (QUOTE DT*SORT.NUMBER)) (QUOTE 3)) (SETF (GET (QUOTE MENGE) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE MENGE) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (MENGE))) (SETF (GET (QUOTE MENGE) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((VERKN) (MENGE MENGE) (ELEM) (ANY MENGE)))) (SETF (GET (QUOTE MENGE) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (MENGE))) (SETF (GET (QUOTE MENGE) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE MENGE) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY MENGE)))) (PROGN (SETF (GET (QUOTE ELEM) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ELEM) (QUOTE DT*SORT.NUMBER)) (QUOTE 2)) (SETF (GET (QUOTE ELEM) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ELEM))) (SETF (GET (QUOTE ELEM) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((VERKN) (MENGE) (ELEM ELEM) (ANY ELEM)))) (SETF (GET (QUOTE ELEM) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ELEM))) (SETF (GET (QUOTE ELEM) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ELEM) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ELEM)))) (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (VERKN MENGE ELEM))) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY VERKN MENGE ELEM))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((VERKN VERKN) (MENGE MENGE) (ELEM ELEM) (ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (MENGE ELEM))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
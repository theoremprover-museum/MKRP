;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((SORT ELEM,VERKN,MENGE,ABB : ANY) (TYPE APPLYA (ABB ELEM) : ELEM) (TYPE APPLYV (VERKN ELEM ELEM) : ELEM) (ALL U,F : MENGE ALL PHI : VERKN ALL E : ELEM G (F PHI E) AND ME (U F) AND EL (E U) AND UHG (U F PHI) IMPL EINS (E PHI U)) (ALL U,F : MENGE ALL PHI : VERKN ALL CHI : ABB ALL C,Z,E : ELEM G (F PHI E) AND ME (U F) AND BIJEKTIV (CHI U U) AND EL (Z U) AND EL (C U) AND APPLYA (CHI Z) = APPLYV (PHI Z C) IMPL (EX X : ELEM APPLYV (PHI X C) = Z AND EL (X U))) (ALL U,V : MENGE ALL X : ELEM ME (U V) AND EL (X U) IMPL EL (X V)) (ALL F : MENGE ALL PHI : VERKN ALL X,Y,E : ELEM G (F PHI E) AND EL (X F) AND APPLYV (PHI Y X) = X IMPL Y = E))) (QUOTE ((+ 0 NIL NIL) (+ 0 NIL NIL) (+ 0 NIL NIL) (ALL 6 (ALL 5 (ALL 7 (ALL 8 (IMPL (AND (+ 9 (6 7 8) NIL) (AND (+ 10 (5 6) NIL) (AND (+ 11 (8 5) NIL) (+ 12 (5 6 7) NIL)))) (+ 13 (8 7 5) NIL)))))) (ALL 15 (ALL 14 (ALL 16 (ALL 17 (ALL 20 (ALL 19 (ALL 18 (IMPL (AND (+ 9 (15 16 20) NIL) (AND (+ 10 (14 15) NIL) (AND (+ 21 (17 14 14) NIL) (AND (+ 11 (19 14) NIL) (AND (+ 11 (18 14) NIL) (+ 2 ((3 17 19) (4 16 19 18)) NIL)))))) (EX 22 (AND (+ 2 ((4 16 22 18) 19) NIL) (+ 11 (22 14) NIL))))))))))) (ALL 24 (ALL 23 (ALL 25 (IMPL (AND (+ 10 (23 24) NIL) (+ 11 (25 23) NIL)) (+ 11 (25 24) NIL))))) (ALL 26 (ALL 27 (ALL 30 (ALL 29 (ALL 28 (IMPL (AND (+ 9 (26 27 30) NIL) (AND (+ 11 (28 26) NIL) (+ 2 ((4 27 29 28) 28) NIL))) (+ 2 (29 30) NIL))))))))) (QUOTE ((ALL U,F : MENGE ALL PHI : VERKN ALL Z,E : ELEM G (F PHI E) AND ME (U F) AND ENDLICH (U) IMPL UHG (U F PHI) AND EL (Z U) AND ALL C : ELEM EL (C U) IMPL EX CHI : ABB BIJEKTIV (CHI U U) AND ALL X : ELEM EL (X U) IMPL APPLYA (CHI X) = APPLYV (PHI X C) IMPL EINS (E PHI U)))) (QUOTE ((ALL 32 (ALL 31 (ALL 33 (ALL 35 (ALL 34 (IMPL (AND (+ 9 (32 33 35) NIL) (AND (+ 10 (31 32) NIL) (+ 36 (31) NIL))) (AND (+ 12 (31 32 33) NIL) (AND (+ 11 (34 31) NIL) (ALL 37 (IMPL (+ 11 (37 31) NIL) (EX 38 (AND (+ 21 (38 31 31) NIL) (ALL 39 (IMPL (+ 11 (39 31) NIL) (IMPL (+ 2 ((3 38 39) (4 33 39 37)) NIL) (+ 13 (35 33 31) NIL)))))))))))))))))) (QUOTE ("Edit:     Axioms and Theorems edited: 24-OCT,1991 19:03 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(9686 9691 9696 9711 9716 9721 9726 9731 9736 9741 9746 9751 9756 9761 9766 9771 9776
          9781 9796 9801 9806 9811 9816 9821 9826 9831 9846 9861 9876 9891 9906 9911 9916 9921
          9926 9940 9954 9969 9984 9999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC)))
          ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 14 "APPLYA" NIL ELEM (ABB ELEM) NIL NIL NIL NIL
          NIL 2 ELEM (DT*ST-KIND NIL) FUNCTION 14 "APPLYV" NIL ELEM (VERKN ELEM ELEM) NIL NIL
          NIL NIL NIL 3 ELEM (DT*ST-KIND NIL) FUNCTION 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 VERKN NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEM NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "G" NIL NIL (ANY ANY ANY) NIL NIL ((- 9 (POSITIVE))) ((+ 9 (NEGATIVE)))
          ((+ 9 (NIL))) ((- 9 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "ME" NIL NIL
          (ANY ANY) NIL NIL ((- 10 (POSITIVE))) ((+ 10 (NEGATIVE))) ((+ 10 (NIL)))
          ((- 10 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "EL" NIL NIL (ANY ANY) NIL NIL
          ((- 11 (POSITIVE))) ((+ 11 (NEGATIVE))) ((+ 11 (NIL))) ((- 11 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "UHG" NIL NIL (ANY ANY ANY) NIL NIL ((- 12 (POSITIVE)))
          ((+ 12 (NEGATIVE))) ((+ 12 (NIL))) ((- 12 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          15 "EINS" NIL NIL (ANY ANY ANY) NIL NIL ((- 13 (POSITIVE))) ((+ 13 (NEGATIVE)))
          ((+ 13 (NIL))) ((- 13 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 VERKN NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ABB NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ELEM NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEM NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEM NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "BIJEKTIV" NIL NIL (ANY ANY ANY) NIL NIL ((- 21 (POSITIVE)))
          ((+ 21 (NEGATIVE))) ((+ 21 (NIL))) ((- 21 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          5 ELEM NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEM NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 VERKN NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEM NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ELEM NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEM NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 VERKN NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEM NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ELEM NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "ENDLICH" NIL NIL
          (ANY) NIL NIL ((- 36 (POSITIVE))) ((+ 36 (NEGATIVE))) ((+ 36 (NIL))) ((- 36 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ELEM NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ABB NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEM NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 10000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 10000)
             (SETQ COUNTER1 40)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 10000)
                 (MEM-INITIALIZE 10000))
               (SETQ COUNTER1 40)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9681 INCREMENT) 9681))
      (SETQ MEM*NEXT.VADR 40
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ABB MENGE VERKN ELEM ANY))) (SETQ DT*SORT.NR (QUOTE 6)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*ELEMENT.PREDICATE (QUOTE NIL)) (SETQ DT*OMEGA.CONSTANT (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE NIL)) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE (4 3))) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (36 21 13 12 11 10 9 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (36 21 13 12 11 10 9 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ABB) (QUOTE DT*SORT.NUMBER)) (QUOTE 5)) (SETF (GET (QUOTE ABB) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ABB) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ABB))) (SETF (GET (QUOTE ABB) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ABB ABB) (MENGE) (VERKN) (ELEM) (ANY ABB)))) (SETF (GET (QUOTE ABB) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ABB))) (SETF (GET (QUOTE ABB) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ABB) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ABB)))) (PROGN (SETF (GET (QUOTE MENGE) (QUOTE DT*SORT.NUMBER)) (QUOTE 4)) (SETF (GET (QUOTE MENGE) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE MENGE) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (MENGE))) (SETF (GET (QUOTE MENGE) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ABB) (MENGE MENGE) (VERKN) (ELEM) (ANY MENGE)))) (SETF (GET (QUOTE MENGE) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (MENGE))) (SETF (GET (QUOTE MENGE) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE MENGE) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY MENGE)))) (PROGN (SETF (GET (QUOTE VERKN) (QUOTE DT*SORT.NUMBER)) (QUOTE 3)) (SETF (GET (QUOTE VERKN) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE VERKN) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (VERKN))) (SETF (GET (QUOTE VERKN) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ABB) (MENGE) (VERKN VERKN) (ELEM) (ANY VERKN)))) (SETF (GET (QUOTE VERKN) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (VERKN))) (SETF (GET (QUOTE VERKN) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE VERKN) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY VERKN)))) (PROGN (SETF (GET (QUOTE ELEM) (QUOTE DT*SORT.NUMBER)) (QUOTE 2)) (SETF (GET (QUOTE ELEM) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ELEM) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ELEM))) (SETF (GET (QUOTE ELEM) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ABB) (MENGE) (VERKN) (ELEM ELEM) (ANY ELEM)))) (SETF (GET (QUOTE ELEM) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ELEM))) (SETF (GET (QUOTE ELEM) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ELEM) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ELEM)))) (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (ABB MENGE VERKN ELEM))) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY ABB MENGE VERKN ELEM))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ABB ABB) (MENGE MENGE) (VERKN VERKN) (ELEM ELEM) (ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (MENGE VERKN ELEM))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
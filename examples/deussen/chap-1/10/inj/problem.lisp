;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((SORT ELEMENT,MENGE,VERKN,ABB : ANY) (TYPE APPLYA (ABB ELEMENT) : ELEMENT) (TYPE APPLYV (VERKN ELEMENT ELEMENT) : ELEMENT) (TYPE INVERS (ELEMENT VERKN) : ELEMENT) (TYPE C : ELEMENT) (ALL M : MENGE ALL CHI : ABB ALL X,XSTRICH,Y : ELEMENT EL (X M) AND EL (Y M) AND EL (XSTRICH M) AND APPLYA (CHI X) = Y AND APPLYA (CHI XSTRICH) = Y IMPL X = XSTRICH IMPL INJEKTIV (CHI M M)) (ALL X,Y,Z,U,E : ELEMENT ALL F : MENGE ALL PHI : VERKN EL (X F) AND EL (Y F) AND EL (U F) AND G (F PHI E) IMPL (APPLYV (PHI X U) = Y IMPL APPLYV (PHI Y INVERS (U PHI)) = X)) (ALL U,F : MENGE ALL PHI : VERKN UHG (U F PHI) IMPL ME (U F)) (ALL M1,M2 : MENGE ALL X : ELEMENT EL (X M1) AND ME (M1 M2) IMPL EL (X M2)))) (QUOTE ((+ 0 NIL NIL) (+ 0 NIL NIL) (+ 0 NIL NIL) (+ 0 NIL NIL) (+ 0 NIL NIL) (ALL 7 (ALL 8 (ALL 11 (ALL 10 (ALL 9 (IMPL (AND (+ 12 (9 7) NIL) (AND (+ 12 (11 7) NIL) (AND (+ 12 (10 7) NIL) (AND (+ 2 ((3 8 9) 11) NIL) (+ 2 ((3 8 10) 11) NIL))))) (IMPL (+ 2 (9 10) NIL) (+ 13 (8 7 7) NIL)))))))) (ALL 18 (ALL 17 (ALL 16 (ALL 15 (ALL 14 (ALL 19 (ALL 20 (IMPL (AND (+ 12 (14 19) NIL) (AND (+ 12 (15 19) NIL) (AND (+ 12 (17 19) NIL) (+ 21 (19 20 18) NIL)))) (IMPL (+ 2 ((4 20 14 17) 15) NIL) (+ 2 ((4 20 15 (5 17 20)) 14) NIL)))))))))) (ALL 23 (ALL 22 (ALL 24 (IMPL (+ 25 (22 23 24) NIL) (+ 26 (22 23) NIL))))) (ALL 28 (ALL 27 (ALL 29 (IMPL (AND (+ 12 (29 27) NIL) (+ 26 (27 28) NIL)) (+ 12 (29 28) NIL))))))) (QUOTE ((ALL E : ELEMENT ALL U,F : MENGE ALL PHI : VERKN ALL CHI : ABB (ALL V : ELEMENT APPLYV (PHI V C) = APPLYA (CHI V)) AND UHG (U F PHI) AND G (F PHI E) AND EL (C U) IMPL INJEKTIV (CHI U U)))) (QUOTE ((ALL 30 (ALL 32 (ALL 31 (ALL 33 (ALL 34 (IMPL (AND (ALL 35 (+ 2 ((4 33 35 6) (3 34 35)) NIL)) (AND (+ 25 (31 32 33) NIL) (AND (+ 21 (32 33 30) NIL) (+ 12 (6 31) NIL)))) (+ 13 (34 31 31) NIL))))))))) (QUOTE ("Edit:     Axioms and Theorems edited: 24-OCT,1991 19:07 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(9717 9722 9727 9732 9737 9742 9747 9752 9757 9772 9787 9792 9797 9802 9817 9822 9827
          9832 9837 9842 9847 9852 9867 9882 9887 9892 9897 9902 9907 9912 9926 9940 9954 9969
          9984 9999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC)))
          ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 14 "APPLYA" NIL ELEMENT (ABB ELEMENT) NIL NIL NIL
          NIL NIL 2 ELEMENT (DT*ST-KIND NIL) FUNCTION 14 "APPLYV" NIL ELEMENT
          (VERKN ELEMENT ELEMENT) NIL NIL NIL NIL NIL 3 ELEMENT (DT*ST-KIND NIL) FUNCTION 14
          "INVERS" NIL ELEMENT (ELEMENT VERKN) NIL NIL NIL NIL NIL 2 ELEMENT (DT*ST-KIND NIL)
          FUNCTION 5 ELEMENT "C" (DT*ST-KIND NIL) CONSTANT 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ABB NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "EL" NIL NIL (ANY ANY) NIL NIL
          ((- 12 (POSITIVE))) ((+ 12 (NEGATIVE))) ((+ 12 (NIL))) ((- 12 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "INJEKTIV" NIL NIL (ANY ANY ANY) NIL NIL
          ((- 13 (POSITIVE))) ((+ 13 (NEGATIVE))) ((+ 13 (NIL))) ((- 13 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5
          ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 VERKN NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "G" NIL NIL (ANY ANY ANY) NIL NIL
          ((- 21 (POSITIVE))) ((+ 21 (NEGATIVE))) ((+ 21 (NIL))) ((- 21 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5
          MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 VERKN NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "UHG" NIL NIL (ANY ANY ANY) NIL NIL
          ((- 25 (POSITIVE))) ((+ 25 (NEGATIVE))) ((+ 25 (NIL))) ((- 25 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "ME" NIL NIL (ANY ANY) NIL NIL ((- 26 (POSITIVE)))
          ((+ 26 (NEGATIVE))) ((+ 26 (NIL))) ((- 26 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          5 MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 MENGE NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 VERKN NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ABB NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 10000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 10000)
             (SETQ COUNTER1 36)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 10000)
                 (MEM-INITIALIZE 10000))
               (SETQ COUNTER1 36)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9712 INCREMENT) 9712))
      (SETQ MEM*NEXT.VADR 36
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ABB VERKN MENGE ELEMENT ANY))) (SETQ DT*SORT.NR (QUOTE 6)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*ELEMENT.PREDICATE (QUOTE NIL)) (SETQ DT*OMEGA.CONSTANT (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (6))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE (5 4 3))) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (26 25 21 13 12 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (26 25 21 13 12 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ABB) (QUOTE DT*SORT.NUMBER)) (QUOTE 5)) (SETF (GET (QUOTE ABB) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ABB) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ABB))) (SETF (GET (QUOTE ABB) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ABB ABB) (VERKN) (MENGE) (ELEMENT) (ANY ABB)))) (SETF (GET (QUOTE ABB) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ABB))) (SETF (GET (QUOTE ABB) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ABB) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ABB)))) (PROGN (SETF (GET (QUOTE VERKN) (QUOTE DT*SORT.NUMBER)) (QUOTE 4)) (SETF (GET (QUOTE VERKN) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE VERKN) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (VERKN))) (SETF (GET (QUOTE VERKN) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ABB) (VERKN VERKN) (MENGE) (ELEMENT) (ANY VERKN)))) (SETF (GET (QUOTE VERKN) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (VERKN))) (SETF (GET (QUOTE VERKN) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE VERKN) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY VERKN)))) (PROGN (SETF (GET (QUOTE MENGE) (QUOTE DT*SORT.NUMBER)) (QUOTE 3)) (SETF (GET (QUOTE MENGE) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE MENGE) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (MENGE))) (SETF (GET (QUOTE MENGE) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ABB) (VERKN) (MENGE MENGE) (ELEMENT) (ANY MENGE)))) (SETF (GET (QUOTE MENGE) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (MENGE))) (SETF (GET (QUOTE MENGE) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE MENGE) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY MENGE)))) (PROGN (SETF (GET (QUOTE ELEMENT) (QUOTE DT*SORT.NUMBER)) (QUOTE 2)) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ELEMENT))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ABB) (VERKN) (MENGE) (ELEMENT ELEMENT) (ANY ELEMENT)))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ELEMENT))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ELEMENT)))) (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (ABB VERKN MENGE ELEMENT))) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY ABB VERKN MENGE ELEMENT))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ABB ABB) (VERKN VERKN) (MENGE MENGE) (ELEMENT ELEMENT) (ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (VERKN MENGE ELEMENT))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
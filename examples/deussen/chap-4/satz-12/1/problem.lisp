;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((* ************************************************) (* DEFINITIONEN DER MENGENLEHRE) (SORT SET : ANY) (SORT ELEMENT : SET) (TYPE EL (ELEMENT SET)) (* DEFINITION 1.1 : TEILMENGE) (TYPE SUBSET (SET SET)) (* DEFINITION 1.3 : KARTESISCHES PRODUKT) (TYPE CARTES (SET SET) : SET) (TYPE PAIR (ELEMENT ELEMENT) : ELEMENT) (* DEFINITION 1.7 : FUNKTION) (SORT SYMB.OF.FUNCTION : ANY) (TYPE MAPPING (SYMB.OF.FUNCTION SET SET)) (TYPE APPLY (SYMB.OF.FUNCTION ELEMENT) : ELEMENT) (* SORTENPROBLEM!!!!!!!) (TYPE MAPPING.S (SYMB.OF.FUNCTION SET SET)) (TYPE SURJECTIVE.S (SYMB.OF.FUNCTION SET SET)) (TYPE S : SET) (SORT EL.OF.S : ELEMENT) (* ************************************************************************) (* DEFINITIONEN VON RELATIONEN AUF EINER FESTEN MENGE S) (SORT REL : SET) (* DEFINITION 2.8 : AEQUIVALENZRELATION) (SORT EQU.RELATION : REL) (* DEFINITION 2.13 : DIE VON EINER ABBILDUNG PHI VON S NACH U INDUZIERTE AEQUIVALENZRELATION) (TYPE IND.EQU (SYMB.OF.FUNCTION SET) : EQU.RELATION) (* DEFINITION 2.15) (TYPE MODULO (EQU.RELATION) : SET) (* DEFINITION 2.16 KANONISCHE PROJEKTION S AUF SRHO) (TYPE CAN.PROJ (EQU.RELATION) : SYMB.OF.FUNCTION) (TYPE PREIMAGE (REL EL.OF.S) : ELEMENT) (ALL RHO : EQU.RELATION MAPPING.S (CAN.PROJ (RHO) S MODULO (RHO))) (* SATZ 4-11-1) (ALL U,V : SET ALL PHI1,PHI2 : SYMB.OF.FUNCTION MAPPING.S (PHI1 S U) AND MAPPING.S (PHI2 S V) IMPL (ALL GR.PHI : SYMB.OF.FUNCTION MAPPING (GR.PHI U V) AND (ALL T : EL.OF.S APPLY (GR.PHI APPLY (PHI1 T)) = APPLY (PHI2 T))) IMPL SUBSET (IND.EQU (PHI1 U) IND.EQU (PHI2 V))) (TYPE CAN.PROJ (EQU.RELATION) : SYMB.OF.FUNCTION) (* DIREKTE FOLGERUNG AUS DER DEFINITION DERSURJEKTIVITAET) (ALL PHI : SYMB.OF.FUNCTION ALL U,V : SET SURJECTIVE (PHI U V) IMPL MAPPING (PHI U V)) (* SATZ 4-12-1-1) (ALL RHO : EQU.RELATION IND.EQU (CAN.PROJ (RHO) MODULO (RHO)) = RHO))) (QUOTE (COMMENT COMMENT (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) COMMENT (+ 0 NIL) COMMENT (+ 0 NIL) (+ 0 NIL) COMMENT (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) COMMENT (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) COMMENT COMMENT (+ 0 NIL) COMMENT (+ 0 NIL) COMMENT (+ 0 NIL) COMMENT (+ 0 NIL) COMMENT (+ 0 NIL) (+ 0 NIL) (ALL 28 (+ 21 ((26 28) 23 (25 28)) NIL)) COMMENT (ALL 30 (ALL 29 (ALL 32 (ALL 31 (IMPL (AND (+ 21 (31 23 29) NIL) (+ 21 (32 23 30) NIL)) (IMPL (ALL 33 (AND (+ 15 (33 29 30) NIL) (ALL 34 (+ 35 ((20 33 (20 31 34)) (20 32 34)) NIL)))) (+ 18 ((24 31 29) (24 32 30)) NIL))))))) (+ 0 NIL) COMMENT (ALL 36 (ALL 38 (ALL 37 (IMPL (+ 39 (36 37 38) NIL) (+ 15 (36 37 38) NIL))))) COMMENT (ALL 40 (+ 35 ((24 (26 40) (25 40)) 40) NIL)))) (QUOTE ((ALL RHO1,RHO2 : EQU.RELATION ALL GR.PHI : SYMB.OF.FUNCTION SURJECTIVE (GR.PHI MODULO (RHO1) MODULO (RHO2)) AND (ALL A : EL.OF.S APPLY (GR.PHI APPLY (CAN.PROJ (RHO1) A)) = APPLY (CAN.PROJ (RHO2) A)) IMPL SUBSET (RHO1 RHO2)))) (QUOTE ((ALL 42 (ALL 41 (ALL 43 (IMPL (AND (+ 39 (43 (25 41) (25 42)) NIL) (ALL 44 (+ 35 ((20 43 (20 (26 41) 44)) (20 (26 42) 44)) NIL))) (+ 18 (41 42) NIL))))))) (QUOTE ("Edit:     Axioms and Theorems edited: 27-SEP,1989 15:56 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(99691 99696 99701 99706 99711 99726 99731 99736 99741 99756 99761 99766 99771 99776
          99781 99786 99791 99805 99819 99833 99847 99852 99867 99882 99896 99969 99954 99939
          99925 99911 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
          ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
          ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 99984 99999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "EL" NIL NIL (ELEMENT SET) NIL NIL
          ((- 19 (POSITIVE))) ((+ 19 (NEGATIVE))) ((+ 19 (NIL))) ((- 19 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "SUBSET" NIL NIL (SET SET) NIL NIL ((- 18 (POSITIVE)))
          ((+ 18 (NEGATIVE))) ((+ 18 (NIL))) ((- 18 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          14 "CARTES" NIL SET (SET SET) NIL NIL NIL NIL NIL 2 SET (DT*ST-KIND NIL) FUNCTION 14
          "PAIR" NIL ELEMENT (ELEMENT ELEMENT) NIL NIL NIL NIL NIL 2 ELEMENT (DT*ST-KIND NIL)
          FUNCTION 15 "MAPPING" NIL NIL (SYMB.OF.FUNCTION SET SET) NIL NIL ((- 15 (POSITIVE)))
          ((+ 15 (NEGATIVE))) ((+ 15 (NIL))) ((- 15 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          14 "APPLY" NIL ELEMENT (SYMB.OF.FUNCTION ELEMENT) NIL NIL NIL NIL NIL 2 ELEMENT
          (DT*ST-KIND NIL) FUNCTION 15 "MAPPING.S" NIL NIL (SYMB.OF.FUNCTION SET SET) NIL NIL
          ((- 21 (POSITIVE))) ((+ 21 (NEGATIVE))) ((+ 21 (NIL))) ((- 21 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "SURJECTIVE.S" NIL NIL (SYMB.OF.FUNCTION SET SET) NIL
          NIL ((- 22 (POSITIVE))) ((+ 22 (NEGATIVE))) ((+ 22 (NIL))) ((- 22 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 SET "S" (DT*ST-KIND NIL) CONSTANT 14 "IND.EQU" NIL
          EQU.RELATION (SYMB.OF.FUNCTION SET) NIL NIL NIL NIL NIL 2 EQU.RELATION
          (DT*ST-KIND NIL) FUNCTION 14 "MODULO" NIL SET (EQU.RELATION) NIL NIL NIL NIL NIL 1
          SET (DT*ST-KIND NIL) FUNCTION 14 "CAN.PROJ" NIL SYMB.OF.FUNCTION (EQU.RELATION) NIL
          NIL NIL NIL NIL 1 SYMB.OF.FUNCTION (DT*ST-KIND NIL) FUNCTION 14 "PREIMAGE" NIL
          ELEMENT (REL EL.OF.S) NIL NIL NIL NIL NIL 2 ELEMENT (DT*ST-KIND NIL) FUNCTION 5
          EQU.RELATION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 SYMB.OF.FUNCTION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5
          SYMB.OF.FUNCTION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SYMB.OF.FUNCTION
          NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 35 (POSITIVE . SYMMETRIC)))
          ((+ 35 (NEGATIVE . SYMMETRIC))) ((+ 35 (NIL . SYMMETRIC))) ((- 35 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 SYMB.OF.FUNCTION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "SURJECTIVE" NIL NIL
          (ANY ANY ANY) NIL NIL ((- 39 (POSITIVE))) ((+ 39 (NEGATIVE))) ((+ 39 (NIL)))
          ((- 39 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 EQU.RELATION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EQU.RELATION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EQU.RELATION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SYMB.OF.FUNCTION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 100000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 100000)
             (SETQ COUNTER1 45)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 100000)
                 (MEM-INITIALIZE 100000))
               (SETQ COUNTER1 45)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 100000) (+ 99686 INCREMENT) 99686))
      (SETQ MEM*NEXT.VADR 45
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (EQU.RELATION REL EL.OF.S SYMB.OF.FUNCTION ELEMENT SET ANY))) (SETQ DT*SORT.NR (QUOTE 14)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (23))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE (27 26 25 24 20 16 17))) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (35))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (39 22 21 15 18 19 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (39 35 22 21 15 18 19 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE EQU.RELATION) (QUOTE DT*SORT.NUMBER)) (QUOTE 13)) (SETF (GET (QUOTE EQU.RELATION) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE EQU.RELATION) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (EQU.RELATION))) (SETF (GET (QUOTE EQU.RELATION) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((EQU.RELATION EQU.RELATION) (REL EQU.RELATION) (EL.OF.S) (SYMB.OF.FUNCTION) (ELEMENT) (SET EQU.RELATION) (ANY EQU.RELATION)))) (SETF (GET (QUOTE EQU.RELATION) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (EQU.RELATION))) (SETF (GET (QUOTE EQU.RELATION) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (REL))) (SETF (GET (QUOTE EQU.RELATION) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY SET REL EQU.RELATION)))) (PROGN (SETF (GET (QUOTE REL) (QUOTE DT*SORT.NUMBER)) (QUOTE 12)) (SETF (GET (QUOTE REL) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (EQU.RELATION))) (SETF (GET (QUOTE REL) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (REL EQU.RELATION))) (SETF (GET (QUOTE REL) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((EQU.RELATION EQU.RELATION) (REL REL) (EL.OF.S) (SYMB.OF.FUNCTION) (ELEMENT) (SET REL) (ANY REL)))) (SETF (GET (QUOTE REL) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (REL))) (SETF (GET (QUOTE REL) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (SET))) (SETF (GET (QUOTE REL) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY SET REL)))) (PROGN (SETF (GET (QUOTE EL.OF.S) (QUOTE DT*SORT.NUMBER)) (QUOTE 11)) (SETF (GET (QUOTE EL.OF.S) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE EL.OF.S) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (EL.OF.S))) (SETF (GET (QUOTE EL.OF.S) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((EQU.RELATION) (REL) (EL.OF.S EL.OF.S) (SYMB.OF.FUNCTION) (ELEMENT EL.OF.S) (SET EL.OF.S) (ANY EL.OF.S)))) (SETF (GET (QUOTE EL.OF.S) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (EL.OF.S))) (SETF (GET (QUOTE EL.OF.S) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ELEMENT))) (SETF (GET (QUOTE EL.OF.S) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY SET ELEMENT EL.OF.S)))) (PROGN (SETF (GET (QUOTE SYMB.OF.FUNCTION) (QUOTE DT*SORT.NUMBER)) (QUOTE 10)) (SETF (GET (QUOTE SYMB.OF.FUNCTION) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE SYMB.OF.FUNCTION) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (SYMB.OF.FUNCTION))) (SETF (GET (QUOTE SYMB.OF.FUNCTION) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((EQU.RELATION) (REL) (EL.OF.S) (SYMB.OF.FUNCTION SYMB.OF.FUNCTION) (ELEMENT) (SET) (ANY SYMB.OF.FUNCTION)))) (SETF (GET (QUOTE SYMB.OF.FUNCTION) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (SYMB.OF.FUNCTION))) (SETF (GET (QUOTE SYMB.OF.FUNCTION) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE SYMB.OF.FUNCTION) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY SYMB.OF.FUNCTION)))) (PROGN (SETF (GET (QUOTE ELEMENT) (QUOTE DT*SORT.NUMBER)) (QUOTE 9)) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (EL.OF.S))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ELEMENT EL.OF.S))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((EQU.RELATION) (REL) (EL.OF.S EL.OF.S) (SYMB.OF.FUNCTION) (ELEMENT ELEMENT) (SET ELEMENT) (ANY ELEMENT)))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (EL.OF.S))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (SET))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY SET ELEMENT)))) (PROGN (SETF (GET (QUOTE SET) (QUOTE DT*SORT.NUMBER)) (QUOTE 8)) (SETF (GET (QUOTE SET) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (REL ELEMENT))) (SETF (GET (QUOTE SET) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (EQU.RELATION SET REL ELEMENT EL.OF.S))) (SETF (GET (QUOTE SET) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((EQU.RELATION EQU.RELATION) (REL REL) (EL.OF.S EL.OF.S) (SYMB.OF.FUNCTION) (ELEMENT ELEMENT) (SET SET) (ANY SET)))) (SETF (GET (QUOTE SET) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (REL EL.OF.S))) (SETF (GET (QUOTE SET) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE SET) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY SET)))) (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (SYMB.OF.FUNCTION SET))) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (EQU.RELATION ANY SYMB.OF.FUNCTION SET REL ELEMENT EL.OF.S))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((EQU.RELATION EQU.RELATION) (REL REL) (EL.OF.S EL.OF.S) (SYMB.OF.FUNCTION SYMB.OF.FUNCTION) (ELEMENT ELEMENT) (SET SET) (ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (SYMB.OF.FUNCTION REL EL.OF.S))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*LEAST.SUPERSORTS)) (QUOTE ((ANY ANY)))))) ))
;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(COND ((FMT-LOAD "17-NOV-1987 19:36"
  NIL
  (((* ************************************************) COMMENT COMMENT)
 ((* DEFINITIONEN DER MENGENLEHRE) COMMENT COMMENT) ((SORT SET:ANY) (+ 0 NIL) TYPE)
 ((SORT ELEMENT:SET) (+ 0 NIL) TYPE) ((TYPE EL (ELEMENT SET)) (+ 0 NIL) TYPE)
 ((* DEFINITION 1.3: KARTESISCHES PRODUKT) COMMENT COMMENT)
 ((TYPE CARTES (SET SET) :SET) (+ 0 NIL) TYPE)
 ((TYPE PAIR (ELEMENT ELEMENT) :ELEMENT) (+ 0 NIL) TYPE) ((* SORTENPROBLEM) COMMENT COMMENT)
 ((SORT EL.OF.S:ELEMENT) (+ 0 NIL) TYPE) ((TYPE S:SET) (+ 0 NIL) TYPE)
 ((ALL A,B:EL.OF.S EL (PAIR (A B) CARTES (S S))) (ALL 7 (ALL 6 (+ 2 ((4 6 7) (3 5 5)) NIL)))
  QUANTIFICATION)
 ((* DEFINITION 1.7: FUNKTION) COMMENT COMMENT) ((SORT SYMB.OF.FUNCTION:ANY) (+ 0 NIL) TYPE)
 ((TYPE MAPPING (SYMB.OF.FUNCTION SET SET)) (+ 0 NIL) TYPE)
 ((TYPE APPLY (SYMB.OF.FUNCTION ELEMENT) :ELEMENT) (+ 0 NIL) TYPE)
 ((ALL F:SYMB.OF.FUNCTION ALL X,Y:SET MAPPING (F X Y) EQV
   (ALL A:ELEMENT EL (A X) IMPL EL (APPLY (F A) Y)))
  (ALL 10
   (ALL 12
    (ALL 11
     (EQV (+ 8 (10 11 12) (KIND (EQV T 180)))
      (ALL 13
       (IMPL (+ 2 (13 11) (KIND (EQV NIL 180))) (+ 2 ((9 10 13) 12) (KIND (EQV NIL 180)))))))))
  QUANTIFICATION)
 ((* ************************************************************************) COMMENT COMMENT)
 ((* DEFINITIONEN VON RELATIONEN AUF EINER FESTEN MENGE S) COMMENT COMMENT)
 ((SORT REL:SET) (+ 0 NIL) TYPE) ((* DEFINITION 2.5: REFLEXIV) COMMENT COMMENT)
 ((TYPE REFLEXIV (REL)) (+ 0 NIL) TYPE) ((* LEMMA 2,5) COMMENT COMMENT)
 ((ALL RHO:REL (ALL A:EL.OF.S EL (PAIR (A A) RHO)) IMPL REFLEXIV (RHO))
  (ALL 15 (IMPL (ALL 16 (+ 2 ((4 16 16) 15) NIL)) (+ 14 (15) NIL))) QUANTIFICATION)
 ((* DEFINITION 2.6: SYMMETRISCH) COMMENT COMMENT) ((TYPE SYMMETRISCH (REL)) (+ 0 NIL) TYPE)
 ((* LEMMA 2,6) COMMENT COMMENT)
 ((ALL RHO:REL (ALL A,B:EL.OF.S EL (PAIR (A B) RHO) IMPL EL (PAIR (B A) RHO)) IMPL SYMMETRISCH
   (RHO))
  (ALL 18
   (IMPL (ALL 20 (ALL 19 (IMPL (+ 2 ((4 19 20) 18) NIL) (+ 2 ((4 20 19) 18) NIL))))
    (+ 17 (18) NIL)))
  QUANTIFICATION)
 ((* DEFINITION 2.7: TRANSITIV) COMMENT COMMENT) ((TYPE TRANSITIV (REL)) (+ 0 NIL) TYPE)
 ((* LEMMA 2,7) COMMENT COMMENT)
 ((ALL RHO:REL
   (ALL A,B,C:EL.OF.S EL (PAIR (A B) RHO) AND EL (PAIR (B C) RHO) IMPL EL (PAIR (A C) RHO))
   IMPL TRANSITIV (RHO))
  (ALL 22
   (IMPL
    (ALL 25
     (ALL 24
      (ALL 23
       (IMPL
        (AND (+ 2 ((4 23 24) 22) NIL)
             (+ 2 ((4 24 25) 22) NIL))
        (+ 2 ((4 23 25) 22) NIL)))))
    (+ 21 (22) NIL)))
  QUANTIFICATION)
 ((* DEFINITION 2.8: AEQUIVALENZRELATION) COMMENT COMMENT)
 ((TYPE EQU.REL (REL)) (+ 0 NIL) TYPE)
 ((ALL RHO:REL REFLEXIV (RHO) AND SYMMETRISCH (RHO) AND TRANSITIV (RHO) IMPL EQU.REL (RHO))
  (ALL 27
   (IMPL
    (AND (+ 14 (27) NIL)
         (AND (+ 17 (27) NIL)
              (+ 21 (27) NIL)))
    (+ 26 (27) NIL)))
  QUANTIFICATION)
 ((SORT EQU.RELATION:REL) (+ 0 NIL) TYPE)
 ((* DEFINITION 2.13: DIE VON EINER ABBILDUNG PHI VON S NACH U INDUZIERTE AEQUIVALENZRELATION)
  COMMENT COMMENT)
 ((TYPE IND.EQU (SYMB.OF.FUNCTION SET) :REL) (+ 0 NIL) TYPE)
 ((ALL PHI:SYMB.OF.FUNCTION ALL U:SET MAPPING (PHI S U) IMPL
   (ALL A,B:EL.OF.S EL (PAIR (A B) IND.EQU (PHI U)) EQV APPLY (PHI A) = APPLY (PHI B)))
  (ALL 29
   (ALL 30
    (IMPL (+ 8 (29 5 30) NIL)
     (ALL 32
      (ALL 31
       (EQV (+ 2 ((4 31 32) (28 29 30)) (KIND (EQV T 400)))
        (+ 33 ((9 29 31) (9 29 32)) (KIND (EQV NIL 400)))))))))
  QUANTIFICATION)
 ((ALL PHI:SYMB.OF.FUNCTION ALL U:SET NOT MAPPING (PHI S U) IMPL IND.EQU (PHI U) = CARTES (S S)
   )
  (ALL 34 (ALL 35 (IMPL (NOT (+ 8 (34 5 35) NIL)) (+ 33 ((28 34 35) (3 5 5)) NIL))))
  QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(119698 119703 119718 119723 119728 119733 119738 119752 119757 119772 119777 119782
          119787 119792 119807 119812 119817 119822 119837 119842 119847 119862 119867 119872
          119877 119882 119896 119911 119916 119921 119926 119940 119954 119969 119984
          119999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "EL" NIL NIL (ELEMENT SET) NIL NIL
          ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 14 "CARTES" NIL SET (SET SET) NIL NIL NIL NIL NIL 2 SET
          (DT*ST-KIND NIL) FUNCTION 14 "PAIR" NIL ELEMENT (ELEMENT ELEMENT) NIL NIL NIL NIL
          NIL 2 ELEMENT (DT*ST-KIND NIL) FUNCTION 5 SET "S" (DT*ST-KIND NIL) CONSTANT 5
          EL.OF.S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "MAPPING" NIL NIL
          (SYMB.OF.FUNCTION SET SET) NIL NIL ((- 8 (POSITIVE))) ((+ 8 (NEGATIVE)))
          ((+ 8 (NIL))) ((- 8 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14 "APPLY" NIL
          ELEMENT (SYMB.OF.FUNCTION ELEMENT) NIL NIL NIL NIL NIL 2 ELEMENT (DT*ST-KIND NIL)
          FUNCTION 5 SYMB.OF.FUNCTION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "REFLEXIV" NIL
          NIL (REL) NIL NIL ((- 14 (POSITIVE))) ((+ 14 (NEGATIVE))) ((+ 14 (NIL)))
          ((- 14 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 REL NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "SYMMETRISCH" NIL NIL (REL) NIL NIL
          ((- 17 (POSITIVE))) ((+ 17 (NEGATIVE))) ((+ 17 (NIL))) ((- 17 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5
          EL.OF.S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "TRANSITIV" NIL NIL (REL) NIL NIL
          ((- 21 (POSITIVE))) ((+ 21 (NEGATIVE))) ((+ 21 (NIL))) ((- 21 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5
          EL.OF.S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "EQU.REL" NIL NIL (REL) NIL NIL
          ((- 26 (POSITIVE))) ((+ 26 (NEGATIVE))) ((+ 26 (NIL))) ((- 26 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14
          "IND.EQU" NIL REL (SYMB.OF.FUNCTION SET) NIL NIL NIL NIL NIL 2 REL (DT*ST-KIND NIL)
          FUNCTION 5 SYMB.OF.FUNCTION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 33 (POSITIVE . SYMMETRIC)))
          ((+ 33 (NEGATIVE . SYMMETRIC))) ((+ 33 (NIL . SYMMETRIC))) ((- 33 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 SYMB.OF.FUNCTION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE))
       (INCREMENT (- MEM*SIZE 120000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 120000)
             (SETQ COUNTER1 36)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 120000)
                 (MEM-INITIALIZE 120000))
               (SETQ COUNTER1 36)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (COND ((> MEM*SIZE 120000) (SETQ MEM*NEXT.RADR (+ 119693 INCREMENT)))
            (T (SETQ MEM*NEXT.RADR 119693)))
      (SETQ MEM*NEXT.VADR 36)
      (SETQ MEM*REST (1+ (- MEM*NEXT.RADR MEM*NEXT.VADR)))
      (SETQ MEM*FIRST.REUSABLE.VADR NIL)
      (SETQ MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL '(EQU.RELATION REL SYMB.OF.FUNCTION EL.OF.S ELEMENT SET ANY))
       (SETQ DT*SORT.NR '8)
       (SETQ DT*SORT.PROPERTIES
              '(DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE
                DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS
                DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))
       (SETQ DT*SORT.COMMON.COMPUTE.FLAG 'NIL)
       (SETQ DT*VARIABLE.COUNTER '0)
       (SETQ DT*CONSTANT.COUNTER '0)
       (SETQ DT*CONSTANT.ALL '(5))
       (SETQ DT*ABBREVIATIONS 'NIL)
       (SETQ DT*FUNCTION.COUNTER '0)
       (SETQ DT*FUNCTION.ALL '(28 9 4 3))
       (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES '(ASSOCIATIVE))
       (SETQ DT*FUNCTION.ACTUAL.THEORIES 'NIL)
       (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES 'NIL)
       (SETQ DT*FUNCTION.COMPONENTS
              '(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST
                SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
       (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES '(SYMMETRIC DEFINED REFLEXIVE))
       (SETQ DT*PREDICATE.COUNTER '0)
       (SETQ DT*EQUALITY.SYMBOLS '("=" ":=" "=:" ":=:"))
       (SETQ DT*EQUALITY.PREDICATES '(33))
       (SETQ DT*NONEQUALITY.PREDICATES '(26 21 17 14 8 2 1 0))
       (SETQ DT*PREDICATE.ALL '(33 26 21 17 14 8 2 1 0))
       (SETQ DT*PREDICATE.WITH.ATTRIBUTES 'NIL)
       (SETQ DT*PREDICATE.COMPONENTS
              '(PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES
                REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES
                -TOTHERSIDES))
       (SETQ DT*TRUE.PREDICATE '0)
       (SETQ DT*FALSE.PREDICATE '1)
       (SETQ DT*UNI.CREATES.VARIABLES 'NIL)
       (SETQ DT*SIGN.MINUS.SYMBOLS '(- --))
       (SETQ DT*SIGN.PLUS.SYMBOLS '(+ ++))
       (SETQ DT*SYMBOL.KINDS '(CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET 'EQU.RELATION 'DT*SORT.NUMBER) '7)
              (SETF (GET 'EQU.RELATION 'DT*DIRECT.SUBSORTS) 'NIL)
              (SETF (GET 'EQU.RELATION 'DT*TRANSITIVE.CLOSURE) '(EQU.RELATION))
              (SETF (GET 'EQU.RELATION 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (REL EQU.RELATION) (SYMB.OF.FUNCTION)
                       (EL.OF.S) (ELEMENT) (SET EQU.RELATION) (ANY EQU.RELATION)))
              (SETF (GET 'EQU.RELATION 'DT*MINIMAL.SUBSORTS) '(EQU.RELATION))
              (SETF (GET 'EQU.RELATION 'DT*DIRECT.SUPERSORTS) '(REL))
              (SETF (GET 'EQU.RELATION 'DT*INVERSE.TRANSITIVE.CLOSURE)
                     '(ANY SET REL EQU.RELATION)))
       (PROGN (SETF (GET 'REL 'DT*SORT.NUMBER) '6)
              (SETF (GET 'REL 'DT*DIRECT.SUBSORTS) '(EQU.RELATION))
              (SETF (GET 'REL 'DT*TRANSITIVE.CLOSURE) '(REL EQU.RELATION))
              (SETF (GET 'REL 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (REL REL) (SYMB.OF.FUNCTION) (EL.OF.S)
                       (ELEMENT) (SET REL) (ANY REL)))
              (SETF (GET 'REL 'DT*MINIMAL.SUBSORTS) '(REL))
              (SETF (GET 'REL 'DT*DIRECT.SUPERSORTS) '(SET))
              (SETF (GET 'REL 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET REL)))
       (PROGN (SETF (GET 'SYMB.OF.FUNCTION 'DT*SORT.NUMBER) '5)
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*DIRECT.SUBSORTS) 'NIL)
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*TRANSITIVE.CLOSURE) '(SYMB.OF.FUNCTION))
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION) (REL) (SYMB.OF.FUNCTION SYMB.OF.FUNCTION) (EL.OF.S)
                       (ELEMENT) (SET) (ANY SYMB.OF.FUNCTION)))
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*MINIMAL.SUBSORTS) '(SYMB.OF.FUNCTION))
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*DIRECT.SUPERSORTS) '(ANY))
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*INVERSE.TRANSITIVE.CLOSURE)
                     '(ANY SYMB.OF.FUNCTION)))
       (PROGN (SETF (GET 'EL.OF.S 'DT*SORT.NUMBER) '4)
              (SETF (GET 'EL.OF.S 'DT*DIRECT.SUBSORTS) 'NIL)
              (SETF (GET 'EL.OF.S 'DT*TRANSITIVE.CLOSURE) '(EL.OF.S))
              (SETF (GET 'EL.OF.S 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION) (REL) (SYMB.OF.FUNCTION) (EL.OF.S EL.OF.S)
                       (ELEMENT EL.OF.S) (SET EL.OF.S) (ANY EL.OF.S)))
              (SETF (GET 'EL.OF.S 'DT*MINIMAL.SUBSORTS) '(EL.OF.S))
              (SETF (GET 'EL.OF.S 'DT*DIRECT.SUPERSORTS) '(ELEMENT))
              (SETF (GET 'EL.OF.S 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET ELEMENT EL.OF.S)))
       (PROGN (SETF (GET 'ELEMENT 'DT*SORT.NUMBER) '3)
              (SETF (GET 'ELEMENT 'DT*DIRECT.SUBSORTS) '(EL.OF.S))
              (SETF (GET 'ELEMENT 'DT*TRANSITIVE.CLOSURE) '(ELEMENT EL.OF.S))
              (SETF (GET 'ELEMENT 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION) (REL) (SYMB.OF.FUNCTION) (EL.OF.S EL.OF.S)
                       (ELEMENT ELEMENT) (SET ELEMENT) (ANY ELEMENT)))
              (SETF (GET 'ELEMENT 'DT*MINIMAL.SUBSORTS) '(EL.OF.S))
              (SETF (GET 'ELEMENT 'DT*DIRECT.SUPERSORTS) '(SET))
              (SETF (GET 'ELEMENT 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET ELEMENT)))
       (PROGN (SETF (GET 'SET 'DT*SORT.NUMBER) '2)
              (SETF (GET 'SET 'DT*DIRECT.SUBSORTS) '(REL ELEMENT))
              (SETF (GET 'SET 'DT*TRANSITIVE.CLOSURE) '(EQU.RELATION SET REL ELEMENT EL.OF.S))
              (SETF (GET 'SET 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (REL REL) (SYMB.OF.FUNCTION)
                       (EL.OF.S EL.OF.S) (ELEMENT ELEMENT) (SET SET) (ANY SET)))
              (SETF (GET 'SET 'DT*MINIMAL.SUBSORTS) '(REL EL.OF.S))
              (SETF (GET 'SET 'DT*DIRECT.SUPERSORTS) '(ANY))
              (SETF (GET 'SET 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET)))
       (PROGN (SETF (GET 'ANY 'DT*SORT.NUMBER) '1)
              (SETF (GET 'ANY 'DT*DIRECT.SUBSORTS) '(SYMB.OF.FUNCTION SET))
              (SETF (GET 'ANY 'DT*TRANSITIVE.CLOSURE)
                     '(EQU.RELATION ANY SYMB.OF.FUNCTION SET REL ELEMENT EL.OF.S))
              (SETF (GET 'ANY 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (REL REL)
                       (SYMB.OF.FUNCTION SYMB.OF.FUNCTION) (EL.OF.S EL.OF.S) (ELEMENT ELEMENT)
                       (SET SET) (ANY ANY)))
              (SETF (GET 'ANY 'DT*MINIMAL.SUBSORTS) '(SYMB.OF.FUNCTION REL EL.OF.S))
              (SETF (GET 'ANY 'DT*DIRECT.SUPERSORTS) 'NIL)
              (SETF (GET 'ANY 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY)))) (PROGN (SETQ ST*STACK1 ST*STACK1)
       (SETQ ST*SYMBOL.ADDRESSES
              '(NIL (ANY . T) (TRUE . 0) (FALSE . 1) (SET . T) (ELEMENT . T) (EL . 2)
                (CARTES . 3) (PAIR . 4) (EL.OF.S . T) (S . 5) (X_6 . 6) (X_7 . 7)
                (SYMB.OF.FUNCTION . T) (MAPPING . 8) (APPLY . 9) (X_10 . 10) (X_11 . 11)
                (X_12 . 12) (X_13 . 13) (REL . T) (REFLEXIV . 14) (X_15 . 15) (X_16 . 16)
                (SYMMETRISCH . 17) (X_18 . 18) (X_19 . 19) (X_20 . 20) (TRANSITIV . 21)
                (X_22 . 22) (X_23 . 23) (X_24 . 24) (X_25 . 25) (EQU.REL . 26) (X_27 . 27)
                (EQU.RELATION . T) (IND.EQU . 28) (X_29 . 29) (X_30 . 30) (X_31 . 31)
                (X_32 . 32) (= . 33) (X_34 . 34) (X_35 . 35))))))))
;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((* ************************************************) (* DEFINITIONEN DER MENGENLEHRE) (SORT SET : ANY) (SORT ELEMENT : SET) (TYPE EL (ELEMENT SET)) (* DEFINITION 1.3 : KARTESISCHES PRODUKT) (TYPE CARTES (SET SET) : SET) (TYPE PAIR (ELEMENT ELEMENT) : ELEMENT) (* SORTENPROBLEM) (SORT EL.OF.S : ELEMENT) (TYPE S : SET) (ALL A,B : EL.OF.S EL (PAIR (A B) CARTES (S S))) (* DEFINITION 1.7 : FUNKTION) (SORT SYMB.OF.FUNCTION : ANY) (TYPE MAPPING (SYMB.OF.FUNCTION SET SET)) (TYPE APPLY (SYMB.OF.FUNCTION ELEMENT) : ELEMENT) (ALL F : SYMB.OF.FUNCTION ALL X,Y : SET MAPPING (F X Y) EQV (ALL A : ELEMENT EL (A X) IMPL EL (APPLY (F A) Y))) (* ************************************************************************) (* DEFINITIONEN VON RELATIONEN AUF EINER FESTEN MENGE S) (SORT REL : SET) (* DEFINITION 2.5 : REFLEXIV) (TYPE REFLEXIV (REL)) (* LEMMA 2,5) (ALL RHO : REL (ALL A : EL.OF.S EL (PAIR (A A) RHO)) IMPL REFLEXIV (RHO)) (* DEFINITION 2.6 : SYMMETRISCH) (TYPE SYMMETRISCH (REL)) (* LEMMA 2,6) (ALL RHO : REL (ALL A,B : EL.OF.S EL (PAIR (A B) RHO) IMPL EL (PAIR (B A) RHO)) IMPL SYMMETRISCH (RHO)) (* DEFINITION 2.7 : TRANSITIV) (TYPE TRANSITIV (REL)) (* LEMMA 2,7) (ALL RHO : REL (ALL A,B,C : EL.OF.S EL (PAIR (A B) RHO) AND EL (PAIR (B C) RHO) IMPL EL (PAIR (A C) RHO)) IMPL TRANSITIV (RHO)) (* DEFINITION 2.8 : AEQUIVALENZRELATION) (TYPE EQU.REL (REL)) (ALL RHO : REL REFLEXIV (RHO) AND SYMMETRISCH (RHO) AND TRANSITIV (RHO) IMPL EQU.REL (RHO)) (SORT EQU.RELATION : REL) (* DEFINITION 2.13 : DIE VON EINER ABBILDUNG PHI VON S NACH U INDUZIERTE AEQUIVALENZRELATION) (TYPE IND.EQU (SYMB.OF.FUNCTION SET) : REL) (ALL PHI : SYMB.OF.FUNCTION ALL U : SET MAPPING (PHI S U) IMPL (ALL A,B : EL.OF.S EL (PAIR (A B) IND.EQU (PHI U)) EQV APPLY (PHI A) = APPLY (PHI B))) (ALL PHI : SYMB.OF.FUNCTION ALL U : SET NOT MAPPING (PHI S U) IMPL IND.EQU (PHI U) = CARTES (S S)))) (QUOTE (COMMENT COMMENT (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) COMMENT (+ 0 NIL) (+ 0 NIL) COMMENT (+ 0 NIL) (+ 0 NIL) (ALL 7 (ALL 6 (+ 2 ((4 6 7) (3 5 5)) NIL))) COMMENT (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) (ALL 10 (ALL 12 (ALL 11 (EQV (+ 8 (10 11 12) (KIND (EQV T 180))) (ALL 13 (IMPL (+ 2 (13 11) (KIND (EQV NIL 180))) (+ 2 ((9 10 13) 12) (KIND (EQV NIL 180))))))))) COMMENT COMMENT (+ 0 NIL) COMMENT (+ 0 NIL) COMMENT (ALL 15 (IMPL (ALL 16 (+ 2 ((4 16 16) 15) NIL)) (+ 14 (15) NIL))) COMMENT (+ 0 NIL) COMMENT (ALL 18 (IMPL (ALL 20 (ALL 19 (IMPL (+ 2 ((4 19 20) 18) NIL) (+ 2 ((4 20 19) 18) NIL)))) (+ 17 (18) NIL))) COMMENT (+ 0 NIL) COMMENT (ALL 22 (IMPL (ALL 25 (ALL 24 (ALL 23 (IMPL (AND (+ 2 ((4 23 24) 22) NIL) (+ 2 ((4 24 25) 22) NIL)) (+ 2 ((4 23 25) 22) NIL))))) (+ 21 (22) NIL))) COMMENT (+ 0 NIL) (ALL 27 (IMPL (AND (+ 14 (27) NIL) (AND (+ 17 (27) NIL) (+ 21 (27) NIL))) (+ 26 (27) NIL))) (+ 0 NIL) COMMENT (+ 0 NIL) (ALL 29 (ALL 30 (IMPL (+ 8 (29 5 30) NIL) (ALL 32 (ALL 31 (EQV (+ 2 ((4 31 32) (28 29 30)) (KIND (EQV T 400))) (+ 33 ((9 29 31) (9 29 32)) (KIND (EQV NIL 400))))))))) (ALL 34 (ALL 35 (IMPL (NOT (+ 8 (34 5 35) NIL)) (+ 33 ((28 34 35) (3 5 5)) NIL)))))) (QUOTE ((ALL PHI : SYMB.OF.FUNCTION ALL U : SET NOT MAPPING (PHI S U) IMPL EQU.REL (IND.EQU (PHI U))))) (QUOTE ((ALL 36 (ALL 37 (IMPL (NOT (+ 8 (36 5 37) NIL)) (+ 26 ((28 36 37)) NIL)))))) (QUOTE ("Edit:     Axioms and Theorems edited: 13-DEC,1989 18:44 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(299688 299693 299698 299703 299718 299723 299728 299733 299738 299752 299757 299772
          299777 299782 299787 299792 299807 299812 299817 299822 299837 299842 299847 299862
          299867 299872 299877 299882 299896 299911 299916 299921 299926 299940 299954 299969
          299984 299999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "EL" NIL NIL (ELEMENT SET) NIL NIL
          ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 14 "CARTES" NIL SET (SET SET) NIL NIL NIL NIL NIL 2 SET
          (DT*ST-KIND NIL) FUNCTION 14 "PAIR" NIL ELEMENT (ELEMENT ELEMENT) NIL NIL NIL NIL
          NIL 2 ELEMENT (DT*ST-KIND NIL) FUNCTION 5 SET "S" (DT*ST-KIND NIL) CONSTANT 5
          EL.OF.S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "MAPPING" NIL NIL
          (SYMB.OF.FUNCTION SET SET) NIL NIL ((- 8 (POSITIVE))) ((+ 8 (NEGATIVE)))
          ((+ 8 (NIL))) ((- 8 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14 "APPLY" NIL
          ELEMENT (SYMB.OF.FUNCTION ELEMENT) NIL NIL NIL NIL NIL 2 ELEMENT (DT*ST-KIND NIL)
          FUNCTION 5 SYMB.OF.FUNCTION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "REFLEXIV" NIL
          NIL (REL) NIL NIL ((- 14 (POSITIVE))) ((+ 14 (NEGATIVE))) ((+ 14 (NIL)))
          ((- 14 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 REL NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "SYMMETRISCH" NIL NIL (REL) NIL NIL
          ((- 17 (POSITIVE))) ((+ 17 (NEGATIVE))) ((+ 17 (NIL))) ((- 17 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5
          EL.OF.S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "TRANSITIV" NIL NIL (REL) NIL NIL
          ((- 21 (POSITIVE))) ((+ 21 (NEGATIVE))) ((+ 21 (NIL))) ((- 21 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5
          EL.OF.S NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "EQU.REL" NIL NIL (REL) NIL NIL
          ((- 26 (POSITIVE))) ((+ 26 (NEGATIVE))) ((+ 26 (NIL))) ((- 26 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14
          "IND.EQU" NIL REL (SYMB.OF.FUNCTION SET) NIL NIL NIL NIL NIL 2 REL (DT*ST-KIND NIL)
          FUNCTION 5 SYMB.OF.FUNCTION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 33 (POSITIVE . SYMMETRIC)))
          ((+ 33 (NEGATIVE . SYMMETRIC))) ((+ 33 (NIL . SYMMETRIC))) ((- 33 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 SYMB.OF.FUNCTION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 SYMB.OF.FUNCTION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 300000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 300000)
             (SETQ COUNTER1 38)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 300000)
                 (MEM-INITIALIZE 300000))
               (SETQ COUNTER1 38)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 300000) (+ 299683 INCREMENT) 299683))
      (SETQ MEM*NEXT.VADR 38
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (EQU.RELATION REL SYMB.OF.FUNCTION EL.OF.S ELEMENT SET ANY))) (SETQ DT*SORT.NR (QUOTE 8)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (5))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE (28 9 4 3))) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (33))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (26 21 17 14 8 2 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (33 26 21 17 14 8 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE EQU.RELATION) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE EQU.RELATION) (QUOTE DT*SORT.NUMBER)) (QUOTE 7)) (SETF (GET (QUOTE EQU.RELATION) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (EQU.RELATION))) (SETF (GET (QUOTE EQU.RELATION) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((EQU.RELATION EQU.RELATION) (REL EQU.RELATION) (SYMB.OF.FUNCTION) (EL.OF.S) (ELEMENT) (SET EQU.RELATION) (ANY EQU.RELATION)))) (SETF (GET (QUOTE EQU.RELATION) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (EQU.RELATION))) (SETF (GET (QUOTE EQU.RELATION) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (REL))) (SETF (GET (QUOTE EQU.RELATION) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY SET REL EQU.RELATION)))) (PROGN (SETF (GET (QUOTE REL) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (EQU.RELATION))) (SETF (GET (QUOTE REL) (QUOTE DT*SORT.NUMBER)) (QUOTE 6)) (SETF (GET (QUOTE REL) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (REL EQU.RELATION))) (SETF (GET (QUOTE REL) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((EQU.RELATION EQU.RELATION) (REL REL) (SYMB.OF.FUNCTION) (EL.OF.S) (ELEMENT) (SET REL) (ANY REL)))) (SETF (GET (QUOTE REL) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (REL))) (SETF (GET (QUOTE REL) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (SET))) (SETF (GET (QUOTE REL) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY SET REL)))) (PROGN (SETF (GET (QUOTE SYMB.OF.FUNCTION) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE SYMB.OF.FUNCTION) (QUOTE DT*SORT.NUMBER)) (QUOTE 5)) (SETF (GET (QUOTE SYMB.OF.FUNCTION) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (SYMB.OF.FUNCTION))) (SETF (GET (QUOTE SYMB.OF.FUNCTION) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((EQU.RELATION) (REL) (SYMB.OF.FUNCTION SYMB.OF.FUNCTION) (EL.OF.S) (ELEMENT) (SET) (ANY SYMB.OF.FUNCTION)))) (SETF (GET (QUOTE SYMB.OF.FUNCTION) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (SYMB.OF.FUNCTION))) (SETF (GET (QUOTE SYMB.OF.FUNCTION) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE SYMB.OF.FUNCTION) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY SYMB.OF.FUNCTION)))) (PROGN (SETF (GET (QUOTE EL.OF.S) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE EL.OF.S) (QUOTE DT*SORT.NUMBER)) (QUOTE 4)) (SETF (GET (QUOTE EL.OF.S) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (EL.OF.S))) (SETF (GET (QUOTE EL.OF.S) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((EQU.RELATION) (REL) (SYMB.OF.FUNCTION) (EL.OF.S EL.OF.S) (ELEMENT EL.OF.S) (SET EL.OF.S) (ANY EL.OF.S)))) (SETF (GET (QUOTE EL.OF.S) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (EL.OF.S))) (SETF (GET (QUOTE EL.OF.S) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ELEMENT))) (SETF (GET (QUOTE EL.OF.S) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY SET ELEMENT EL.OF.S)))) (PROGN (SETF (GET (QUOTE ELEMENT) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (EL.OF.S))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*SORT.NUMBER)) (QUOTE 3)) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ELEMENT EL.OF.S))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((EQU.RELATION) (REL) (SYMB.OF.FUNCTION) (EL.OF.S EL.OF.S) (ELEMENT ELEMENT) (SET ELEMENT) (ANY ELEMENT)))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (EL.OF.S))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (SET))) (SETF (GET (QUOTE ELEMENT) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY SET ELEMENT)))) (PROGN (SETF (GET (QUOTE SET) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (REL ELEMENT))) (SETF (GET (QUOTE SET) (QUOTE DT*SORT.NUMBER)) (QUOTE 2)) (SETF (GET (QUOTE SET) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (EQU.RELATION SET REL ELEMENT EL.OF.S))) (SETF (GET (QUOTE SET) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((EQU.RELATION EQU.RELATION) (REL REL) (SYMB.OF.FUNCTION) (EL.OF.S EL.OF.S) (ELEMENT ELEMENT) (SET SET) (ANY SET)))) (SETF (GET (QUOTE SET) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (REL EL.OF.S))) (SETF (GET (QUOTE SET) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE SET) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY SET)))) (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (SYMB.OF.FUNCTION SET))) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (EQU.RELATION ANY SYMB.OF.FUNCTION SET REL ELEMENT EL.OF.S))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((EQU.RELATION EQU.RELATION) (REL REL) (SYMB.OF.FUNCTION SYMB.OF.FUNCTION) (EL.OF.S EL.OF.S) (ELEMENT ELEMENT) (SET SET) (ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (SYMB.OF.FUNCTION REL EL.OF.S))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
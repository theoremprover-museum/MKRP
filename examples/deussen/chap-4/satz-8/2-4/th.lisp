;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(COND ((FMT-LOAD "17-NOV-1987 19:02"
  NIL
  (((ALL RHO,SIGMA:EQU.RELATION TRANS.UNION (RHO SIGMA) = GEN.EQU.REL (UNIONZWEI (RHO SIGMA)))
  (ALL 20 (ALL 19 (+ 13 ((16 19 20) (11 (5 19 20))) NIL))) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(119787 119792 119797 119802 119816 119821 119826 119841 119846 119860 119874 119888
          119902 119907 119912 119926 119940 119954 119969 119984 119999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "EL" NIL NIL (ELEMENT SET) NIL NIL
          ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 14 "CARTES" NIL SET (SET SET) NIL NIL NIL NIL NIL 2 SET
          (DT*ST-KIND NIL) FUNCTION 14 "PAIR" NIL ELEMENT (ELEMENT ELEMENT) NIL NIL NIL NIL
          NIL 2 ELEMENT (DT*ST-KIND NIL) FUNCTION 14 "UNIONZWEI" NIL REL (REL REL) NIL NIL NIL
          NIL NIL 2 REL (DT*ST-KIND NIL) FUNCTION 5 SET "S" (DT*ST-KIND NIL) CONSTANT 5 REL
          "IDENTITY" (DT*ST-KIND NIL) CONSTANT 14 "CONVERSE" NIL REL (REL) NIL NIL NIL NIL NIL
          1 REL (DT*ST-KIND NIL) FUNCTION 14 "REF.SYM.CLOS" NIL REL (REL) NIL NIL NIL NIL NIL
          1 REL (DT*ST-KIND NIL) FUNCTION 14 "TRANS.CLOS" NIL REL (REL) NIL NIL NIL NIL NIL 1
          REL (DT*ST-KIND NIL) FUNCTION 14 "GEN.EQU.REL" NIL REL (REL) NIL NIL NIL NIL NIL 1
          REL (DT*ST-KIND NIL) FUNCTION 5 REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15
          "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE) NIL
          ((- 13 (POSITIVE . SYMMETRIC))) ((+ 13 (NEGATIVE . SYMMETRIC)))
          ((+ 13 (NIL . SYMMETRIC))) ((- 13 (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL)
          PREDICATE 5 REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 REL NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 "TRANS.UNION" NIL ANY (ANY ANY) NIL NIL
          NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 5 EQU.RELATION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EQU.RELATION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EQU.RELATION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EQU.RELATION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 120000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 120000)
             (SETQ COUNTER1 21)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 120000)
                 (MEM-INITIALIZE 120000))
               (SETQ COUNTER1 21)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (COND ((> MEM*SIZE 120000) (SETQ MEM*NEXT.RADR (+ 119782 INCREMENT)))
            (T (SETQ MEM*NEXT.RADR 119782)))
      (SETQ MEM*NEXT.VADR 21)
      (SETQ MEM*REST (1+ (- MEM*NEXT.RADR MEM*NEXT.VADR)))
      (SETQ MEM*FIRST.REUSABLE.VADR NIL)
      (SETQ MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL '(EQU.RELATION EL.OF.S REL ELEMENT SET ANY))
       (SETQ DT*SORT.NR '7)
       (SETQ DT*SORT.PROPERTIES
              '(DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE
                DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS
                DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))
       (SETQ DT*SORT.COMMON.COMPUTE.FLAG 'NIL)
       (SETQ DT*VARIABLE.COUNTER '0)
       (SETQ DT*CONSTANT.COUNTER '0)
       (SETQ DT*CONSTANT.ALL '(7 6))
       (SETQ DT*ABBREVIATIONS 'NIL)
       (SETQ DT*FUNCTION.COUNTER '0)
       (SETQ DT*FUNCTION.ALL '(16 11 10 9 8 5 4 3))
       (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES '(ASSOCIATIVE))
       (SETQ DT*FUNCTION.ACTUAL.THEORIES 'NIL)
       (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES 'NIL)
       (SETQ DT*FUNCTION.COMPONENTS
              '(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST
                SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
       (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES '(SYMMETRIC DEFINED REFLEXIVE))
       (SETQ DT*PREDICATE.COUNTER '0)
       (SETQ DT*EQUALITY.SYMBOLS '("=" ":=" "=:" ":=:"))
       (SETQ DT*EQUALITY.PREDICATES '(13))
       (SETQ DT*NONEQUALITY.PREDICATES '(2 1 0))
       (SETQ DT*PREDICATE.ALL '(13 2 1 0))
       (SETQ DT*PREDICATE.WITH.ATTRIBUTES 'NIL)
       (SETQ DT*PREDICATE.COMPONENTS
              '(PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES
                REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES
                -TOTHERSIDES))
       (SETQ DT*TRUE.PREDICATE '0)
       (SETQ DT*FALSE.PREDICATE '1)
       (SETQ DT*UNI.CREATES.VARIABLES 'NIL)
       (SETQ DT*SIGN.MINUS.SYMBOLS '(- --))
       (SETQ DT*SIGN.PLUS.SYMBOLS '(+ ++))
       (SETQ DT*SYMBOL.KINDS '(CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET 'EQU.RELATION 'DT*SORT.NUMBER) '6)
              (SETF (GET 'EQU.RELATION 'DT*DIRECT.SUBSORTS) 'NIL)
              (SETF (GET 'EQU.RELATION 'DT*TRANSITIVE.CLOSURE) '(EQU.RELATION))
              (SETF (GET 'EQU.RELATION 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (EL.OF.S) (REL EQU.RELATION) (ELEMENT)
                       (SET EQU.RELATION) (ANY EQU.RELATION)))
              (SETF (GET 'EQU.RELATION 'DT*MINIMAL.SUBSORTS) '(EQU.RELATION))
              (SETF (GET 'EQU.RELATION 'DT*DIRECT.SUPERSORTS) '(REL))
              (SETF (GET 'EQU.RELATION 'DT*INVERSE.TRANSITIVE.CLOSURE)
                     '(ANY SET REL EQU.RELATION)))
       (PROGN (SETF (GET 'EL.OF.S 'DT*SORT.NUMBER) '5)
              (SETF (GET 'EL.OF.S 'DT*DIRECT.SUBSORTS) 'NIL)
              (SETF (GET 'EL.OF.S 'DT*TRANSITIVE.CLOSURE) '(EL.OF.S))
              (SETF (GET 'EL.OF.S 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION) (EL.OF.S EL.OF.S) (REL) (ELEMENT EL.OF.S) (SET EL.OF.S)
                       (ANY EL.OF.S)))
              (SETF (GET 'EL.OF.S 'DT*MINIMAL.SUBSORTS) '(EL.OF.S))
              (SETF (GET 'EL.OF.S 'DT*DIRECT.SUPERSORTS) '(ELEMENT))
              (SETF (GET 'EL.OF.S 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET ELEMENT EL.OF.S)))
       (PROGN (SETF (GET 'REL 'DT*SORT.NUMBER) '4)
              (SETF (GET 'REL 'DT*DIRECT.SUBSORTS) '(EQU.RELATION))
              (SETF (GET 'REL 'DT*TRANSITIVE.CLOSURE) '(REL EQU.RELATION))
              (SETF (GET 'REL 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (EL.OF.S) (REL REL) (ELEMENT) (SET REL)
                       (ANY REL)))
              (SETF (GET 'REL 'DT*MINIMAL.SUBSORTS) '(REL))
              (SETF (GET 'REL 'DT*DIRECT.SUPERSORTS) '(SET))
              (SETF (GET 'REL 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET REL)))
       (PROGN (SETF (GET 'ELEMENT 'DT*SORT.NUMBER) '3)
              (SETF (GET 'ELEMENT 'DT*DIRECT.SUBSORTS) '(EL.OF.S))
              (SETF (GET 'ELEMENT 'DT*TRANSITIVE.CLOSURE) '(ELEMENT EL.OF.S))
              (SETF (GET 'ELEMENT 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION) (EL.OF.S EL.OF.S) (REL) (ELEMENT ELEMENT) (SET ELEMENT)
                       (ANY ELEMENT)))
              (SETF (GET 'ELEMENT 'DT*MINIMAL.SUBSORTS) '(EL.OF.S))
              (SETF (GET 'ELEMENT 'DT*DIRECT.SUPERSORTS) '(SET))
              (SETF (GET 'ELEMENT 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET ELEMENT)))
       (PROGN (SETF (GET 'SET 'DT*SORT.NUMBER) '2)
              (SETF (GET 'SET 'DT*DIRECT.SUBSORTS) '(REL ELEMENT))
              (SETF (GET 'SET 'DT*TRANSITIVE.CLOSURE) '(EQU.RELATION SET REL ELEMENT EL.OF.S))
              (SETF (GET 'SET 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (EL.OF.S EL.OF.S) (REL REL)
                       (ELEMENT ELEMENT) (SET SET) (ANY SET)))
              (SETF (GET 'SET 'DT*MINIMAL.SUBSORTS) '(REL EL.OF.S))
              (SETF (GET 'SET 'DT*DIRECT.SUPERSORTS) '(ANY))
              (SETF (GET 'SET 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET)))
       (PROGN (SETF (GET 'ANY 'DT*SORT.NUMBER) '1)
              (SETF (GET 'ANY 'DT*DIRECT.SUBSORTS) '(SET))
              (SETF (GET 'ANY 'DT*TRANSITIVE.CLOSURE)
                     '(EQU.RELATION ELEMENT REL ANY SET EL.OF.S))
              (SETF (GET 'ANY 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (EL.OF.S EL.OF.S) (REL REL)
                       (ELEMENT ELEMENT) (SET SET) (ANY ANY)))
              (SETF (GET 'ANY 'DT*MINIMAL.SUBSORTS) '(EL.OF.S REL))
              (SETF (GET 'ANY 'DT*DIRECT.SUPERSORTS) 'NIL)
              (SETF (GET 'ANY 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY)))) (PROGN (SETQ ST*STACK1 ST*STACK1)
       (SETQ ST*SYMBOL.ADDRESSES
              '(NIL (ANY . T) (TRUE . 0) (FALSE . 1) (SET . T) (ELEMENT . T) (EL . 2)
                (CARTES . 3) (PAIR . 4) (REL . T) (UNIONZWEI . 5) (EL.OF.S . T) (S . 6)
                (IDENTITY . 7) (CONVERSE . 8) (EQU.RELATION . T) (REF.SYM.CLOS . 9)
                (TRANS.CLOS . 10) (GEN.EQU.REL . 11) (X_12 . 12) (= . 13) (X_14 . 14)
                (X_15 . 15) (TRANS.UNION . 16) (X_17 . 17) (X_18 . 18) (X_19 . 19) (X_20 . 20))
              ))))))
;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(COND ((FMT-LOAD "17-NOV-1987 17:09"
  NIL
  (((* ************************************************) COMMENT COMMENT)
 ((* DEFINITIONEN DER MENGENLEHRE) COMMENT COMMENT) ((SORT SET:ANY) (+ 0 NIL) TYPE)
 ((SORT ELEMENT:SET) (+ 0 NIL) TYPE) ((TYPE EL (ELEMENT SET)) (+ 0 NIL) TYPE)
 ((* DEFINITION 1.3: KARTESISCHES PRODUKT) COMMENT COMMENT)
 ((TYPE CARTES (SET SET) :SET) (+ 0 NIL) TYPE)
 ((TYPE PAIR (ELEMENT ELEMENT) :ELEMENT) (+ 0 NIL) TYPE) ((* SORTENPROBLEM!!!) COMMENT COMMENT)
 ((* DEFINITION 1.4: VEREINIGUNG) COMMENT COMMENT)
 ((TYPE UNIONZWEI (REL REL) :REL) (+ 0 NIL) TYPE) ((SORT REL:SET) (+ 0 NIL) TYPE)
 ((SORT EL.OF.S:ELEMENT) (+ 0 NIL) TYPE)
 ((ALL X,Y:REL ALL A,B:EL.OF.S EL (PAIR (A B) X) OR EL (PAIR (A B) Y) IMPL EL
   (PAIR (A B) UNIONZWEI (X Y)))
  (ALL 7
   (ALL 6
    (ALL 9
     (ALL 8
      (IMPL
       (OR (+ 2 ((4 8 9) 6) NIL)
           (+ 2 ((4 8 9) 7) NIL))
       (+ 2 ((4 8 9) (5 6 7)) NIL))))))
  QUANTIFICATION)
 ((* ALL
     X,Y,Z:REL
     ALL
     A,B:EL.OF.S
     EL
     (PAIR (A B) UNIONDREI (X Y Z))
     IMPL
     EL
     (PAIR (A B) X)
     OR
     EL
     (PAIR (A B) Y)
     OR
     EL
     (PAIR (A B) Z))
  COMMENT COMMENT)
 ((* ************************************************************************) COMMENT COMMENT)
 ((* DEFINITIONEN VON RELATIONEN AUF EINER FESTEN MENGE S) COMMENT COMMENT)
 ((TYPE S:SET) (+ 0 NIL) TYPE) ((* DEFINITION 2.3: IDENTISCHE RELATION) COMMENT COMMENT)
 ((TYPE IDENTITY:REL) (+ 0 NIL) TYPE) ((* DEFINITION 2.4: KONVERSE RELATION) COMMENT COMMENT)
 ((TYPE CONVERSE (REL) :REL) (+ 0 NIL) TYPE) ((* SORTENPROBLEM) COMMENT COMMENT)
 ((* DEFINITION1.1: TEILMENGE) COMMENT COMMENT) ((TYPE SUBSET (REL REL)) (+ 0 NIL) TYPE)
 ((ALL X,Y:REL (ALL A,B:EL.OF.S EL (PAIR (A B) X) IMPL EL (PAIR (A B) Y)) IMPL SUBSET (X Y))
  (ALL 15
   (ALL 14
    (IMPL (ALL 17 (ALL 16 (IMPL (+ 2 ((4 16 17) 14) NIL) (+ 2 ((4 16 17) 15) NIL))))
     (+ 13 (14 15) NIL))))
  QUANTIFICATION)
 ((* GLEICHHEIT VON RELATIONEN ENTSPRICHT SET.EQUAL) COMMENT COMMENT)
 ((ALL X,Y:REL SUBSET (X Y) AND SUBSET (Y X) IMPL X = Y)
  (ALL 19
   (ALL 18
    (IMPL
     (AND (+ 13 (18 19) NIL)
          (+ 13 (19 18) NIL))
     (+ 20 (18 19) NIL))))
  QUANTIFICATION)
 ((* DEFINITION 2.8: AEQUIVALENZRELATION) COMMENT COMMENT)
 ((SORT EQU.RELATION:REL) (+ 0 NIL) TYPE)
 ((* DEFINITION 2.10: REFLEXIV-SYMMETRISCHER ABSCHLUSS) COMMENT COMMENT)
 ((TYPE REF.SYM.CLOS (REL) :REL) (+ 0 NIL) TYPE)
 ((ALL RHO:REL REF.SYM.CLOS (RHO) = UNIONZWEI (UNIONZWEI (RHO CONVERSE (RHO)) IDENTITY))
  (ALL 22 (+ 20 ((21 22) (5 (5 22 (12 22)) 11)) NIL)) QUANTIFICATION)
 ((* SATZ4-8>2-1) COMMENT COMMENT)
 ((ALL RHO,SIGMA:EQU.RELATION SUBSET
   (UNIONZWEI (RHO SIGMA) UNIONZWEI
    (UNIONZWEI (UNIONZWEI (RHO SIGMA) CONVERSE (UNIONZWEI (RHO SIGMA))) IDENTITY)))
  (ALL 24 (ALL 23 (+ 13 ((5 23 24) (5 (5 (5 23 24) (12 (5 23 24))) 11)) NIL))) QUANTIFICATION)
 ((* SATZ4-8>2-2) COMMENT COMMENT)
 ((* STILLSCHWEIGENDE ANNAHME UNIONDREI (A B C) = UNIONZWEI (UNIONZWEI (A B) C)) COMMENT
  COMMENT)
 ((ALL RHO,SIGMA:EQU.RELATION ALL A,B:EL.OF.S EL
   (PAIR (A B) UNIONZWEI
    (UNIONZWEI (UNIONZWEI (RHO SIGMA) CONVERSE (UNIONZWEI (RHO SIGMA))) IDENTITY))
   IMPL EL (PAIR (A B) RHO) OR EL (PAIR (A B) SIGMA))
  (ALL 26
   (ALL 25
    (ALL 28
     (ALL 27
      (IMPL (+ 2 ((4 27 28) (5 (5 (5 25 26) (12 (5 25 26))) 11)) NIL)
       (OR (+ 2 ((4 27 28) 25) NIL)
           (+ 2 ((4 27 28) 26) NIL)))))))
  QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(119764 119769 119774 119779 119784 119789 119794 119808 119823 119828 119833 119838
          119843 119848 119853 119868 119882 119887 119892 119897 119902 119907 119912 119926
          119940 119954 119969 119984 119999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "EL" NIL NIL (ELEMENT SET) NIL NIL
          ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 14 "CARTES" NIL SET (SET SET) NIL NIL NIL NIL NIL 2 SET
          (DT*ST-KIND NIL) FUNCTION 14 "PAIR" NIL ELEMENT (ELEMENT ELEMENT) NIL NIL NIL NIL
          NIL 2 ELEMENT (DT*ST-KIND NIL) FUNCTION 14 "UNIONZWEI" NIL REL (REL REL) NIL NIL NIL
          NIL NIL 2 REL (DT*ST-KIND NIL) FUNCTION 5 REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET "S" (DT*ST-KIND NIL) CONSTANT 5 REL
          "IDENTITY" (DT*ST-KIND NIL) CONSTANT 14 "CONVERSE" NIL REL (REL) NIL NIL NIL NIL NIL
          1 REL (DT*ST-KIND NIL) FUNCTION 15 "SUBSET" NIL NIL (REL REL) NIL NIL
          ((- 13 (POSITIVE))) ((+ 13 (NEGATIVE))) ((+ 13 (NIL))) ((- 13 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 REL
          NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 20 (POSITIVE . SYMMETRIC)))
          ((+ 20 (NEGATIVE . SYMMETRIC))) ((+ 20 (NIL . SYMMETRIC))) ((- 20 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 14 "REF.SYM.CLOS" NIL REL (REL) NIL NIL NIL NIL
          NIL 1 REL (DT*ST-KIND NIL) FUNCTION 5 REL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 EQU.RELATION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EQU.RELATION
          NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EQU.RELATION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EQU.RELATION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 120000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 120000)
             (SETQ COUNTER1 29)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 120000)
                 (MEM-INITIALIZE 120000))
               (SETQ COUNTER1 29)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (COND ((> MEM*SIZE 120000) (SETQ MEM*NEXT.RADR (+ 119759 INCREMENT)))
            (T (SETQ MEM*NEXT.RADR 119759)))
      (SETQ MEM*NEXT.VADR 29)
      (SETQ MEM*REST (1+ (- MEM*NEXT.RADR MEM*NEXT.VADR)))
      (SETQ MEM*FIRST.REUSABLE.VADR NIL)
      (SETQ MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL '(EQU.RELATION EL.OF.S REL ELEMENT SET ANY))
       (SETQ DT*SORT.NR '7)
       (SETQ DT*SORT.PROPERTIES
              '(DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE
                DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS
                DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))
       (SETQ DT*SORT.COMMON.COMPUTE.FLAG 'NIL)
       (SETQ DT*VARIABLE.COUNTER '0)
       (SETQ DT*CONSTANT.COUNTER '0)
       (SETQ DT*CONSTANT.ALL '(11 10))
       (SETQ DT*ABBREVIATIONS 'NIL)
       (SETQ DT*FUNCTION.COUNTER '0)
       (SETQ DT*FUNCTION.ALL '(21 12 5 4 3))
       (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES '(ASSOCIATIVE))
       (SETQ DT*FUNCTION.ACTUAL.THEORIES 'NIL)
       (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES 'NIL)
       (SETQ DT*FUNCTION.COMPONENTS
              '(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST
                SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
       (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES '(SYMMETRIC DEFINED REFLEXIVE))
       (SETQ DT*PREDICATE.COUNTER '0)
       (SETQ DT*EQUALITY.SYMBOLS '("=" ":=" "=:" ":=:"))
       (SETQ DT*EQUALITY.PREDICATES '(20))
       (SETQ DT*NONEQUALITY.PREDICATES '(13 2 1 0))
       (SETQ DT*PREDICATE.ALL '(20 13 2 1 0))
       (SETQ DT*PREDICATE.WITH.ATTRIBUTES 'NIL)
       (SETQ DT*PREDICATE.COMPONENTS
              '(PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES
                REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES
                -TOTHERSIDES))
       (SETQ DT*TRUE.PREDICATE '0)
       (SETQ DT*FALSE.PREDICATE '1)
       (SETQ DT*UNI.CREATES.VARIABLES 'NIL)
       (SETQ DT*SIGN.MINUS.SYMBOLS '(- --))
       (SETQ DT*SIGN.PLUS.SYMBOLS '(+ ++))
       (SETQ DT*SYMBOL.KINDS '(CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET 'EQU.RELATION 'DT*SORT.NUMBER) '6)
              (SETF (GET 'EQU.RELATION 'DT*DIRECT.SUBSORTS) 'NIL)
              (SETF (GET 'EQU.RELATION 'DT*TRANSITIVE.CLOSURE) '(EQU.RELATION))
              (SETF (GET 'EQU.RELATION 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (EL.OF.S) (REL EQU.RELATION) (ELEMENT)
                       (SET EQU.RELATION) (ANY EQU.RELATION)))
              (SETF (GET 'EQU.RELATION 'DT*MINIMAL.SUBSORTS) '(EQU.RELATION))
              (SETF (GET 'EQU.RELATION 'DT*DIRECT.SUPERSORTS) '(REL))
              (SETF (GET 'EQU.RELATION 'DT*INVERSE.TRANSITIVE.CLOSURE)
                     '(ANY SET REL EQU.RELATION)))
       (PROGN (SETF (GET 'EL.OF.S 'DT*SORT.NUMBER) '5)
              (SETF (GET 'EL.OF.S 'DT*DIRECT.SUBSORTS) 'NIL)
              (SETF (GET 'EL.OF.S 'DT*TRANSITIVE.CLOSURE) '(EL.OF.S))
              (SETF (GET 'EL.OF.S 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION) (EL.OF.S EL.OF.S) (REL) (ELEMENT EL.OF.S) (SET EL.OF.S)
                       (ANY EL.OF.S)))
              (SETF (GET 'EL.OF.S 'DT*MINIMAL.SUBSORTS) '(EL.OF.S))
              (SETF (GET 'EL.OF.S 'DT*DIRECT.SUPERSORTS) '(ELEMENT))
              (SETF (GET 'EL.OF.S 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET ELEMENT EL.OF.S)))
       (PROGN (SETF (GET 'REL 'DT*SORT.NUMBER) '4)
              (SETF (GET 'REL 'DT*DIRECT.SUBSORTS) '(EQU.RELATION))
              (SETF (GET 'REL 'DT*TRANSITIVE.CLOSURE) '(REL EQU.RELATION))
              (SETF (GET 'REL 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (EL.OF.S) (REL REL) (ELEMENT) (SET REL)
                       (ANY REL)))
              (SETF (GET 'REL 'DT*MINIMAL.SUBSORTS) '(REL))
              (SETF (GET 'REL 'DT*DIRECT.SUPERSORTS) '(SET))
              (SETF (GET 'REL 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET REL)))
       (PROGN (SETF (GET 'ELEMENT 'DT*SORT.NUMBER) '3)
              (SETF (GET 'ELEMENT 'DT*DIRECT.SUBSORTS) '(EL.OF.S))
              (SETF (GET 'ELEMENT 'DT*TRANSITIVE.CLOSURE) '(ELEMENT EL.OF.S))
              (SETF (GET 'ELEMENT 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION) (EL.OF.S EL.OF.S) (REL) (ELEMENT ELEMENT) (SET ELEMENT)
                       (ANY ELEMENT)))
              (SETF (GET 'ELEMENT 'DT*MINIMAL.SUBSORTS) '(EL.OF.S))
              (SETF (GET 'ELEMENT 'DT*DIRECT.SUPERSORTS) '(SET))
              (SETF (GET 'ELEMENT 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET ELEMENT)))
       (PROGN (SETF (GET 'SET 'DT*SORT.NUMBER) '2)
              (SETF (GET 'SET 'DT*DIRECT.SUBSORTS) '(REL ELEMENT))
              (SETF (GET 'SET 'DT*TRANSITIVE.CLOSURE) '(EQU.RELATION SET REL ELEMENT EL.OF.S))
              (SETF (GET 'SET 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (EL.OF.S EL.OF.S) (REL REL)
                       (ELEMENT ELEMENT) (SET SET) (ANY SET)))
              (SETF (GET 'SET 'DT*MINIMAL.SUBSORTS) '(REL EL.OF.S))
              (SETF (GET 'SET 'DT*DIRECT.SUPERSORTS) '(ANY))
              (SETF (GET 'SET 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET)))
       (PROGN (SETF (GET 'ANY 'DT*SORT.NUMBER) '1)
              (SETF (GET 'ANY 'DT*DIRECT.SUBSORTS) '(SET))
              (SETF (GET 'ANY 'DT*TRANSITIVE.CLOSURE)
                     '(EQU.RELATION ELEMENT REL ANY SET EL.OF.S))
              (SETF (GET 'ANY 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (EL.OF.S EL.OF.S) (REL REL)
                       (ELEMENT ELEMENT) (SET SET) (ANY ANY)))
              (SETF (GET 'ANY 'DT*MINIMAL.SUBSORTS) '(EL.OF.S REL))
              (SETF (GET 'ANY 'DT*DIRECT.SUPERSORTS) 'NIL)
              (SETF (GET 'ANY 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY)))) (PROGN (SETQ ST*STACK1 ST*STACK1)
       (SETQ ST*SYMBOL.ADDRESSES
              '(NIL (ANY . T) (TRUE . 0) (FALSE . 1) (SET . T) (ELEMENT . T) (EL . 2)
                (CARTES . 3) (PAIR . 4) (REL . T) (UNIONZWEI . 5) (EL.OF.S . T) (X_6 . 6)
                (X_7 . 7) (X_8 . 8) (X_9 . 9) (S . 10) (IDENTITY . 11) (CONVERSE . 12)
                (SUBSET . 13) (X_14 . 14) (X_15 . 15) (X_16 . 16) (X_17 . 17) (X_18 . 18)
                (X_19 . 19) (= . 20) (EQU.RELATION . T) (REF.SYM.CLOS . 21) (X_22 . 22)
                (X_23 . 23) (X_24 . 24) (X_25 . 25) (X_26 . 26) (X_27 . 27) (X_28 . 28))))))))
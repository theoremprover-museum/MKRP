;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(COND ((FMT-LOAD "24-NOV-1987 00:14"
  NIL
  (((ALL U,V:SET ALL PHIEINS,PHIZWEI:SYMB.OF.FUNCTION MAPPING.S (PHIEINS S U) AND MAPPING.S
   (PHIZWEI S U) IMPL
   (ALL GR.PHI:SYMB.OF.FUNCTION MAPPING (GR.PHI U V) AND
    (ALL T:EL.OF.S APPLY (GR.PHI APPLY (PHIEINS T)) = APPLY (PHIZWEI T)) IMPL SUBSET
    (IND.EQU (PHIEINS U) IND.EQU (PHIZWEI V))))
  (ALL 28
   (ALL 27
    (ALL 30
     (ALL 29
      (IMPL
       (AND (+ 15 (29 16 27) NIL)
            (+ 15 (30 16 27) NIL))
       (ALL 31
        (IMPL
         (AND (+ 9 (31 27 28) NIL)
              (ALL 32 (+ 26 ((10 31 (10 29 32)) (10 30 32)) NIL)))
         (+ 3 ((20 29 27) (20 30 28)) NIL))))))))
  QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(219733 219738 219743 219748 219753 219758 219773 219778 219783 219788 219798 219793
          219812 219817 219822 219827 219832 219847 219852 219857 219862 219867 219881 219896
          219910 219924 219929 219934 219939 219954 219969 219984 219999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "EL" NIL NIL (ELEMENT SET) NIL NIL
          ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "SUBSET" NIL NIL (SET SET) NIL NIL ((- 3 (POSITIVE)))
          ((+ 3 (NEGATIVE))) ((+ 3 (NIL))) ((- 3 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5
          SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 "CARTES" NIL SET (SET SET) NIL NIL NIL
          NIL NIL 2 SET (DT*ST-KIND NIL) FUNCTION 14 "PAIR" NIL ELEMENT (ELEMENT ELEMENT) NIL
          NIL NIL NIL NIL 2 ELEMENT (DT*ST-KIND NIL) FUNCTION 15 "MAPPING" NIL NIL
          (SYMB.OF.FUNCTION SET SET) NIL NIL ((- 9 (POSITIVE))) ((+ 9 (NEGATIVE)))
          ((+ 9 (NIL))) ((- 9 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14 "APPLY" NIL
          ELEMENT (SYMB.OF.FUNCTION ELEMENT) NIL NIL NIL NIL NIL 2 ELEMENT (DT*ST-KIND NIL)
          FUNCTION 5 SYMB.OF.FUNCTION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "MAPPING.S" NIL
          NIL (SYMB.OF.FUNCTION SET SET) NIL NIL ((- 15 (POSITIVE))) ((+ 15 (NEGATIVE)))
          ((+ 15 (NIL))) ((- 15 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 SET "S"
          (DT*ST-KIND NIL) CONSTANT 5 SYMB.OF.FUNCTION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 "IND.EQU" NIL EQU.RELATION
          (SYMB.OF.FUNCTION SET) NIL NIL NIL NIL NIL 2 EQU.RELATION (DT*ST-KIND NIL) FUNCTION
          5 SYMB.OF.FUNCTION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 26 (POSITIVE . SYMMETRIC)))
          ((+ 26 (NEGATIVE . SYMMETRIC))) ((+ 26 (NIL . SYMMETRIC))) ((- 26 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SYMB.OF.FUNCTION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SYMB.OF.FUNCTION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 SYMB.OF.FUNCTION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 220000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 220000)
             (SETQ COUNTER1 33)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 220000)
                 (MEM-INITIALIZE 220000))
               (SETQ COUNTER1 33)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (COND ((> MEM*SIZE 220000) (SETQ MEM*NEXT.RADR (+ 219728 INCREMENT)))
            (T (SETQ MEM*NEXT.RADR 219728)))
      (SETQ MEM*NEXT.VADR 33)
      (SETQ MEM*REST (1+ (- MEM*NEXT.RADR MEM*NEXT.VADR)))
      (SETQ MEM*FIRST.REUSABLE.VADR NIL)
      (SETQ MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL '(EQU.RELATION REL EL.OF.S SYMB.OF.FUNCTION ELEMENT SET ANY))
       (SETQ DT*SORT.NR '8)
       (SETQ DT*SORT.PROPERTIES
              '(DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE
                DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS
                DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))
       (SETQ DT*SORT.COMMON.COMPUTE.FLAG 'NIL)
       (SETQ DT*VARIABLE.COUNTER '0)
       (SETQ DT*CONSTANT.COUNTER '0)
       (SETQ DT*CONSTANT.ALL '(16))
       (SETQ DT*ABBREVIATIONS 'NIL)
       (SETQ DT*FUNCTION.COUNTER '0)
       (SETQ DT*FUNCTION.ALL '(20 10 8 7))
       (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES '(ASSOCIATIVE))
       (SETQ DT*FUNCTION.ACTUAL.THEORIES 'NIL)
       (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES 'NIL)
       (SETQ DT*FUNCTION.COMPONENTS
              '(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST
                SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
       (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES '(SYMMETRIC DEFINED REFLEXIVE))
       (SETQ DT*PREDICATE.COUNTER '0)
       (SETQ DT*EQUALITY.SYMBOLS '("=" ":=" "=:" ":=:"))
       (SETQ DT*EQUALITY.PREDICATES '(26))
       (SETQ DT*NONEQUALITY.PREDICATES '(15 9 3 2 1 0))
       (SETQ DT*PREDICATE.ALL '(26 15 9 3 2 1 0))
       (SETQ DT*PREDICATE.WITH.ATTRIBUTES 'NIL)
       (SETQ DT*PREDICATE.COMPONENTS
              '(PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES
                REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES
                -TOTHERSIDES))
       (SETQ DT*TRUE.PREDICATE '0)
       (SETQ DT*FALSE.PREDICATE '1)
       (SETQ DT*UNI.CREATES.VARIABLES 'NIL)
       (SETQ DT*SIGN.MINUS.SYMBOLS '(- --))
       (SETQ DT*SIGN.PLUS.SYMBOLS '(+ ++))
       (SETQ DT*SYMBOL.KINDS '(CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET 'EQU.RELATION 'DT*DIRECT.SUBSORTS) 'NIL)
              (SETF (GET 'EQU.RELATION 'DT*SORT.NUMBER) '7)
              (SETF (GET 'EQU.RELATION 'DT*TRANSITIVE.CLOSURE) '(EQU.RELATION))
              (SETF (GET 'EQU.RELATION 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (REL EQU.RELATION) (EL.OF.S)
                       (SYMB.OF.FUNCTION) (ELEMENT) (SET EQU.RELATION) (ANY EQU.RELATION)))
              (SETF (GET 'EQU.RELATION 'DT*MINIMAL.SUBSORTS) '(EQU.RELATION))
              (SETF (GET 'EQU.RELATION 'DT*DIRECT.SUPERSORTS) '(REL))
              (SETF (GET 'EQU.RELATION 'DT*INVERSE.TRANSITIVE.CLOSURE)
                     '(ANY SET REL EQU.RELATION)))
       (PROGN (SETF (GET 'REL 'DT*DIRECT.SUBSORTS) '(EQU.RELATION))
              (SETF (GET 'REL 'DT*SORT.NUMBER) '6)
              (SETF (GET 'REL 'DT*TRANSITIVE.CLOSURE) '(REL EQU.RELATION))
              (SETF (GET 'REL 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (REL REL) (EL.OF.S) (SYMB.OF.FUNCTION)
                       (ELEMENT) (SET REL) (ANY REL)))
              (SETF (GET 'REL 'DT*MINIMAL.SUBSORTS) '(REL))
              (SETF (GET 'REL 'DT*DIRECT.SUPERSORTS) '(SET))
              (SETF (GET 'REL 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET REL)))
       (PROGN (SETF (GET 'EL.OF.S 'DT*DIRECT.SUBSORTS) 'NIL)
              (SETF (GET 'EL.OF.S 'DT*SORT.NUMBER) '5)
              (SETF (GET 'EL.OF.S 'DT*TRANSITIVE.CLOSURE) '(EL.OF.S))
              (SETF (GET 'EL.OF.S 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION) (REL) (EL.OF.S EL.OF.S) (SYMB.OF.FUNCTION)
                       (ELEMENT EL.OF.S) (SET EL.OF.S) (ANY EL.OF.S)))
              (SETF (GET 'EL.OF.S 'DT*MINIMAL.SUBSORTS) '(EL.OF.S))
              (SETF (GET 'EL.OF.S 'DT*DIRECT.SUPERSORTS) '(ELEMENT))
              (SETF (GET 'EL.OF.S 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET ELEMENT EL.OF.S)))
       (PROGN (SETF (GET 'SYMB.OF.FUNCTION 'DT*DIRECT.SUBSORTS) 'NIL)
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*SORT.NUMBER) '4)
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*TRANSITIVE.CLOSURE) '(SYMB.OF.FUNCTION))
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION) (REL) (EL.OF.S) (SYMB.OF.FUNCTION SYMB.OF.FUNCTION)
                       (ELEMENT) (SET) (ANY SYMB.OF.FUNCTION)))
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*MINIMAL.SUBSORTS) '(SYMB.OF.FUNCTION))
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*DIRECT.SUPERSORTS) '(ANY))
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*INVERSE.TRANSITIVE.CLOSURE)
                     '(ANY SYMB.OF.FUNCTION)))
       (PROGN (SETF (GET 'ELEMENT 'DT*DIRECT.SUBSORTS) '(EL.OF.S))
              (SETF (GET 'ELEMENT 'DT*SORT.NUMBER) '3)
              (SETF (GET 'ELEMENT 'DT*TRANSITIVE.CLOSURE) '(ELEMENT EL.OF.S))
              (SETF (GET 'ELEMENT 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION) (REL) (EL.OF.S EL.OF.S) (SYMB.OF.FUNCTION)
                       (ELEMENT ELEMENT) (SET ELEMENT) (ANY ELEMENT)))
              (SETF (GET 'ELEMENT 'DT*MINIMAL.SUBSORTS) '(EL.OF.S))
              (SETF (GET 'ELEMENT 'DT*DIRECT.SUPERSORTS) '(SET))
              (SETF (GET 'ELEMENT 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET ELEMENT)))
       (PROGN (SETF (GET 'SET 'DT*DIRECT.SUBSORTS) '(REL ELEMENT))
              (SETF (GET 'SET 'DT*SORT.NUMBER) '2)
              (SETF (GET 'SET 'DT*TRANSITIVE.CLOSURE) '(EQU.RELATION SET REL ELEMENT EL.OF.S))
              (SETF (GET 'SET 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (REL REL) (EL.OF.S EL.OF.S)
                       (SYMB.OF.FUNCTION) (ELEMENT ELEMENT) (SET SET) (ANY SET)))
              (SETF (GET 'SET 'DT*MINIMAL.SUBSORTS) '(REL EL.OF.S))
              (SETF (GET 'SET 'DT*DIRECT.SUPERSORTS) '(ANY))
              (SETF (GET 'SET 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET)))
       (PROGN (SETF (GET 'ANY 'DT*SORT.NUMBER) '1)
              (SETF (GET 'ANY 'DT*DIRECT.SUBSORTS) '(SYMB.OF.FUNCTION SET))
              (SETF (GET 'ANY 'DT*TRANSITIVE.CLOSURE)
                     '(EQU.RELATION ANY SYMB.OF.FUNCTION SET REL ELEMENT EL.OF.S))
              (SETF (GET 'ANY 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (REL REL) (EL.OF.S EL.OF.S)
                       (SYMB.OF.FUNCTION SYMB.OF.FUNCTION) (ELEMENT ELEMENT) (SET SET)
                       (ANY ANY)))
              (SETF (GET 'ANY 'DT*MINIMAL.SUBSORTS) '(SYMB.OF.FUNCTION REL EL.OF.S))
              (SETF (GET 'ANY 'DT*DIRECT.SUPERSORTS) 'NIL)
              (SETF (GET 'ANY 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY)))) (PROGN (SETQ ST*STACK1 ST*STACK1)
       (SETQ ST*SYMBOL.ADDRESSES
              '(NIL (ANY . T) (TRUE . 0) (FALSE . 1) (SET . T) (ELEMENT . T) (EL . 2)
                (SUBSET . 3) (X_4 . 4) (X_5 . 5) (X_6 . 6) (CARTES . 7) (PAIR . 8)
                (SYMB.OF.FUNCTION . T) (MAPPING . 9) (APPLY . 10) (X_11 . 11) (X_12 . 12)
                (X_13 . 13) (X_14 . 14) (MAPPING.S . 15) (S . 16) (EL.OF.S . T) (X_17 . 17)
                (X_18 . 18) (X_19 . 19) (REL . T) (EQU.RELATION . T) (IND.EQU . 20) (X_22 . 22)
                (X_21 . 21) (X_23 . 23) (X_24 . 24) (X_25 . 25) (= . 26) (X_27 . 27)
                (X_28 . 28) (X_29 . 29) (X_30 . 30) (X_31 . 31) (X_32 . 32))))))))
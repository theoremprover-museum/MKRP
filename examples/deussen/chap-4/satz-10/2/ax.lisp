;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(COND ((FMT-LOAD "18-NOV-1987 01:51"
  NIL
  (((* ************************************************) COMMENT COMMENT)
 ((* DEFINITIONEN DER MENGENLEHRE) COMMENT COMMENT) ((SORT SET:ANY) (+ 0 NIL) TYPE)
 ((SORT ELEMENT:SET) (+ 0 NIL) TYPE) ((TYPE EL (ELEMENT SET)) (+ 0 NIL) TYPE)
 ((* DEFINITION 1.2: MENGENGLEICHHEIT) COMMENT COMMENT)
 ((TYPE SET.EQUAL (SET SET)) (+ 0 NIL) TYPE)
 ((* DEFINITION 2.2: KARTESISCHES PRODUKT) COMMENT COMMENT)
 ((TYPE PAIR (ELEMENT ELEMENT) :ELEMENT) (+ 0 NIL) TYPE)
 ((ALL A,B,C,D:ELEMENT PAIR (A B) = PAIR (C D) IMPL A = C AND B = D)
  (ALL 8
   (ALL 7
    (ALL 6
     (ALL 5
      (IMPL (+ 9 ((4 5 6) (4 7 8)) NIL)
       (AND (+ 9 (5 7) NIL)
            (+ 9 (6 8) NIL)))))))
  QUANTIFICATION)
 ((* DEFINITION 1.7: FUNKTION) COMMENT COMMENT) ((SORT SYMB.OF.FUNCTION:ANY) (+ 0 NIL) TYPE)
 ((TYPE MAPPING (SYMB.OF.FUNCTION SET SET)) (+ 0 NIL) TYPE)
 ((TYPE APPLY (SYMB.OF.FUNCTION ELEMENT) :ELEMENT) (+ 0 NIL) TYPE)
 ((* DEFINITIONEN VON RELATIONEN AUF EINER FESTEN MENGE S) COMMENT COMMENT)
 ((SORT REL:SET) (+ 0 NIL) TYPE) ((TYPE S:SET) (+ 0 NIL) TYPE)
 ((SORT EL.OF.S:ELEMENT) (+ 0 NIL) TYPE)
 ((* DEFINITION 2.8: AEQUIVALENZRELATION) COMMENT COMMENT)
 ((TYPE EQU.REL (REL)) (+ 0 NIL) TYPE) ((SORT EQU.RELATION:REL) (+ 0 NIL) TYPE)
 ((* DEFINITION 2.13: DIE VON EINER ABBILDUNG PHI VON S NACH U INDUZIERTE AEQUIVALENZRELATION)
  COMMENT COMMENT)
 ((TYPE IND.EQU (SYMB.OF.FUNCTION SET) :EQU.RELATION) (+ 0 NIL) TYPE)
 ((ALL PHI:SYMB.OF.FUNCTION ALL U:SET MAPPING (PHI S U) IMPL
   (ALL A:ELEMENT EL (A IND.EQU (PHI U)) EQV
    (EX B,C:EL.OF.S A = PAIR (B C) AND APPLY (PHI B) = APPLY (PHI C))))
  (ALL 16
   (ALL 15
    (IMPL (+ 10 (16 12 15) NIL)
     (ALL 17
      (EQV (+ 2 (17 (14 16 15)) (KIND (EQV T 250)))
       (EX 19
        (EX 18
         (AND (+ 9 (17 (4 18 19)) (KIND (EQV NIL 250)))
              (+ 9 ((11 16 18) (11 16 19)) (KIND (EQV NIL 250)))))))))))
  QUANTIFICATION)
 ((* DEFINITION 2.14: VORBEREICH EINER RELATION UND EINES ELEMENTES) COMMENT COMMENT)
 ((TYPE PREIMAGE (REL EL.OF.S) :SET) (+ 0 NIL) TYPE) ((* LEMMA4-14) COMMENT COMMENT)
 ((ALL RHO:EQU.RELATION ALL A,B:EL.OF.S SET.EQUAL (PREIMAGE (RHO A) PREIMAGE (RHO B)) EQV EL
   (PAIR (A B) RHO))
  (ALL 21
   (ALL 23
    (ALL 22
     (EQV (+ 3 ((20 21 22) (20 21 23)) (KIND (EQV T 290)))
      (+ 2 ((4 22 23) 21) (KIND (EQV NIL 290)))))))
  QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(29778 29783 29788 29802 29807 29812 29817 29827 29822 29841 29856 29861 29875 29890
          29905 29910 29915 29920 29925 29939 29954 29969 29984 29999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "EL" NIL NIL (ELEMENT SET) NIL NIL
          ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "SET.EQUAL" NIL NIL (SET SET) NIL NIL
          ((- 3 (POSITIVE))) ((+ 3 (NEGATIVE))) ((+ 3 (NIL))) ((- 3 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 14 "PAIR" NIL ELEMENT (ELEMENT ELEMENT) NIL NIL NIL NIL
          NIL 2 ELEMENT (DT*ST-KIND NIL) FUNCTION 5 ELEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 9 (POSITIVE . SYMMETRIC)))
          ((+ 9 (NEGATIVE . SYMMETRIC))) ((+ 9 (NIL . SYMMETRIC))) ((- 9 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "MAPPING" NIL NIL (SYMB.OF.FUNCTION SET SET)
          NIL NIL ((- 10 (POSITIVE))) ((+ 10 (NEGATIVE))) ((+ 10 (NIL))) ((- 10 (NIL))) NIL
          NIL (DT*ST-KIND NIL) PREDICATE 14 "APPLY" NIL ELEMENT (SYMB.OF.FUNCTION ELEMENT) NIL
          NIL NIL NIL NIL 2 ELEMENT (DT*ST-KIND NIL) FUNCTION 5 SET "S" (DT*ST-KIND NIL)
          CONSTANT 15 "EQU.REL" NIL NIL (REL) NIL NIL ((- 13 (POSITIVE))) ((+ 13 (NEGATIVE)))
          ((+ 13 (NIL))) ((- 13 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14 "IND.EQU" NIL
          EQU.RELATION (SYMB.OF.FUNCTION SET) NIL NIL NIL NIL NIL 2 EQU.RELATION
          (DT*ST-KIND NIL) FUNCTION 5 SYMB.OF.FUNCTION NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 SET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ELEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 "PREIMAGE" NIL SET (REL EL.OF.S) NIL
          NIL NIL NIL NIL 2 SET (DT*ST-KIND NIL) FUNCTION 5 EQU.RELATION NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EL.OF.S NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 30000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 30000)
             (SETQ COUNTER1 24)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 30000)
                 (MEM-INITIALIZE 30000))
               (SETQ COUNTER1 24)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (COND ((> MEM*SIZE 30000) (SETQ MEM*NEXT.RADR (+ 29773 INCREMENT)))
            (T (SETQ MEM*NEXT.RADR 29773)))
      (SETQ MEM*NEXT.VADR 24)
      (SETQ MEM*REST (1+ (- MEM*NEXT.RADR MEM*NEXT.VADR)))
      (SETQ MEM*FIRST.REUSABLE.VADR NIL)
      (SETQ MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL '(EQU.RELATION EL.OF.S REL SYMB.OF.FUNCTION ELEMENT SET ANY))
       (SETQ DT*SORT.NR '8)
       (SETQ DT*SORT.PROPERTIES
              '(DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE
                DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS
                DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))
       (SETQ DT*SORT.COMMON.COMPUTE.FLAG 'NIL)
       (SETQ DT*VARIABLE.COUNTER '0)
       (SETQ DT*CONSTANT.COUNTER '0)
       (SETQ DT*CONSTANT.ALL '(12))
       (SETQ DT*ABBREVIATIONS 'NIL)
       (SETQ DT*FUNCTION.COUNTER '0)
       (SETQ DT*FUNCTION.ALL '(20 14 11 4))
       (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES '(ASSOCIATIVE))
       (SETQ DT*FUNCTION.ACTUAL.THEORIES 'NIL)
       (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES 'NIL)
       (SETQ DT*FUNCTION.COMPONENTS
              '(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST
                SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
       (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES '(SYMMETRIC DEFINED REFLEXIVE))
       (SETQ DT*PREDICATE.COUNTER '0)
       (SETQ DT*EQUALITY.SYMBOLS '("=" ":=" "=:" ":=:"))
       (SETQ DT*EQUALITY.PREDICATES '(9))
       (SETQ DT*NONEQUALITY.PREDICATES '(13 10 3 2 1 0))
       (SETQ DT*PREDICATE.ALL '(13 10 9 3 2 1 0))
       (SETQ DT*PREDICATE.WITH.ATTRIBUTES 'NIL)
       (SETQ DT*PREDICATE.COMPONENTS
              '(PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES
                REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES
                -TOTHERSIDES))
       (SETQ DT*TRUE.PREDICATE '0)
       (SETQ DT*FALSE.PREDICATE '1)
       (SETQ DT*UNI.CREATES.VARIABLES 'NIL)
       (SETQ DT*SIGN.MINUS.SYMBOLS '(- --))
       (SETQ DT*SIGN.PLUS.SYMBOLS '(+ ++))
       (SETQ DT*SYMBOL.KINDS '(CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET 'EQU.RELATION 'DT*SORT.NUMBER) '7)
              (SETF (GET 'EQU.RELATION 'DT*DIRECT.SUBSORTS) 'NIL)
              (SETF (GET 'EQU.RELATION 'DT*TRANSITIVE.CLOSURE) '(EQU.RELATION))
              (SETF (GET 'EQU.RELATION 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (EL.OF.S) (REL EQU.RELATION)
                       (SYMB.OF.FUNCTION) (ELEMENT) (SET EQU.RELATION) (ANY EQU.RELATION)))
              (SETF (GET 'EQU.RELATION 'DT*MINIMAL.SUBSORTS) '(EQU.RELATION))
              (SETF (GET 'EQU.RELATION 'DT*DIRECT.SUPERSORTS) '(REL))
              (SETF (GET 'EQU.RELATION 'DT*INVERSE.TRANSITIVE.CLOSURE)
                     '(ANY SET REL EQU.RELATION)))
       (PROGN (SETF (GET 'EL.OF.S 'DT*SORT.NUMBER) '6)
              (SETF (GET 'EL.OF.S 'DT*DIRECT.SUBSORTS) 'NIL)
              (SETF (GET 'EL.OF.S 'DT*TRANSITIVE.CLOSURE) '(EL.OF.S))
              (SETF (GET 'EL.OF.S 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION) (EL.OF.S EL.OF.S) (REL) (SYMB.OF.FUNCTION)
                       (ELEMENT EL.OF.S) (SET EL.OF.S) (ANY EL.OF.S)))
              (SETF (GET 'EL.OF.S 'DT*MINIMAL.SUBSORTS) '(EL.OF.S))
              (SETF (GET 'EL.OF.S 'DT*DIRECT.SUPERSORTS) '(ELEMENT))
              (SETF (GET 'EL.OF.S 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET ELEMENT EL.OF.S)))
       (PROGN (SETF (GET 'REL 'DT*SORT.NUMBER) '5)
              (SETF (GET 'REL 'DT*DIRECT.SUBSORTS) '(EQU.RELATION))
              (SETF (GET 'REL 'DT*TRANSITIVE.CLOSURE) '(REL EQU.RELATION))
              (SETF (GET 'REL 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (EL.OF.S) (REL REL) (SYMB.OF.FUNCTION)
                       (ELEMENT) (SET REL) (ANY REL)))
              (SETF (GET 'REL 'DT*MINIMAL.SUBSORTS) '(REL))
              (SETF (GET 'REL 'DT*DIRECT.SUPERSORTS) '(SET))
              (SETF (GET 'REL 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET REL)))
       (PROGN (SETF (GET 'SYMB.OF.FUNCTION 'DT*SORT.NUMBER) '4)
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*DIRECT.SUBSORTS) 'NIL)
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*TRANSITIVE.CLOSURE) '(SYMB.OF.FUNCTION))
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION) (EL.OF.S) (REL) (SYMB.OF.FUNCTION SYMB.OF.FUNCTION)
                       (ELEMENT) (SET) (ANY SYMB.OF.FUNCTION)))
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*MINIMAL.SUBSORTS) '(SYMB.OF.FUNCTION))
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*DIRECT.SUPERSORTS) '(ANY))
              (SETF (GET 'SYMB.OF.FUNCTION 'DT*INVERSE.TRANSITIVE.CLOSURE)
                     '(ANY SYMB.OF.FUNCTION)))
       (PROGN (SETF (GET 'ELEMENT 'DT*SORT.NUMBER) '3)
              (SETF (GET 'ELEMENT 'DT*DIRECT.SUBSORTS) '(EL.OF.S))
              (SETF (GET 'ELEMENT 'DT*TRANSITIVE.CLOSURE) '(ELEMENT EL.OF.S))
              (SETF (GET 'ELEMENT 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION) (EL.OF.S EL.OF.S) (REL) (SYMB.OF.FUNCTION)
                       (ELEMENT ELEMENT) (SET ELEMENT) (ANY ELEMENT)))
              (SETF (GET 'ELEMENT 'DT*MINIMAL.SUBSORTS) '(EL.OF.S))
              (SETF (GET 'ELEMENT 'DT*DIRECT.SUPERSORTS) '(SET))
              (SETF (GET 'ELEMENT 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET ELEMENT)))
       (PROGN (SETF (GET 'SET 'DT*SORT.NUMBER) '2)
              (SETF (GET 'SET 'DT*DIRECT.SUBSORTS) '(REL ELEMENT))
              (SETF (GET 'SET 'DT*TRANSITIVE.CLOSURE) '(EQU.RELATION SET REL ELEMENT EL.OF.S))
              (SETF (GET 'SET 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (EL.OF.S EL.OF.S) (REL REL)
                       (SYMB.OF.FUNCTION) (ELEMENT ELEMENT) (SET SET) (ANY SET)))
              (SETF (GET 'SET 'DT*MINIMAL.SUBSORTS) '(REL EL.OF.S))
              (SETF (GET 'SET 'DT*DIRECT.SUPERSORTS) '(ANY))
              (SETF (GET 'SET 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY SET)))
       (PROGN (SETF (GET 'ANY 'DT*SORT.NUMBER) '1)
              (SETF (GET 'ANY 'DT*DIRECT.SUBSORTS) '(SYMB.OF.FUNCTION SET))
              (SETF (GET 'ANY 'DT*TRANSITIVE.CLOSURE)
                     '(EQU.RELATION ANY SYMB.OF.FUNCTION SET REL ELEMENT EL.OF.S))
              (SETF (GET 'ANY 'DT*MAX.SUBSORTS)
                     '((EQU.RELATION EQU.RELATION) (EL.OF.S EL.OF.S) (REL REL)
                       (SYMB.OF.FUNCTION SYMB.OF.FUNCTION) (ELEMENT ELEMENT) (SET SET)
                       (ANY ANY)))
              (SETF (GET 'ANY 'DT*MINIMAL.SUBSORTS) '(SYMB.OF.FUNCTION REL EL.OF.S))
              (SETF (GET 'ANY 'DT*DIRECT.SUPERSORTS) 'NIL)
              (SETF (GET 'ANY 'DT*INVERSE.TRANSITIVE.CLOSURE) '(ANY)))) (PROGN (SETQ ST*STACK1 ST*STACK1)
       (SETQ ST*SYMBOL.ADDRESSES
              '(NIL (ANY . T) (TRUE . 0) (FALSE . 1) (SET . T) (ELEMENT . T) (EL . 2)
                (SET.EQUAL . 3) (PAIR . 4) (X_5 . 5) (X_6 . 6) (X_7 . 7) (X_8 . 8) (= . 9)
                (SYMB.OF.FUNCTION . T) (MAPPING . 10) (APPLY . 11) (REL . T) (S . 12)
                (EL.OF.S . T) (EQU.REL . 13) (EQU.RELATION . T) (IND.EQU . 14) (X_16 . 16)
                (X_15 . 15) (X_17 . 17) (X_18 . 18) (X_19 . 19) (PREIMAGE . 20) (X_21 . 21)
                (X_22 . 22) (X_23 . 23))))))))
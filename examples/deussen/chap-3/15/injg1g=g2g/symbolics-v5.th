;;; -*- Package: IL; Base: 10. -*-
(COND ((FMT-LOAD "02-JUL-85 19:45:03"
NIL(((ALL F:MENGE ALL MAL:VERKN ALL I1,I2:INDEXMENGE ALL X,X1,X2:ELEMENT ALL J,RHO0,RHO1,RHO2:INDEX ALL Z1,Z2,Z:ELEMENT HG (F MAL) AND MINIMAL-BED-L (F MAL) AND MINIMAL-BED-R (F MAL) AND (ALL J1:INDEX EL-IND (J1 I1) IMPL LIDEAL (U (J1) F MAL) AND MINIMAL (U (J1) F MAL)) AND (ALL J2:INDEX EL-IND (J2 I2) IMPL RIDEAL (U (J2) F MAL) AND MINIMAL (U (J2) F MAL)) AND EL-IND (J I1) AND EL-IND (RHO0 I2) AND EL-IND (RHO1 I2) AND EL-IND (RHO2 I2) AND EL (Z1 G (RHO0 J)) AND EL (Z2 G (RHO0 J)) AND APPLYV (MAL X1 X) = APPLYV (MAL X2 X) AND X1 = APPLYV (MAL E (RHO1 J) Z1) AND X2 = APPLYV (MAL E (RHO2 J) Z2) AND GLEICH-E (Z APPLYV (MAL E (RHO0 J) X)) AND VORAUSSETZUNG315INJGLEICH (F MAL I1 I2 X X1 X2 J RHO0 RHO1 RHO2 Z1 Z2 Z) IMPL GLEICH-E (APPLYV (MAL Z1 Z) APPLYV (MAL Z2 Z))) (ALL 153. (ALL 152. (ALL 150. (ALL 151. (ALL 147. (ALL 148. (ALL 149. (ALL 143. (ALL 144. (ALL 145. (ALL 146. (ALL 140. (ALL 141. (ALL 142. (IMPL (AND (+ 34. (153. 152.) NIL) (AND (+ 45. (153. 152.) NIL) (AND (+ 46. (153. 152.) NIL) (AND (ALL 139. (IMPL (+ 47. (139. 151.) NIL) (AND (+ 29. ((48. 139.) 153. 152.) NIL) (+ 36. ((48. 139.) 153. 152.) NIL)))) (AND (ALL 138. (IMPL (+ 47. (138. 150.) NIL) (AND (+ 30. ((48. 138.) 153. 152.) NIL) (+ 36. ((48. 138.) 153. 152.) NIL)))) (AND (+ 47. (146. 151.) NIL) (AND (+ 47. (145. 150.) NIL) (AND (+ 47. (144. 150.) NIL) (AND (+ 47. (143. 150.) NIL) (AND (+ 35. (142. (55. 145. 146.)) NIL) (AND (+ 35. (141. (55. 145. 146.)) NIL) (AND (+ 105. ((38. 152. 148. 149.) (38. 152. 147. 149.)) NIL) (AND (+ 105. (148. (38. 152. (49. 144. 146.) 142.)) NIL) (AND (+ 105. (147. (38. 152. (49. 143. 146.) 141.)) NIL) (AND (+ 56. (140. (38. 152. (49. 145. 146.) 149.)) NIL) (+ 83. (153. 152. 151. 150. 149. 148. 147. 146. 145. 144. 143. 142. 141. 140.) NIL)))))))))))))))) (+ 56. ((38. 152. 142. 140.) (38. 152. 141. 140.)) NIL)))))))))))))))) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (149202. 149197. 149192. 149187. 149182. 149177. 149172. 149167. 149162. 149157. 149152. 149147. 149142. 149137. 149132. 149127. 149207. 149212. 149217. 149222. 149227. 149232. 149237. 149242. 149247. 149252. 149257. 149262. 149267. 149272. 149277. 149282. 149287. 149292. 149362. 149357. 149352. 149347. 149342. 149337. 149332. 149327. 149322. 149317. 149312. 149307. 149302. 149297. 149377. 149382. 149387. 149392. 149397. 149402. 149407. 149412. 149417. 149422. 149427. 149432. 149437. 149442. 149447. 149452. ATP.MEMORY.NIL 149477. 149472. 149467. 149462. 149457. 149492. 149497. ATP.MEMORY.NIL ATP.MEMORY.NIL 149562. 149557. 149552. 149547. 149542. 149537. 149532. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 149502. 149507. 149512. 149517. 149522. 149527. 149577. 149591. 149606. 149620. 149634. 149649. 149664. 149678. 149692. 149707. 149722. 149737. 149751. 149766. 149780. 149794. 149808. 149822. 149836. 149850. 149865. 149880. 149895. 149910. 149925. 149940. 149955. 149970. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 149985. 150000.))) (DATALIST (QUOTE (15. "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1. (POSITIVE))) ((+ 1. (NEGATIVE))) ((+ 1. (NIL))) ((- 1. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2. (POSITIVE))) ((+ 2. (NEGATIVE))) ((+ 2. (NIL))) ((- 2. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "LIDEAL" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 29. (POSITIVE))) ((+ 29. (NEGATIVE))) ((+ 29. (NIL))) ((- 29. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "RIDEAL" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 30. (POSITIVE))) ((+ 30. (NEGATIVE))) ((+ 30. (NIL))) ((- 30. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "UHG" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 31. (POSITIVE))) ((+ 31. (NEGATIVE))) ((+ 31. (NIL))) ((- 31. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "ME" NIL NIL (MENGE MENGE) NIL NIL ((- 32. (POSITIVE))) ((+ 32. (NEGATIVE))) ((+ 32. (NIL))) ((- 32. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "NICHTLEER" NIL NIL (MENGE) NIL NIL ((- 33. (POSITIVE))) ((+ 33. (NEGATIVE))) ((+ 33. (NIL))) ((- 33. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "HG" NIL NIL (MENGE VERKN) NIL NIL ((- 34. (POSITIVE))) ((+ 34. (NEGATIVE))) ((+ 34. (NIL))) ((- 34. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "EL" NIL NIL (ELEMENT MENGE) NIL NIL ((- 35. (POSITIVE))) ((+ 35. (NEGATIVE))) ((+ 35. (NIL))) ((- 35. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MINIMAL" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 36. (POSITIVE))) ((+ 36. (NEGATIVE))) ((+ 36. (NIL))) ((- 36. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "MPROD" NIL MENGE (MENGE MENGE VERKN) NIL NIL NIL NIL NIL 3. MENGE (DT*ST-KIND NIL) FUNCTION 14. "APPLYV" NIL ELEMENT (VERKN ELEMENT ELEMENT) NIL NIL NIL NIL NIL 3. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "F*X" NIL MENGE (MENGE ELEMENT VERKN) NIL NIL NIL NIL NIL 3. MENGE (DT*ST-KIND NIL) FUNCTION 14. "SM" NIL MENGE (MENGE MENGE) NIL NIL NIL NIL NIL 2. MENGE (DT*ST-KIND NIL) FUNCTION 14. "SET" NIL MENGE (ELEMENT) NIL NIL NIL NIL NIL 1. MENGE (DT*ST-KIND NIL) FUNCTION 14. "VER" NIL MENGE (MENGE MENGE) NIL NIL NIL NIL NIL 2. MENGE (DT*ST-KIND NIL) FUNCTION 15. "GR" NIL NIL (MENGE VERKN ELEMENT) NIL NIL ((- 43. (POSITIVE))) ((+ 43. (NEGATIVE))) ((+ 43. (NIL))) ((- 43. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "INVERS" NIL ELEMENT (VERKN ELEMENT) NIL NIL NIL NIL NIL 2. ELEMENT (DT*ST-KIND NIL) FUNCTION 15. "MINIMAL-BED-L" NIL NIL (MENGE VERKN) NIL NIL ((- 45. (POSITIVE))) ((+ 45. (NEGATIVE))) ((+ 45. (NIL))) ((- 45. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MINIMAL-BED-R" NIL NIL (MENGE VERKN) NIL NIL ((- 46. (POSITIVE))) ((+ 46. (NEGATIVE))) ((+ 46. (NIL))) ((- 46. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "EL-IND" NIL NIL (INDEX INDEXMENGE) NIL NIL ((- 47. (POSITIVE))) ((+ 47. (NEGATIVE))) ((+ 47. (NIL))) ((- 47. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "U" NIL MENGE (INDEX) NIL NIL NIL NIL NIL 1. MENGE (DT*ST-KIND NIL) FUNCTION 14. "E" NIL ELEMENT (INDEX INDEX) NIL NIL NIL NIL NIL 2. ELEMENT (DT*ST-KIND NIL) FUNCTION 15. "NICHTLEER-IND" NIL NIL (INDEXMENGE) NIL NIL ((- 50. (POSITIVE))) ((+ 50. (NEGATIVE))) ((+ 50. (NIL))) ((- 50. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "GLEICH" NIL NIL (MENGE MENGE) NIL NIL ((- 51. (POSITIVE))) ((+ 51. (NEGATIVE))) ((+ 51. (NIL))) ((- 51. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "VER-IND" NIL MENGE (INDEXMENGE) NIL NIL NIL NIL NIL 1. MENGE (DT*ST-KIND NIL) FUNCTION 14. "SM-IND" NIL MENGE (INDEXMENGE) NIL NIL NIL NIL NIL 1. MENGE (DT*ST-KIND NIL) FUNCTION 15. "IDEAL" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 54. (POSITIVE))) ((+ 54. (NEGATIVE))) ((+ 54. (NIL))) ((- 54. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "G" NIL MENGE (INDEX INDEX) NIL NIL NIL NIL NIL 2. MENGE (DT*ST-KIND NIL) FUNCTION 15. "GLEICH-E" NIL NIL (ELEMENT ELEMENT) NIL NIL ((- 56. (POSITIVE))) ((+ 56. (NEGATIVE))) ((+ 56. (NIL))) ((- 56. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "VORAUSSETZUNG315INJGLEICH" NIL NIL (ANY ANY ANY ANY ANY ANY ANY ANY ANY ANY ANY ANY ANY ANY) NIL NIL ((- 83. (POSITIVE))) ((+ 83. (NEGATIVE))) ((+ 83. (NIL))) ((- 83. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 105. (POSITIVE . SYMMETRIC))) ((+ 105. (NEGATIVE . SYMMETRIC))) ((+ 105. (NIL . SYMMETRIC))) ((- 105. (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 150000.)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 150000.) (SETQ COUNTER1 154.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0.) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 150000.) (MEM-INITIALIZE 150000.))) (SETQ COUNTER1 154.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 150000.) (RPAQ MEM*NEXT.RADR (IPLUS 149122. INCREMENT))) (T (RPAQ MEM*NEXT.RADR 149122.))) (RPAQ MEM*NEXT.VADR 154.) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (INDEXMENGE INDEX ELEMENT VERKN MENGE ANY)) (RPAQQ DT*SORT.NR 12.) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0.) (RPAQQ DT*CONSTANT.COUNTER 0.) (RPAQQ DT*CONSTANT.ALL NIL) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0.) (RPAQQ DT*FUNCTION.ALL (55. 53. 52. 49. 48. 44. 42. 41. 40. 39. 38. 37.)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0.) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES (105.)) (RPAQQ DT*NONEQUALITY.PREDICATES (83. 56. 54. 51. 50. 47. 46. 45. 43. 36. 35. 34. 33. 32. 31. 30. 29. 2. 1.)) (RPAQQ DT*PREDICATE.ALL (105. 83. 56. 54. 51. 50. 47. 46. 45. 43. 36. 35. 34. 33. 32. 31. 30. 29. 2. 1.)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1.) (RPAQQ DT*FALSE.PREDICATE 2.) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (PROGN (REMPROPS (QUOTE DT*PREDICATE.WITH.ATTRIBUTES)) (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (NCONC (QUOTE (DEFINED (105.) SYMMETRIC (105.) REFLEXIVE (105.))) (GETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES))))))
(PROGN (PROGN (REMPROPS (QUOTE INDEXMENGE)) (SETPROPLIST (QUOTE INDEXMENGE) (NCONC (QUOTE (DT*SORT.NUMBER 11. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (INDEXMENGE) DT*MAX.SUBSORTS ((INDEXMENGE INDEXMENGE) (INDEX) (ELEMENT) (VERKN) (MENGE) (ANY INDEXMENGE)) DT*MINIMAL.SUBSORTS (INDEXMENGE) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (INDEXMENGE ANY))) (GETPROPLIST (QUOTE INDEXMENGE))))) (PROGN (REMPROPS (QUOTE INDEX)) (SETPROPLIST (QUOTE INDEX) (NCONC (QUOTE (DT*SORT.NUMBER 10. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (INDEX) DT*MAX.SUBSORTS ((INDEXMENGE) (INDEX INDEX) (ELEMENT) (VERKN) (MENGE) (ANY INDEX)) DT*MINIMAL.SUBSORTS (INDEX) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (INDEX ANY))) (GETPROPLIST (QUOTE INDEX))))) (PROGN (REMPROPS (QUOTE ELEMENT)) (SETPROPLIST (QUOTE ELEMENT) (NCONC (QUOTE (DT*SORT.NUMBER 9. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (ELEMENT) DT*MAX.SUBSORTS ((INDEXMENGE) (INDEX) (ELEMENT ELEMENT) (VERKN) (MENGE) (ANY ELEMENT)) DT*MINIMAL.SUBSORTS (ELEMENT) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT ANY))) (GETPROPLIST (QUOTE ELEMENT))))) (PROGN (REMPROPS (QUOTE VERKN)) (SETPROPLIST (QUOTE VERKN) (NCONC (QUOTE (DT*SORT.NUMBER 8. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (VERKN) DT*MAX.SUBSORTS ((INDEXMENGE) (INDEX) (ELEMENT) (VERKN VERKN) (MENGE) (ANY VERKN)) DT*MINIMAL.SUBSORTS (VERKN) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (VERKN ANY))) (GETPROPLIST (QUOTE VERKN))))) (PROGN (REMPROPS (QUOTE MENGE)) (SETPROPLIST (QUOTE MENGE) (NCONC (QUOTE (DT*SORT.NUMBER 7. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (MENGE) DT*MAX.SUBSORTS ((INDEXMENGE) (INDEX) (ELEMENT) (VERKN) (MENGE MENGE) (ANY MENGE)) DT*MINIMAL.SUBSORTS (MENGE) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (MENGE ANY))) (GETPROPLIST (QUOTE MENGE))))) (PROGN (REMPROPS (QUOTE ANY)) (SETPROPLIST (QUOTE ANY) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (INDEXMENGE INDEX ELEMENT VERKN MENGE) DT*SORT.NUMBER 1. DT*TRANSITIVE.CLOSURE (INDEXMENGE INDEX ELEMENT VERKN MENGE ANY) DT*MAX.SUBSORTS ((INDEXMENGE INDEXMENGE) (INDEX INDEX) (ELEMENT ELEMENT) (VERKN VERKN) (MENGE MENGE) (ANY ANY)) DT*MINIMAL.SUBSORTS (INDEX ELEMENT VERKN MENGE) DT*DIRECT.SUPERSORTS NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*LEAST.SUPERSORTS ((ANY ANY)))) (GETPROPLIST (QUOTE ANY))))))
(PROGN (RPAQQ ST*STACK1 (NIL ((X_138 PROGN (DT-VARIABLE.DELETE 138.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_138) ST*SYMBOL.ADDRESSES))) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL) (X_139 PROGN (DT-VARIABLE.DELETE 139.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_139) ST*SYMBOL.ADDRESSES))) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL) (X_140 PROGN (DT-VARIABLE.DELETE 140.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_140) ST*SYMBOL.ADDRESSES))) (X_141 PROGN (DT-VARIABLE.DELETE 141.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_141) ST*SYMBOL.ADDRESSES))) (X_142 PROGN (DT-VARIABLE.DELETE 142.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_142) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_143 PROGN (DT-VARIABLE.DELETE 143.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_143) ST*SYMBOL.ADDRESSES))) (X_144 PROGN (DT-VARIABLE.DELETE 144.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_144) ST*SYMBOL.ADDRESSES))) (X_145 PROGN (DT-VARIABLE.DELETE 145.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_145) ST*SYMBOL.ADDRESSES))) (X_146 PROGN (DT-VARIABLE.DELETE 146.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_146) ST*SYMBOL.ADDRESSES))) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL) (X_147 PROGN (DT-VARIABLE.DELETE 147.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_147) ST*SYMBOL.ADDRESSES))) (X_148 PROGN (DT-VARIABLE.DELETE 148.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_148) ST*SYMBOL.ADDRESSES))) (X_149 PROGN (DT-VARIABLE.DELETE 149.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_149) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_150 PROGN (DT-VARIABLE.DELETE 150.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_150) ST*SYMBOL.ADDRESSES))) (X_151 PROGN (DT-VARIABLE.DELETE 151.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_151) ST*SYMBOL.ADDRESSES))) (INDEXMENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEXMENGE) (QUOTE (ANY))) (INDEXMENGE PUTPROP (QUOTE INDEXMENGE) NIL) (X_152 PROGN (DT-VARIABLE.DELETE 152.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_152) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (X_153 PROGN (DT-VARIABLE.DELETE 153.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_153) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) NIL)) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1.) (FALSE . 2.) (MENGE . T) (VERKN . T) (ELEMENT . T) (INDEX . T) (INDEXMENGE . T) (LIDEAL . 29.) (RIDEAL . 30.) (UHG . 31.) (ME . 32.) (NICHTLEER . 33.) (HG . 34.) (EL . 35.) (MINIMAL . 36.) (MPROD . 37.) (APPLYV . 38.) (F*X . 39.) (SM . 40.) (SET . 41.) (VER . 42.) (GR . 43.) (INVERS . 44.) (MINIMAL-BED-L . 45.) (MINIMAL-BED-R . 46.) (EL-IND . 47.) (U . 48.) (E . 49.) (NICHTLEER-IND . 50.) (GLEICH . 51.) (VER-IND . 52.) (SM-IND . 53.) (IDEAL . 54.) (G . 55.) (GLEICH-E . 56.) (X_79 . 79.) (X_78 . 78.) (X_77 . 77.) (X_76 . 76.) (X_75 . 75.) (X_74 . 74.) (X_73 . 73.) (X_57 . 57.) (X_58 . 58.) (X_59 . 59.) (X_60 . 60.) (X_61 . 61.) (X_62 . 62.) (X_82 . 82.) (VORAUSSETZUNG315INJGLEICH . 83.) (X_88 . 88.) (X_87 . 87.) (X_86 . 86.) (X_85 . 85.) (X_84 . 84.) (X_90 . 90.) (X_91 . 91.) (X_92 . 92.) (X_93 . 93.) (X_94 . 94.) (X_95 . 95.) (X_96 . 96.) (X_97 . 97.) (X_98 . 98.) (X_99 . 99.) (X_100 . 100.) (X_101 . 101.) (X_102 . 102.) (X_103 . 103.) (X_104 . 104.) (= . 105.) (X_119 . 119.) (X_118 . 118.) (X_117 . 117.) (X_116 . 116.) (X_115 . 115.) (X_114 . 114.) (X_113 . 113.) (X_112 . 112.) (X_111 . 111.) (X_110 . 110.) (X_109 . 109.) (X_108 . 108.) (X_107 . 107.) (X_106 . 106.) (X_120 . 120.) (X_121 . 121.) (X_122 . 122.) (X_123 . 123.) (X_124 . 124.) (X_125 . 125.) (X_126 . 126.) (X_127 . 127.) (X_128 . 128.) (X_129 . 129.) (X_130 . 130.) (X_131 . 131.) (X_132 . 132.) (X_133 . 133.) (X_134 . 134.) (X_135 . 135.) (X_136 . 136.) (X_137 . 137.) (X_153 . 153.) (X_152 . 152.) (X_151 . 151.) (X_150 . 150.) (X_149 . 149.) (X_148 . 148.) (X_147 . 147.) (X_146 . 146.) (X_145 . 145.) (X_144 . 144.) (X_143 . 143.) (X_142 . 142.) (X_141 . 141.) (X_140 . 140.) (X_139 . 139.) (X_138 . 138.))))))))
;;; -*- Package: IL; Base: 10. -*-
(COND ((FMT-LOAD "02-JUL-85 19:28:02"
NIL(((SORT MENGE,VERKN,ELEMENT,INDEX,INDEXMENGE:ANY) (+ 1. NIL) TYPE) ((TYPE LIDEAL (MENGE MENGE VERKN)) (+ 1. NIL) TYPE) ((TYPE RIDEAL (MENGE MENGE VERKN)) (+ 1. NIL) TYPE) ((TYPE UHG (MENGE MENGE VERKN)) (+ 1. NIL) TYPE) ((TYPE ME (MENGE MENGE)) (+ 1. NIL) TYPE) ((TYPE NICHTLEER (MENGE)) (+ 1. NIL) TYPE) ((TYPE HG (MENGE VERKN)) (+ 1. NIL) TYPE) ((TYPE EL (ELEMENT MENGE)) (+ 1. NIL) TYPE) ((TYPE MINIMAL (MENGE MENGE VERKN)) (+ 1. NIL) TYPE) ((TYPE MPROD (MENGE MENGE VERKN) :MENGE) (+ 1. NIL) TYPE) ((TYPE APPLYV (VERKN ELEMENT ELEMENT) :ELEMENT) (+ 1. NIL) TYPE) ((TYPE F*X (MENGE ELEMENT VERKN) :MENGE) (+ 1. NIL) TYPE) ((TYPE SM (MENGE MENGE) :MENGE) (+ 1. NIL) TYPE) ((TYPE SET (ELEMENT) :MENGE) (+ 1. NIL) TYPE) ((TYPE VER (MENGE MENGE) :MENGE) (+ 1. NIL) TYPE) ((TYPE GR (MENGE VERKN ELEMENT)) (+ 1. NIL) TYPE) ((TYPE INVERS (VERKN ELEMENT) :ELEMENT) (+ 1. NIL) TYPE) ((TYPE MINIMAL-BED-L (MENGE VERKN)) (+ 1. NIL) TYPE) ((TYPE MINIMAL-BED-R (MENGE VERKN)) (+ 1. NIL) TYPE) ((TYPE EL-IND (INDEX INDEXMENGE)) (+ 1. NIL) TYPE) ((TYPE U (INDEX) : MENGE) (+ 1. NIL) TYPE) ((TYPE E (INDEX INDEX) : ELEMENT) (+ 1. NIL) TYPE) ((TYPE NICHTLEER-IND (INDEXMENGE)) (+ 1. NIL) TYPE) ((TYPE GLEICH (MENGE MENGE)) (+ 1. NIL) TYPE) ((TYPE VER-IND (INDEXMENGE) : MENGE) (+ 1. NIL) TYPE) ((TYPE SM-IND (INDEXMENGE) : MENGE) (+ 1. NIL) TYPE) ((TYPE IDEAL (MENGE MENGE VERKN)) (+ 1. NIL) TYPE) ((TYPE G (INDEX INDEX) :MENGE) (+ 1. NIL) TYPE) ((TYPE GLEICH-E (ELEMENT ELEMENT)) (+ 1. NIL) TYPE) ((* LEMMA 3.16 *) COMMENT COMMENT) ((ALL F:MENGE ALL MAL:VERKN ALL I1,I2:INDEXMENGE ALL X,X1,X2:ELEMENT ALL J,RHO0,RHO1,RHO2:INDEX ALL Z1,Z2,Z:ELEMENT VORAUSSETZUNG315INJGLEICH (F MAL I1 I2 X X1 X2 J RHO0 RHO1 RHO2 Z1 Z2 Z) IMPL GLEICH-E (APPLYV (MAL E (RHO1 J) APPLYV (MAL Z1 Z)) APPLYV (MAL E (RHO2 J) APPLYV (MAL Z2 Z)))) (ALL 79. (ALL 78. (ALL 76. (ALL 77. (ALL 73. (ALL 74. (ALL 75. (ALL 60. (ALL 59. (ALL 58. (ALL 57. (ALL 82. (ALL 62. (ALL 61. (IMPL (+ 83. (79. 78. 77. 76. 75. 74. 73. 57. 58. 59. 60. 61. 62. 82.) NIL) (+ 56. ((38. 78. (49. 59. 57.) (38. 78. 61. 82.)) (38. 78. (49. 60. 57.) (38. 78. 62. 82.))) NIL)))))))))))))))) QUANTIFICATION) ((* MODIFIKATION EINER GLEICHUNG DURCH MUTLIPLIKATION UND UMKLAMMERN *) COMMENT COMMENT) ((ALL MAL:VERKN ALL A,B,C,D,E:ELEMENT GLEICH-E (APPLYV (MAL A B) APPLYV (MAL C D)) IMPL GLEICH-E (APPLYV (MAL APPLYV (MAL E A) B) APPLYV (MAL APPLYV (MAL E C) D))) (ALL 88. (ALL 90. (ALL 84. (ALL 85. (ALL 86. (ALL 87. (IMPL (+ 56. ((38. 88. 87. 86.) (38. 88. 85. 84.)) NIL) (+ 56. ((38. 88. (38. 88. 90. 87.) 86.) (38. 88. (38. 88. 90. 85.) 84.)) NIL)))))))) QUANTIFICATION) ((* RECHENREGEL 3.12.2 *) COMMENT COMMENT) ((ALL F:MENGE ALL MAL:VERKN ALL I1,I2:INDEXMENGE ALL X,X1,X2:ELEMENT ALL J,RHO0,RHO1,RHO2:INDEX ALL Z1,Z2,Z:ELEMENT VORAUSSETZUNG315INJGLEICH (F MAL I1 I2 X X1 X2 J RHO0 RHO1 RHO2 Z1 Z2 Z) IMPL APPLYV (MAL E (RHO0 J) E (RHO1 J)) = E (RHO0 J) AND APPLYV (MAL E (RHO0 J) E (RHO2 J)) = E (RHO0 J)) (ALL 91. (ALL 92. (ALL 94. (ALL 93. (ALL 97. (ALL 96. (ALL 95. (ALL 101. (ALL 100. (ALL 99. (ALL 98. (ALL 104. (ALL 103. (ALL 102. (IMPL (+ 83. (91. 92. 93. 94. 95. 96. 97. 98. 99. 100. 101. 102. 103. 104.) NIL) (AND (+ 105. ((38. 92. (49. 99. 98.) (49. 100. 98.)) (49. 99. 98.)) NIL) (+ 105. ((38. 92. (49. 99. 98.) (49. 101. 98.)) (49. 99. 98.)) NIL))))))))))))))))) QUANTIFICATION) ((* G (RHO0 J) IST GRUPPE *) COMMENT COMMENT) ((ALL F:MENGE ALL MAL:VERKN ALL I1,I2:INDEXMENGE ALL X,X1,X2:ELEMENT ALL J,RHO0,RHO1,RHO2:INDEX ALL Z1,Z2,Z:ELEMENT VORAUSSETZUNG315INJGLEICH (F MAL I1 I2 X X1 X2 J RHO0 RHO1 RHO2 Z1 Z2 Z) IMPL GR (G (RHO0 J) MAL E (RHO0 J))) (ALL 119. (ALL 118. (ALL 116. (ALL 117. (ALL 113. (ALL 114. (ALL 115. (ALL 109. (ALL 110. (ALL 111. (ALL 112. (ALL 106. (ALL 107. (ALL 108. (IMPL (+ 83. (119. 118. 117. 116. 115. 114. 113. 112. 111. 110. 109. 108. 107. 106.) NIL) (+ 43. ((55. 111. 112.) 118. (49. 111. 112.)) NIL)))))))))))))))) QUANTIFICATION) ((* GRUPPENEIGENSCHAFT : EX = X *) COMMENT COMMENT) ((ALL F:MENGE ALL MAL:VERKN ALL E,X:ELEMENT GR (F MAL E) AND EL (X F) IMPL APPLYV (MAL E X) = X) (ALL 120. (ALL 121. (ALL 123. (ALL 122. (IMPL (AND (+ 43. (120. 121. 122.) NIL) (+ 35. (123. 120.) NIL)) (+ 105. ((38. 121. 122. 123.) 123.) NIL)))))) QUANTIFICATION) ((* Z1Z BZW Z2Z SIND G (RHO J) *) COMMENT COMMENT) ((ALL F:MENGE ALL MAL:VERKN ALL I1,I2:INDEXMENGE ALL X,X1,X2:ELEMENT ALL J,RHO0,RHO1,RHO2:INDEX ALL Z1,Z2,Z:ELEMENT VORAUSSETZUNG315INJGLEICH (F MAL I1 I2 X X1 X2 J RHO0 RHO1 RHO2 Z1 Z2 Z) IMPL EL (APPLYV (MAL Z1 Z) G (RHO0 J)) AND EL (APPLYV (MAL Z2 Z) G (RHO0 J))) (ALL 124. (ALL 125. (ALL 127. (ALL 126. (ALL 130. (ALL 129. (ALL 128. (ALL 134. (ALL 133. (ALL 132. (ALL 131. (ALL 137. (ALL 136. (ALL 135. (IMPL (+ 83. (124. 125. 126. 127. 128. 129. 130. 131. 132. 133. 134. 135. 136. 137.) NIL) (AND (+ 35. ((38. 125. 135. 137.) (55. 132. 131.)) NIL) (+ 35. ((38. 125. 136. 137.) (55. 132. 131.)) NIL))))))))))))))))) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (149207. 149212. 149217. 149222. 149227. 149232. 149237. 149242. 149247. 149252. 149257. 149262. 149267. 149272. 149277. 149282. 149287. 149292. 149362. 149357. 149352. 149347. 149342. 149337. 149332. 149327. 149322. 149317. 149312. 149307. 149302. 149297. 149377. 149382. 149387. 149392. 149397. 149402. 149407. 149412. 149417. 149422. 149427. 149432. 149437. 149442. 149447. 149452. ATP.MEMORY.NIL 149477. 149472. 149467. 149462. 149457. 149492. 149497. ATP.MEMORY.NIL ATP.MEMORY.NIL 149562. 149557. 149552. 149547. 149542. 149537. 149532. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 149502. 149507. 149512. 149517. 149522. 149527. 149577. 149591. 149606. 149620. 149634. 149649. 149664. 149678. 149692. 149707. 149722. 149737. 149751. 149766. 149780. 149794. 149808. 149822. 149836. 149850. 149865. 149880. 149895. 149910. 149925. 149940. 149955. 149970. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 149985. 150000.))) (DATALIST (QUOTE (15. "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1. (POSITIVE))) ((+ 1. (NEGATIVE))) ((+ 1. (NIL))) ((- 1. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2. (POSITIVE))) ((+ 2. (NEGATIVE))) ((+ 2. (NIL))) ((- 2. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "LIDEAL" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 29. (POSITIVE))) ((+ 29. (NEGATIVE))) ((+ 29. (NIL))) ((- 29. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "RIDEAL" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 30. (POSITIVE))) ((+ 30. (NEGATIVE))) ((+ 30. (NIL))) ((- 30. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "UHG" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 31. (POSITIVE))) ((+ 31. (NEGATIVE))) ((+ 31. (NIL))) ((- 31. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "ME" NIL NIL (MENGE MENGE) NIL NIL ((- 32. (POSITIVE))) ((+ 32. (NEGATIVE))) ((+ 32. (NIL))) ((- 32. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "NICHTLEER" NIL NIL (MENGE) NIL NIL ((- 33. (POSITIVE))) ((+ 33. (NEGATIVE))) ((+ 33. (NIL))) ((- 33. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "HG" NIL NIL (MENGE VERKN) NIL NIL ((- 34. (POSITIVE))) ((+ 34. (NEGATIVE))) ((+ 34. (NIL))) ((- 34. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "EL" NIL NIL (ELEMENT MENGE) NIL NIL ((- 35. (POSITIVE))) ((+ 35. (NEGATIVE))) ((+ 35. (NIL))) ((- 35. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MINIMAL" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 36. (POSITIVE))) ((+ 36. (NEGATIVE))) ((+ 36. (NIL))) ((- 36. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "MPROD" NIL MENGE (MENGE MENGE VERKN) NIL NIL NIL NIL NIL 3. MENGE (DT*ST-KIND NIL) FUNCTION 14. "APPLYV" NIL ELEMENT (VERKN ELEMENT ELEMENT) NIL NIL NIL NIL NIL 3. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "F*X" NIL MENGE (MENGE ELEMENT VERKN) NIL NIL NIL NIL NIL 3. MENGE (DT*ST-KIND NIL) FUNCTION 14. "SM" NIL MENGE (MENGE MENGE) NIL NIL NIL NIL NIL 2. MENGE (DT*ST-KIND NIL) FUNCTION 14. "SET" NIL MENGE (ELEMENT) NIL NIL NIL NIL NIL 1. MENGE (DT*ST-KIND NIL) FUNCTION 14. "VER" NIL MENGE (MENGE MENGE) NIL NIL NIL NIL NIL 2. MENGE (DT*ST-KIND NIL) FUNCTION 15. "GR" NIL NIL (MENGE VERKN ELEMENT) NIL NIL ((- 43. (POSITIVE))) ((+ 43. (NEGATIVE))) ((+ 43. (NIL))) ((- 43. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "INVERS" NIL ELEMENT (VERKN ELEMENT) NIL NIL NIL NIL NIL 2. ELEMENT (DT*ST-KIND NIL) FUNCTION 15. "MINIMAL-BED-L" NIL NIL (MENGE VERKN) NIL NIL ((- 45. (POSITIVE))) ((+ 45. (NEGATIVE))) ((+ 45. (NIL))) ((- 45. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MINIMAL-BED-R" NIL NIL (MENGE VERKN) NIL NIL ((- 46. (POSITIVE))) ((+ 46. (NEGATIVE))) ((+ 46. (NIL))) ((- 46. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "EL-IND" NIL NIL (INDEX INDEXMENGE) NIL NIL ((- 47. (POSITIVE))) ((+ 47. (NEGATIVE))) ((+ 47. (NIL))) ((- 47. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "U" NIL MENGE (INDEX) NIL NIL NIL NIL NIL 1. MENGE (DT*ST-KIND NIL) FUNCTION 14. "E" NIL ELEMENT (INDEX INDEX) NIL NIL NIL NIL NIL 2. ELEMENT (DT*ST-KIND NIL) FUNCTION 15. "NICHTLEER-IND" NIL NIL (INDEXMENGE) NIL NIL ((- 50. (POSITIVE))) ((+ 50. (NEGATIVE))) ((+ 50. (NIL))) ((- 50. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "GLEICH" NIL NIL (MENGE MENGE) NIL NIL ((- 51. (POSITIVE))) ((+ 51. (NEGATIVE))) ((+ 51. (NIL))) ((- 51. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "VER-IND" NIL MENGE (INDEXMENGE) NIL NIL NIL NIL NIL 1. MENGE (DT*ST-KIND NIL) FUNCTION 14. "SM-IND" NIL MENGE (INDEXMENGE) NIL NIL NIL NIL NIL 1. MENGE (DT*ST-KIND NIL) FUNCTION 15. "IDEAL" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 54. (POSITIVE))) ((+ 54. (NEGATIVE))) ((+ 54. (NIL))) ((- 54. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "G" NIL MENGE (INDEX INDEX) NIL NIL NIL NIL NIL 2. MENGE (DT*ST-KIND NIL) FUNCTION 15. "GLEICH-E" NIL NIL (ELEMENT ELEMENT) NIL NIL ((- 56. (POSITIVE))) ((+ 56. (NEGATIVE))) ((+ 56. (NIL))) ((- 56. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "VORAUSSETZUNG315INJGLEICH" NIL NIL (ANY ANY ANY ANY ANY ANY ANY ANY ANY ANY ANY ANY ANY ANY) NIL NIL ((- 83. (POSITIVE))) ((+ 83. (NEGATIVE))) ((+ 83. (NIL))) ((- 83. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 105. (POSITIVE . SYMMETRIC))) ((+ 105. (NEGATIVE . SYMMETRIC))) ((+ 105. (NIL . SYMMETRIC))) ((- 105. (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEXMENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. INDEX NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 150000.)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 150000.) (SETQ COUNTER1 138.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0.) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 150000.) (MEM-INITIALIZE 150000.))) (SETQ COUNTER1 138.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 150000.) (RPAQ MEM*NEXT.RADR (IPLUS 149202. INCREMENT))) (T (RPAQ MEM*NEXT.RADR 149202.))) (RPAQ MEM*NEXT.VADR 138.) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (INDEXMENGE INDEX ELEMENT VERKN MENGE ANY)) (RPAQQ DT*SORT.NR 12.) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0.) (RPAQQ DT*CONSTANT.COUNTER 0.) (RPAQQ DT*CONSTANT.ALL NIL) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0.) (RPAQQ DT*FUNCTION.ALL (55. 53. 52. 49. 48. 44. 42. 41. 40. 39. 38. 37.)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0.) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES (105.)) (RPAQQ DT*NONEQUALITY.PREDICATES (83. 56. 54. 51. 50. 47. 46. 45. 43. 36. 35. 34. 33. 32. 31. 30. 29. 2. 1.)) (RPAQQ DT*PREDICATE.ALL (105. 83. 56. 54. 51. 50. 47. 46. 45. 43. 36. 35. 34. 33. 32. 31. 30. 29. 2. 1.)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1.) (RPAQQ DT*FALSE.PREDICATE 2.) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (PROGN (REMPROPS (QUOTE DT*PREDICATE.WITH.ATTRIBUTES)) (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (NCONC (QUOTE (DEFINED (105.) SYMMETRIC (105.) REFLEXIVE (105.))) (GETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES))))))
(PROGN (PROGN (REMPROPS (QUOTE INDEXMENGE)) (SETPROPLIST (QUOTE INDEXMENGE) (NCONC (QUOTE (DT*SORT.NUMBER 11. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (INDEXMENGE) DT*MAX.SUBSORTS ((INDEXMENGE INDEXMENGE) (INDEX) (ELEMENT) (VERKN) (MENGE) (ANY INDEXMENGE)) DT*MINIMAL.SUBSORTS (INDEXMENGE) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (INDEXMENGE ANY))) (GETPROPLIST (QUOTE INDEXMENGE))))) (PROGN (REMPROPS (QUOTE INDEX)) (SETPROPLIST (QUOTE INDEX) (NCONC (QUOTE (DT*SORT.NUMBER 10. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (INDEX) DT*MAX.SUBSORTS ((INDEXMENGE) (INDEX INDEX) (ELEMENT) (VERKN) (MENGE) (ANY INDEX)) DT*MINIMAL.SUBSORTS (INDEX) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (INDEX ANY))) (GETPROPLIST (QUOTE INDEX))))) (PROGN (REMPROPS (QUOTE ELEMENT)) (SETPROPLIST (QUOTE ELEMENT) (NCONC (QUOTE (DT*SORT.NUMBER 9. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (ELEMENT) DT*MAX.SUBSORTS ((INDEXMENGE) (INDEX) (ELEMENT ELEMENT) (VERKN) (MENGE) (ANY ELEMENT)) DT*MINIMAL.SUBSORTS (ELEMENT) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT ANY))) (GETPROPLIST (QUOTE ELEMENT))))) (PROGN (REMPROPS (QUOTE VERKN)) (SETPROPLIST (QUOTE VERKN) (NCONC (QUOTE (DT*SORT.NUMBER 8. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (VERKN) DT*MAX.SUBSORTS ((INDEXMENGE) (INDEX) (ELEMENT) (VERKN VERKN) (MENGE) (ANY VERKN)) DT*MINIMAL.SUBSORTS (VERKN) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (VERKN ANY))) (GETPROPLIST (QUOTE VERKN))))) (PROGN (REMPROPS (QUOTE MENGE)) (SETPROPLIST (QUOTE MENGE) (NCONC (QUOTE (DT*SORT.NUMBER 7. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (MENGE) DT*MAX.SUBSORTS ((INDEXMENGE) (INDEX) (ELEMENT) (VERKN) (MENGE MENGE) (ANY MENGE)) DT*MINIMAL.SUBSORTS (MENGE) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (MENGE ANY))) (GETPROPLIST (QUOTE MENGE))))) (PROGN (REMPROPS (QUOTE ANY)) (SETPROPLIST (QUOTE ANY) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (INDEXMENGE INDEX ELEMENT VERKN MENGE) DT*SORT.NUMBER 1. DT*TRANSITIVE.CLOSURE (INDEXMENGE INDEX ELEMENT VERKN MENGE ANY) DT*MAX.SUBSORTS ((INDEXMENGE INDEXMENGE) (INDEX INDEX) (ELEMENT ELEMENT) (VERKN VERKN) (MENGE MENGE) (ANY ANY)) DT*MINIMAL.SUBSORTS (INDEX ELEMENT VERKN MENGE) DT*DIRECT.SUPERSORTS NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*LEAST.SUPERSORTS ((ANY ANY)))) (GETPROPLIST (QUOTE ANY))))))
(PROGN (RPAQQ ST*STACK1 (NIL ((X_137 PROGN (DT-VARIABLE.DELETE 137.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_137) ST*SYMBOL.ADDRESSES))) (X_136 PROGN (DT-VARIABLE.DELETE 136.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_136) ST*SYMBOL.ADDRESSES))) (X_135 PROGN (DT-VARIABLE.DELETE 135.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_135) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_134 PROGN (DT-VARIABLE.DELETE 134.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_134) ST*SYMBOL.ADDRESSES))) (X_133 PROGN (DT-VARIABLE.DELETE 133.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_133) ST*SYMBOL.ADDRESSES))) (X_132 PROGN (DT-VARIABLE.DELETE 132.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_132) ST*SYMBOL.ADDRESSES))) (X_131 PROGN (DT-VARIABLE.DELETE 131.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_131) ST*SYMBOL.ADDRESSES))) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL) (X_130 PROGN (DT-VARIABLE.DELETE 130.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_130) ST*SYMBOL.ADDRESSES))) (X_129 PROGN (DT-VARIABLE.DELETE 129.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_129) ST*SYMBOL.ADDRESSES))) (X_128 PROGN (DT-VARIABLE.DELETE 128.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_128) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_127 PROGN (DT-VARIABLE.DELETE 127.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_127) ST*SYMBOL.ADDRESSES))) (X_126 PROGN (DT-VARIABLE.DELETE 126.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_126) ST*SYMBOL.ADDRESSES))) (INDEXMENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEXMENGE) (QUOTE (ANY))) (INDEXMENGE PUTPROP (QUOTE INDEXMENGE) NIL) (X_125 PROGN (DT-VARIABLE.DELETE 125.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_125) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (X_124 PROGN (DT-VARIABLE.DELETE 124.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_124) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) NIL ((X_123 PROGN (DT-VARIABLE.DELETE 123.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_123) ST*SYMBOL.ADDRESSES))) (X_122 PROGN (DT-VARIABLE.DELETE 122.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_122) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_121 PROGN (DT-VARIABLE.DELETE 121.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_121) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (X_120 PROGN (DT-VARIABLE.DELETE 120.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_120) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) NIL ((X_106 PROGN (DT-VARIABLE.DELETE 106.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_106) ST*SYMBOL.ADDRESSES))) (X_107 PROGN (DT-VARIABLE.DELETE 107.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_107) ST*SYMBOL.ADDRESSES))) (X_108 PROGN (DT-VARIABLE.DELETE 108.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_108) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_109 PROGN (DT-VARIABLE.DELETE 109.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_109) ST*SYMBOL.ADDRESSES))) (X_110 PROGN (DT-VARIABLE.DELETE 110.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_110) ST*SYMBOL.ADDRESSES))) (X_111 PROGN (DT-VARIABLE.DELETE 111.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_111) ST*SYMBOL.ADDRESSES))) (X_112 PROGN (DT-VARIABLE.DELETE 112.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_112) ST*SYMBOL.ADDRESSES))) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL) (X_113 PROGN (DT-VARIABLE.DELETE 113.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_113) ST*SYMBOL.ADDRESSES))) (X_114 PROGN (DT-VARIABLE.DELETE 114.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_114) ST*SYMBOL.ADDRESSES))) (X_115 PROGN (DT-VARIABLE.DELETE 115.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_115) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_116 PROGN (DT-VARIABLE.DELETE 116.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_116) ST*SYMBOL.ADDRESSES))) (X_117 PROGN (DT-VARIABLE.DELETE 117.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_117) ST*SYMBOL.ADDRESSES))) (INDEXMENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEXMENGE) (QUOTE (ANY))) (INDEXMENGE PUTPROP (QUOTE INDEXMENGE) NIL) (X_118 PROGN (DT-VARIABLE.DELETE 118.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_118) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (X_119 PROGN (DT-VARIABLE.DELETE 119.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_119) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) NIL ((= PROG1 NIL (DT-PREDICATE.PUTSORT 105. (QUOTE (ANY ANY))) (DT-PREDICATE.PUT.ATTRIBUTES 105. (QUOTE (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))) (= PROG1 NIL (DT-PUTPROP 105. NIL) (DT-PUTPROP 105. NIL)) (= PROGN (DT-PREDICATE.DELETE 105.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE =) ST*SYMBOL.ADDRESSES))) (X_104 PROGN (DT-VARIABLE.DELETE 104.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_104) ST*SYMBOL.ADDRESSES))) (X_103 PROGN (DT-VARIABLE.DELETE 103.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_103) ST*SYMBOL.ADDRESSES))) (X_102 PROGN (DT-VARIABLE.DELETE 102.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_102) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_101 PROGN (DT-VARIABLE.DELETE 101.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_101) ST*SYMBOL.ADDRESSES))) (X_100 PROGN (DT-VARIABLE.DELETE 100.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_100) ST*SYMBOL.ADDRESSES))) (X_99 PROGN (DT-VARIABLE.DELETE 99.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_99) ST*SYMBOL.ADDRESSES))) (X_98 PROGN (DT-VARIABLE.DELETE 98.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_98) ST*SYMBOL.ADDRESSES))) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL) (X_97 PROGN (DT-VARIABLE.DELETE 97.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_97) ST*SYMBOL.ADDRESSES))) (X_96 PROGN (DT-VARIABLE.DELETE 96.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_96) ST*SYMBOL.ADDRESSES))) (X_95 PROGN (DT-VARIABLE.DELETE 95.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_95) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_94 PROGN (DT-VARIABLE.DELETE 94.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_94) ST*SYMBOL.ADDRESSES))) (X_93 PROGN (DT-VARIABLE.DELETE 93.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_93) ST*SYMBOL.ADDRESSES))) (INDEXMENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEXMENGE) (QUOTE (ANY))) (INDEXMENGE PUTPROP (QUOTE INDEXMENGE) NIL) (X_92 PROGN (DT-VARIABLE.DELETE 92.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_92) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (X_91 PROGN (DT-VARIABLE.DELETE 91.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_91) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) NIL ((X_90 PROGN (DT-VARIABLE.DELETE 90.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_90) ST*SYMBOL.ADDRESSES))) (X_84 PROGN (DT-VARIABLE.DELETE 84.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_84) ST*SYMBOL.ADDRESSES))) (X_85 PROGN (DT-VARIABLE.DELETE 85.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_85) ST*SYMBOL.ADDRESSES))) (X_86 PROGN (DT-VARIABLE.DELETE 86.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_86) ST*SYMBOL.ADDRESSES))) (X_87 PROGN (DT-VARIABLE.DELETE 87.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_87) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_88 PROGN (DT-VARIABLE.DELETE 88.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_88) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL)) NIL ((VORAUSSETZUNG315INJGLEICH PROGN (DT-PREDICATE.DELETE 83.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE VORAUSSETZUNG315INJGLEICH) ST*SYMBOL.ADDRESSES))) (X_82 PROGN (DT-VARIABLE.DELETE 82.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_82) ST*SYMBOL.ADDRESSES))) (X_62 PROGN (DT-VARIABLE.DELETE 62.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_62) ST*SYMBOL.ADDRESSES))) (X_61 PROGN (DT-VARIABLE.DELETE 61.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_61) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_60 PROGN (DT-VARIABLE.DELETE 60.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_60) ST*SYMBOL.ADDRESSES))) (X_59 PROGN (DT-VARIABLE.DELETE 59.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_59) ST*SYMBOL.ADDRESSES))) (X_58 PROGN (DT-VARIABLE.DELETE 58.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_58) ST*SYMBOL.ADDRESSES))) (X_57 PROGN (DT-VARIABLE.DELETE 57.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_57) ST*SYMBOL.ADDRESSES))) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL) (X_73 PROGN (DT-VARIABLE.DELETE 73.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_73) ST*SYMBOL.ADDRESSES))) (X_74 PROGN (DT-VARIABLE.DELETE 74.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_74) ST*SYMBOL.ADDRESSES))) (X_75 PROGN (DT-VARIABLE.DELETE 75.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_75) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_76 PROGN (DT-VARIABLE.DELETE 76.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_76) ST*SYMBOL.ADDRESSES))) (X_77 PROGN (DT-VARIABLE.DELETE 77.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_77) ST*SYMBOL.ADDRESSES))) (INDEXMENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEXMENGE) (QUOTE (ANY))) (INDEXMENGE PUTPROP (QUOTE INDEXMENGE) NIL) (X_78 PROGN (DT-VARIABLE.DELETE 78.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_78) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (X_79 PROGN (DT-VARIABLE.DELETE 79.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_79) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) NIL ((GLEICH-E PROGN (DT-PREDICATE.DELETE 56.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE GLEICH-E) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL)) ((G PROGN (DT-FUNCTION.DELETE 55.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE G) ST*SYMBOL.ADDRESSES))) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((IDEAL PROGN (DT-PREDICATE.DELETE 54.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IDEAL) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((SM-IND PROGN (DT-FUNCTION.DELETE 53.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SM-IND) ST*SYMBOL.ADDRESSES))) (INDEXMENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEXMENGE) (QUOTE (ANY))) (INDEXMENGE PUTPROP (QUOTE INDEXMENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((VER-IND PROGN (DT-FUNCTION.DELETE 52.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE VER-IND) ST*SYMBOL.ADDRESSES))) (INDEXMENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEXMENGE) (QUOTE (ANY))) (INDEXMENGE PUTPROP (QUOTE INDEXMENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((GLEICH PROGN (DT-PREDICATE.DELETE 51.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE GLEICH) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((NICHTLEER-IND PROGN (DT-PREDICATE.DELETE 50.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NICHTLEER-IND) ST*SYMBOL.ADDRESSES))) (INDEXMENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEXMENGE) (QUOTE (ANY))) (INDEXMENGE PUTPROP (QUOTE INDEXMENGE) NIL)) ((E PROGN (DT-FUNCTION.DELETE 49.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE E) ST*SYMBOL.ADDRESSES))) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL)) ((U PROGN (DT-FUNCTION.DELETE 48.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE U) ST*SYMBOL.ADDRESSES))) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((EL-IND PROGN (DT-PREDICATE.DELETE 47.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EL-IND) ST*SYMBOL.ADDRESSES))) (INDEXMENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEXMENGE) (QUOTE (ANY))) (INDEXMENGE PUTPROP (QUOTE INDEXMENGE) NIL) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL)) ((MINIMAL-BED-R PROGN (DT-PREDICATE.DELETE 46.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MINIMAL-BED-R) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((MINIMAL-BED-L PROGN (DT-PREDICATE.DELETE 45.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MINIMAL-BED-L) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((INVERS PROGN (DT-FUNCTION.DELETE 44.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE INVERS) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL)) ((GR PROGN (DT-PREDICATE.DELETE 43.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE GR) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((VER PROGN (DT-FUNCTION.DELETE 42.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE VER) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((SET PROGN (DT-FUNCTION.DELETE 41.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SET) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((SM PROGN (DT-FUNCTION.DELETE 40.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SM) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((F*X PROGN (DT-FUNCTION.DELETE 39.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE F*X) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((APPLYV PROGN (DT-FUNCTION.DELETE 38.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLYV) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL)) ((MPROD PROGN (DT-FUNCTION.DELETE 37.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MPROD) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((MINIMAL PROGN (DT-PREDICATE.DELETE 36.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MINIMAL) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((EL PROGN (DT-PREDICATE.DELETE 35.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EL) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL)) ((HG PROGN (DT-PREDICATE.DELETE 34.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE HG) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((NICHTLEER PROGN (DT-PREDICATE.DELETE 33.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NICHTLEER) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((ME PROGN (DT-PREDICATE.DELETE 32.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ME) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((UHG PROGN (DT-PREDICATE.DELETE 31.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UHG) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((RIDEAL PROGN (DT-PREDICATE.DELETE 30.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE RIDEAL) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((LIDEAL PROGN (DT-PREDICATE.DELETE 29.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE LIDEAL) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((INDEXMENGE PROGN (DT-SORT.ST.REMOVE (QUOTE INDEXMENGE)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE INDEXMENGE) ST*SYMBOL.ADDRESSES))) (INDEXMENGE REMPROP (QUOTE INDEXMENGE) (QUOTE ST*DATA)) (INDEX PROGN (DT-SORT.ST.REMOVE (QUOTE INDEX)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE INDEX) ST*SYMBOL.ADDRESSES))) (INDEX REMPROP (QUOTE INDEX) (QUOTE ST*DATA)) (ELEMENT PROGN (DT-SORT.ST.REMOVE (QUOTE ELEMENT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ELEMENT) ST*SYMBOL.ADDRESSES))) (ELEMENT REMPROP (QUOTE ELEMENT) (QUOTE ST*DATA)) (VERKN PROGN (DT-SORT.ST.REMOVE (QUOTE VERKN)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE VERKN) ST*SYMBOL.ADDRESSES))) (VERKN REMPROP (QUOTE VERKN) (QUOTE ST*DATA)) (MENGE PROGN (DT-SORT.ST.REMOVE (QUOTE MENGE)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MENGE) ST*SYMBOL.ADDRESSES))) (MENGE REMPROP (QUOTE MENGE) (QUOTE ST*DATA))) ((FALSE PROGN (DT-PREDICATE.DELETE 2.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1.) (FALSE . 2.) (MENGE . T) (VERKN . T) (ELEMENT . T) (INDEX . T) (INDEXMENGE . T) (LIDEAL . 29.) (RIDEAL . 30.) (UHG . 31.) (ME . 32.) (NICHTLEER . 33.) (HG . 34.) (EL . 35.) (MINIMAL . 36.) (MPROD . 37.) (APPLYV . 38.) (F*X . 39.) (SM . 40.) (SET . 41.) (VER . 42.) (GR . 43.) (INVERS . 44.) (MINIMAL-BED-L . 45.) (MINIMAL-BED-R . 46.) (EL-IND . 47.) (U . 48.) (E . 49.) (NICHTLEER-IND . 50.) (GLEICH . 51.) (VER-IND . 52.) (SM-IND . 53.) (IDEAL . 54.) (G . 55.) (GLEICH-E . 56.) (X_79 . 79.) (X_78 . 78.) (X_77 . 77.) (X_76 . 76.) (X_75 . 75.) (X_74 . 74.) (X_73 . 73.) (X_57 . 57.) (X_58 . 58.) (X_59 . 59.) (X_60 . 60.) (X_61 . 61.) (X_62 . 62.) (X_82 . 82.) (VORAUSSETZUNG315INJGLEICH . 83.) (X_88 . 88.) (X_87 . 87.) (X_86 . 86.) (X_85 . 85.) (X_84 . 84.) (X_90 . 90.) (X_91 . 91.) (X_92 . 92.) (X_93 . 93.) (X_94 . 94.) (X_95 . 95.) (X_96 . 96.) (X_97 . 97.) (X_98 . 98.) (X_99 . 99.) (X_100 . 100.) (X_101 . 101.) (X_102 . 102.) (X_103 . 103.) (X_104 . 104.) (= . 105.) (X_119 . 119.) (X_118 . 118.) (X_117 . 117.) (X_116 . 116.) (X_115 . 115.) (X_114 . 114.) (X_113 . 113.) (X_112 . 112.) (X_111 . 111.) (X_110 . 110.) (X_109 . 109.) (X_108 . 108.) (X_107 . 107.) (X_106 . 106.) (X_120 . 120.) (X_121 . 121.) (X_122 . 122.) (X_123 . 123.) (X_124 . 124.) (X_125 . 125.) (X_126 . 126.) (X_127 . 127.) (X_128 . 128.) (X_129 . 129.) (X_130 . 130.) (X_131 . 131.) (X_132 . 132.) (X_133 . 133.) (X_134 . 134.) (X_135 . 135.) (X_136 . 136.) (X_137 . 137.))))))))
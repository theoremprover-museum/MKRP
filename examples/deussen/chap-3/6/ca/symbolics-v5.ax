;;; -*- Package: IL; Base: 10. -*-
(COND ((FMT-LOAD "18-JUL-85 14:10:14"
NIL(((SORT MENGE,VERKN,ELEMENT,INDEX,INDEXMENGE:ANY) (+ 1. NIL) TYPE) ((TYPE LIDEAL (MENGE MENGE VERKN)) (+ 1. NIL) TYPE) ((TYPE RIDEAL (MENGE MENGE VERKN)) (+ 1. NIL) TYPE) ((TYPE UHG (MENGE MENGE VERKN)) (+ 1. NIL) TYPE) ((TYPE ME (MENGE MENGE)) (+ 1. NIL) TYPE) ((TYPE NICHTLEER (MENGE)) (+ 1. NIL) TYPE) ((TYPE HG (MENGE VERKN)) (+ 1. NIL) TYPE) ((TYPE EL (ELEMENT MENGE)) (+ 1. NIL) TYPE) ((TYPE MINIMAL (MENGE MENGE VERKN)) (+ 1. NIL) TYPE) ((TYPE MPROD (MENGE MENGE VERKN) :MENGE) (+ 1. NIL) TYPE) ((TYPE APPLYV (VERKN ELEMENT ELEMENT) :ELEMENT) (+ 1. NIL) TYPE) ((TYPE F*X (MENGE ELEMENT VERKN) :MENGE) (+ 1. NIL) TYPE) ((TYPE SM (MENGE MENGE) :MENGE) (+ 1. NIL) TYPE) ((TYPE SET (ELEMENT) :MENGE) (+ 1. NIL) TYPE) ((TYPE VER (MENGE MENGE) :MENGE) (+ 1. NIL) TYPE) ((TYPE GR (MENGE VERKN ELEMENT)) (+ 1. NIL) TYPE) ((TYPE INVERS (VERKN ELEMENT) :ELEMENT) (+ 1. NIL) TYPE) ((TYPE MINIMAL-BED-L (MENGE VERKN)) (+ 1. NIL) TYPE) ((TYPE MINIMAL-BED-R (MENGE VERKN)) (+ 1. NIL) TYPE) ((TYPE EL-IND (INDEX INDEXMENGE)) (+ 1. NIL) TYPE) ((TYPE U (INDEX) : MENGE) (+ 1. NIL) TYPE) ((TYPE E (INDEX INDEX) : ELEMENT) (+ 1. NIL) TYPE) ((TYPE NICHTLEER-IND (INDEXMENGE)) (+ 1. NIL) TYPE) ((TYPE GLEICH (MENGE MENGE)) (+ 1. NIL) TYPE) ((TYPE VER-IND (INDEXMENGE) : MENGE) (+ 1. NIL) TYPE) ((TYPE SM-IND (INDEXMENGE) : MENGE) (+ 1. NIL) TYPE) ((TYPE IDEAL (MENGE MENGE VERKN)) (+ 1. NIL) TYPE) ((TYPE NICHTLEER (MENGE)) (+ 1. NIL) TYPE) ((* DEFINITION MINIMAL *) COMMENT COMMENT) ((ALL T,F:MENGE ALL MAL:VERKN LIDEAL (T F MAL) IMPL ((ALL M:MENGE LIDEAL (M F MAL) IMPL (ME (M T) IMPL GLEICH (M T))) IMPL MINIMAL (T F MAL))) (ALL 56. (ALL 55. (ALL 57. (IMPL (+ 29. (55. 56. 57.) NIL) (IMPL (ALL 58. (IMPL (+ 29. (58. 56. 57.) NIL) (IMPL (+ 32. (58. 55.) NIL) (+ 51. (58. 55.) NIL)))) (+ 36. (55. 56. 57.) NIL)))))) QUANTIFICATION) ((* DEFINITION LINKSIDEAL *) COMMENT COMMENT) ((ALL L,F:MENGE ALL MAL:VERKN LIDEAL (L F MAL) IMPL (HG (F MAL) AND NICHTLEER (L) AND ME (L F) AND ME (MPROD (F L MAL) L))) (ALL 76. (ALL 77. (ALL 75. (IMPL (+ 29. (77. 76. 75.) NIL) (AND (+ 34. (76. 75.) NIL) (AND (+ 33. (77.) NIL) (AND (+ 32. (77. 76.) NIL) (+ 32. ((37. 76. 77. 75.) 77.) NIL)))))))) QUANTIFICATION) ((* DEFINITION NICHTLEER *) COMMENT COMMENT) ((ALL M:MENGE NICHTLEER (M) IMPL (EX X:ELEMENT EL (X M))) (ALL 71. (IMPL (+ 33. (71.) NIL) (EX 70. (+ 35. (70. 71.) NIL)))) QUANTIFICATION) ((* TEILMENGENAXIOM *) COMMENT COMMENT) ((ALL A,B:MENGE ME (A B) IMPL (ALL Y:ELEMENT EL (Y A) IMPL EL (Y B))) (ALL 68. (ALL 69. (IMPL (+ 32. (69. 68.) NIL) (ALL 67. (IMPL (+ 35. (67. 69.) NIL) (+ 35. (67. 68.) NIL)))))) QUANTIFICATION) ((ALL A,B:MENGE (ALL Y:ELEMENT EL (Y A) IMPL EL (Y B)) IMPL ME (A B)) (ALL 65. (ALL 66. (IMPL (ALL 64. (IMPL (+ 35. (64. 66.) NIL) (+ 35. (64. 65.) NIL))) (+ 32. (66. 65.) NIL)))) QUANTIFICATION) ((* WIRKIUNG VON MPROD AUF ELEMENTE *) COMMENT COMMENT) ((ALL A,B,C:MENGE ALL MAL:VERKN ME (MPROD (A B MAL) C) IMPL (ALL X,Y:ELEMENT EL (X A) AND EL (Y B) IMPL EL (APPLYV (MAL X Y) C))) (ALL 74. (ALL 73. (ALL 72. (ALL 63. (IMPL (+ 32. ((37. 72. 73. 63.) 74.) NIL) (ALL 61. (ALL 62. (IMPL (AND (+ 35. (62. 72.) NIL) (+ 35. (61. 73.) NIL)) (+ 35. ((38. 63. 62. 61.) 74.) NIL))))))))) QUANTIFICATION) ((* GLEICHHEIT VON MENGEN DURCH MENGENINKLUSION *) COMMENT COMMENT) ((ALL A,B:MENGE ME (A B) AND ME (B A) IMPL GLEICH (A B)) (ALL 59. (ALL 60. (IMPL (AND (+ 32. (60. 59.) NIL) (+ 32. (59. 60.) NIL)) (+ 51. (60. 59.) NIL)))) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (149571. 149566. 149561. 149506. 149511. 149516. 149556. 149551. 149546. 149541. 149536. 149531. 149526. 149521. 149501. 149496. 149491. 149486. 149481. 149576. 149581. 149586. 149591. 149606. 149620. 149634. 149649. 149664. 149678. 149692. 149707. 149722. 149737. 149751. 149766. 149780. 149794. 149808. 149822. 149836. 149850. 149865. 149880. 149895. 149910. 149925. 149940. 149955. 149970. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 149985. 150000.))) (DATALIST (QUOTE (15. "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1. (POSITIVE))) ((+ 1. (NEGATIVE))) ((+ 1. (NIL))) ((- 1. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2. (POSITIVE))) ((+ 2. (NEGATIVE))) ((+ 2. (NIL))) ((- 2. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "LIDEAL" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 29. (POSITIVE))) ((+ 29. (NEGATIVE))) ((+ 29. (NIL))) ((- 29. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "RIDEAL" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 30. (POSITIVE))) ((+ 30. (NEGATIVE))) ((+ 30. (NIL))) ((- 30. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "UHG" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 31. (POSITIVE))) ((+ 31. (NEGATIVE))) ((+ 31. (NIL))) ((- 31. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "ME" NIL NIL (MENGE MENGE) NIL NIL ((- 32. (POSITIVE))) ((+ 32. (NEGATIVE))) ((+ 32. (NIL))) ((- 32. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "NICHTLEER" NIL NIL (MENGE) NIL NIL ((- 33. (POSITIVE))) ((+ 33. (NEGATIVE))) ((+ 33. (NIL))) ((- 33. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "HG" NIL NIL (MENGE VERKN) NIL NIL ((- 34. (POSITIVE))) ((+ 34. (NEGATIVE))) ((+ 34. (NIL))) ((- 34. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "EL" NIL NIL (ELEMENT MENGE) NIL NIL ((- 35. (POSITIVE))) ((+ 35. (NEGATIVE))) ((+ 35. (NIL))) ((- 35. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MINIMAL" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 36. (POSITIVE))) ((+ 36. (NEGATIVE))) ((+ 36. (NIL))) ((- 36. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "MPROD" NIL MENGE (MENGE MENGE VERKN) NIL NIL NIL NIL NIL 3. MENGE (DT*ST-KIND NIL) FUNCTION 14. "APPLYV" NIL ELEMENT (VERKN ELEMENT ELEMENT) NIL NIL NIL NIL NIL 3. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "F*X" NIL MENGE (MENGE ELEMENT VERKN) NIL NIL NIL NIL NIL 3. MENGE (DT*ST-KIND NIL) FUNCTION 14. "SM" NIL MENGE (MENGE MENGE) NIL NIL NIL NIL NIL 2. MENGE (DT*ST-KIND NIL) FUNCTION 14. "SET" NIL MENGE (ELEMENT) NIL NIL NIL NIL NIL 1. MENGE (DT*ST-KIND NIL) FUNCTION 14. "VER" NIL MENGE (MENGE MENGE) NIL NIL NIL NIL NIL 2. MENGE (DT*ST-KIND NIL) FUNCTION 15. "GR" NIL NIL (MENGE VERKN ELEMENT) NIL NIL ((- 43. (POSITIVE))) ((+ 43. (NEGATIVE))) ((+ 43. (NIL))) ((- 43. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "INVERS" NIL ELEMENT (VERKN ELEMENT) NIL NIL NIL NIL NIL 2. ELEMENT (DT*ST-KIND NIL) FUNCTION 15. "MINIMAL-BED-L" NIL NIL (MENGE VERKN) NIL NIL ((- 45. (POSITIVE))) ((+ 45. (NEGATIVE))) ((+ 45. (NIL))) ((- 45. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MINIMAL-BED-R" NIL NIL (MENGE VERKN) NIL NIL ((- 46. (POSITIVE))) ((+ 46. (NEGATIVE))) ((+ 46. (NIL))) ((- 46. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "EL-IND" NIL NIL (INDEX INDEXMENGE) NIL NIL ((- 47. (POSITIVE))) ((+ 47. (NEGATIVE))) ((+ 47. (NIL))) ((- 47. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "U" NIL MENGE (INDEX) NIL NIL NIL NIL NIL 1. MENGE (DT*ST-KIND NIL) FUNCTION 14. "E" NIL ELEMENT (INDEX INDEX) NIL NIL NIL NIL NIL 2. ELEMENT (DT*ST-KIND NIL) FUNCTION 15. "NICHTLEER-IND" NIL NIL (INDEXMENGE) NIL NIL ((- 50. (POSITIVE))) ((+ 50. (NEGATIVE))) ((+ 50. (NIL))) ((- 50. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "GLEICH" NIL NIL (MENGE MENGE) NIL NIL ((- 51. (POSITIVE))) ((+ 51. (NEGATIVE))) ((+ 51. (NIL))) ((- 51. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "VER-IND" NIL MENGE (INDEXMENGE) NIL NIL NIL NIL NIL 1. MENGE (DT*ST-KIND NIL) FUNCTION 14. "SM-IND" NIL MENGE (INDEXMENGE) NIL NIL NIL NIL NIL 1. MENGE (DT*ST-KIND NIL) FUNCTION 15. "IDEAL" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 54. (POSITIVE))) ((+ 54. (NEGATIVE))) ((+ 54. (NIL))) ((- 54. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 150000.)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 150000.) (SETQ COUNTER1 78.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0.) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 150000.) (MEM-INITIALIZE 150000.))) (SETQ COUNTER1 78.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 150000.) (RPAQ MEM*NEXT.RADR (IPLUS 149476. INCREMENT))) (T (RPAQ MEM*NEXT.RADR 149476.))) (RPAQ MEM*NEXT.VADR 78.) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (INDEXMENGE INDEX ELEMENT VERKN MENGE ANY)) (RPAQQ DT*SORT.NR 12.) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0.) (RPAQQ DT*CONSTANT.COUNTER 0.) (RPAQQ DT*CONSTANT.ALL NIL) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0.) (RPAQQ DT*FUNCTION.ALL (53. 52. 49. 48. 44. 42. 41. 40. 39. 38. 37.)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0.) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (54. 51. 50. 47. 46. 45. 43. 36. 35. 34. 33. 32. 31. 30. 29. 2. 1.)) (RPAQQ DT*PREDICATE.ALL (54. 51. 50. 47. 46. 45. 43. 36. 35. 34. 33. 32. 31. 30. 29. 2. 1.)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1.) (RPAQQ DT*FALSE.PREDICATE 2.) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (PROGN (REMPROPS (QUOTE DT*PREDICATE.WITH.ATTRIBUTES)) (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (NCONC (QUOTE NIL) (GETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES))))))
(PROGN (PROGN (REMPROPS (QUOTE INDEXMENGE)) (SETPROPLIST (QUOTE INDEXMENGE) (NCONC (QUOTE (DT*SORT.NUMBER 11. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (INDEXMENGE) DT*MAX.SUBSORTS ((INDEXMENGE INDEXMENGE) (INDEX) (ELEMENT) (VERKN) (MENGE) (ANY INDEXMENGE)) DT*MINIMAL.SUBSORTS (INDEXMENGE) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (INDEXMENGE ANY))) (GETPROPLIST (QUOTE INDEXMENGE))))) (PROGN (REMPROPS (QUOTE INDEX)) (SETPROPLIST (QUOTE INDEX) (NCONC (QUOTE (DT*SORT.NUMBER 10. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (INDEX) DT*MAX.SUBSORTS ((INDEXMENGE) (INDEX INDEX) (ELEMENT) (VERKN) (MENGE) (ANY INDEX)) DT*MINIMAL.SUBSORTS (INDEX) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (INDEX ANY))) (GETPROPLIST (QUOTE INDEX))))) (PROGN (REMPROPS (QUOTE ELEMENT)) (SETPROPLIST (QUOTE ELEMENT) (NCONC (QUOTE (DT*SORT.NUMBER 9. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (ELEMENT) DT*MAX.SUBSORTS ((INDEXMENGE) (INDEX) (ELEMENT ELEMENT) (VERKN) (MENGE) (ANY ELEMENT)) DT*MINIMAL.SUBSORTS (ELEMENT) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT ANY))) (GETPROPLIST (QUOTE ELEMENT))))) (PROGN (REMPROPS (QUOTE VERKN)) (SETPROPLIST (QUOTE VERKN) (NCONC (QUOTE (DT*SORT.NUMBER 8. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (VERKN) DT*MAX.SUBSORTS ((INDEXMENGE) (INDEX) (ELEMENT) (VERKN VERKN) (MENGE) (ANY VERKN)) DT*MINIMAL.SUBSORTS (VERKN) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (VERKN ANY))) (GETPROPLIST (QUOTE VERKN))))) (PROGN (REMPROPS (QUOTE MENGE)) (SETPROPLIST (QUOTE MENGE) (NCONC (QUOTE (DT*SORT.NUMBER 7. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (MENGE) DT*MAX.SUBSORTS ((INDEXMENGE) (INDEX) (ELEMENT) (VERKN) (MENGE MENGE) (ANY MENGE)) DT*MINIMAL.SUBSORTS (MENGE) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (MENGE ANY))) (GETPROPLIST (QUOTE MENGE))))) (PROGN (REMPROPS (QUOTE ANY)) (SETPROPLIST (QUOTE ANY) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (INDEXMENGE INDEX ELEMENT VERKN MENGE) DT*SORT.NUMBER 1. DT*TRANSITIVE.CLOSURE (INDEXMENGE INDEX ELEMENT VERKN MENGE ANY) DT*MAX.SUBSORTS ((INDEXMENGE INDEXMENGE) (INDEX INDEX) (ELEMENT ELEMENT) (VERKN VERKN) (MENGE MENGE) (ANY ANY)) DT*MINIMAL.SUBSORTS (INDEX ELEMENT VERKN MENGE) DT*DIRECT.SUPERSORTS NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*LEAST.SUPERSORTS ((ANY ANY)))) (GETPROPLIST (QUOTE ANY))))))
(PROGN (RPAQQ ST*STACK1 (NIL ((X_59 PROGN (DT-VARIABLE.DELETE 59.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_59) ST*SYMBOL.ADDRESSES))) (X_60 PROGN (DT-VARIABLE.DELETE 60.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_60) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) NIL ((X_61 PROGN (DT-VARIABLE.DELETE 61.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_61) ST*SYMBOL.ADDRESSES))) (X_62 PROGN (DT-VARIABLE.DELETE 62.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_62) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_63 PROGN (DT-VARIABLE.DELETE 63.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_63) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (X_74 PROGN (DT-VARIABLE.DELETE 74.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_74) ST*SYMBOL.ADDRESSES))) (X_73 PROGN (DT-VARIABLE.DELETE 73.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_73) ST*SYMBOL.ADDRESSES))) (X_72 PROGN (DT-VARIABLE.DELETE 72.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_72) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) NIL ((X_64 PROGN (DT-VARIABLE.DELETE 64.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_64) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_65 PROGN (DT-VARIABLE.DELETE 65.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_65) ST*SYMBOL.ADDRESSES))) (X_66 PROGN (DT-VARIABLE.DELETE 66.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_66) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((X_67 PROGN (DT-VARIABLE.DELETE 67.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_67) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_68 PROGN (DT-VARIABLE.DELETE 68.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_68) ST*SYMBOL.ADDRESSES))) (X_69 PROGN (DT-VARIABLE.DELETE 69.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_69) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) NIL ((X_70 PROGN (DT-VARIABLE.DELETE 70.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_70) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_71 PROGN (DT-VARIABLE.DELETE 71.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_71) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) NIL ((X_75 PROGN (DT-VARIABLE.DELETE 75.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_75) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (X_76 PROGN (DT-VARIABLE.DELETE 76.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_76) ST*SYMBOL.ADDRESSES))) (X_77 PROGN (DT-VARIABLE.DELETE 77.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_77) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) NIL ((X_58 PROGN (DT-VARIABLE.DELETE 58.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_58) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (X_57 PROGN (DT-VARIABLE.DELETE 57.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_57) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (X_56 PROGN (DT-VARIABLE.DELETE 56.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_56) ST*SYMBOL.ADDRESSES))) (X_55 PROGN (DT-VARIABLE.DELETE 55.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_55) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) NIL ((MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((IDEAL PROGN (DT-PREDICATE.DELETE 54.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IDEAL) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((SM-IND PROGN (DT-FUNCTION.DELETE 53.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SM-IND) ST*SYMBOL.ADDRESSES))) (INDEXMENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEXMENGE) (QUOTE (ANY))) (INDEXMENGE PUTPROP (QUOTE INDEXMENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((VER-IND PROGN (DT-FUNCTION.DELETE 52.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE VER-IND) ST*SYMBOL.ADDRESSES))) (INDEXMENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEXMENGE) (QUOTE (ANY))) (INDEXMENGE PUTPROP (QUOTE INDEXMENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((GLEICH PROGN (DT-PREDICATE.DELETE 51.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE GLEICH) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((NICHTLEER-IND PROGN (DT-PREDICATE.DELETE 50.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NICHTLEER-IND) ST*SYMBOL.ADDRESSES))) (INDEXMENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEXMENGE) (QUOTE (ANY))) (INDEXMENGE PUTPROP (QUOTE INDEXMENGE) NIL)) ((E PROGN (DT-FUNCTION.DELETE 49.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE E) ST*SYMBOL.ADDRESSES))) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL)) ((U PROGN (DT-FUNCTION.DELETE 48.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE U) ST*SYMBOL.ADDRESSES))) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((EL-IND PROGN (DT-PREDICATE.DELETE 47.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EL-IND) ST*SYMBOL.ADDRESSES))) (INDEXMENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEXMENGE) (QUOTE (ANY))) (INDEXMENGE PUTPROP (QUOTE INDEXMENGE) NIL) (INDEX DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE INDEX) (QUOTE (ANY))) (INDEX PUTPROP (QUOTE INDEX) NIL)) ((MINIMAL-BED-R PROGN (DT-PREDICATE.DELETE 46.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MINIMAL-BED-R) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((MINIMAL-BED-L PROGN (DT-PREDICATE.DELETE 45.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MINIMAL-BED-L) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((INVERS PROGN (DT-FUNCTION.DELETE 44.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE INVERS) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL)) ((GR PROGN (DT-PREDICATE.DELETE 43.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE GR) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((VER PROGN (DT-FUNCTION.DELETE 42.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE VER) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((SET PROGN (DT-FUNCTION.DELETE 41.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SET) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((SM PROGN (DT-FUNCTION.DELETE 40.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SM) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((F*X PROGN (DT-FUNCTION.DELETE 39.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE F*X) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((APPLYV PROGN (DT-FUNCTION.DELETE 38.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE APPLYV) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL)) ((MPROD PROGN (DT-FUNCTION.DELETE 37.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MPROD) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((MINIMAL PROGN (DT-PREDICATE.DELETE 36.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MINIMAL) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((EL PROGN (DT-PREDICATE.DELETE 35.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EL) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL)) ((HG PROGN (DT-PREDICATE.DELETE 34.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE HG) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((NICHTLEER PROGN (DT-PREDICATE.DELETE 33.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NICHTLEER) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((ME PROGN (DT-PREDICATE.DELETE 32.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ME) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((UHG PROGN (DT-PREDICATE.DELETE 31.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UHG) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((RIDEAL PROGN (DT-PREDICATE.DELETE 30.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE RIDEAL) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((LIDEAL PROGN (DT-PREDICATE.DELETE 29.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE LIDEAL) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) ((INDEXMENGE PROGN (DT-SORT.ST.REMOVE (QUOTE INDEXMENGE)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE INDEXMENGE) ST*SYMBOL.ADDRESSES))) (INDEXMENGE REMPROP (QUOTE INDEXMENGE) (QUOTE ST*DATA)) (INDEX PROGN (DT-SORT.ST.REMOVE (QUOTE INDEX)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE INDEX) ST*SYMBOL.ADDRESSES))) (INDEX REMPROP (QUOTE INDEX) (QUOTE ST*DATA)) (ELEMENT PROGN (DT-SORT.ST.REMOVE (QUOTE ELEMENT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ELEMENT) ST*SYMBOL.ADDRESSES))) (ELEMENT REMPROP (QUOTE ELEMENT) (QUOTE ST*DATA)) (VERKN PROGN (DT-SORT.ST.REMOVE (QUOTE VERKN)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE VERKN) ST*SYMBOL.ADDRESSES))) (VERKN REMPROP (QUOTE VERKN) (QUOTE ST*DATA)) (MENGE PROGN (DT-SORT.ST.REMOVE (QUOTE MENGE)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MENGE) ST*SYMBOL.ADDRESSES))) (MENGE REMPROP (QUOTE MENGE) (QUOTE ST*DATA))) ((FALSE PROGN (DT-PREDICATE.DELETE 2.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1.) (FALSE . 2.) (MENGE . T) (VERKN . T) (ELEMENT . T) (INDEX . T) (INDEXMENGE . T) (LIDEAL . 29.) (RIDEAL . 30.) (UHG . 31.) (ME . 32.) (NICHTLEER . 33.) (HG . 34.) (EL . 35.) (MINIMAL . 36.) (MPROD . 37.) (APPLYV . 38.) (F*X . 39.) (SM . 40.) (SET . 41.) (VER . 42.) (GR . 43.) (INVERS . 44.) (MINIMAL-BED-L . 45.) (MINIMAL-BED-R . 46.) (EL-IND . 47.) (U . 48.) (E . 49.) (NICHTLEER-IND . 50.) (GLEICH . 51.) (VER-IND . 52.) (SM-IND . 53.) (IDEAL . 54.) (X_55 . 55.) (X_56 . 56.) (X_57 . 57.) (X_58 . 58.) (X_77 . 77.) (X_76 . 76.) (X_75 . 75.) (X_71 . 71.) (X_70 . 70.) (X_69 . 69.) (X_68 . 68.) (X_67 . 67.) (X_66 . 66.) (X_65 . 65.) (X_64 . 64.) (X_72 . 72.) (X_73 . 73.) (X_74 . 74.) (X_63 . 63.) (X_62 . 62.) (X_61 . 61.) (X_60 . 60.) (X_59 . 59.))))))))
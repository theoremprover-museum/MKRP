;;; -*- Package: IL; Base: 10. -*-
(COND ((FMT-LOAD "18-JUL-85 14:10:53"
NIL(((ALL F,L:MENGE ALL MAL:VERKN LIDEAL (L F MAL) AND (ALL U,V:ELEMENT EL (U L) AND EL (V L) IMPL (EX Y:ELEMENT EL (Y F) AND APPLYV (MAL Y U) = V)) IMPL MINIMAL (L F MAL)) (ALL 79. (ALL 78. (ALL 80. (IMPL (AND (+ 29. (79. 78. 80.) NIL) (ALL 82. (ALL 81. (IMPL (AND (+ 35. (81. 79.) NIL) (+ 35. (82. 79.) NIL)) (EX 83. (AND (+ 35. (83. 78.) NIL) (+ 84. ((38. 80. 83. 81.) 82.) NIL))))))) (+ 36. (79. 78. 80.) NIL))))) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (149446. 149451. 149456. 149461. 149466. 149471. 149476. 149571. 149566. 149561. 149506. 149511. 149516. 149556. 149551. 149546. 149541. 149536. 149531. 149526. 149521. 149501. 149496. 149491. 149486. 149481. 149576. 149581. 149586. 149591. 149606. 149620. 149634. 149649. 149664. 149678. 149692. 149707. 149722. 149737. 149751. 149766. 149780. 149794. 149808. 149822. 149836. 149850. 149865. 149880. 149895. 149910. 149925. 149940. 149955. 149970. ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 149985. 150000.))) (DATALIST (QUOTE (15. "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1. (POSITIVE))) ((+ 1. (NEGATIVE))) ((+ 1. (NIL))) ((- 1. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2. (POSITIVE))) ((+ 2. (NEGATIVE))) ((+ 2. (NIL))) ((- 2. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "LIDEAL" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 29. (POSITIVE))) ((+ 29. (NEGATIVE))) ((+ 29. (NIL))) ((- 29. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "RIDEAL" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 30. (POSITIVE))) ((+ 30. (NEGATIVE))) ((+ 30. (NIL))) ((- 30. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "UHG" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 31. (POSITIVE))) ((+ 31. (NEGATIVE))) ((+ 31. (NIL))) ((- 31. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "ME" NIL NIL (MENGE MENGE) NIL NIL ((- 32. (POSITIVE))) ((+ 32. (NEGATIVE))) ((+ 32. (NIL))) ((- 32. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "NICHTLEER" NIL NIL (MENGE) NIL NIL ((- 33. (POSITIVE))) ((+ 33. (NEGATIVE))) ((+ 33. (NIL))) ((- 33. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "HG" NIL NIL (MENGE VERKN) NIL NIL ((- 34. (POSITIVE))) ((+ 34. (NEGATIVE))) ((+ 34. (NIL))) ((- 34. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "EL" NIL NIL (ELEMENT MENGE) NIL NIL ((- 35. (POSITIVE))) ((+ 35. (NEGATIVE))) ((+ 35. (NIL))) ((- 35. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MINIMAL" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 36. (POSITIVE))) ((+ 36. (NEGATIVE))) ((+ 36. (NIL))) ((- 36. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "MPROD" NIL MENGE (MENGE MENGE VERKN) NIL NIL NIL NIL NIL 3. MENGE (DT*ST-KIND NIL) FUNCTION 14. "APPLYV" NIL ELEMENT (VERKN ELEMENT ELEMENT) NIL NIL NIL NIL NIL 3. ELEMENT (DT*ST-KIND NIL) FUNCTION 14. "F*X" NIL MENGE (MENGE ELEMENT VERKN) NIL NIL NIL NIL NIL 3. MENGE (DT*ST-KIND NIL) FUNCTION 14. "SM" NIL MENGE (MENGE MENGE) NIL NIL NIL NIL NIL 2. MENGE (DT*ST-KIND NIL) FUNCTION 14. "SET" NIL MENGE (ELEMENT) NIL NIL NIL NIL NIL 1. MENGE (DT*ST-KIND NIL) FUNCTION 14. "VER" NIL MENGE (MENGE MENGE) NIL NIL NIL NIL NIL 2. MENGE (DT*ST-KIND NIL) FUNCTION 15. "GR" NIL NIL (MENGE VERKN ELEMENT) NIL NIL ((- 43. (POSITIVE))) ((+ 43. (NEGATIVE))) ((+ 43. (NIL))) ((- 43. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "INVERS" NIL ELEMENT (VERKN ELEMENT) NIL NIL NIL NIL NIL 2. ELEMENT (DT*ST-KIND NIL) FUNCTION 15. "MINIMAL-BED-L" NIL NIL (MENGE VERKN) NIL NIL ((- 45. (POSITIVE))) ((+ 45. (NEGATIVE))) ((+ 45. (NIL))) ((- 45. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "MINIMAL-BED-R" NIL NIL (MENGE VERKN) NIL NIL ((- 46. (POSITIVE))) ((+ 46. (NEGATIVE))) ((+ 46. (NIL))) ((- 46. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "EL-IND" NIL NIL (INDEX INDEXMENGE) NIL NIL ((- 47. (POSITIVE))) ((+ 47. (NEGATIVE))) ((+ 47. (NIL))) ((- 47. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "U" NIL MENGE (INDEX) NIL NIL NIL NIL NIL 1. MENGE (DT*ST-KIND NIL) FUNCTION 14. "E" NIL ELEMENT (INDEX INDEX) NIL NIL NIL NIL NIL 2. ELEMENT (DT*ST-KIND NIL) FUNCTION 15. "NICHTLEER-IND" NIL NIL (INDEXMENGE) NIL NIL ((- 50. (POSITIVE))) ((+ 50. (NEGATIVE))) ((+ 50. (NIL))) ((- 50. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15. "GLEICH" NIL NIL (MENGE MENGE) NIL NIL ((- 51. (POSITIVE))) ((+ 51. (NEGATIVE))) ((+ 51. (NIL))) ((- 51. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14. "VER-IND" NIL MENGE (INDEXMENGE) NIL NIL NIL NIL NIL 1. MENGE (DT*ST-KIND NIL) FUNCTION 14. "SM-IND" NIL MENGE (INDEXMENGE) NIL NIL NIL NIL NIL 1. MENGE (DT*ST-KIND NIL) FUNCTION 15. "IDEAL" NIL NIL (MENGE MENGE VERKN) NIL NIL ((- 54. (POSITIVE))) ((+ 54. (NEGATIVE))) ((+ 54. (NIL))) ((- 54. (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. MENGE NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. VERKN NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5. ELEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15. "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 84. (POSITIVE . SYMMETRIC))) ((+ 84. (NEGATIVE . SYMMETRIC))) ((+ 84. (NIL . SYMMETRIC))) ((- 84. (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE))) (INCREMENT (IDIFFERENCE MEM*SIZE 150000.)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 150000.) (SETQ COUNTER1 85.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0.) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 150000.) (MEM-INITIALIZE 150000.))) (SETQ COUNTER1 85.) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 150000.) (RPAQ MEM*NEXT.RADR (IPLUS 149431. INCREMENT))) (T (RPAQ MEM*NEXT.RADR 149431.))) (RPAQ MEM*NEXT.VADR 85.) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (INDEXMENGE INDEX ELEMENT VERKN MENGE ANY)) (RPAQQ DT*SORT.NR 12.) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0.) (RPAQQ DT*CONSTANT.COUNTER 0.) (RPAQQ DT*CONSTANT.ALL NIL) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0.) (RPAQQ DT*FUNCTION.ALL (53. 52. 49. 48. 44. 42. 41. 40. 39. 38. 37.)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0.) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES (84.)) (RPAQQ DT*NONEQUALITY.PREDICATES (54. 51. 50. 47. 46. 45. 43. 36. 35. 34. 33. 32. 31. 30. 29. 2. 1.)) (RPAQQ DT*PREDICATE.ALL (84. 54. 51. 50. 47. 46. 45. 43. 36. 35. 34. 33. 32. 31. 30. 29. 2. 1.)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1.) (RPAQQ DT*FALSE.PREDICATE 2.) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (PROGN (REMPROPS (QUOTE DT*PREDICATE.WITH.ATTRIBUTES)) (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (NCONC (QUOTE (SYMMETRIC (84. 84.) REFLEXIVE (84. 84.) DEFINED (84.))) (GETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES))))))
(PROGN (PROGN (REMPROPS (QUOTE INDEXMENGE)) (SETPROPLIST (QUOTE INDEXMENGE) (NCONC (QUOTE (DT*SORT.NUMBER 11. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (INDEXMENGE) DT*MAX.SUBSORTS ((INDEXMENGE INDEXMENGE) (INDEX) (ELEMENT) (VERKN) (MENGE) (ANY INDEXMENGE)) DT*MINIMAL.SUBSORTS (INDEXMENGE) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (INDEXMENGE ANY))) (GETPROPLIST (QUOTE INDEXMENGE))))) (PROGN (REMPROPS (QUOTE INDEX)) (SETPROPLIST (QUOTE INDEX) (NCONC (QUOTE (DT*SORT.NUMBER 10. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (INDEX) DT*MAX.SUBSORTS ((INDEXMENGE) (INDEX INDEX) (ELEMENT) (VERKN) (MENGE) (ANY INDEX)) DT*MINIMAL.SUBSORTS (INDEX) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (INDEX ANY))) (GETPROPLIST (QUOTE INDEX))))) (PROGN (REMPROPS (QUOTE ELEMENT)) (SETPROPLIST (QUOTE ELEMENT) (NCONC (QUOTE (DT*SORT.NUMBER 9. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (ELEMENT) DT*MAX.SUBSORTS ((INDEXMENGE) (INDEX) (ELEMENT ELEMENT) (VERKN) (MENGE) (ANY ELEMENT)) DT*MINIMAL.SUBSORTS (ELEMENT) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (ELEMENT ANY))) (GETPROPLIST (QUOTE ELEMENT))))) (PROGN (REMPROPS (QUOTE VERKN)) (SETPROPLIST (QUOTE VERKN) (NCONC (QUOTE (DT*SORT.NUMBER 8. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (VERKN) DT*MAX.SUBSORTS ((INDEXMENGE) (INDEX) (ELEMENT) (VERKN VERKN) (MENGE) (ANY VERKN)) DT*MINIMAL.SUBSORTS (VERKN) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (VERKN ANY))) (GETPROPLIST (QUOTE VERKN))))) (PROGN (REMPROPS (QUOTE MENGE)) (SETPROPLIST (QUOTE MENGE) (NCONC (QUOTE (DT*SORT.NUMBER 7. DT*DIRECT.SUBSORTS NIL DT*TRANSITIVE.CLOSURE (MENGE) DT*MAX.SUBSORTS ((INDEXMENGE) (INDEX) (ELEMENT) (VERKN) (MENGE MENGE) (ANY MENGE)) DT*MINIMAL.SUBSORTS (MENGE) DT*DIRECT.SUPERSORTS (ANY) DT*INVERSE.TRANSITIVE.CLOSURE (MENGE ANY))) (GETPROPLIST (QUOTE MENGE))))) (PROGN (REMPROPS (QUOTE ANY)) (SETPROPLIST (QUOTE ANY) (NCONC (QUOTE (DT*DIRECT.SUBSORTS (INDEXMENGE INDEX ELEMENT VERKN MENGE) DT*SORT.NUMBER 1. DT*TRANSITIVE.CLOSURE (INDEXMENGE INDEX ELEMENT VERKN MENGE ANY) DT*MAX.SUBSORTS ((INDEXMENGE INDEXMENGE) (INDEX INDEX) (ELEMENT ELEMENT) (VERKN VERKN) (MENGE MENGE) (ANY ANY)) DT*MINIMAL.SUBSORTS (INDEX ELEMENT VERKN MENGE) DT*DIRECT.SUPERSORTS NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*LEAST.SUPERSORTS ((ANY ANY)))) (GETPROPLIST (QUOTE ANY))))))
(PROGN (RPAQQ ST*STACK1 (NIL ((= PROGN (DT-PREDICATE.DELETE 84.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE =) ST*SYMBOL.ADDRESSES))) (X_83 PROGN (DT-VARIABLE.DELETE 83.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_83) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_82 PROGN (DT-VARIABLE.DELETE 82.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_82) ST*SYMBOL.ADDRESSES))) (X_81 PROGN (DT-VARIABLE.DELETE 81.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_81) ST*SYMBOL.ADDRESSES))) (ELEMENT DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE ELEMENT) (QUOTE (ANY))) (ELEMENT PUTPROP (QUOTE ELEMENT) NIL) (X_80 PROGN (DT-VARIABLE.DELETE 80.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_80) ST*SYMBOL.ADDRESSES))) (VERKN DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE VERKN) (QUOTE (ANY))) (VERKN PUTPROP (QUOTE VERKN) NIL) (X_79 PROGN (DT-VARIABLE.DELETE 79.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_79) ST*SYMBOL.ADDRESSES))) (X_78 PROGN (DT-VARIABLE.DELETE 78.) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_78) ST*SYMBOL.ADDRESSES))) (MENGE DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE MENGE) (QUOTE (ANY))) (MENGE PUTPROP (QUOTE MENGE) NIL)) NIL)) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1.) (FALSE . 2.) (MENGE . T) (VERKN . T) (ELEMENT . T) (INDEX . T) (INDEXMENGE . T) (LIDEAL . 29.) (RIDEAL . 30.) (UHG . 31.) (ME . 32.) (NICHTLEER . 33.) (HG . 34.) (EL . 35.) (MINIMAL . 36.) (MPROD . 37.) (APPLYV . 38.) (F*X . 39.) (SM . 40.) (SET . 41.) (VER . 42.) (GR . 43.) (INVERS . 44.) (MINIMAL-BED-L . 45.) (MINIMAL-BED-R . 46.) (EL-IND . 47.) (U . 48.) (E . 49.) (NICHTLEER-IND . 50.) (GLEICH . 51.) (VER-IND . 52.) (SM-IND . 53.) (IDEAL . 54.) (X_55 . 55.) (X_56 . 56.) (X_57 . 57.) (X_58 . 58.) (X_77 . 77.) (X_76 . 76.) (X_75 . 75.) (X_71 . 71.) (X_70 . 70.) (X_69 . 69.) (X_68 . 68.) (X_67 . 67.) (X_66 . 66.) (X_65 . 65.) (X_64 . 64.) (X_72 . 72.) (X_73 . 73.) (X_74 . 74.) (X_63 . 63.) (X_62 . 62.) (X_61 . 61.) (X_60 . 60.) (X_59 . 59.) (X_78 . 78.) (X_79 . 79.) (X_80 . 80.) (X_81 . 81.) (X_82 . 82.) (X_83 . 83.) (= . 84.))))))))
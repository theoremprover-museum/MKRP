;;; -*- Mode: LISP; Syntax: Common-lisp; Package: MKRP -*- 

(SORT MENGE,VERKN,ELEMENT,INDEX,INDEXMENGE:ANY)
(TYPE LIDEAL(MENGE MENGE VERKN))
(TYPE RIDEAL(MENGE MENGE VERKN))
(TYPE UHG(MENGE MENGE VERKN))
(TYPE ME(MENGE MENGE))
(TYPE NICHTLEER(MENGE))
(TYPE HG(MENGE VERKN))
(TYPE NICHTLEER-IND(INDEXMENGE))
(TYPE GLEICH(MENGE MENGE))
(TYPE EL-IND(INDEX INDEXMENGE))
(TYPE EL(ELEMENT MENGE))
(TYPE MINIMAL(MENGE MENGE VERKN))
(TYPE MINIMAL-BED-L(MENGE VERKN))
(TYPE MINIMAL-BED-R(MENGE VERKN))
(TYPE MPROD(MENGE MENGE VERKN) :MENGE)
(TYPE U(INDEX) :MENGE)
(TYPE VER-IND(INDEXMENGE) :MENGE)
(TYPE SM-IND(INDEXMENGE) :MENGE)
(TYPE APPLYV(VERKN ELEMENT ELEMENT) :ELEMENT)
(TYPE F*X(MENGE ELEMENT VERKN) :MENGE)
(TYPE SM(MENGE MENGE) :MENGE)
(TYPE T*(MENGE VERKN MENGE ELEMENT) :MENGE)
(* DEF. UHG *)
(ALL G,F:MENGE ALL MAL:VERKN HG(F MAL) AND ME(G F) AND ME(MPROD(G G MAL) G) IMPL UHG(G F MAL))
(* REFLEXIVITAET VON ME *)
(ALL A:MENGE ME(A A))
(* DEF. LIDEAL *)
(ALL L,F:MENGE ALL MAL:VERKN LIDEAL(L F MAL) IMPL ME(L F))
(* DEF. RIDEAL *)
(ALL R,F:MENGE ALL MAL:VERKN RIDEAL(R F MAL) IMPL ME(R F))
(* R#L IST TEILMENGE VON F *)
(ALL R,F,L:MENGE ALL MAL:VERKN RIDEAL(R F MAL) AND LIDEAL(L F MAL) IMPL ME(MPROD(R L MAL) F))
(* ASSOZIATIVITAET VON MAL *)
(ALL A,B,C,D,F:MENGE  ALL MAL:VERKN  
     HG(F MAL) AND ME(A F) AND ME(B F) AND ME(C F) AND ME(D F)
     IMPL MPROD(MPROD(A B MAL) MPROD(C D MAL) MAL) := MPROD(MPROD(MPROD(A B MAL) C MAL) D MAL))
(* LEMMA 3.10.3.UHG.R *)
(ALL F,R,L:MENGE  ALL MAL:VERKN  
     HG(F MAL) AND LIDEAL(L F MAL) AND RIDEAL(R F MAL) AND MINIMAL(R F MAL)
     IMPL MPROD(MPROD(R L MAL) R MAL) := R)

(ALL F,R,L:MENGE  ALL MAL:VERKN  
     HG(F MAL) AND RIDEAL(R F MAL) AND LIDEAL(L F MAL) AND MINIMAL(R F MAL) IMPL UHG(MPROD(R L MAL) F MAL))
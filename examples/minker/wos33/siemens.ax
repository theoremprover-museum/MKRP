(COND ((FMT-LOAD " 6-SEP-84 21:33:49" NIL (((ALL X,Y,Z NOT R (X Y) OR NOT R (Y Z) OR R (X Z)) (ALL 5 (ALL 4 (ALL
3 (OR (NOT (+ 6 (3 4) NIL)) (OR (NOT (+ 6 (4 5) NIL)) (+ 6 (3 5) NIL)))))) QUANTIFICATION) ((ALL X,Y,Z NOT R (Y
Z) OR NOT P (X Y) OR P (X Z)) (ALL 9 (ALL 8 (ALL 7 (OR (NOT (+ 6 (8 9) NIL)) (OR (NOT (+ 10 (7 8) NIL)) (+ 10 (7
9) NIL)))))) QUANTIFICATION) ((ALL X,Y,Z NOT R (X Z) OR NOT P (X Y) OR P (Z Y)) (ALL 13 (ALL 12 (ALL 11 (OR (NOT
(+ 6 (11 13) NIL)) (OR (NOT (+ 10 (11 12) NIL)) (+ 10 (13 12) NIL)))))) QUANTIFICATION) ((ALL Y R (Y A) OR NOT
P (Y A) OR R (Y K)) (ALL 14 (OR (+ 6 (14 15) NIL) (OR (NOT (+ 10 (14 15) NIL)) (+ 6 (14 16) NIL)))) QUANTIFICATION)
((ALL Y R (Y A) OR P (Y A) OR NOT R (Y K)) (ALL 17 (OR (+ 6 (17 15) NIL) (OR (+ 10 (17 15) NIL) (NOT (+ 6 (17 16)
NIL))))) QUANTIFICATION) ((ALL Y R (Y N) OR NOT P (Y N) OR NOT R (G (Y) N)) (ALL 18 (OR (+ 6 (18 19) NIL) (OR (NOT
(+ 10 (18 19) NIL)) (NOT (+ 6 ((20 18) 19) NIL))))) QUANTIFICATION) ((ALL Y R (Y N) OR NOT P (Y N) OR NOT R (G
(Y) Y)) (ALL 21 (OR (+ 6 (21 19) NIL) (OR (NOT (+ 10 (21 19) NIL)) (NOT (+ 6 ((20 21) 21) NIL))))) QUANTIFICATION)
((ALL Y R (Y N) OR NOT P (Y N) OR P (Y G (Y))) (ALL 22 (OR (+ 6 (22 19) NIL) (OR (NOT (+ 10 (22 19) NIL)) (+ 10
(22 (20 22)) NIL)))) QUANTIFICATION) ((ALL Y R (Y N) OR NOT P (Y N) OR P (G (Y) Y)) (ALL 23 (OR (+ 6 (23 19) NIL)
(OR (NOT (+ 10 (23 19) NIL)) (+ 10 ((20 23) 23) NIL)))) QUANTIFICATION) ((ALL Y,U R (Y N) OR P (Y N) OR R (U N)
OR R (U Y) OR NOT P (Y U) OR NOT P (U Y)) (ALL 25 (ALL 24 (OR (+ 6 (24 19) NIL) (OR (+ 10 (24 19) NIL) (OR (+ 6
(25 19) NIL) (OR (+ 6 (25 24) NIL) (OR (NOT (+ 10 (24 25) NIL)) (NOT (+ 10 (25 24) NIL))))))))) QUANTIFICATION)
((ALL Y R (Y B) OR P (Y B) OR NOT R (J (Y) B)) (ALL 26 (OR (+ 6 (26 27) NIL) (OR (+ 10 (26 27) NIL) (NOT (+ 6 ((28
26) 27) NIL))))) QUANTIFICATION) ((ALL Y R (Y B) OR P (Y B) OR NOT R (J (Y) Y)) (ALL 29 (OR (+ 6 (29 27) NIL) (OR
(+ 10 (29 27) NIL) (NOT (+ 6 ((28 29) 29) NIL))))) QUANTIFICATION) ((ALL Y R (Y B) OR P (Y B) OR P (Y J (Y))) (ALL
30 (OR (+ 6 (30 27) NIL) (OR (+ 10 (30 27) NIL) (+ 10 (30 (28 30)) NIL)))) QUANTIFICATION) ((ALL Y R (Y B) OR P
(Y B) OR P (J (Y) Y)) (ALL 31 (OR (+ 6 (31 27) NIL) (OR (+ 10 (31 27) NIL) (+ 10 ((28 31) 31) NIL)))) QUANTIFICATION)
((ALL Y,V R (Y B) OR NOT P (Y B) OR R (V B) OR R (V Y) OR NOT P (Y V) OR NOT P (V Y)) (ALL 33 (ALL 32 (OR (+ 6
(32 27) NIL) (OR (NOT (+ 10 (32 27) NIL)) (OR (+ 6 (33 27) NIL) (OR (+ 6 (33 32) NIL) (OR (NOT (+ 10 (32 33) NIL))
(NOT (+ 10 (33 32) NIL))))))))) QUANTIFICATION) ((ALL Y R (Y K) OR NOT R (Y N) OR P (Y K)) (ALL 34 (OR (+ 6 (34
16) NIL) (OR (NOT (+ 6 (34 19) NIL)) (+ 10 (34 16) NIL)))) QUANTIFICATION) ((ALL Y R (Y K) OR NOT R (Y B) OR P
(Y K)) (ALL 35 (OR (+ 6 (35 16) NIL) (OR (NOT (+ 6 (35 27) NIL)) (+ 10 (35 16) NIL)))) QUANTIFICATION) ((ALL Y
R (Y K) OR R (Y B) OR R (Y N) OR NOT P (Y K)) (ALL 36 (OR (+ 6 (36 16) NIL) (OR (+ 6 (36 27) NIL) (OR (+ 6 (36
19) NIL) (NOT (+ 10 (36 16) NIL)))))) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST
(QUOTE (10007 10012 10017 10022 10027 10032 10037 10042 10056 10061 10066 10071 10076 10081 10086 10091 10105 10110
10115 10120 10125 10130 10135 10140 10145 10150 10165 10170 10175 10180 10195 10200 10205 10210 10225 10240)))
(DATALIST (QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
NIL NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+
2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 R NIL
NIL (ANY ANY) NIL NIL ((- 6 (POSITIVE))) ((+ 6 (NEGATIVE))) ((+ 6 (NIL))) ((- 6 (NIL))) NIL NIL (DT*ST-KIND NIL)
PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 P NIL NIL (ANY ANY) NIL NIL ((- 10 (POSITIVE))) ((+ 10 (NEGATIVE))
) ((+ 10 (NIL))) ((- 10 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 A ANY (DT*ST-KIND NIL) CONSTANT 5 K ANY (DT*ST-KIND NIL) CONSTANT 5
ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 N ANY (
DT*ST-KIND NIL) CONSTANT 14 G NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 B ANY (DT*ST-KIND NIL) CONSTANT 14 J NIL ANY (ANY)
NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE
37 1) (IDIFFERENCE 10240 10002)) MEM*SIZE) (MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ COUNTER1 37) (MAPC
ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1
MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T
(SETQ COUNTER1 37) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND
((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT)))))))
(SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
DATA)))))) (RPAQ MEM*NEXT.RADR (IPLUS 10002 INCREMENT)) (RPAQ MEM*NEXT.VADR 37) (RPAQ MEM*REST (ADD1 (IDIFFERENCE
MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ
DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 1) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS 
DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS
DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ 
DT*CONSTANT.ALL (27 19 16 15)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL
(28 20)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ 
DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT 
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (10 6 2
1)) (RPAQQ DT*PREDICATE.ALL (10 6 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS
(PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES 
+SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2)
(RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)))
(PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED (2 1))))) (PROGN (SETPROPLIST
(QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) 
DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ ST*STACK1 (NIL ((X_36
PROGN (DT-VARIABLE.DELETE 36) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_36) ST*SYMBOL.ADDRESSES)))) ((X_35 PROGN
(DT-VARIABLE.DELETE 35) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_35) ST*SYMBOL.ADDRESSES)))) ((X_34 PROGN (
DT-VARIABLE.DELETE 34) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_34) ST*SYMBOL.ADDRESSES)))) ((X_33 PROGN (
DT-VARIABLE.DELETE 33) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_33) ST*SYMBOL.ADDRESSES))) (X_32 PROGN (
DT-VARIABLE.DELETE 32) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_32) ST*SYMBOL.ADDRESSES)))) ((X_31 PROGN (
DT-VARIABLE.DELETE 31) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_31) ST*SYMBOL.ADDRESSES)))) ((X_30 PROGN (
DT-VARIABLE.DELETE 30) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_30) ST*SYMBOL.ADDRESSES)))) ((X_29 PROGN (
DT-VARIABLE.DELETE 29) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_29) ST*SYMBOL.ADDRESSES)))) ((J PROGN (
DT-FUNCTION.DELETE 28) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE J) ST*SYMBOL.ADDRESSES))) (B PROGN (DT-CONSTANT.DELETE
27) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B) ST*SYMBOL.ADDRESSES))) (X_26 PROGN (DT-VARIABLE.DELETE 26) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_26) ST*SYMBOL.ADDRESSES)))) ((X_25 PROGN (DT-VARIABLE.DELETE 25) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_25) ST*SYMBOL.ADDRESSES))) (X_24 PROGN (DT-VARIABLE.DELETE 24) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_24) ST*SYMBOL.ADDRESSES)))) ((X_23 PROGN (DT-VARIABLE.DELETE 23) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_23) ST*SYMBOL.ADDRESSES)))) ((X_22 PROGN (DT-VARIABLE.DELETE 22) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_22) ST*SYMBOL.ADDRESSES)))) ((X_21 PROGN (DT-VARIABLE.DELETE 21) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) ST*SYMBOL.ADDRESSES)))) ((G PROGN (DT-FUNCTION.DELETE 20) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE G) ST*SYMBOL.ADDRESSES))) (N PROGN (DT-CONSTANT.DELETE 19) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE N) ST*SYMBOL.ADDRESSES))) (X_18 PROGN (DT-VARIABLE.DELETE 18) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18) ST*SYMBOL.ADDRESSES)))) ((X_17 PROGN (DT-VARIABLE.DELETE 17) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17) ST*SYMBOL.ADDRESSES)))) ((K PROGN (DT-CONSTANT.DELETE 16) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE K) ST*SYMBOL.ADDRESSES))) (A PROGN (DT-CONSTANT.DELETE 15) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) ST*SYMBOL.ADDRESSES))) (X_14 PROGN (DT-VARIABLE.DELETE 14) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES)))) ((X_13 PROGN (DT-VARIABLE.DELETE 13) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_13) ST*SYMBOL.ADDRESSES))) (X_12 PROGN (DT-VARIABLE.DELETE 12) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_12) ST*SYMBOL.ADDRESSES))) (X_11 PROGN (DT-VARIABLE.DELETE 11) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_11) ST*SYMBOL.ADDRESSES)))) ((P PROGN (DT-PREDICATE.DELETE 10) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P) ST*SYMBOL.ADDRESSES))) (X_9 PROGN (DT-VARIABLE.DELETE 9) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_9) ST*SYMBOL.ADDRESSES))) (X_8 PROGN (DT-VARIABLE.DELETE 8) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_8) ST*SYMBOL.ADDRESSES))) (X_7 PROGN (DT-VARIABLE.DELETE 7) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_7) ST*SYMBOL.ADDRESSES)))) ((R PROGN (DT-PREDICATE.DELETE 6) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R) ST*SYMBOL.ADDRESSES))) (X_5 PROGN (DT-VARIABLE.DELETE 5) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_5) ST*SYMBOL.ADDRESSES))) (X_4 PROGN (DT-VARIABLE.DELETE 4) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_4) ST*SYMBOL.ADDRESSES))) (X_3 PROGN (DT-VARIABLE.DELETE 3) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_3) ST*SYMBOL.ADDRESSES)))) ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ
ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_3 . 3) (X_4 . 4) (X_5 . 5) (R . 6) (X_7 . 7) (X_8
. 8) (X_9 . 9) (P . 10) (X_11 . 11) (X_12 . 12) (X_13 . 13) (X_14 . 14) (A . 15) (K . 16) (X_17 . 17) (X_18 . 18)
(N . 19) (G . 20) (X_21 . 21) (X_22 . 22) (X_23 . 23) (X_24 . 24) (X_25 . 25) (X_26 . 26) (B . 27) (J . 28) (X_29
. 29) (X_30 . 30) (X_31 . 31) (X_32 . 32) (X_33 . 33) (X_34 . 34) (X_35 . 35) (X_36 . 36))))))))STOP
 

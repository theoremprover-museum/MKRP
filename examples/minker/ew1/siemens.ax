(COND ((FMT-LOAD " 6-SEP-84 20:11:36" NIL (((ALL X P (X) OR Q (X)) (ALL 3 (OR (+ 4 (3) NIL) (+ 5 (3) NIL))) 
QUANTIFICATION) ((ALL X NOT Q (X) OR R (X)) (ALL 6 (OR (NOT (+ 5 (6) NIL)) (+ 7 (6) NIL))) QUANTIFICATION) ((ALL
X NOT R (X) OR S (X)) (ALL 8 (OR (NOT (+ 7 (8) NIL)) (+ 9 (8) NIL))) QUANTIFICATION) ((ALL X NOT R (X) OR NOT S
(X) OR T (X)) (ALL 10 (OR (NOT (+ 7 (10) NIL)) (OR (NOT (+ 9 (10) NIL)) (+ 11 (10) NIL)))) QUANTIFICATION) ((ALL
X P (X) OR NOT T (X)) (ALL 12 (OR (+ 4 (12) NIL) (NOT (+ 11 (12) NIL)))) QUANTIFICATION))) (COND (ST*LOAD.FLAG
(PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (10115 10130 10135 10150 10155 10170 10175 10190 10205 10210 10225
10240))) (DATALIST (QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL)))
((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE)))
((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
15 P NIL NIL (ANY) NIL NIL ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE))) ((+ 4 (NIL))) ((- 4 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 15 Q NIL NIL (ANY) NIL NIL ((- 5 (POSITIVE))) ((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL))) NIL
NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 R NIL NIL (ANY) NIL NIL ((-
7 (POSITIVE))) ((+ 7 (NEGATIVE))) ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 15 S NIL NIL (ANY) NIL NIL ((- 9 (POSITIVE))) ((+ 9 (NEGATIVE))) ((+ 9 (NIL)))
((- 9 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 T NIL NIL
(ANY) NIL NIL ((- 11 (POSITIVE))) ((+ 11 (NEGATIVE))) ((+ 11 (NIL))) ((- 11 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 10240)) COUNTER1) (MEM-RESET)
(COND ((IGREATERP (IPLUS (IDIFFERENCE 13 1) (IDIFFERENCE 10240 10110)) MEM*SIZE) (MEM=SATURATION.ENTERED)) ((EQ
MEM*SIZE 10240) (SETQ COUNTER1 13) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1
COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ
COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 13) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY
(SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR))
RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA)
(SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR (IPLUS 10110 INCREMENT)) (RPAQ
MEM*NEXT.VADR 13) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR
NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 1) (RPAQQ DT*SORT.PROPERTIES
(DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS 
DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ
DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL NIL) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ
DT*FUNCTION.ALL NIL) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL)
(RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (11 9 7
5 4 2 1)) (RPAQQ DT*PREDICATE.ALL (11 9 7 5 4 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ 
DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES
-ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE
2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)))
(PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED (2 1))))) (PROGN (SETPROPLIST
(QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) 
DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ ST*STACK1 (NIL ((X_12
PROGN (DT-VARIABLE.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_12) ST*SYMBOL.ADDRESSES)))) ((T PROGN
(DT-PREDICATE.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE T) ST*SYMBOL.ADDRESSES))) (X_10 PROGN (
DT-VARIABLE.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_10) ST*SYMBOL.ADDRESSES)))) ((S PROGN (
DT-PREDICATE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE S) ST*SYMBOL.ADDRESSES))) (X_8 PROGN (
DT-VARIABLE.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_8) ST*SYMBOL.ADDRESSES)))) ((R PROGN (
DT-PREDICATE.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R) ST*SYMBOL.ADDRESSES))) (X_6 PROGN (
DT-VARIABLE.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_6) ST*SYMBOL.ADDRESSES)))) ((Q PROGN (
DT-PREDICATE.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE Q) ST*SYMBOL.ADDRESSES))) (P PROGN (
DT-PREDICATE.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P) ST*SYMBOL.ADDRESSES))) (X_3 PROGN (
DT-VARIABLE.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_3) ST*SYMBOL.ADDRESSES)))) ((FALSE PROGN (
DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (
DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (
DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP
(QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_3 . 3) (P .
4) (Q . 5) (X_6 . 6) (R . 7) (X_8 . 8) (S . 9) (X_10 . 10) (T . 11) (X_12 . 12))))))))STOP
 

(COND ((FMT-LOAD " 6-SEP-84 20:26:40" NIL (((ALL X,Y EQ (P (X Y) P (Y X))) (ALL 4 (ALL 3 (+ 6 ((5 3 4) (5 4 3))
NIL))) QUANTIFICATION) ((ALL X,Y,Z EQ (P (X P (Y Z)) P (P (X Y) Z))) (ALL 9 (ALL 8 (ALL 7 (+ 6 ((5 7 (5 8 9)) (5
(5 7 8) 9)) NIL)))) QUANTIFICATION) ((ALL X,Y EQ (M (P (X Y) Y) X)) (ALL 11 (ALL 10 (+ 6 ((12 (5 10 11) 11) 10)
NIL))) QUANTIFICATION) ((ALL X,Y EQ (X M (P (X Y) Y))) (ALL 14 (ALL 13 (+ 6 (13 (12 (5 13 14) 14)) NIL))) QUANTIFICATION)
((ALL X,Y,Z EQ (P (M (X Y) Z) M (P (X Z) Y))) (ALL 17 (ALL 16 (ALL 15 (+ 6 ((5 (12 15 16) 17) (12 (5 15 17) 16))
NIL)))) QUANTIFICATION) ((ALL X,Y,Z NOT EQ (X Y) OR NOT EQ (Y Z) OR EQ (X Z)) (ALL 20 (ALL 19 (ALL 18 (OR (NOT
(+ 6 (18 19) NIL)) (OR (NOT (+ 6 (19 20) NIL)) (+ 6 (18 20) NIL)))))) QUANTIFICATION) ((ALL X,Y,U,V NOT EQ (X Y)
OR NOT EQ (U P (X V)) OR EQ (U P (Y V))) (ALL 24 (ALL 23 (ALL 22 (ALL 21 (OR (NOT (+ 6 (21 22) NIL)) (OR (NOT (+
6 (23 (5 21 24)) NIL)) (+ 6 (23 (5 22 24)) NIL))))))) QUANTIFICATION) ((ALL X,Y,U,V NOT EQ (X Y) OR NOT EQ (U M
(X V)) OR EQ (U M (Y V))) (ALL 28 (ALL 27 (ALL 26 (ALL 25 (OR (NOT (+ 6 (25 26) NIL)) (OR (NOT (+ 6 (27 (12 25
28)) NIL)) (+ 6 (27 (12 26 28)) NIL))))))) QUANTIFICATION) ((ALL X,Y,U,V NOT EQ (X Y) OR NOT EQ (U M (V X)) OR
EQ (U M (V Y))) (ALL 32 (ALL 31 (ALL 30 (ALL 29 (OR (NOT (+ 6 (29 30) NIL)) (OR (NOT (+ 6 (31 (12 32 29)) NIL))
(+ 6 (31 (12 32 30)) NIL))))))) QUANTIFICATION) ((ALL X,Y,U,V NOT EQ (X Y) OR NOT EQ (U P (V X)) OR EQ (U P (V
Y))) (ALL 36 (ALL 35 (ALL 34 (ALL 33 (OR (NOT (+ 6 (33 34) NIL)) (OR (NOT (+ 6 (35 (5 36 33)) NIL)) (+ 6 (35 (5
36 34)) NIL))))))) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (10017
10022 10027 10032 10037 10042 10047 10052 10057 10062 10067 10072 10077 10082 10087 10092 10097 10102 10107 10112
10117 10122 10127 10132 10146 10151 10156 10161 10166 10171 10186 10200 10205 10210 10225 10240))) (DATALIST (QUOTE
(15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL)))
NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 14 P NIL ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 15 EQ NIL NIL (ANY
ANY) NIL NIL ((- 6 (POSITIVE))) ((+ 6 (NEGATIVE))) ((+ 6 (NIL))) ((- 6 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 14 M NIL ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY
NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE
MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE 37 1) (IDIFFERENCE 10240 10012)) MEM*SIZE)
(MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ COUNTER1 37) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA
MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA
(DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 37) (MAPC ADDRLIST (FUNCTION
(LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR)
((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC
DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR
(IPLUS 10012 INCREMENT)) (RPAQ MEM*NEXT.VADR 37) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR)))
(RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR
1) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE
DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ 
DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL NIL) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ
DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL (12 5)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ
DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS
(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC 
ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE))
(RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ
DT*NONEQUALITY.PREDICATES (6 2 1)) (RPAQQ DT*PREDICATE.ALL (6 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ
DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES
-ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE
2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)))
(PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED (2 1))))) (PROGN (SETPROPLIST
(QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) 
DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ ST*STACK1 (NIL ((X_36
PROGN (DT-VARIABLE.DELETE 36) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_36) ST*SYMBOL.ADDRESSES))) (X_35 PROGN
(DT-VARIABLE.DELETE 35) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_35) ST*SYMBOL.ADDRESSES))) (X_34 PROGN (
DT-VARIABLE.DELETE 34) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_34) ST*SYMBOL.ADDRESSES))) (X_33 PROGN (
DT-VARIABLE.DELETE 33) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_33) ST*SYMBOL.ADDRESSES)))) ((X_32 PROGN (
DT-VARIABLE.DELETE 32) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_32) ST*SYMBOL.ADDRESSES))) (X_31 PROGN (
DT-VARIABLE.DELETE 31) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_31) ST*SYMBOL.ADDRESSES))) (X_30 PROGN (
DT-VARIABLE.DELETE 30) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_30) ST*SYMBOL.ADDRESSES))) (X_29 PROGN (
DT-VARIABLE.DELETE 29) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_29) ST*SYMBOL.ADDRESSES)))) ((X_28 PROGN (
DT-VARIABLE.DELETE 28) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_28) ST*SYMBOL.ADDRESSES))) (X_27 PROGN (
DT-VARIABLE.DELETE 27) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_27) ST*SYMBOL.ADDRESSES))) (X_26 PROGN (
DT-VARIABLE.DELETE 26) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_26) ST*SYMBOL.ADDRESSES))) (X_25 PROGN (
DT-VARIABLE.DELETE 25) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_25) ST*SYMBOL.ADDRESSES)))) ((X_24 PROGN (
DT-VARIABLE.DELETE 24) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_24) ST*SYMBOL.ADDRESSES))) (X_23 PROGN (
DT-VARIABLE.DELETE 23) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_23) ST*SYMBOL.ADDRESSES))) (X_22 PROGN (
DT-VARIABLE.DELETE 22) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_22) ST*SYMBOL.ADDRESSES))) (X_21 PROGN (
DT-VARIABLE.DELETE 21) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) ST*SYMBOL.ADDRESSES)))) ((X_20 PROGN (
DT-VARIABLE.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_20) ST*SYMBOL.ADDRESSES))) (X_19 PROGN (
DT-VARIABLE.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_19) ST*SYMBOL.ADDRESSES))) (X_18 PROGN (
DT-VARIABLE.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18) ST*SYMBOL.ADDRESSES)))) ((X_17 PROGN (
DT-VARIABLE.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17) ST*SYMBOL.ADDRESSES))) (X_16 PROGN (
DT-VARIABLE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES))) (X_15 PROGN (
DT-VARIABLE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_15) ST*SYMBOL.ADDRESSES)))) ((X_14 PROGN (
DT-VARIABLE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES))) (X_13 PROGN (
DT-VARIABLE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_13) ST*SYMBOL.ADDRESSES)))) ((M PROGN (
DT-FUNCTION.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE M) ST*SYMBOL.ADDRESSES))) (X_11 PROGN (
DT-VARIABLE.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_11) ST*SYMBOL.ADDRESSES))) (X_10 PROGN (
DT-VARIABLE.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_10) ST*SYMBOL.ADDRESSES)))) ((X_9 PROGN (
DT-VARIABLE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_9) ST*SYMBOL.ADDRESSES))) (X_8 PROGN (
DT-VARIABLE.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_8) ST*SYMBOL.ADDRESSES))) (X_7 PROGN (
DT-VARIABLE.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_7) ST*SYMBOL.ADDRESSES)))) ((EQ PROGN (
DT-PREDICATE.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EQ) ST*SYMBOL.ADDRESSES))) (P PROGN (
DT-FUNCTION.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P) ST*SYMBOL.ADDRESSES))) (X_4 PROGN (
DT-VARIABLE.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_4) ST*SYMBOL.ADDRESSES))) (X_3 PROGN (
DT-VARIABLE.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_3) ST*SYMBOL.ADDRESSES)))) ((FALSE PROGN (
DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (
DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (
DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP
(QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_3 . 3) (X_4
. 4) (P . 5) (EQ . 6) (X_7 . 7) (X_8 . 8) (X_9 . 9) (X_10 . 10) (X_11 . 11) (M . 12) (X_13 . 13) (X_14 . 14) (X_15
. 15) (X_16 . 16) (X_17 . 17) (X_18 . 18) (X_19 . 19) (X_20 . 20) (X_21 . 21) (X_22 . 22) (X_23 . 23) (X_24 . 24)
(X_25 . 25) (X_26 . 26) (X_27 . 27) (X_28 . 28) (X_29 . 29) (X_30 . 30) (X_31 . 31) (X_32 . 32) (X_33 . 33) (X_34
. 34) (X_35 . 35) (X_36 . 36))))))))STOP
 

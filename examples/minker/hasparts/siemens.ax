(COND ((FMT-LOAD " 6-SEP-84 20:20:19" NIL (((IN (JHN BOY)) (+ 5 (3 4) NIL) QUANTIFICATION) ((ALL X NOT IN (X BOY)
OR IN (X HUM)) (ALL 6 (OR (NOT (+ 5 (6 4) NIL)) (+ 5 (6 7) NIL))) QUANTIFICATION) ((ALL V,W,X,Y,Z NOT HP (X V Y)
OR IN (SK1 (X Y Z V W) Y) OR HP (X T (V W) Z)) (ALL 12 (ALL 11 (ALL 10 (ALL 9 (ALL 8 (OR (NOT (+ 13 (10 8 11) NIL))
(OR (+ 5 ((14 10 11 12 8 9) 11) NIL) (+ 13 (10 (15 8 9) 12) NIL)))))))) QUANTIFICATION) ((ALL V,W,X,Y,Z NOT HP
(X V Y) OR NOT HP (SK1 (X Y Z V W) W Z) OR HP (X T (V W) Z)) (ALL 20 (ALL 19 (ALL 18 (ALL 17 (ALL 16 (OR (NOT (+
13 (18 16 19) NIL)) (OR (NOT (+ 13 ((14 18 19 20 16 17) 17 20) NIL)) (+ 13 (18 (15 16 17) 20) NIL)))))))) QUANTIFICATION)
((ALL X NOT IN (X HAN) OR HP (X 5 FIN)) (ALL 21 (OR (NOT (+ 5 (21 22) NIL)) (+ 13 (21 23 24) NIL))) QUANTIFICATION)
((ALL X NOT IN (X HUM) OR HP (X 2 ARM)) (ALL 25 (OR (NOT (+ 5 (25 7) NIL)) (+ 13 (25 26 27) NIL))) QUANTIFICATION)
((ALL X NOT IN (X ARM) OR HP (X 1 HAN)) (ALL 28 (OR (NOT (+ 5 (28 27) NIL)) (+ 13 (28 29 22) NIL))) QUANTIFICATION)))
(COND (ST*LOAD.FLAG (PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (10042 10047 10052 10057 10062 10067 10072
10077 10082 10087 10092 10097 10102 10107 10121 10135 10150 10155 10160 10165 10170 10175 10180 10185 10200 10205
10210 10225 10240))) (DATALIST (QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE)))
((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE)))
((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 JHN ANY (DT*ST-KIND NIL) CONSTANT
5 BOY ANY (DT*ST-KIND NIL) CONSTANT 15 IN NIL NIL (ANY ANY) NIL NIL ((- 5 (POSITIVE))) ((+ 5 (NEGATIVE))) ((+ 5
(NIL))) ((- 5 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5
HUM ANY (DT*ST-KIND NIL) CONSTANT 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 HP NIL NIL (ANY ANY ANY) NIL NIL ((- 13 (POSITIVE)))
((+ 13 (NEGATIVE))) ((+ 13 (NIL))) ((- 13 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14 SK1 NIL ANY (ANY ANY ANY
ANY ANY) NIL NIL NIL NIL NIL 5 ANY (DT*ST-KIND NIL) FUNCTION 14 T NIL ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (
DT*ST-KIND NIL) FUNCTION 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 HAN ANY (DT*ST-KIND NIL) CONSTANT 5 5 ANY (DT*ST-KIND NIL) CONSTANT 5 FIN ANY (DT*ST-KIND NIL) CONSTANT 5 ANY
NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 2 ANY (DT*ST-KIND NIL) CONSTANT 5 ARM ANY (DT*ST-KIND NIL) CONSTANT
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 1 ANY (DT*ST-KIND NIL) CONSTANT))) (INCREMENT (IDIFFERENCE
MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE 30 1) (IDIFFERENCE 10240 10037)) MEM*SIZE)
(MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ COUNTER1 30) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA
MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA
(DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 30) (MAPC ADDRLIST (FUNCTION
(LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR)
((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC
DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR
(IPLUS 10037 INCREMENT)) (RPAQ MEM*NEXT.VADR 30) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR)))
(RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR
1) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE
DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ 
DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (29 27 26 24 23 22 7 4 3)) (RPAQQ 
DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL (15 14)) (RPAQQ 
DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ 
DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT 
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (13 5 2
1)) (RPAQQ DT*PREDICATE.ALL (13 5 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS
(PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES 
+SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2)
(RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)))
(PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED (2 1))))) (PROGN (SETPROPLIST
(QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) 
DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ ST*STACK1 (NIL ((1 PROGN
(DT-CONSTANT.DELETE 29) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE 1) ST*SYMBOL.ADDRESSES))) (X_28 PROGN (
DT-VARIABLE.DELETE 28) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_28) ST*SYMBOL.ADDRESSES)))) ((ARM PROGN (
DT-CONSTANT.DELETE 27) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ARM) ST*SYMBOL.ADDRESSES))) (2 PROGN (
DT-CONSTANT.DELETE 26) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE 2) ST*SYMBOL.ADDRESSES))) (X_25 PROGN (
DT-VARIABLE.DELETE 25) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_25) ST*SYMBOL.ADDRESSES)))) ((FIN PROGN (
DT-CONSTANT.DELETE 24) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FIN) ST*SYMBOL.ADDRESSES))) (5 PROGN (
DT-CONSTANT.DELETE 23) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE 5) ST*SYMBOL.ADDRESSES))) (HAN PROGN (
DT-CONSTANT.DELETE 22) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE HAN) ST*SYMBOL.ADDRESSES))) (X_21 PROGN (
DT-VARIABLE.DELETE 21) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) ST*SYMBOL.ADDRESSES)))) ((X_20 PROGN (
DT-VARIABLE.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_20) ST*SYMBOL.ADDRESSES))) (X_19 PROGN (
DT-VARIABLE.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_19) ST*SYMBOL.ADDRESSES))) (X_18 PROGN (
DT-VARIABLE.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18) ST*SYMBOL.ADDRESSES))) (X_17 PROGN (
DT-VARIABLE.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17) ST*SYMBOL.ADDRESSES))) (X_16 PROGN (
DT-VARIABLE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES)))) ((T PROGN (
DT-FUNCTION.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE T) ST*SYMBOL.ADDRESSES))) (SK1 PROGN (
DT-FUNCTION.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SK1) ST*SYMBOL.ADDRESSES))) (HP PROGN (
DT-PREDICATE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE HP) ST*SYMBOL.ADDRESSES))) (X_12 PROGN (
DT-VARIABLE.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_12) ST*SYMBOL.ADDRESSES))) (X_11 PROGN (
DT-VARIABLE.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_11) ST*SYMBOL.ADDRESSES))) (X_10 PROGN (
DT-VARIABLE.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_10) ST*SYMBOL.ADDRESSES))) (X_9 PROGN (
DT-VARIABLE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_9) ST*SYMBOL.ADDRESSES))) (X_8 PROGN (
DT-VARIABLE.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_8) ST*SYMBOL.ADDRESSES)))) ((HUM PROGN (
DT-CONSTANT.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE HUM) ST*SYMBOL.ADDRESSES))) (X_6 PROGN (
DT-VARIABLE.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_6) ST*SYMBOL.ADDRESSES)))) ((IN PROGN (
DT-PREDICATE.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IN) ST*SYMBOL.ADDRESSES))) (BOY PROGN (
DT-CONSTANT.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BOY) ST*SYMBOL.ADDRESSES))) (JHN PROGN (
DT-CONSTANT.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE JHN) ST*SYMBOL.ADDRESSES)))) ((FALSE PROGN (
DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (
DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (
DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP
(QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (JHN . 3) (BOY
. 4) (IN . 5) (X_6 . 6) (HUM . 7) (X_8 . 8) (X_9 . 9) (X_10 . 10) (X_11 . 11) (X_12 . 12) (HP . 13) (SK1 . 14)
(T . 15) (X_16 . 16) (X_17 . 17) (X_18 . 18) (X_19 . 19) (X_20 . 20) (X_21 . 21) (HAN . 22) (5 . 23) (FIN . 24)
(X_25 . 25) (2 . 26) (ARM . 27) (X_28 . 28) (1 . 29))))))))STOP
 

(COND ((FMT-LOAD " 6-SEP-84 20:48:50" NIL (((ALL W,X,Y,Z NOT P (X) OR NOT M (Y Z W) OR NOT D (X W) OR D (X Y) OR
D (X Z)) (ALL 6 (ALL 5 (ALL 4 (ALL 3 (OR (NOT (+ 7 (4) NIL)) (OR (NOT (+ 8 (5 6 3) NIL)) (OR (NOT (+ 9 (4 3) NIL))
(OR (+ 9 (4 5) NIL) (+ 9 (4 6) NIL))))))))) QUANTIFICATION) ((ALL X M (X X S (X))) (ALL 10 (+ 8 (10 10 (11 10))
NIL)) QUANTIFICATION) ((ALL X,Y,Z NOT M (X Y Z) OR M (Y X Z)) (ALL 14 (ALL 13 (ALL 12 (OR (NOT (+ 8 (12 13 14)
NIL)) (+ 8 (13 12 14) NIL))))) QUANTIFICATION) ((ALL X,Y,Z NOT M (X Y Z) OR D (X Z)) (ALL 17 (ALL 16 (ALL 15 (OR
(NOT (+ 8 (15 16 17) NIL)) (+ 9 (15 17) NIL))))) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (PROGN (DT-RESET)
(PROG ((ADDRLIST (QUOTE (10101 10106 10111 10116 10121 10126 10140 10145 10160 10175 10190 10195 10200 10205 10210
10225 10240))) (DATALIST (QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1
(NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE)))
((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 P NIL NIL (ANY) NIL NIL ((- 7 (POSITIVE))) ((+
7 (NEGATIVE))) ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 M NIL NIL (ANY ANY ANY) NIL NIL
((- 8 (POSITIVE))) ((+ 8 (NEGATIVE))) ((+ 8 (NIL))) ((- 8 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 D NIL NIL
(ANY ANY) NIL NIL ((- 9 (POSITIVE))) ((+ 9 (NEGATIVE))) ((+ 9 (NIL))) ((- 9 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 S NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL)
FUNCTION 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE
MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE 18 1) (IDIFFERENCE 10240 10096)) MEM*SIZE)
(MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ COUNTER1 18) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA
MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA
(DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 18) (MAPC ADDRLIST (FUNCTION
(LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR)
((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC
DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR
(IPLUS 10096 INCREMENT)) (RPAQ MEM*NEXT.VADR 18) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR)))
(RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR
1) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE
DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ 
DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL NIL) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ
DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL (11)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ
DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS
(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC 
ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE))
(RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ
DT*NONEQUALITY.PREDICATES (9 8 7 2 1)) (RPAQQ DT*PREDICATE.ALL (9 8 7 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES
NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE
+ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ
DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ 
DT*SIGN.PLUS.SYMBOLS (+ ++))) (PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED
(2 1))))) (PROGN (SETPROPLIST (QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL
DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ
ST*STACK1 (NIL ((X_17 PROGN (DT-VARIABLE.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17) ST*SYMBOL.ADDRESSES)
)) (X_16 PROGN (DT-VARIABLE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES)))
(X_15 PROGN (DT-VARIABLE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_15) ST*SYMBOL.ADDRESSES)))) ((X_14
PROGN (DT-VARIABLE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES))) (X_13 PROGN
(DT-VARIABLE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_13) ST*SYMBOL.ADDRESSES))) (X_12 PROGN (
DT-VARIABLE.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_12) ST*SYMBOL.ADDRESSES)))) ((S PROGN (
DT-FUNCTION.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE S) ST*SYMBOL.ADDRESSES))) (X_10 PROGN (
DT-VARIABLE.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_10) ST*SYMBOL.ADDRESSES)))) ((D PROGN (
DT-PREDICATE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE D) ST*SYMBOL.ADDRESSES))) (M PROGN (
DT-PREDICATE.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE M) ST*SYMBOL.ADDRESSES))) (P PROGN (
DT-PREDICATE.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P) ST*SYMBOL.ADDRESSES))) (X_6 PROGN (
DT-VARIABLE.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_6) ST*SYMBOL.ADDRESSES))) (X_5 PROGN (
DT-VARIABLE.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_5) ST*SYMBOL.ADDRESSES))) (X_4 PROGN (
DT-VARIABLE.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_4) ST*SYMBOL.ADDRESSES))) (X_3 PROGN (
DT-VARIABLE.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_3) ST*SYMBOL.ADDRESSES)))) ((FALSE PROGN (
DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (
DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (
DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP
(QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_3 . 3) (X_4
. 4) (X_5 . 5) (X_6 . 6) (P . 7) (M . 8) (D . 9) (X_10 . 10) (S . 11) (X_12 . 12) (X_13 . 13) (X_14 . 14) (X_15
. 15) (X_16 . 16) (X_17 . 17))))))))STOP
 

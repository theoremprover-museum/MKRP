(COND ((FMT-LOAD " 6-SEP-84 20:10:47" NIL (((ALL X,Y,Z,U,V,W NOT P (Y X U) OR NOT P (X V Z) OR NOT P (Y Z W) OR
P (U V W)) (ALL 8 (ALL 7 (ALL 6 (ALL 5 (ALL 4 (ALL 3 (OR (NOT (+ 9 (4 3 6) NIL)) (OR (NOT (+ 9 (3 7 5) NIL)) (OR
(NOT (+ 9 (4 5 8) NIL)) (+ 9 (6 7 8) NIL)))))))))) QUANTIFICATION) ((ALL X,Y P (G (X Y) X Y)) (ALL 11 (ALL 10 (+
9 ((12 10 11) 10 11) NIL))) QUANTIFICATION) ((ALL X,Y P (X H (X Y) Y)) (ALL 14 (ALL 13 (+ 9 (13 (15 13 14) 14)
NIL))) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (10131 10136 10141
10155 10160 10165 10180 10185 10190 10195 10200 10205 10210 10225 10240))) (DATALIST (QUOTE (15 TRUE NIL NIL NIL
(DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 P NIL NIL (ANY
ANY ANY) NIL NIL ((- 9 (POSITIVE))) ((+ 9 (NEGATIVE))) ((+ 9 (NIL))) ((- 9 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 G NIL
ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 H NIL ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND
NIL) FUNCTION))) (INCREMENT (IDIFFERENCE MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE
16 1) (IDIFFERENCE 10240 10117)) MEM*SIZE) (MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ COUNTER1 16) (MAPC
ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1
MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T
(SETQ COUNTER1 16) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND
((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT)))))))
(SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
DATA)))))) (RPAQ MEM*NEXT.RADR (IPLUS 10117 INCREMENT)) (RPAQ MEM*NEXT.VADR 16) (RPAQ MEM*REST (ADD1 (IDIFFERENCE
MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ
DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 1) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS 
DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS
DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ 
DT*CONSTANT.ALL NIL) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL (15 12))
(RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ 
DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT 
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (9 2 1))
(RPAQQ DT*PREDICATE.ALL (9 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME
POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES
-SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ 
DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++))) (PROGN)
(PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED (2 1))))) (PROGN (SETPROPLIST (QUOTE ANY)
(QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS
((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ ST*STACK1 (NIL ((H PROGN (DT-FUNCTION.DELETE
15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE H) ST*SYMBOL.ADDRESSES))) (X_14 PROGN (DT-VARIABLE.DELETE 14) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES))) (X_13 PROGN (DT-VARIABLE.DELETE 13) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_13) ST*SYMBOL.ADDRESSES)))) ((G PROGN (DT-FUNCTION.DELETE 12) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE G) ST*SYMBOL.ADDRESSES))) (X_11 PROGN (DT-VARIABLE.DELETE 11) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_11) ST*SYMBOL.ADDRESSES))) (X_10 PROGN (DT-VARIABLE.DELETE 10) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_10) ST*SYMBOL.ADDRESSES)))) ((P PROGN (DT-PREDICATE.DELETE 9) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P) ST*SYMBOL.ADDRESSES))) (X_8 PROGN (DT-VARIABLE.DELETE 8) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_8) ST*SYMBOL.ADDRESSES))) (X_7 PROGN (DT-VARIABLE.DELETE 7) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_7) ST*SYMBOL.ADDRESSES))) (X_6 PROGN (DT-VARIABLE.DELETE 6) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_6) ST*SYMBOL.ADDRESSES))) (X_5 PROGN (DT-VARIABLE.DELETE 5) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_5) ST*SYMBOL.ADDRESSES))) (X_4 PROGN (DT-VARIABLE.DELETE 4) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_4) ST*SYMBOL.ADDRESSES))) (X_3 PROGN (DT-VARIABLE.DELETE 3) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_3) ST*SYMBOL.ADDRESSES)))) ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ
ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_3 . 3) (X_4 . 4) (X_5 . 5) (X_6 . 6) (X_7 . 7) (X_8
. 8) (P . 9) (X_10 . 10) (X_11 . 11) (G . 12) (X_13 . 13) (X_14 . 14) (H . 15))))))))STOP
 

(COND ((FMT-LOAD " 6-SEP-84 20:06:49" NIL (((HAS (P1 ASS (J 0))) (+ 7 (3 (6 4 5)) NIL) QUANTIFICATION) ((SUC (P2
P1)) (+ 9 (8 3) NIL) QUANTIFICATION) ((HAS (P2 ASS (K 1))) (+ 7 (8 (6 10 11)) NIL) QUANTIFICATION) ((LBL (LOO P3))
(+ 14 (12 13) NIL) QUANTIFICATION) ((SUC (P3 P2)) (+ 9 (13 8) NIL) QUANTIFICATION) ((HAS (P3 IFT (XEQ (J N) P4)))
(+ 7 (13 (18 (16 4 15) 17)) NIL) QUANTIFICATION) ((HAS (P4 GOT (OUT))) (+ 7 (17 (20 19)) NIL) QUANTIFICATION) ((SUC
(P5 P4)) (+ 9 (21 17) NIL) QUANTIFICATION) ((SUC (P6 P3)) (+ 9 (22 13) NIL) QUANTIFICATION) ((HAS (P6 ASS (K XTM
(2 K)))) (+ 7 (22 (6 10 (24 23 10))) NIL) QUANTIFICATION) ((SUC (P7 P6)) (+ 9 (25 22) NIL) QUANTIFICATION) ((HAS
(P7 ASS (J XPL (J 1)))) (+ 7 (25 (6 4 (26 4 11))) NIL) QUANTIFICATION) ((SUC (P8 P7)) (+ 9 (27 25) NIL) QUANTIFICATION)
((HAS (P8 GOT (LOO))) (+ 7 (27 (20 12)) NIL) QUANTIFICATION) ((ALL XP,YP,ZP NOT SUC (XP ZP) OR NOT SUC (ZP YP)
OR SUC (XP YP)) (ALL 30 (ALL 29 (ALL 28 (OR (NOT (+ 9 (28 30) NIL)) (OR (NOT (+ 9 (30 29) NIL)) (+ 9 (28 29) NIL))))))
QUANTIFICATION) ((ALL XP,YP,ZP NOT HAS (XP GOT (ZP)) OR NOT LBL (ZP YP) OR SUC (YP XP)) (ALL 33 (ALL 32 (ALL 31
(OR (NOT (+ 7 (31 (20 33)) NIL)) (OR (NOT (+ 14 (33 32) NIL)) (+ 9 (32 31) NIL)))))) QUANTIFICATION) ((ALL XP,YP,ZP
NOT HAS (XP IFT (ZP YP)) OR SUC (YP XP)) (ALL 36 (ALL 35 (ALL 34 (OR (NOT (+ 7 (34 (18 36 35)) NIL)) (+ 9 (35 34)
NIL))))) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (9961 9966 9971
9976 9981 9986 9991 9996 10001 10006 10020 10025 10039 10044 10049 10054 10068 10073 10087 10092 10106 10111 10126
10131 10136 10141 10146 10161 10166 10181 10195 10200 10205 10210 10225 10240))) (DATALIST (QUOTE (15 TRUE NIL
NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL)
PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL)))
NIL NIL (DT*ST-KIND NIL) PREDICATE 5 P1 ANY (DT*ST-KIND NIL) CONSTANT 5 J ANY (DT*ST-KIND NIL) CONSTANT 5 0 ANY
(DT*ST-KIND NIL) CONSTANT 14 ASS NIL ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 15 HAS NIL
NIL (ANY ANY) NIL NIL ((- 7 (POSITIVE))) ((+ 7 (NEGATIVE))) ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (DT*ST-KIND NIL)
PREDICATE 5 P2 ANY (DT*ST-KIND NIL) CONSTANT 15 SUC NIL NIL (ANY ANY) NIL NIL ((- 9 (POSITIVE))) ((+ 9 (NEGATIVE)))
((+ 9 (NIL))) ((- 9 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 K ANY (DT*ST-KIND NIL) CONSTANT 5 1 ANY (DT*ST-KIND
NIL) CONSTANT 5 LOO ANY (DT*ST-KIND NIL) CONSTANT 5 P3 ANY (DT*ST-KIND NIL) CONSTANT 15 LBL NIL NIL (ANY ANY) NIL
NIL ((- 14 (POSITIVE))) ((+ 14 (NEGATIVE))) ((+ 14 (NIL))) ((- 14 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5
N ANY (DT*ST-KIND NIL) CONSTANT 14 XEQ NIL ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 5
P4 ANY (DT*ST-KIND NIL) CONSTANT 14 IFT NIL ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 5
OUT ANY (DT*ST-KIND NIL) CONSTANT 14 GOT NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 5 P5
ANY (DT*ST-KIND NIL) CONSTANT 5 P6 ANY (DT*ST-KIND NIL) CONSTANT 5 2 ANY (DT*ST-KIND NIL) CONSTANT 14 XTM NIL ANY
(ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 5 P7 ANY (DT*ST-KIND NIL) CONSTANT 14 XPL NIL ANY
(ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 5 P8 ANY (DT*ST-KIND NIL) CONSTANT 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT
(IDIFFERENCE MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE 37 1) (IDIFFERENCE 10240
9956)) MEM*SIZE) (MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ COUNTER1 37) (MAPC ADDRLIST (FUNCTION (LAMBDA
(RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST
(FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 37) (MAPC
ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE 
ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1
(ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))))
(RPAQ MEM*NEXT.RADR (IPLUS 9956 INCREMENT)) (RPAQ MEM*NEXT.VADR 37) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR
MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL
(ANY)) (RPAQQ DT*SORT.NR 1) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE
DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS 
DT*COMPLETION.SORT)) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (27 25
23 22 21 19 17 15 13 12 11 10 8 5 4 3)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ 
DT*FUNCTION.ALL (26 24 20 18 16 6)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ 
DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS
(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC 
ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE))
(RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ
DT*NONEQUALITY.PREDICATES (14 9 7 2 1)) (RPAQQ DT*PREDICATE.ALL (14 9 7 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES
NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE
+ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ
DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ 
DT*SIGN.PLUS.SYMBOLS (+ ++))) (PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED
(2 1))))) (PROGN (SETPROPLIST (QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL
DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ
ST*STACK1 (NIL ((X_36 PROGN (DT-VARIABLE.DELETE 36) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_36) ST*SYMBOL.ADDRESSES)
)) (X_35 PROGN (DT-VARIABLE.DELETE 35) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_35) ST*SYMBOL.ADDRESSES)))
(X_34 PROGN (DT-VARIABLE.DELETE 34) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_34) ST*SYMBOL.ADDRESSES)))) ((X_33
PROGN (DT-VARIABLE.DELETE 33) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_33) ST*SYMBOL.ADDRESSES))) (X_32 PROGN
(DT-VARIABLE.DELETE 32) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_32) ST*SYMBOL.ADDRESSES))) (X_31 PROGN (
DT-VARIABLE.DELETE 31) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_31) ST*SYMBOL.ADDRESSES)))) ((X_30 PROGN (
DT-VARIABLE.DELETE 30) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_30) ST*SYMBOL.ADDRESSES))) (X_29 PROGN (
DT-VARIABLE.DELETE 29) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_29) ST*SYMBOL.ADDRESSES))) (X_28 PROGN (
DT-VARIABLE.DELETE 28) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_28) ST*SYMBOL.ADDRESSES)))) NIL ((P8 PROGN
(DT-CONSTANT.DELETE 27) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P8) ST*SYMBOL.ADDRESSES)))) ((XPL PROGN (
DT-FUNCTION.DELETE 26) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE XPL) ST*SYMBOL.ADDRESSES)))) ((P7 PROGN (
DT-CONSTANT.DELETE 25) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P7) ST*SYMBOL.ADDRESSES)))) ((XTM PROGN (
DT-FUNCTION.DELETE 24) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE XTM) ST*SYMBOL.ADDRESSES))) (2 PROGN (
DT-CONSTANT.DELETE 23) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE 2) ST*SYMBOL.ADDRESSES)))) ((P6 PROGN (
DT-CONSTANT.DELETE 22) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P6) ST*SYMBOL.ADDRESSES)))) ((P5 PROGN (
DT-CONSTANT.DELETE 21) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P5) ST*SYMBOL.ADDRESSES)))) ((GOT PROGN (
DT-FUNCTION.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE GOT) ST*SYMBOL.ADDRESSES))) (OUT PROGN (
DT-CONSTANT.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE OUT) ST*SYMBOL.ADDRESSES)))) ((IFT PROGN (
DT-FUNCTION.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IFT) ST*SYMBOL.ADDRESSES))) (P4 PROGN (
DT-CONSTANT.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P4) ST*SYMBOL.ADDRESSES))) (XEQ PROGN (
DT-FUNCTION.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE XEQ) ST*SYMBOL.ADDRESSES))) (N PROGN (
DT-CONSTANT.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE N) ST*SYMBOL.ADDRESSES)))) NIL ((LBL PROGN (
DT-PREDICATE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE LBL) ST*SYMBOL.ADDRESSES))) (P3 PROGN (
DT-CONSTANT.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P3) ST*SYMBOL.ADDRESSES))) (LOO PROGN (
DT-CONSTANT.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE LOO) ST*SYMBOL.ADDRESSES)))) ((1 PROGN (
DT-CONSTANT.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE 1) ST*SYMBOL.ADDRESSES))) (K PROGN (DT-CONSTANT.DELETE
10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE K) ST*SYMBOL.ADDRESSES)))) ((SUC PROGN (DT-PREDICATE.DELETE 9) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SUC) ST*SYMBOL.ADDRESSES))) (P2 PROGN (DT-CONSTANT.DELETE 8) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P2) ST*SYMBOL.ADDRESSES)))) ((HAS PROGN (DT-PREDICATE.DELETE 7) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE HAS) ST*SYMBOL.ADDRESSES))) (ASS PROGN (DT-FUNCTION.DELETE 6) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ASS) ST*SYMBOL.ADDRESSES))) (0 PROGN (DT-CONSTANT.DELETE 5) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE 0) ST*SYMBOL.ADDRESSES))) (J PROGN (DT-CONSTANT.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE J) ST*SYMBOL.ADDRESSES))) (P1 PROGN (DT-CONSTANT.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE P1) ST*SYMBOL.ADDRESSES)))) ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE)
ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY)
ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE
. 1) (FALSE . 2) (P1 . 3) (J . 4) (0 . 5) (ASS . 6) (HAS . 7) (P2 . 8) (SUC . 9) (K . 10) (1 . 11) (LOO . 12) (P3
. 13) (LBL . 14) (N . 15) (XEQ . 16) (P4 . 17) (IFT . 18) (OUT . 19) (GOT . 20) (P5 . 21) (P6 . 22) (2 . 23) (XTM
. 24) (P7 . 25) (XPL . 26) (P8 . 27) (X_28 . 28) (X_29 . 29) (X_30 . 30) (X_31 . 31) (X_32 . 32) (X_33 . 33) (X_34
. 34) (X_35 . 35) (X_36 . 36))))))))STOP
 

(COND ((FMT-LOAD " 6-SEP-84 20:34:36" NIL (((ALL X,Y NOT EQ (S (X) S (Y)) OR EQ (X Y)) (ALL 4 (ALL 3 (OR (NOT (+
6 ((5 3) (5 4)) NIL)) (+ 6 (3 4) NIL)))) QUANTIFICATION) ((ALL X NOT EQ (S (X) O)) (ALL 7 (NOT (+ 6 ((5 7) 8) NIL)))
QUANTIFICATION) ((ALL X,Y,Z NOT EQ (X Y) OR NOT EQ (X Z) OR EQ (Y Z)) (ALL 11 (ALL 10 (ALL 9 (OR (NOT (+ 6 (9 10)
NIL)) (OR (NOT (+ 6 (9 11) NIL)) (+ 6 (10 11) NIL)))))) QUANTIFICATION) ((ALL X,Y NOT EQ (X Y) OR EQ (S (X) S (Y)))
(ALL 13 (ALL 12 (OR (NOT (+ 6 (12 13) NIL)) (+ 6 ((5 12) (5 13)) NIL)))) QUANTIFICATION) ((ALL X EQ (P (X O) X))
(ALL 14 (+ 6 ((15 14 8) 14) NIL)) QUANTIFICATION) ((ALL X,Y EQ (P (X S (Y)) S (P (X Y)))) (ALL 17 (ALL 16 (+ 6
((15 16 (5 17)) (5 (15 16 17))) NIL))) QUANTIFICATION) ((ALL X EQ (M (X O) O)) (ALL 18 (+ 6 ((19 18 8) 8) NIL))
QUANTIFICATION) ((ALL X,Y EQ (M (X S (Y)) P (M (X Y) X))) (ALL 21 (ALL 20 (+ 6 ((19 20 (5 21)) (15 (19 20 21) 20))
NIL))) QUANTIFICATION) ((ALL X EQ (X X)) (ALL 22 (+ 6 (22 22) NIL)) QUANTIFICATION) ((ALL X,Y NOT EQ (X Y) OR EQ
(Y X)) (ALL 24 (ALL 23 (OR (NOT (+ 6 (23 24) NIL)) (+ 6 (24 23) NIL)))) QUANTIFICATION) ((ALL X,Y,Z NOT EQ (X Y)
OR NOT EQ (Y Z) OR EQ (X Z)) (ALL 27 (ALL 26 (ALL 25 (OR (NOT (+ 6 (25 26) NIL)) (OR (NOT (+ 6 (26 27) NIL)) (+
6 (25 27) NIL)))))) QUANTIFICATION) ((ALL X,Y NOT L (X Y) OR EQ (P (S (P (X Y)) X) Y)) (ALL 29 (ALL 28 (OR (NOT
(+ 30 (28 29) NIL)) (+ 6 ((15 (5 (15 28 29)) 28) 29) NIL)))) QUANTIFICATION) ((ALL X,Y,Z NOT EQ (P (S (Z) X) Y)
OR L (X Y)) (ALL 33 (ALL 32 (ALL 31 (OR (NOT (+ 6 ((15 (5 33) 31) 32) NIL)) (+ 30 (31 32) NIL))))) QUANTIFICATION)
((ALL X,Y,Z NOT L (X Y) OR NOT L (Y Z) OR L (X Z)) (ALL 36 (ALL 35 (ALL 34 (OR (NOT (+ 30 (34 35) NIL)) (OR (NOT
(+ 30 (35 36) NIL)) (+ 30 (34 36) NIL)))))) QUANTIFICATION) ((ALL X NOT L (X X)) (ALL 37 (NOT (+ 30 (37 37) NIL)))
QUANTIFICATION) ((ALL X,Y,Z NOT EQ (X Y) OR EQ (M (X Z) M (Y Z))) (ALL 40 (ALL 39 (ALL 38 (OR (NOT (+ 6 (38 39)
NIL)) (+ 6 ((19 38 40) (19 39 40)) NIL))))) QUANTIFICATION) ((ALL X,Y NOT EQ (X Y) OR NOT L (X Y)) (ALL 42 (ALL
41 (OR (NOT (+ 6 (41 42) NIL)) (NOT (+ 30 (41 42) NIL))))) QUANTIFICATION) ((ALL X,Y L (X Y) OR EQ (X Y) OR L (Y
X)) (ALL 44 (ALL 43 (OR (+ 30 (43 44) NIL) (OR (+ 6 (43 44) NIL) (+ 30 (44 43) NIL))))) QUANTIFICATION) ((ALL X,Y,Z
EQ (Z O) OR NOT L (X Y) OR L (M (X Z) M (Y Z))) (ALL 47 (ALL 46 (ALL 45 (OR (+ 6 (47 8) NIL) (OR (NOT (+ 30 (45
46) NIL)) (+ 30 ((19 45 47) (19 46 47)) NIL)))))) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (PROGN (DT-RESET)
(PROG ((ADDRLIST (QUOTE (9943 9948 9953 9958 9963 9968 9973 9978 9983 9988 9993 9998 10003 10008 10013 10018 10023
10038 10043 10048 10053 10058 10063 10068 10073 10078 10083 10088 10102 10107 10112 10117 10131 10136 10141 10146
10151 10156 10161 10166 10171 10186 10200 10205 10210 10225 10240))) (DATALIST (QUOTE (15 TRUE NIL NIL NIL (DEFINED)
NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE
NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
14 S NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 15 EQ NIL NIL (ANY ANY) NIL NIL ((- 6 (POSITIVE)))
((+ 6 (NEGATIVE))) ((+ 6 (NIL))) ((- 6 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 O ANY (DT*ST-KIND NIL) CONSTANT 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 14 P NIL ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 14 M NIL ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 L NIL NIL (ANY ANY) NIL NIL ((- 30 (POSITIVE))) ((+ 30 (NEGATIVE)))
((+ 30 (NIL))) ((- 30 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP
(IPLUS (IDIFFERENCE 48 1) (IDIFFERENCE 10240 9938)) MEM*SIZE) (MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ
COUNTER1 48) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR))))
(SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
DATA))))) (T (SETQ COUNTER1 48) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1
COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR
INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ
COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR (IPLUS 9938 INCREMENT)) (RPAQ MEM*NEXT.VADR 48) (RPAQ
MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ 
MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 1) (RPAQQ DT*SORT.PROPERTIES (
DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS 
DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ
DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (8)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ
DT*FUNCTION.ALL (19 15 5)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES
NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (30 6 2
1)) (RPAQQ DT*PREDICATE.ALL (30 6 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS
(PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES 
+SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2)
(RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)))
(PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED (2 1))))) (PROGN (SETPROPLIST
(QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) 
DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ ST*STACK1 (NIL ((X_47
PROGN (DT-VARIABLE.DELETE 47) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_47) ST*SYMBOL.ADDRESSES))) (X_46 PROGN
(DT-VARIABLE.DELETE 46) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_46) ST*SYMBOL.ADDRESSES))) (X_45 PROGN (
DT-VARIABLE.DELETE 45) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_45) ST*SYMBOL.ADDRESSES)))) ((X_44 PROGN (
DT-VARIABLE.DELETE 44) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_44) ST*SYMBOL.ADDRESSES))) (X_43 PROGN (
DT-VARIABLE.DELETE 43) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_43) ST*SYMBOL.ADDRESSES)))) ((X_42 PROGN (
DT-VARIABLE.DELETE 42) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_42) ST*SYMBOL.ADDRESSES))) (X_41 PROGN (
DT-VARIABLE.DELETE 41) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_41) ST*SYMBOL.ADDRESSES)))) ((X_40 PROGN (
DT-VARIABLE.DELETE 40) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_40) ST*SYMBOL.ADDRESSES))) (X_39 PROGN (
DT-VARIABLE.DELETE 39) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_39) ST*SYMBOL.ADDRESSES))) (X_38 PROGN (
DT-VARIABLE.DELETE 38) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_38) ST*SYMBOL.ADDRESSES)))) ((X_37 PROGN (
DT-VARIABLE.DELETE 37) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_37) ST*SYMBOL.ADDRESSES)))) ((X_36 PROGN (
DT-VARIABLE.DELETE 36) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_36) ST*SYMBOL.ADDRESSES))) (X_35 PROGN (
DT-VARIABLE.DELETE 35) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_35) ST*SYMBOL.ADDRESSES))) (X_34 PROGN (
DT-VARIABLE.DELETE 34) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_34) ST*SYMBOL.ADDRESSES)))) ((X_33 PROGN (
DT-VARIABLE.DELETE 33) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_33) ST*SYMBOL.ADDRESSES))) (X_32 PROGN (
DT-VARIABLE.DELETE 32) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_32) ST*SYMBOL.ADDRESSES))) (X_31 PROGN (
DT-VARIABLE.DELETE 31) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_31) ST*SYMBOL.ADDRESSES)))) ((L PROGN (
DT-PREDICATE.DELETE 30) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE L) ST*SYMBOL.ADDRESSES))) (X_29 PROGN (
DT-VARIABLE.DELETE 29) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_29) ST*SYMBOL.ADDRESSES))) (X_28 PROGN (
DT-VARIABLE.DELETE 28) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_28) ST*SYMBOL.ADDRESSES)))) ((X_27 PROGN (
DT-VARIABLE.DELETE 27) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_27) ST*SYMBOL.ADDRESSES))) (X_26 PROGN (
DT-VARIABLE.DELETE 26) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_26) ST*SYMBOL.ADDRESSES))) (X_25 PROGN (
DT-VARIABLE.DELETE 25) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_25) ST*SYMBOL.ADDRESSES)))) ((X_24 PROGN (
DT-VARIABLE.DELETE 24) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_24) ST*SYMBOL.ADDRESSES))) (X_23 PROGN (
DT-VARIABLE.DELETE 23) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_23) ST*SYMBOL.ADDRESSES)))) ((X_22 PROGN (
DT-VARIABLE.DELETE 22) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_22) ST*SYMBOL.ADDRESSES)))) ((X_21 PROGN (
DT-VARIABLE.DELETE 21) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) ST*SYMBOL.ADDRESSES))) (X_20 PROGN (
DT-VARIABLE.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_20) ST*SYMBOL.ADDRESSES)))) ((M PROGN (
DT-FUNCTION.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE M) ST*SYMBOL.ADDRESSES))) (X_18 PROGN (
DT-VARIABLE.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18) ST*SYMBOL.ADDRESSES)))) ((X_17 PROGN (
DT-VARIABLE.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17) ST*SYMBOL.ADDRESSES))) (X_16 PROGN (
DT-VARIABLE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES)))) ((P PROGN (
DT-FUNCTION.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P) ST*SYMBOL.ADDRESSES))) (X_14 PROGN (
DT-VARIABLE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES)))) ((X_13 PROGN (
DT-VARIABLE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_13) ST*SYMBOL.ADDRESSES))) (X_12 PROGN (
DT-VARIABLE.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_12) ST*SYMBOL.ADDRESSES)))) ((X_11 PROGN (
DT-VARIABLE.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_11) ST*SYMBOL.ADDRESSES))) (X_10 PROGN (
DT-VARIABLE.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_10) ST*SYMBOL.ADDRESSES))) (X_9 PROGN (
DT-VARIABLE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_9) ST*SYMBOL.ADDRESSES)))) ((O PROGN (
DT-CONSTANT.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE O) ST*SYMBOL.ADDRESSES))) (X_7 PROGN (
DT-VARIABLE.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_7) ST*SYMBOL.ADDRESSES)))) ((EQ PROGN (
DT-PREDICATE.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EQ) ST*SYMBOL.ADDRESSES))) (S PROGN (
DT-FUNCTION.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE S) ST*SYMBOL.ADDRESSES))) (X_4 PROGN (
DT-VARIABLE.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_4) ST*SYMBOL.ADDRESSES))) (X_3 PROGN (
DT-VARIABLE.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_3) ST*SYMBOL.ADDRESSES)))) ((FALSE PROGN (
DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (
DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (
DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP
(QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_3 . 3) (X_4
. 4) (S . 5) (EQ . 6) (X_7 . 7) (O . 8) (X_9 . 9) (X_10 . 10) (X_11 . 11) (X_12 . 12) (X_13 . 13) (X_14 . 14) (P
. 15) (X_16 . 16) (X_17 . 17) (X_18 . 18) (M . 19) (X_20 . 20) (X_21 . 21) (X_22 . 22) (X_23 . 23) (X_24 . 24)
(X_25 . 25) (X_26 . 26) (X_27 . 27) (X_28 . 28) (X_29 . 29) (L . 30) (X_31 . 31) (X_32 . 32) (X_33 . 33) (X_34
. 34) (X_35 . 35) (X_36 . 36) (X_37 . 37) (X_38 . 38) (X_39 . 39) (X_40 . 40) (X_41 . 41) (X_42 . 42) (X_43 . 43)
(X_44 . 44) (X_45 . 45) (X_46 . 46) (X_47 . 47))))))))STOP
 

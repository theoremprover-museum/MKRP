(COND ((FMT-LOAD " 6-SEP-84 20:08:59" NIL (((ALL X,Y,Z NOT A (X Z Y) OR NOT H (Z Y) OR I (X P (Y))) (ALL 5 (ALL
4 (ALL 3 (OR (NOT (+ 6 (3 5 4) NIL)) (OR (NOT (+ 7 (5 4) NIL)) (+ 9 (3 (8 4)) NIL)))))) QUANTIFICATION) ((ALL W,Y,Z
NOT H (W Y) OR H (Z G (Z Y))) (ALL 12 (ALL 11 (ALL 10 (OR (NOT (+ 7 (10 11) NIL)) (+ 7 (12 (13 12 11)) NIL)))))
QUANTIFICATION) ((ALL W,X,Y,Z A (X Z G (Z Y)) OR NOT H (W Y) OR NOT I (X Y)) (ALL 17 (ALL 16 (ALL 15 (ALL 14 (OR
(+ 6 (15 17 (13 17 16)) NIL) (OR (NOT (+ 7 (14 16) NIL)) (NOT (+ 9 (15 16) NIL)))))))) QUANTIFICATION) ((ALL Y,Z
NOT H (Z Y) OR H (Z L (Y))) (ALL 19 (ALL 18 (OR (NOT (+ 7 (19 18) NIL)) (+ 7 (19 (20 18)) NIL)))) QUANTIFICATION)
((ALL X NOT I (X L (X))) (ALL 21 (NOT (+ 9 (21 (20 21)) NIL))) QUANTIFICATION) ((ALL X,Y NOT A (X E Y) OR R (X))
(ALL 23 (ALL 22 (OR (NOT (+ 6 (22 24 23) NIL)) (+ 25 (22) NIL)))) QUANTIFICATION) ((ALL X,Y,Z NOT A (X Z Y) OR
A (X Z L (Y))) (ALL 28 (ALL 27 (ALL 26 (OR (NOT (+ 6 (26 28 27) NIL)) (+ 6 (26 28 (20 27)) NIL))))) QUANTIFICATION)
((ALL X,Y,Z NOT A (X Z Y) OR A (X Z P (Y))) (ALL 31 (ALL 30 (ALL 29 (OR (NOT (+ 6 (29 31 30) NIL)) (+ 6 (29 31
(8 30)) NIL))))) QUANTIFICATION) ((ALL X,Y,Z NOT A (X Z Y) OR B (X P (G (Z L (Y))))) (ALL 34 (ALL 33 (ALL 32 (OR
(NOT (+ 6 (32 34 33) NIL)) (+ 35 (32 (8 (13 34 (20 33)))) NIL))))) QUANTIFICATION) ((ALL X,Y C (Y) OR NOT Q (X
T Y) OR NOT R (X)) (ALL 37 (ALL 36 (OR (+ 38 (37) NIL) (OR (NOT (+ 40 (36 39 37) NIL)) (NOT (+ 25 (36) NIL))))))
QUANTIFICATION) ((ALL W,X,Y,Z NOT A (X W Y) OR NOT B (X Y) OR Q (X Z G (Z Y))) (ALL 44 (ALL 43 (ALL 42 (ALL 41
(OR (NOT (+ 6 (42 41 43) NIL)) (OR (NOT (+ 35 (42 43) NIL)) (+ 40 (42 44 (13 44 43)) NIL))))))) QUANTIFICATION)
((ALL W,X,Y,Z NOT A (X W Y) OR A (X W G (Z Y)) OR I (X Y)) (ALL 48 (ALL 47 (ALL 46 (ALL 45 (OR (NOT (+ 6 (46 45
47) NIL)) (OR (+ 6 (46 45 (13 48 47)) NIL) (+ 9 (46 47) NIL))))))) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN
(PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (9888 9893 9898 9903 9908 9913 9918 9923 9938 9943 9958 9963 9968 9983
9988 9993 9998 10003 10008 10013 10018 10023 10028 10043 10048 10053 10058 10063 10077 10082 10087 10092 10097
10102 10107 10121 10126 10131 10136 10151 10165 10180 10195 10200 10205 10210 10225 10240))) (DATALIST (QUOTE (15
TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL)))
NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 A NIL NIL (ANY ANY ANY) NIL NIL ((- 6
(POSITIVE))) ((+ 6 (NEGATIVE))) ((+ 6 (NIL))) ((- 6 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 H NIL NIL (ANY
ANY) NIL NIL ((- 7 (POSITIVE))) ((+ 7 (NEGATIVE))) ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
14 P NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 15 I NIL NIL (ANY ANY) NIL NIL ((- 9 (POSITIVE)))
((+ 9 (NEGATIVE))) ((+ 9 (NIL))) ((- 9 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 14 G NIL ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 L NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL)
FUNCTION 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 E ANY (DT*ST-KIND NIL) CONSTANT 15 R NIL NIL (ANY) NIL NIL
((- 25 (POSITIVE))) ((+ 25 (NEGATIVE))) ((+ 25 (NIL))) ((- 25 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY
NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
15 B NIL NIL (ANY ANY) NIL NIL ((- 35 (POSITIVE))) ((+ 35 (NEGATIVE))) ((+ 35 (NIL))) ((- 35 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
15 C NIL NIL (ANY) NIL NIL ((- 38 (POSITIVE))) ((+ 38 (NEGATIVE))) ((+ 38 (NIL))) ((- 38 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 5 T ANY (DT*ST-KIND NIL) CONSTANT 15 Q NIL NIL (ANY ANY ANY) NIL NIL ((- 40 (POSITIVE))) ((+ 40
(NEGATIVE))) ((+ 40 (NIL))) ((- 40 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND
((IGREATERP (IPLUS (IDIFFERENCE 49 1) (IDIFFERENCE 10240 9883)) MEM*SIZE) (MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE
10240) (SETQ COUNTER1 49) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1
(SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 49) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ
COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR)
(T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA
MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR (IPLUS 9883 INCREMENT)) (RPAQ MEM*NEXT.VADR
49) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ 
MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 1) (RPAQQ DT*SORT.PROPERTIES (
DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS 
DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ
DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (39 24)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER
0) (RPAQQ DT*FUNCTION.ALL (20 13 8)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ 
DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS
(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC 
ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE))
(RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ
DT*NONEQUALITY.PREDICATES (40 38 35 25 9 7 6 2 1)) (RPAQQ DT*PREDICATE.ALL (40 38 35 25 9 7 6 2 1)) (RPAQQ 
DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES
DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))
(RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ 
DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++))) (PROGN) (PROGN (SETPROPLIST (QUOTE 
DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED (2 1))))) (PROGN (SETPROPLIST (QUOTE ANY) (QUOTE (
DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY ANY))
DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ ST*STACK1 (NIL ((X_48 PROGN (DT-VARIABLE.DELETE
48) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_48) ST*SYMBOL.ADDRESSES))) (X_47 PROGN (DT-VARIABLE.DELETE 47)
(RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_47) ST*SYMBOL.ADDRESSES))) (X_46 PROGN (DT-VARIABLE.DELETE 46) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_46) ST*SYMBOL.ADDRESSES))) (X_45 PROGN (DT-VARIABLE.DELETE 45) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_45) ST*SYMBOL.ADDRESSES)))) ((X_44 PROGN (DT-VARIABLE.DELETE 44) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_44) ST*SYMBOL.ADDRESSES))) (X_43 PROGN (DT-VARIABLE.DELETE 43) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_43) ST*SYMBOL.ADDRESSES))) (X_42 PROGN (DT-VARIABLE.DELETE 42) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_42) ST*SYMBOL.ADDRESSES))) (X_41 PROGN (DT-VARIABLE.DELETE 41) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_41) ST*SYMBOL.ADDRESSES)))) ((Q PROGN (DT-PREDICATE.DELETE 40) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE Q) ST*SYMBOL.ADDRESSES))) (T PROGN (DT-CONSTANT.DELETE 39) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE T) ST*SYMBOL.ADDRESSES))) (C PROGN (DT-PREDICATE.DELETE 38) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE C) ST*SYMBOL.ADDRESSES))) (X_37 PROGN (DT-VARIABLE.DELETE 37) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_37) ST*SYMBOL.ADDRESSES))) (X_36 PROGN (DT-VARIABLE.DELETE 36) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_36) ST*SYMBOL.ADDRESSES)))) ((B PROGN (DT-PREDICATE.DELETE 35) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B) ST*SYMBOL.ADDRESSES))) (X_34 PROGN (DT-VARIABLE.DELETE 34) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_34) ST*SYMBOL.ADDRESSES))) (X_33 PROGN (DT-VARIABLE.DELETE 33) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_33) ST*SYMBOL.ADDRESSES))) (X_32 PROGN (DT-VARIABLE.DELETE 32) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_32) ST*SYMBOL.ADDRESSES)))) ((X_31 PROGN (DT-VARIABLE.DELETE 31) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_31) ST*SYMBOL.ADDRESSES))) (X_30 PROGN (DT-VARIABLE.DELETE 30) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_30) ST*SYMBOL.ADDRESSES))) (X_29 PROGN (DT-VARIABLE.DELETE 29) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_29) ST*SYMBOL.ADDRESSES)))) ((X_28 PROGN (DT-VARIABLE.DELETE 28) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_28) ST*SYMBOL.ADDRESSES))) (X_27 PROGN (DT-VARIABLE.DELETE 27) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_27) ST*SYMBOL.ADDRESSES))) (X_26 PROGN (DT-VARIABLE.DELETE 26) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_26) ST*SYMBOL.ADDRESSES)))) ((R PROGN (DT-PREDICATE.DELETE 25) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R) ST*SYMBOL.ADDRESSES))) (E PROGN (DT-CONSTANT.DELETE 24) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE E) ST*SYMBOL.ADDRESSES))) (X_23 PROGN (DT-VARIABLE.DELETE 23) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_23) ST*SYMBOL.ADDRESSES))) (X_22 PROGN (DT-VARIABLE.DELETE 22) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_22) ST*SYMBOL.ADDRESSES)))) ((X_21 PROGN (DT-VARIABLE.DELETE 21) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) ST*SYMBOL.ADDRESSES)))) ((L PROGN (DT-FUNCTION.DELETE 20) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE L) ST*SYMBOL.ADDRESSES))) (X_19 PROGN (DT-VARIABLE.DELETE 19) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_19) ST*SYMBOL.ADDRESSES))) (X_18 PROGN (DT-VARIABLE.DELETE 18) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18) ST*SYMBOL.ADDRESSES)))) ((X_17 PROGN (DT-VARIABLE.DELETE 17) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17) ST*SYMBOL.ADDRESSES))) (X_16 PROGN (DT-VARIABLE.DELETE 16) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES))) (X_15 PROGN (DT-VARIABLE.DELETE 15) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_15) ST*SYMBOL.ADDRESSES))) (X_14 PROGN (DT-VARIABLE.DELETE 14) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES)))) ((G PROGN (DT-FUNCTION.DELETE 13) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE G) ST*SYMBOL.ADDRESSES))) (X_12 PROGN (DT-VARIABLE.DELETE 12) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_12) ST*SYMBOL.ADDRESSES))) (X_11 PROGN (DT-VARIABLE.DELETE 11) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_11) ST*SYMBOL.ADDRESSES))) (X_10 PROGN (DT-VARIABLE.DELETE 10) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_10) ST*SYMBOL.ADDRESSES)))) ((I PROGN (DT-PREDICATE.DELETE 9) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE I) ST*SYMBOL.ADDRESSES))) (P PROGN (DT-FUNCTION.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE P) ST*SYMBOL.ADDRESSES))) (H PROGN (DT-PREDICATE.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE H) ST*SYMBOL.ADDRESSES))) (A PROGN (DT-PREDICATE.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A)
ST*SYMBOL.ADDRESSES))) (X_5 PROGN (DT-VARIABLE.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_5) 
ST*SYMBOL.ADDRESSES))) (X_4 PROGN (DT-VARIABLE.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_4) 
ST*SYMBOL.ADDRESSES))) (X_3 PROGN (DT-VARIABLE.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_3) 
ST*SYMBOL.ADDRESSES)))) ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE)
ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) 
ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY)
ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE
. 1) (FALSE . 2) (X_3 . 3) (X_4 . 4) (X_5 . 5) (A . 6) (H . 7) (P . 8) (I . 9) (X_10 . 10) (X_11 . 11) (X_12 .
12) (G . 13) (X_14 . 14) (X_15 . 15) (X_16 . 16) (X_17 . 17) (X_18 . 18) (X_19 . 19) (L . 20) (X_21 . 21) (X_22
. 22) (X_23 . 23) (E . 24) (R . 25) (X_26 . 26) (X_27 . 27) (X_28 . 28) (X_29 . 29) (X_30 . 30) (X_31 . 31) (X_32
. 32) (X_33 . 33) (X_34 . 34) (B . 35) (X_36 . 36) (X_37 . 37) (C . 38) (T . 39) (Q . 40) (X_41 . 41) (X_42 . 42)
(X_43 . 43) (X_44 . 44) (X_45 . 45) (X_46 . 46) (X_47 . 47) (X_48 . 48))))))))STOP
 

(COND ((FMT-LOAD " 6-SEP-84 20:15:46" NIL (((ALL X P (X E X)) (ALL 3 (+ 5 (3 4 3) NIL)) QUANTIFICATION) ((S (A))
(+ 7 (6) NIL) QUANTIFICATION) ((NOT P (E E D)) (NOT (+ 5 (4 4 8) NIL)) QUANTIFICATION) ((ALL U,X,Y NOT P (G (X)
G (Y) U) OR P (X Y U)) (ALL 11 (ALL 10 (ALL 9 (OR (NOT (+ 5 ((12 10) (12 11) 9) NIL)) (+ 5 (10 11 9) NIL))))) 
QUANTIFICATION) ((ALL U,X,Y NOT P (X Y U) OR P (X G (Y) G (U))) (ALL 15 (ALL 14 (ALL 13 (OR (NOT (+ 5 (14 15 13)
NIL)) (+ 5 (14 (12 15) (12 13)) NIL))))) QUANTIFICATION) ((ALL X P (X F (X) E) OR P (X X D)) (ALL 16 (OR (+ 5 (16
(17 16) 4) NIL) (+ 5 (16 16 8) NIL))) QUANTIFICATION) ((ALL X NOT S (X) OR NOT S (G (X))) (ALL 18 (OR (NOT (+ 7
(18) NIL)) (NOT (+ 7 ((12 18)) NIL)))) QUANTIFICATION) ((ALL X NOT P (X X D) OR NOT S (X)) (ALL 19 (OR (NOT (+
5 (19 19 8) NIL)) (NOT (+ 7 (19) NIL)))) QUANTIFICATION) ((ALL U,X,Y NOT P (X Y U) OR P (G (X) G (Y) U)) (ALL 22
(ALL 21 (ALL 20 (OR (NOT (+ 5 (21 22 20) NIL)) (+ 5 ((12 21) (12 22) 20) NIL))))) QUANTIFICATION) ((ALL U,X,Y NOT
P (X Y U) OR P (Y X U)) (ALL 25 (ALL 24 (ALL 23 (OR (NOT (+ 5 (24 25 23) NIL)) (+ 5 (25 24 23) NIL))))) QUANTIFICATION)
((ALL X S (X) OR P (X X D) OR S (G (X))) (ALL 26 (OR (+ 7 (26) NIL) (OR (+ 5 (26 26 8) NIL) (+ 7 ((12 26)) NIL))))
QUANTIFICATION) ((ALL U,X,Y NOT P (X Y U) OR P (U U D) OR NOT P (X X D)) (ALL 29 (ALL 28 (ALL 27 (OR (NOT (+ 5
(28 29 27) NIL)) (OR (+ 5 (27 27 8) NIL) (NOT (+ 5 (28 28 8) NIL))))))) QUANTIFICATION) ((ALL U,X,Y NOT S (X) OR
NOT S (Y) OR NOT P (X Y U) OR S (U)) (ALL 32 (ALL 31 (ALL 30 (OR (NOT (+ 7 (31) NIL)) (OR (NOT (+ 7 (32) NIL))
(OR (NOT (+ 5 (31 32 30) NIL)) (+ 7 (30) NIL))))))) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (PROGN (DT-RESET)
(PROG ((ADDRLIST (QUOTE (10027 10032 10037 10042 10047 10052 10057 10062 10067 10072 10077 10082 10087 10092 10097
10111 10116 10121 10126 10131 10145 10150 10155 10160 10165 10180 10185 10200 10205 10210 10225 10240))) (DATALIST
(QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL
NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL)))
((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 E ANY (DT*ST-KIND
NIL) CONSTANT 15 P NIL NIL (ANY ANY ANY) NIL NIL ((- 5 (POSITIVE))) ((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL)))
NIL NIL (DT*ST-KIND NIL) PREDICATE 5 A ANY (DT*ST-KIND NIL) CONSTANT 15 S NIL NIL (ANY) NIL NIL ((- 7 (POSITIVE)))
((+ 7 (NEGATIVE))) ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 D ANY (DT*ST-KIND NIL) CONSTANT
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 G NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 F NIL ANY (ANY)
NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP
(IPLUS (IDIFFERENCE 33 1) (IDIFFERENCE 10240 10022)) MEM*SIZE) (MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ
COUNTER1 33) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR))))
(SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
DATA))))) (T (SETQ COUNTER1 33) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1
COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR
INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ
COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR (IPLUS 10022 INCREMENT)) (RPAQ MEM*NEXT.VADR 33) (RPAQ
MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ 
MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 1) (RPAQQ DT*SORT.PROPERTIES (
DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS 
DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ
DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (8 6 4)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER
0) (RPAQQ DT*FUNCTION.ALL (17 12)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ 
DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS
(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC 
ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE))
(RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ
DT*NONEQUALITY.PREDICATES (7 5 2 1)) (RPAQQ DT*PREDICATE.ALL (7 5 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL)
(RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE
+ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ
DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ 
DT*SIGN.PLUS.SYMBOLS (+ ++))) (PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED
(2 1))))) (PROGN (SETPROPLIST (QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL
DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ
ST*STACK1 (NIL ((X_32 PROGN (DT-VARIABLE.DELETE 32) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_32) ST*SYMBOL.ADDRESSES)
)) (X_31 PROGN (DT-VARIABLE.DELETE 31) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_31) ST*SYMBOL.ADDRESSES)))
(X_30 PROGN (DT-VARIABLE.DELETE 30) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_30) ST*SYMBOL.ADDRESSES)))) ((X_29
PROGN (DT-VARIABLE.DELETE 29) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_29) ST*SYMBOL.ADDRESSES))) (X_28 PROGN
(DT-VARIABLE.DELETE 28) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_28) ST*SYMBOL.ADDRESSES))) (X_27 PROGN (
DT-VARIABLE.DELETE 27) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_27) ST*SYMBOL.ADDRESSES)))) ((X_26 PROGN (
DT-VARIABLE.DELETE 26) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_26) ST*SYMBOL.ADDRESSES)))) ((X_25 PROGN (
DT-VARIABLE.DELETE 25) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_25) ST*SYMBOL.ADDRESSES))) (X_24 PROGN (
DT-VARIABLE.DELETE 24) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_24) ST*SYMBOL.ADDRESSES))) (X_23 PROGN (
DT-VARIABLE.DELETE 23) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_23) ST*SYMBOL.ADDRESSES)))) ((X_22 PROGN (
DT-VARIABLE.DELETE 22) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_22) ST*SYMBOL.ADDRESSES))) (X_21 PROGN (
DT-VARIABLE.DELETE 21) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) ST*SYMBOL.ADDRESSES))) (X_20 PROGN (
DT-VARIABLE.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_20) ST*SYMBOL.ADDRESSES)))) ((X_19 PROGN (
DT-VARIABLE.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_19) ST*SYMBOL.ADDRESSES)))) ((X_18 PROGN (
DT-VARIABLE.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18) ST*SYMBOL.ADDRESSES)))) ((F PROGN (
DT-FUNCTION.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE F) ST*SYMBOL.ADDRESSES))) (X_16 PROGN (
DT-VARIABLE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES)))) ((X_15 PROGN (
DT-VARIABLE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_15) ST*SYMBOL.ADDRESSES))) (X_14 PROGN (
DT-VARIABLE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES))) (X_13 PROGN (
DT-VARIABLE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_13) ST*SYMBOL.ADDRESSES)))) ((G PROGN (
DT-FUNCTION.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE G) ST*SYMBOL.ADDRESSES))) (X_11 PROGN (
DT-VARIABLE.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_11) ST*SYMBOL.ADDRESSES))) (X_10 PROGN (
DT-VARIABLE.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_10) ST*SYMBOL.ADDRESSES))) (X_9 PROGN (
DT-VARIABLE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_9) ST*SYMBOL.ADDRESSES)))) ((D PROGN (
DT-CONSTANT.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE D) ST*SYMBOL.ADDRESSES)))) ((S PROGN (
DT-PREDICATE.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE S) ST*SYMBOL.ADDRESSES))) (A PROGN (DT-CONSTANT.DELETE
6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) ST*SYMBOL.ADDRESSES)))) ((P PROGN (DT-PREDICATE.DELETE 5) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P) ST*SYMBOL.ADDRESSES))) (E PROGN (DT-CONSTANT.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE E) ST*SYMBOL.ADDRESSES))) (X_3 PROGN (DT-VARIABLE.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE X_3) ST*SYMBOL.ADDRESSES)))) ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE)
ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY)
ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE
. 1) (FALSE . 2) (X_3 . 3) (E . 4) (P . 5) (A . 6) (S . 7) (D . 8) (X_9 . 9) (X_10 . 10) (X_11 . 11) (G . 12) (X_13
. 13) (X_14 . 14) (X_15 . 15) (X_16 . 16) (F . 17) (X_18 . 18) (X_19 . 19) (X_20 . 20) (X_21 . 21) (X_22 . 22)
(X_23 . 23) (X_24 . 24) (X_25 . 25) (X_26 . 26) (X_27 . 27) (X_28 . 28) (X_29 . 29) (X_30 . 30) (X_31 . 31) (X_32
. 32))))))))STOP
 

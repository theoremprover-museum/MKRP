(COND ((FMT-LOAD " 6-SEP-84 21:29:35" NIL (((ALL X R (X X)) (ALL 3 (+ 4 (3 3) NIL)) QUANTIFICATION) ((ALL X,Y NOT
R (X Y) OR R (Y X)) (ALL 6 (ALL 5 (OR (NOT (+ 4 (5 6) NIL)) (+ 4 (6 5) NIL)))) QUANTIFICATION) ((ALL X,Y,Z NOT
R (X Y) OR NOT R (Y Z) OR R (X Z)) (ALL 9 (ALL 8 (ALL 7 (OR (NOT (+ 4 (7 8) NIL)) (OR (NOT (+ 4 (8 9) NIL)) (+
4 (7 9) NIL)))))) QUANTIFICATION) ((ALL X,Y,Z NOT R (Y Z) OR NOT P (X Y) OR P (X Z)) (ALL 12 (ALL 11 (ALL 10 (OR
(NOT (+ 4 (11 12) NIL)) (OR (NOT (+ 13 (10 11) NIL)) (+ 13 (10 12) NIL)))))) QUANTIFICATION) ((ALL X,Y,Z NOT R
(X Z) OR NOT P (X Y) OR P (Z Y)) (ALL 16 (ALL 15 (ALL 14 (OR (NOT (+ 4 (14 16) NIL)) (OR (NOT (+ 13 (14 15) NIL))
(+ 13 (16 15) NIL)))))) QUANTIFICATION) ((ALL Y R (Y A) OR NOT P (Y A) OR R (Y K)) (ALL 17 (OR (+ 4 (17 18) NIL)
(OR (NOT (+ 13 (17 18) NIL)) (+ 4 (17 19) NIL)))) QUANTIFICATION) ((ALL Y R (Y A) OR P (Y A) OR NOT R (Y K)) (ALL
20 (OR (+ 4 (20 18) NIL) (OR (+ 13 (20 18) NIL) (NOT (+ 4 (20 19) NIL))))) QUANTIFICATION) ((ALL Y R (Y N) OR NOT
P (Y N) OR NOT R (G (Y) N)) (ALL 21 (OR (+ 4 (21 22) NIL) (OR (NOT (+ 13 (21 22) NIL)) (NOT (+ 4 ((23 21) 22) NIL)))))
QUANTIFICATION) ((ALL Y R (Y N) OR NOT P (Y N) OR NOT R (G (Y) Y)) (ALL 24 (OR (+ 4 (24 22) NIL) (OR (NOT (+ 13
(24 22) NIL)) (NOT (+ 4 ((23 24) 24) NIL))))) QUANTIFICATION) ((ALL Y R (Y N) OR NOT P (Y N) OR P (Y G (Y))) (ALL
25 (OR (+ 4 (25 22) NIL) (OR (NOT (+ 13 (25 22) NIL)) (+ 13 (25 (23 25)) NIL)))) QUANTIFICATION) ((ALL Y R (Y N)
OR NOT P (Y N) OR P (G (Y) Y)) (ALL 26 (OR (+ 4 (26 22) NIL) (OR (NOT (+ 13 (26 22) NIL)) (+ 13 ((23 26) 26) NIL))))
QUANTIFICATION) ((ALL Y,U R (Y N) OR P (Y N) OR R (U N) OR R (U Y) OR NOT P (Y U) OR NOT P (U Y)) (ALL 28 (ALL
27 (OR (+ 4 (27 22) NIL) (OR (+ 13 (27 22) NIL) (OR (+ 4 (28 22) NIL) (OR (+ 4 (28 27) NIL) (OR (NOT (+ 13 (27
28) NIL)) (NOT (+ 13 (28 27) NIL))))))))) QUANTIFICATION) ((ALL Y R (Y B) OR P (Y B) OR NOT R (J (Y) B)) (ALL 29
(OR (+ 4 (29 30) NIL) (OR (+ 13 (29 30) NIL) (NOT (+ 4 ((31 29) 30) NIL))))) QUANTIFICATION) ((ALL Y R (Y B) OR
P (Y B) OR NOT R (J (Y) Y)) (ALL 32 (OR (+ 4 (32 30) NIL) (OR (+ 13 (32 30) NIL) (NOT (+ 4 ((31 32) 32) NIL)))))
QUANTIFICATION) ((ALL Y R (Y B) OR P (Y B) OR P (Y J (Y))) (ALL 33 (OR (+ 4 (33 30) NIL) (OR (+ 13 (33 30) NIL)
(+ 13 (33 (31 33)) NIL)))) QUANTIFICATION) ((ALL Y R (Y B) OR P (Y B) OR P (J (Y) Y)) (ALL 34 (OR (+ 4 (34 30)
NIL) (OR (+ 13 (34 30) NIL) (+ 13 ((31 34) 34) NIL)))) QUANTIFICATION) ((ALL Y,V R (Y B) OR NOT P (Y B) OR R (V
B) OR R (V Y) OR NOT P (Y V) OR NOT P (V Y)) (ALL 36 (ALL 35 (OR (+ 4 (35 30) NIL) (OR (NOT (+ 13 (35 30) NIL))
(OR (+ 4 (36 30) NIL) (OR (+ 4 (36 35) NIL) (OR (NOT (+ 13 (35 36) NIL)) (NOT (+ 13 (36 35) NIL))))))))) QUANTIFICATION)
((ALL Y R (Y K) OR NOT R (Y N) OR P (Y K)) (ALL 37 (OR (+ 4 (37 19) NIL) (OR (NOT (+ 4 (37 22) NIL)) (+ 13 (37
19) NIL)))) QUANTIFICATION) ((ALL Y R (Y K) OR NOT R (Y B) OR P (Y K)) (ALL 38 (OR (+ 4 (38 19) NIL) (OR (NOT (+
4 (38 30) NIL)) (+ 13 (38 19) NIL)))) QUANTIFICATION) ((ALL Y R (Y K) OR R (Y B) OR R (Y N) OR NOT P (Y K)) (ALL
39 (OR (+ 4 (39 19) NIL) (OR (+ 4 (39 30) NIL) (OR (+ 4 (39 22) NIL) (NOT (+ 13 (39 19) NIL)))))) QUANTIFICATION)))
(COND (ST*LOAD.FLAG (PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (9992 9997 10002 10007 10012 10017 10022 10027
10041 10046 10051 10056 10061 10066 10071 10076 10090 10095 10100 10105 10110 10115 10120 10125 10130 10135 10150
10155 10160 10165 10170 10175 10180 10185 10190 10205 10210 10225 10240))) (DATALIST (QUOTE (15 TRUE NIL NIL NIL
(DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 R NIL NIL (ANY ANY) NIL NIL ((- 4 (POSITIVE)))
((+ 4 (NEGATIVE))) ((+ 4 (NIL))) ((- 4 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 P NIL NIL (ANY ANY) NIL NIL ((- 13 (POSITIVE))) ((+ 13 (NEGATIVE)))
((+ 13 (NIL))) ((- 13 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 A ANY (DT*ST-KIND NIL) CONSTANT 5 K ANY (DT*ST-KIND NIL) CONSTANT 5
ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 N ANY (
DT*ST-KIND NIL) CONSTANT 14 G NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 B ANY (DT*ST-KIND NIL) CONSTANT 14 J NIL ANY (ANY)
NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE
40 1) (IDIFFERENCE 10240 9987)) MEM*SIZE) (MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ COUNTER1 40) (MAPC
ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1
MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T
(SETQ COUNTER1 40) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND
((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT)))))))
(SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
DATA)))))) (RPAQ MEM*NEXT.RADR (IPLUS 9987 INCREMENT)) (RPAQ MEM*NEXT.VADR 40) (RPAQ MEM*REST (ADD1 (IDIFFERENCE
MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ
DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 1) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS 
DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS
DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ 
DT*CONSTANT.ALL (30 22 19 18)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL
(31 23)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ 
DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT 
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (13 4 2
1)) (RPAQQ DT*PREDICATE.ALL (13 4 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS
(PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES 
+SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2)
(RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)))
(PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED (2 1))))) (PROGN (SETPROPLIST
(QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) 
DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ ST*STACK1 (NIL ((X_39
PROGN (DT-VARIABLE.DELETE 39) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_39) ST*SYMBOL.ADDRESSES)))) ((X_38 PROGN
(DT-VARIABLE.DELETE 38) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_38) ST*SYMBOL.ADDRESSES)))) ((X_37 PROGN (
DT-VARIABLE.DELETE 37) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_37) ST*SYMBOL.ADDRESSES)))) ((X_36 PROGN (
DT-VARIABLE.DELETE 36) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_36) ST*SYMBOL.ADDRESSES))) (X_35 PROGN (
DT-VARIABLE.DELETE 35) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_35) ST*SYMBOL.ADDRESSES)))) ((X_34 PROGN (
DT-VARIABLE.DELETE 34) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_34) ST*SYMBOL.ADDRESSES)))) ((X_33 PROGN (
DT-VARIABLE.DELETE 33) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_33) ST*SYMBOL.ADDRESSES)))) ((X_32 PROGN (
DT-VARIABLE.DELETE 32) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_32) ST*SYMBOL.ADDRESSES)))) ((J PROGN (
DT-FUNCTION.DELETE 31) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE J) ST*SYMBOL.ADDRESSES))) (B PROGN (DT-CONSTANT.DELETE
30) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B) ST*SYMBOL.ADDRESSES))) (X_29 PROGN (DT-VARIABLE.DELETE 29) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_29) ST*SYMBOL.ADDRESSES)))) ((X_28 PROGN (DT-VARIABLE.DELETE 28) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_28) ST*SYMBOL.ADDRESSES))) (X_27 PROGN (DT-VARIABLE.DELETE 27) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_27) ST*SYMBOL.ADDRESSES)))) ((X_26 PROGN (DT-VARIABLE.DELETE 26) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_26) ST*SYMBOL.ADDRESSES)))) ((X_25 PROGN (DT-VARIABLE.DELETE 25) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_25) ST*SYMBOL.ADDRESSES)))) ((X_24 PROGN (DT-VARIABLE.DELETE 24) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_24) ST*SYMBOL.ADDRESSES)))) ((G PROGN (DT-FUNCTION.DELETE 23) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE G) ST*SYMBOL.ADDRESSES))) (N PROGN (DT-CONSTANT.DELETE 22) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE N) ST*SYMBOL.ADDRESSES))) (X_21 PROGN (DT-VARIABLE.DELETE 21) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) ST*SYMBOL.ADDRESSES)))) ((X_20 PROGN (DT-VARIABLE.DELETE 20) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_20) ST*SYMBOL.ADDRESSES)))) ((K PROGN (DT-CONSTANT.DELETE 19) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE K) ST*SYMBOL.ADDRESSES))) (A PROGN (DT-CONSTANT.DELETE 18) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) ST*SYMBOL.ADDRESSES))) (X_17 PROGN (DT-VARIABLE.DELETE 17) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17) ST*SYMBOL.ADDRESSES)))) ((X_16 PROGN (DT-VARIABLE.DELETE 16) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES))) (X_15 PROGN (DT-VARIABLE.DELETE 15) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_15) ST*SYMBOL.ADDRESSES))) (X_14 PROGN (DT-VARIABLE.DELETE 14) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES)))) ((P PROGN (DT-PREDICATE.DELETE 13) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P) ST*SYMBOL.ADDRESSES))) (X_12 PROGN (DT-VARIABLE.DELETE 12) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_12) ST*SYMBOL.ADDRESSES))) (X_11 PROGN (DT-VARIABLE.DELETE 11) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_11) ST*SYMBOL.ADDRESSES))) (X_10 PROGN (DT-VARIABLE.DELETE 10) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_10) ST*SYMBOL.ADDRESSES)))) ((X_9 PROGN (DT-VARIABLE.DELETE 9) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_9) ST*SYMBOL.ADDRESSES))) (X_8 PROGN (DT-VARIABLE.DELETE 8) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_8) ST*SYMBOL.ADDRESSES))) (X_7 PROGN (DT-VARIABLE.DELETE 7) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_7) ST*SYMBOL.ADDRESSES)))) ((X_6 PROGN (DT-VARIABLE.DELETE 6) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_6) ST*SYMBOL.ADDRESSES))) (X_5 PROGN (DT-VARIABLE.DELETE 5) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_5) ST*SYMBOL.ADDRESSES)))) ((R PROGN (DT-PREDICATE.DELETE 4) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R) ST*SYMBOL.ADDRESSES))) (X_3 PROGN (DT-VARIABLE.DELETE 3) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_3) ST*SYMBOL.ADDRESSES)))) ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ
ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_3 . 3) (R . 4) (X_5 . 5) (X_6 . 6) (X_7 . 7) (X_8
. 8) (X_9 . 9) (X_10 . 10) (X_11 . 11) (X_12 . 12) (P . 13) (X_14 . 14) (X_15 . 15) (X_16 . 16) (X_17 . 17) (A
. 18) (K . 19) (X_20 . 20) (X_21 . 21) (N . 22) (G . 23) (X_24 . 24) (X_25 . 25) (X_26 . 26) (X_27 . 27) (X_28
. 28) (X_29 . 29) (B . 30) (J . 31) (X_32 . 32) (X_33 . 33) (X_34 . 34) (X_35 . 35) (X_36 . 36) (X_37 . 37) (X_38
. 38) (X_39 . 39))))))))STOP
 

(COND ((FMT-LOAD " 6-SEP-84 20:57:20" NIL (((LBL (LOO P3)) (+ 5 (3 4) NIL) QUANTIFICATION) ((HAS (P3 IFT (XEQ (J
N) P4))) (+ 11 (4 (10 (8 6 7) 9)) NIL) QUANTIFICATION) ((HAS (P4 GOT (OUT))) (+ 11 (9 (13 12)) NIL) QUANTIFICATION)
((FLW (P5 P4)) (+ 15 (14 9) NIL) QUANTIFICATION) ((FLW (P8 P3)) (+ 15 (16 4) NIL) QUANTIFICATION) ((HAS (P8 GOT
(LOO))) (+ 11 (16 (13 3)) NIL) QUANTIFICATION) ((ALL XP,YP NOT FLW (XP YP) OR SUC (XP YP)) (ALL 18 (ALL 17 (OR
(NOT (+ 15 (17 18) NIL)) (+ 19 (17 18) NIL)))) QUANTIFICATION) ((ALL XP,YP,ZP NOT SUC (XP ZP) OR NOT SUC (ZP YP)
OR SUC (XP YP)) (ALL 22 (ALL 21 (ALL 20 (OR (NOT (+ 19 (20 22) NIL)) (OR (NOT (+ 19 (22 21) NIL)) (+ 19 (20 21)
NIL)))))) QUANTIFICATION) ((ALL XP,YP,ZP NOT HAS (XP GOT (ZP)) OR NOT LBL (ZP YP) OR SUC (YP XP)) (ALL 25 (ALL
24 (ALL 23 (OR (NOT (+ 11 (23 (13 25)) NIL)) (OR (NOT (+ 5 (25 24) NIL)) (+ 19 (24 23) NIL)))))) QUANTIFICATION)
((ALL XP,YP,ZP NOT HAS (XP IFT (ZP YP)) OR SUC (YP XP)) (ALL 28 (ALL 27 (ALL 26 (OR (NOT (+ 11 (26 (10 28 27))
NIL)) (+ 19 (27 26) NIL))))) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE
(10018 10023 10028 10033 10038 10043 10048 10053 10058 10073 10078 10083 10088 10103 10108 10122 10127 10142 10156
10161 10175 10180 10185 10200 10205 10210 10225 10240))) (DATALIST (QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((-
1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL
NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
5 LOO ANY (DT*ST-KIND NIL) CONSTANT 5 P3 ANY (DT*ST-KIND NIL) CONSTANT 15 LBL NIL NIL (ANY ANY) NIL NIL ((- 5 (POSITIVE))
) ((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 J ANY (DT*ST-KIND NIL) CONSTANT
5 N ANY (DT*ST-KIND NIL) CONSTANT 14 XEQ NIL ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION
5 P4 ANY (DT*ST-KIND NIL) CONSTANT 14 IFT NIL ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION
15 HAS NIL NIL (ANY ANY) NIL NIL ((- 11 (POSITIVE))) ((+ 11 (NEGATIVE))) ((+ 11 (NIL))) ((- 11 (NIL))) NIL NIL
(DT*ST-KIND NIL) PREDICATE 5 OUT ANY (DT*ST-KIND NIL) CONSTANT 14 GOT NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (
DT*ST-KIND NIL) FUNCTION 5 P5 ANY (DT*ST-KIND NIL) CONSTANT 15 FLW NIL NIL (ANY ANY) NIL NIL ((- 15 (POSITIVE)))
((+ 15 (NEGATIVE))) ((+ 15 (NIL))) ((- 15 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 P8 ANY (DT*ST-KIND NIL)
CONSTANT 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
15 SUC NIL NIL (ANY ANY) NIL NIL ((- 19 (POSITIVE))) ((+ 19 (NEGATIVE))) ((+ 19 (NIL))) ((- 19 (NIL))) NIL NIL
(DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND
((IGREATERP (IPLUS (IDIFFERENCE 29 1) (IDIFFERENCE 10240 10013)) MEM*SIZE) (MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE
10240) (SETQ COUNTER1 29) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1
(SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 29) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ
COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR)
(T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA
MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR (IPLUS 10013 INCREMENT)) (RPAQ MEM*NEXT.VADR
29) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ 
MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 1) (RPAQQ DT*SORT.PROPERTIES (
DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS 
DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ
DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (16 14 12 9 7 6 4 3)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ 
DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL (13 10 8)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE))
(RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS
(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC 
ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE))
(RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ
DT*NONEQUALITY.PREDICATES (19 15 11 5 2 1)) (RPAQQ DT*PREDICATE.ALL (19 15 11 5 2 1)) (RPAQQ 
DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES
DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))
(RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ 
DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++))) (PROGN) (PROGN (SETPROPLIST (QUOTE 
DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED (2 1))))) (PROGN (SETPROPLIST (QUOTE ANY) (QUOTE (
DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY ANY))
DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ ST*STACK1 (NIL ((X_28 PROGN (DT-VARIABLE.DELETE
28) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_28) ST*SYMBOL.ADDRESSES))) (X_27 PROGN (DT-VARIABLE.DELETE 27)
(RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_27) ST*SYMBOL.ADDRESSES))) (X_26 PROGN (DT-VARIABLE.DELETE 26) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_26) ST*SYMBOL.ADDRESSES)))) ((X_25 PROGN (DT-VARIABLE.DELETE 25) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_25) ST*SYMBOL.ADDRESSES))) (X_24 PROGN (DT-VARIABLE.DELETE 24) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_24) ST*SYMBOL.ADDRESSES))) (X_23 PROGN (DT-VARIABLE.DELETE 23) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_23) ST*SYMBOL.ADDRESSES)))) ((X_22 PROGN (DT-VARIABLE.DELETE 22) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_22) ST*SYMBOL.ADDRESSES))) (X_21 PROGN (DT-VARIABLE.DELETE 21) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) ST*SYMBOL.ADDRESSES))) (X_20 PROGN (DT-VARIABLE.DELETE 20) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_20) ST*SYMBOL.ADDRESSES)))) ((SUC PROGN (DT-PREDICATE.DELETE 19) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SUC) ST*SYMBOL.ADDRESSES))) (X_18 PROGN (DT-VARIABLE.DELETE 18) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18) ST*SYMBOL.ADDRESSES))) (X_17 PROGN (DT-VARIABLE.DELETE 17) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17) ST*SYMBOL.ADDRESSES)))) NIL ((P8 PROGN (DT-CONSTANT.DELETE 16) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P8) ST*SYMBOL.ADDRESSES)))) ((FLW PROGN (DT-PREDICATE.DELETE 15) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FLW) ST*SYMBOL.ADDRESSES))) (P5 PROGN (DT-CONSTANT.DELETE 14) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P5) ST*SYMBOL.ADDRESSES)))) ((GOT PROGN (DT-FUNCTION.DELETE 13) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE GOT) ST*SYMBOL.ADDRESSES))) (OUT PROGN (DT-CONSTANT.DELETE 12) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE OUT) ST*SYMBOL.ADDRESSES)))) ((HAS PROGN (DT-PREDICATE.DELETE 11) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE HAS) ST*SYMBOL.ADDRESSES))) (IFT PROGN (DT-FUNCTION.DELETE 10) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE IFT) ST*SYMBOL.ADDRESSES))) (P4 PROGN (DT-CONSTANT.DELETE 9) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P4) ST*SYMBOL.ADDRESSES))) (XEQ PROGN (DT-FUNCTION.DELETE 8) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE XEQ) ST*SYMBOL.ADDRESSES))) (N PROGN (DT-CONSTANT.DELETE 7) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE N) ST*SYMBOL.ADDRESSES))) (J PROGN (DT-CONSTANT.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE J) ST*SYMBOL.ADDRESSES)))) ((LBL PROGN (DT-PREDICATE.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE LBL) ST*SYMBOL.ADDRESSES))) (P3 PROGN (DT-CONSTANT.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
P3) ST*SYMBOL.ADDRESSES))) (LOO PROGN (DT-CONSTANT.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE LOO) 
ST*SYMBOL.ADDRESSES)))) ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE)
ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) 
ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY)
ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE
. 1) (FALSE . 2) (LOO . 3) (P3 . 4) (LBL . 5) (J . 6) (N . 7) (XEQ . 8) (P4 . 9) (IFT . 10) (HAS . 11) (OUT . 12)
(GOT . 13) (P5 . 14) (FLW . 15) (P8 . 16) (X_17 . 17) (X_18 . 18) (SUC . 19) (X_20 . 20) (X_21 . 21) (X_22 . 22)
(X_23 . 23) (X_24 . 24) (X_25 . 25) (X_26 . 26) (X_27 . 27) (X_28 . 28))))))))STOP
 

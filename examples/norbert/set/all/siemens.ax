(COND ((FMT-LOAD "11-SEP-84 12:55:32" NIL (((* EXTENSIONALITY AXIOM:) COMMENT COMMENT) ((ALL X,Y (ALL W MEMBER
(W X) EQV MEMBER (W Y)) IMPL X = Y) (ALL 4 (ALL 3 (IMPL (ALL 5 (EQV (+ 6 (5 3) (KIND (EQV T 30))) (+ 6 (5 4) (KIND
(EQV NIL 30))))) (+ 7 (3 4) NIL)))) QUANTIFICATION) ((* DEFINITION OF EMPTYSET:) COMMENT COMMENT) ((ALL W NOT MEMBER
(W EMPTYSET)) (ALL 8 (NOT (+ 6 (8 9) NIL))) QUANTIFICATION) ((* DEFINITION OF SUBSET:) COMMENT COMMENT) ((ALL X,Y
SUBSET (X Y) EQV (ALL W MEMBER (W X) IMPL MEMBER (W Y))) (ALL 11 (ALL 10 (EQV (+ 12 (10 11) (KIND (EQV T 70)))
(ALL 13 (IMPL (+ 6 (13 10) (KIND (EQV NIL 70))) (+ 6 (13 11) (KIND (EQV NIL 70)))))))) QUANTIFICATION) ((* DEFINITION
OF PROPERSUBSET:) COMMENT COMMENT) ((ALL X,Y PROPERSUBSET (X Y) EQV SUBSET (X Y) AND (EX W NOT MEMBER (W X) AND
MEMBER (W Y))) (ALL 15 (ALL 14 (EQV (+ 16 (14 15) (KIND (EQV T 90))) (AND (+ 12 (14 15) (KIND (EQV NIL 90))) (EX
17 (AND (NOT (+ 6 (17 14) (KIND (EQV NIL 90)))) (+ 6 (17 15) (KIND (EQV NIL 90))))))))) QUANTIFICATION) ((* DEFINITION
OF POWERSET:) COMMENT COMMENT) ((ALL X ALL W MEMBER (W POWERSET (X)) EQV SUBSET (W X)) (ALL 18 (ALL 19 (EQV (+
6 (19 (20 18)) (KIND (EQV T 110))) (+ 12 (19 18) (KIND (EQV NIL 110)))))) QUANTIFICATION) ((* DEFINITION OF UNION:)
COMMENT COMMENT) ((ALL X,Y ALL W MEMBER (W UNION (X Y)) EQV MEMBER (W X) OR MEMBER (W Y)) (ALL 22 (ALL 21 (ALL
23 (EQV (+ 6 (23 (24 21 22)) (KIND (EQV T 130))) (OR (+ 6 (23 21) (KIND (EQV NIL 130))) (+ 6 (23 22) (KIND (EQV
NIL 130)))))))) QUANTIFICATION) ((* DEFINITION OF INTERSECTION:) COMMENT COMMENT) ((ALL X,Y ALL W MEMBER (W INTERSECTION
(X Y)) EQV MEMBER (W X) AND MEMBER (W Y)) (ALL 26 (ALL 25 (ALL 27 (EQV (+ 6 (27 (28 25 26)) (KIND (EQV T 150)))
(AND (+ 6 (27 25) (KIND (EQV NIL 150))) (+ 6 (27 26) (KIND (EQV NIL 150)))))))) QUANTIFICATION))) (COND (ST*LOAD.FLAG
(PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (10027 10032 10037 10042 10056 10061 10066 10071 10085 10090 10095
10100 10115 10120 10125 10130 10145 10150 10155 10160 10165 10180 10195 10200 10205 10210 10225 10240))) (DATALIST
(QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL
NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL)))
((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 MEMBER NIL NIL
(ANY ANY) NIL NIL ((- 6 (POSITIVE))) ((+ 6 (NEGATIVE))) ((+ 6 (NIL))) ((- 6 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
15 = NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 7 (POSITIVE . SYMMETRIC))) ((+
7 (NEGATIVE . SYMMETRIC))) ((+ 7 (NIL . SYMMETRIC))) ((- 7 (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 EMPTYSET ANY (DT*ST-KIND NIL) CONSTANT 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 SUBSET NIL NIL (ANY ANY)
NIL NIL ((- 12 (POSITIVE))) ((+ 12 (NEGATIVE))) ((+ 12 (NIL))) ((- 12 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 PROPERSUBSET NIL NIL (ANY ANY) NIL NIL ((- 16 (POSITIVE))) ((+ 16
(NEGATIVE))) ((+ 16 (NIL))) ((- 16 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 14 POWERSET NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 14 UNION NIL ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL (ST*DATA NIL
DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 14 INTERSECTION NIL ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION))) (INCREMENT
(IDIFFERENCE MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE 29 1) (IDIFFERENCE 10240
10013)) MEM*SIZE) (MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ COUNTER1 29) (MAPC ADDRLIST (FUNCTION (LAMBDA
(RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST
(FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 29) (MAPC
ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE 
ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1
(ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))))
(RPAQ MEM*NEXT.RADR (IPLUS 10013 INCREMENT)) (RPAQ MEM*NEXT.VADR 29) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR
MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL
(ANY)) (RPAQQ DT*SORT.NR 1) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE
DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS 
DT*COMPLETION.SORT)) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (9)) (RPAQQ
DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL (28 24 20)) (RPAQQ 
DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ 
DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT 
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES (7)) (RPAQQ DT*NONEQUALITY.PREDICATES (16 12 6
2 1)) (RPAQQ DT*PREDICATE.ALL (16 12 7 6 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS
(PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES 
+SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2)
(RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)))
(PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (REFLEXIVE (7 7) SYMMETRIC (7 7) DEFINED
(7 2 1))))) (PROGN (SETPROPLIST (QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL
DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL))))) (RPAQQ
ST*STACK1 (NIL ((INTERSECTION PROGN (DT-FUNCTION.DELETE 28) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE INTERSECTION)
ST*SYMBOL.ADDRESSES))) (X_27 PROGN (DT-VARIABLE.DELETE 27) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_27) 
ST*SYMBOL.ADDRESSES))) (X_26 PROGN (DT-VARIABLE.DELETE 26) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_26) 
ST*SYMBOL.ADDRESSES))) (X_25 PROGN (DT-VARIABLE.DELETE 25) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_25) 
ST*SYMBOL.ADDRESSES)))) NIL ((UNION PROGN (DT-FUNCTION.DELETE 24) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE UNION)
ST*SYMBOL.ADDRESSES))) (X_23 PROGN (DT-VARIABLE.DELETE 23) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_23) 
ST*SYMBOL.ADDRESSES))) (X_22 PROGN (DT-VARIABLE.DELETE 22) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_22) 
ST*SYMBOL.ADDRESSES))) (X_21 PROGN (DT-VARIABLE.DELETE 21) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) 
ST*SYMBOL.ADDRESSES)))) NIL ((POWERSET PROGN (DT-FUNCTION.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
POWERSET) ST*SYMBOL.ADDRESSES))) (X_19 PROGN (DT-VARIABLE.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
X_19) ST*SYMBOL.ADDRESSES))) (X_18 PROGN (DT-VARIABLE.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18)
ST*SYMBOL.ADDRESSES)))) NIL ((X_17 PROGN (DT-VARIABLE.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17)
ST*SYMBOL.ADDRESSES))) (PROPERSUBSET PROGN (DT-PREDICATE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
PROPERSUBSET) ST*SYMBOL.ADDRESSES))) (X_15 PROGN (DT-VARIABLE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
X_15) ST*SYMBOL.ADDRESSES))) (X_14 PROGN (DT-VARIABLE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14)
ST*SYMBOL.ADDRESSES)))) NIL ((X_13 PROGN (DT-VARIABLE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_13)
ST*SYMBOL.ADDRESSES))) (SUBSET PROGN (DT-PREDICATE.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SUBSET)
ST*SYMBOL.ADDRESSES))) (X_11 PROGN (DT-VARIABLE.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_11) 
ST*SYMBOL.ADDRESSES))) (X_10 PROGN (DT-VARIABLE.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_10) 
ST*SYMBOL.ADDRESSES)))) NIL ((EMPTYSET PROGN (DT-CONSTANT.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
EMPTYSET) ST*SYMBOL.ADDRESSES))) (X_8 PROGN (DT-VARIABLE.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_8)
ST*SYMBOL.ADDRESSES)))) NIL ((= PROGN (DT-PREDICATE.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE =) 
ST*SYMBOL.ADDRESSES))) (MEMBER PROGN (DT-PREDICATE.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MEMBER)
ST*SYMBOL.ADDRESSES))) (X_5 PROGN (DT-VARIABLE.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_5) 
ST*SYMBOL.ADDRESSES))) (X_4 PROGN (DT-VARIABLE.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_4) 
ST*SYMBOL.ADDRESSES))) (X_3 PROGN (DT-VARIABLE.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_3) 
ST*SYMBOL.ADDRESSES)))) NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE)
ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) 
ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY)
ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE
. 1) (FALSE . 2) (X_3 . 3) (X_4 . 4) (X_5 . 5) (MEMBER . 6) (= . 7) (X_8 . 8) (EMPTYSET . 9) (X_10 . 10) (X_11
. 11) (SUBSET . 12) (X_13 . 13) (X_14 . 14) (X_15 . 15) (PROPERSUBSET . 16) (X_17 . 17) (X_18 . 18) (X_19 . 19)
(POWERSET . 20) (X_21 . 21) (X_22 . 22) (X_23 . 23) (UNION . 24) (X_25 . 25) (X_26 . 26) (X_27 . 27) (INTERSECTION
. 28))))))))
STOP
 

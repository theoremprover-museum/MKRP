;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((POSSIBLE (MISSIONARIES.LEFT (S (S (S (0)))) CANNIBALS.LEFT (S (S (S (0)))) BOAT (LEFT) CANNIBALS.RIGHT (0) MISSIONARIES.RIGHT (0))) (ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (S (V)) CANNIBALS.LEFT (W) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z)) IMPL REACHABLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (S (Z)))) (ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (S (W)) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z)) IMPL REACHABLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT (S (Y)) MISSIONARIES.RIGHT (Z))) (ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (S (S (V))) CANNIBALS.LEFT (W) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z)) IMPL REACHABLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (S (S (Z))))) (ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (S (S (W))) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z)) IMPL REACHABLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT (S (S (Y))) MISSIONARIES.RIGHT (Z))) (ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (S (V)) CANNIBALS.LEFT (S (W)) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z)) IMPL REACHABLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT (S (Y)) MISSIONARIES.RIGHT (S (Z)))) (ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (S (Z))) IMPL REACHABLE (MISSIONARIES.LEFT (S (V)) CANNIBALS.LEFT (W) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z))) (ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT (S (Y)) MISSIONARIES.RIGHT (Z)) IMPL REACHABLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (S (W)) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z))) (ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (S (S (Z)))) IMPL REACHABLE (MISSIONARIES.LEFT (S (S (V))) CANNIBALS.LEFT (W) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z))) (ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT (S (S (Y))) MISSIONARIES.RIGHT (Z)) IMPL REACHABLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (S (S (W))) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z))) (ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT (S (Y)) MISSIONARIES.RIGHT (S (Z))) IMPL REACHABLE (MISSIONARIES.LEFT (S (V)) CANNIBALS.LEFT (S (W)) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z))) (ALL V,W,X,Y,Z REACHABLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (X) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z)) AND NOT OUTNUMBER (W V) AND NOT OUTNUMBER (Y Z) IMPL POSSIBLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (X) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z))) (ALL X NOT OUTNUMBER (X 0)) (ALL X NOT OUTNUMBER (X X)) (ALL X NOT OUTNUMBER (X S (X))) (ALL X NOT OUTNUMBER (X S (S (X)))) (ALL X NOT OUTNUMBER (X S (S (S (X))))))) (QUOTE ((+ 11 ((5 (4 (4 (4 3)))) (6 (4 (4 (4 3)))) (8 7) (9 3) (10 3)) NIL) (ALL 15 (ALL 14 (ALL 13 (ALL 12 (IMPL (+ 11 ((5 (4 12)) (6 13) (8 7) (9 14) (10 15)) NIL) (+ 17 ((5 12) (6 13) (8 16) (9 14) (10 (4 15))) NIL)))))) (ALL 21 (ALL 20 (ALL 19 (ALL 18 (IMPL (+ 11 ((5 18) (6 (4 19)) (8 7) (9 20) (10 21)) NIL) (+ 17 ((5 18) (6 19) (8 16) (9 (4 20)) (10 21)) NIL)))))) (ALL 25 (ALL 24 (ALL 23 (ALL 22 (IMPL (+ 11 ((5 (4 (4 22))) (6 23) (8 7) (9 24) (10 25)) NIL) (+ 17 ((5 22) (6 23) (8 16) (9 24) (10 (4 (4 25)))) NIL)))))) (ALL 29 (ALL 28 (ALL 27 (ALL 26 (IMPL (+ 11 ((5 26) (6 (4 (4 27))) (8 7) (9 28) (10 29)) NIL) (+ 17 ((5 26) (6 27) (8 16) (9 (4 (4 28))) (10 29)) NIL)))))) (ALL 33 (ALL 32 (ALL 31 (ALL 30 (IMPL (+ 11 ((5 (4 30)) (6 (4 31)) (8 7) (9 32) (10 33)) NIL) (+ 17 ((5 30) (6 31) (8 16) (9 (4 32)) (10 (4 33))) NIL)))))) (ALL 37 (ALL 36 (ALL 35 (ALL 34 (IMPL (+ 11 ((5 34) (6 35) (8 16) (9 36) (10 (4 37))) NIL) (+ 17 ((5 (4 34)) (6 35) (8 7) (9 36) (10 37)) NIL)))))) (ALL 41 (ALL 40 (ALL 39 (ALL 38 (IMPL (+ 11 ((5 38) (6 39) (8 16) (9 (4 40)) (10 41)) NIL) (+ 17 ((5 38) (6 (4 39)) (8 7) (9 40) (10 41)) NIL)))))) (ALL 45 (ALL 44 (ALL 43 (ALL 42 (IMPL (+ 11 ((5 42) (6 43) (8 16) (9 44) (10 (4 (4 45)))) NIL) (+ 17 ((5 (4 (4 42))) (6 43) (8 7) (9 44) (10 45)) NIL)))))) (ALL 49 (ALL 48 (ALL 47 (ALL 46 (IMPL (+ 11 ((5 46) (6 47) (8 16) (9 (4 (4 48))) (10 49)) NIL) (+ 17 ((5 46) (6 (4 (4 47))) (8 7) (9 48) (10 49)) NIL)))))) (ALL 53 (ALL 52 (ALL 51 (ALL 50 (IMPL (+ 11 ((5 50) (6 51) (8 16) (9 (4 52)) (10 (4 53))) NIL) (+ 17 ((5 (4 50)) (6 (4 51)) (8 7) (9 52) (10 53)) NIL)))))) (ALL 58 (ALL 57 (ALL 56 (ALL 55 (ALL 54 (IMPL (AND (+ 17 ((5 54) (6 55) (8 56) (9 57) (10 58)) NIL) (AND (NOT (+ 59 (55 54) NIL)) (NOT (+ 59 (57 58) NIL)))) (+ 11 ((5 54) (6 55) (8 56) (9 57) (10 58)) NIL))))))) (ALL 60 (NOT (+ 59 (60 3) NIL))) (ALL 61 (NOT (+ 59 (61 61) NIL))) (ALL 62 (NOT (+ 59 (62 (4 62)) NIL))) (ALL 63 (NOT (+ 59 (63 (4 (4 63))) NIL))) (ALL 64 (NOT (+ 59 (64 (4 (4 (4 64)))) NIL))))) (QUOTE ((POSSIBLE (MISSIONARIES.LEFT (0) CANNIBALS.LEFT (0) BOAT (RIGHT) CANNIBALS.RIGHT (S (S (S (0)))) MISSIONARIES.RIGHT (S (S (S (0)))))))) (QUOTE ((+ 11 ((5 3) (6 3) (8 16) (9 (4 (4 (4 3)))) (10 (4 (4 (4 3))))) NIL))) (QUOTE ("Edit:     Axioms and Theorems edited: 13-MAR,1991 03:03 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(9565 9570 9575 9580 9585 9600 9605 9610 9615 9620 9625 9630 9635 9640 9645 9650 9655
          9660 9665 9670 9675 9680 9685 9690 9695 9700 9705 9710 9715 9720 9725 9730 9735 9740
          9745 9750 9755 9760 9765 9770 9775 9780 9785 9790 9795 9800 9805 9820 9825 9830 9835
          9840 9845 9860 9874 9888 9902 9907 9921 9935 9949 9954 9969 9984 9999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC)))
          ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY "0" (DT*ST-KIND NIL) CONSTANT 14 "S" NIL
          ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 14 "MISSIONARIES.LEFT"
          NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 14
          "CANNIBALS.LEFT" NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 5
          ANY "LEFT" (DT*ST-KIND NIL) CONSTANT 14 "BOAT" NIL ANY (ANY) NIL NIL NIL NIL NIL 1
          ANY (DT*ST-KIND NIL) FUNCTION 14 "CANNIBALS.RIGHT" NIL ANY (ANY) NIL NIL NIL NIL NIL
          1 ANY (DT*ST-KIND NIL) FUNCTION 14 "MISSIONARIES.RIGHT" NIL ANY (ANY) NIL NIL NIL
          NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 15 "POSSIBLE" NIL NIL (ANY ANY ANY ANY ANY)
          NIL NIL ((- 11 (POSITIVE))) ((+ 11 (NEGATIVE))) ((+ 11 (NIL))) ((- 11 (NIL))) NIL
          NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5
          ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY "RIGHT" (DT*ST-KIND NIL) CONSTANT 15 "REACHABLE" NIL NIL
          (ANY ANY ANY ANY ANY) NIL NIL ((- 17 (POSITIVE))) ((+ 17 (NEGATIVE))) ((+ 17 (NIL)))
          ((- 17 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "OUTNUMBER" NIL NIL (ANY ANY) NIL NIL ((- 59 (POSITIVE)))
          ((+ 59 (NEGATIVE))) ((+ 59 (NIL))) ((- 59 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 10000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 10000)
             (SETQ COUNTER1 65)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 10000)
                 (MEM-INITIALIZE 10000))
               (SETQ COUNTER1 65)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9560 INCREMENT) 9560))
      (SETQ MEM*NEXT.VADR 65
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ANY))) (SETQ DT*SORT.NR (QUOTE 2)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*ELEMENT.PREDICATE (QUOTE NIL)) (SETQ DT*OMEGA.CONSTANT (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (16 7 3))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE (10 9 8 6 5 4))) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (59 17 11 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (59 17 11 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
(COND ((FMT-LOAD "11-OCT-84 18:26:51" NIL (((* STARTING SITUATION:) COMMENT COMMENT) ((*) COMMENT COMMENT) ((POSSIBLE
(MISSIONARIES.LEFT (S (S (S (0)))) CANNIBALS.LEFT (S (S (S (0)))) BOAT (LEFT) CANNIBALS.RIGHT (0) MISSIONARIES.RIGHT
(0))) (+ 67 ((74 (75 (75 (75 76)))) (73 (75 (75 (75 76)))) (70 71) (69 76) (68 76)) NIL) QUANTIFICATION) ((*) COMMENT
COMMENT) ((* TRAVERSING RULES:) COMMENT COMMENT) ((*) COMMENT COMMENT) ((ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT
(S (V)) CANNIBALS.LEFT (W) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z)) IMPL REACHABLE (MISSIONARIES.LEFT
(V) CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (S (Z)))) (ALL 63 (ALL 64 (ALL 65 (ALL
66 (IMPL (+ 67 ((74 (75 66)) (73 65) (70 71) (69 64) (68 63)) NIL) (+ 61 ((74 66) (73 65) (70 62) (69 64) (68 (75
63))) NIL)))))) QUANTIFICATION) ((ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (S (W)) BOAT (LEFT)
CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z)) IMPL REACHABLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (RIGHT)
CANNIBALS.RIGHT (S (Y)) MISSIONARIES.RIGHT (Z))) (ALL 57 (ALL 58 (ALL 59 (ALL 60 (IMPL (+ 67 ((74 60) (73 (75 59))
(70 71) (69 58) (68 57)) NIL) (+ 61 ((74 60) (73 59) (70 62) (69 (75 58)) (68 57)) NIL)))))) QUANTIFICATION) ((ALL
V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (S (S (V))) CANNIBALS.LEFT (W) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT
(Z)) IMPL REACHABLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT
(S (S (Z))))) (ALL 53 (ALL 54 (ALL 55 (ALL 56 (IMPL (+ 67 ((74 (75 (75 56))) (73 55) (70 71) (69 54) (68 53)) NIL)
(+ 61 ((74 56) (73 55) (70 62) (69 54) (68 (75 (75 53)))) NIL)))))) QUANTIFICATION) ((ALL V,W,Y,Z POSSIBLE (
MISSIONARIES.LEFT (V) CANNIBALS.LEFT (S (S (W))) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z)) IMPL REACHABLE
(MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT (S (S (Y))) MISSIONARIES.RIGHT (Z))) (ALL
49 (ALL 50 (ALL 51 (ALL 52 (IMPL (+ 67 ((74 52) (73 (75 (75 51))) (70 71) (69 50) (68 49)) NIL) (+ 61 ((74 52)
(73 51) (70 62) (69 (75 (75 50))) (68 49)) NIL)))))) QUANTIFICATION) ((ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT
(S (V)) CANNIBALS.LEFT (S (W)) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z)) IMPL REACHABLE (MISSIONARIES.LEFT
(V) CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT (S (Y)) MISSIONARIES.RIGHT (S (Z)))) (ALL 16 (ALL 15 (ALL 14
(ALL 13 (IMPL (+ 67 ((74 (75 13)) (73 (75 14)) (70 71) (69 15) (68 16)) NIL) (+ 61 ((74 13) (73 14) (70 62) (69
(75 15)) (68 (75 16))) NIL)))))) QUANTIFICATION) ((ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W)
BOAT (RIGHT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (S (Z))) IMPL REACHABLE (MISSIONARIES.LEFT (S (V)) CANNIBALS.LEFT
(W) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z))) (ALL 22 (ALL 21 (ALL 20 (ALL 19 (IMPL (+ 67 ((74 19)
(73 20) (70 62) (69 21) (68 (75 22))) NIL) (+ 61 ((74 (75 19)) (73 20) (70 71) (69 21) (68 22)) NIL)))))) QUANTIFICATION)
((ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT (S (Y)) MISSIONARIES.RIGHT
(Z)) IMPL REACHABLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (S (W)) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT
(Z))) (ALL 26 (ALL 25 (ALL 24 (ALL 23 (IMPL (+ 67 ((74 23) (73 24) (70 62) (69 (75 25)) (68 26)) NIL) (+ 61 ((74
23) (73 (75 24)) (70 71) (69 25) (68 26)) NIL)))))) QUANTIFICATION) ((ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (V)
CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (S (S (Z)))) IMPL REACHABLE (MISSIONARIES.LEFT
(S (S (V))) CANNIBALS.LEFT (W) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z))) (ALL 30 (ALL 29 (ALL 28
(ALL 27 (IMPL (+ 67 ((74 27) (73 28) (70 62) (69 29) (68 (75 (75 30)))) NIL) (+ 61 ((74 (75 (75 27))) (73 28) (70
71) (69 29) (68 30)) NIL)))))) QUANTIFICATION) ((ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W)
BOAT (RIGHT) CANNIBALS.RIGHT (S (S (Y))) MISSIONARIES.RIGHT (Z)) IMPL REACHABLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT
(S (S (W))) BOAT (LEFT) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z))) (ALL 36 (ALL 35 (ALL 32 (ALL 31 (IMPL (+ 67
((74 31) (73 32) (70 62) (69 (75 (75 35))) (68 36)) NIL) (+ 61 ((74 31) (73 (75 (75 32))) (70 71) (69 35) (68 36))
NIL)))))) QUANTIFICATION) ((ALL V,W,Y,Z POSSIBLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (RIGHT) CANNIBALS.RIGHT
(S (Y)) MISSIONARIES.RIGHT (S (Z))) IMPL REACHABLE (MISSIONARIES.LEFT (S (V)) CANNIBALS.LEFT (S (W)) BOAT (LEFT)
CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z))) (ALL 78 (ALL 77 (ALL 38 (ALL 37 (IMPL (+ 67 ((74 37) (73 38) (70 62)
(69 (75 77)) (68 (75 78))) NIL) (+ 61 ((74 (75 37)) (73 (75 38)) (70 71) (69 77) (68 78)) NIL)))))) QUANTIFICATION)
((*) COMMENT COMMENT) ((* ADMISSIBILITY CONDITION:) COMMENT COMMENT) ((*) COMMENT COMMENT) ((ALL V,W,X,Y,Z REACHABLE
(MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (X) CANNIBALS.RIGHT (Y) MISSIONARIES.RIGHT (Z)) AND NOT OUTNUMBER
(W V) AND NOT OUTNUMBER (Y Z) IMPL POSSIBLE (MISSIONARIES.LEFT (V) CANNIBALS.LEFT (W) BOAT (X) CANNIBALS.RIGHT
(Y) MISSIONARIES.RIGHT (Z))) (ALL 83 (ALL 82 (ALL 81 (ALL 80 (ALL 79 (IMPL (AND (+ 61 ((74 79) (73 80) (70 81)
(69 82) (68 83)) NIL) (AND (NOT (+ 84 (80 79) NIL)) (NOT (+ 84 (82 83) NIL)))) (+ 67 ((74 79) (73 80) (70 81) (69
82) (68 83)) NIL))))))) QUANTIFICATION) ((*) COMMENT COMMENT) ((* AUXILIARY DEFINITIONS:) COMMENT COMMENT) ((*)
COMMENT COMMENT) ((ALL X NOT OUTNUMBER (X 0)) (ALL 85 (NOT (+ 84 (85 76) NIL))) QUANTIFICATION) ((ALL X NOT OUTNUMBER
(X X)) (ALL 86 (NOT (+ 84 (86 86) NIL))) QUANTIFICATION) ((ALL X NOT OUTNUMBER (X S (X))) (ALL 87 (NOT (+ 84 (87
(75 87)) NIL))) QUANTIFICATION) ((ALL X NOT OUTNUMBER (X S (S (X)))) (ALL 88 (NOT (+ 84 (88 (75 (75 88))) NIL)))
QUANTIFICATION) ((ALL X NOT OUTNUMBER (X S (S (S (X))))) (ALL 89 (NOT (+ 84 (89 (75 (75 (75 89)))) NIL))) QUANTIFICATION)
)) (COND (ST*LOAD.FLAG (PROGN (DT-RESET)) (PROG ((ADDRLIST (QUOTE (9821 9826 9831 9836 9841 9856 9861 9866 9871
9876 9881 9886 9891 10210 10205 10191 10177 ATP.MEMORY.NIL 10163 10158 10144 10130 10116 10101 10096 10091 10086
10081 10076 10061 10056 10051 10046 10041 10036 10031 10026 10021 10016 10011 10006 ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
9896 9901 9906 9911 ATP.MEMORY.NIL ATP.MEMORY.NIL 9916 9921 9926 9931 9936 9941 9946 9951 9956 9961 9966 9971 9976
9981 ATP.MEMORY.NIL ATP.MEMORY.NIL 9986 9991 9996 10001 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 10225 10240))) (DATALIST
(QUOTE (15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL
NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2
(NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 "0" ANY (DT*ST-KIND NIL) CONSTANT 14 "S" NIL ANY (ANY)
NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 14 "MISSIONARIES.LEFT" NIL ANY (ANY) NIL NIL NIL NIL NIL 1
ANY (DT*ST-KIND NIL) FUNCTION 14 "CANNIBALS.LEFT" NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION
5 "LEFT" ANY (DT*ST-KIND NIL) CONSTANT 14 "BOAT" NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION
14 "CANNIBALS.RIGHT" NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 14 "MISSIONARIES.RIGHT"
NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL) FUNCTION 15 "POSSIBLE" NIL NIL (ANY ANY ANY ANY ANY) NIL
NIL ((- 67 (POSITIVE))) ((+ 67 (NEGATIVE))) ((+ 67 (NIL))) ((- 67 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5
ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 "RIGHT" ANY (DT*ST-KIND
NIL) CONSTANT 15 "REACHABLE" NIL NIL (ANY ANY ANY ANY ANY) NIL NIL ((- 61 (POSITIVE))) ((+ 61 (NEGATIVE))) ((+
61 (NIL))) ((- 61 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 15 "OUTNUMBER" NIL NIL (ANY ANY) NIL NIL ((- 84 (POSITIVE))) ((+ 84 (NEGATIVE))) ((+ 84 (NIL)))
((- 84 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE
MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE 90 1) (IDIFFERENCE 10240 9816)) MEM*SIZE)
(MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ COUNTER1 90) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA
MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA
(DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 90) (MAPC ADDRLIST (FUNCTION
(LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR)
((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC
DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR
(IPLUS 9816 INCREMENT)) (RPAQ MEM*NEXT.VADR 90) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR)))
(RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR
2) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE
DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ 
DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL
(62 71 76)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL (68 69 70 73 74 75))
(RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ 
DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT 
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES
(84 61 67 2 1)) (RPAQQ DT*PREDICATE.ALL (84 61 67 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ 
DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES
-ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE
2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)))
(PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE NIL))) (PROGN (SETPROPLIST (QUOTE ANY)
(QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS
((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL DT*SORT.NUMBER 1)))) (PROGN (RPAQQ ST*STACK1 (NIL
((X_89 PROGN (DT-VARIABLE.DELETE 89) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_89) ST*SYMBOL.ADDRESSES)))) ((X_88
PROGN (DT-VARIABLE.DELETE 88) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_88) ST*SYMBOL.ADDRESSES)))) ((X_87 PROGN
(DT-VARIABLE.DELETE 87) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_87) ST*SYMBOL.ADDRESSES)))) ((X_86 PROGN (
DT-VARIABLE.DELETE 86) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_86) ST*SYMBOL.ADDRESSES)))) ((X_85 PROGN (
DT-VARIABLE.DELETE 85) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_85) ST*SYMBOL.ADDRESSES)))) NIL NIL NIL ((OUTNUMBER
PROGN (DT-PREDICATE.DELETE 84) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE OUTNUMBER) ST*SYMBOL.ADDRESSES))) (X_83
PROGN (DT-VARIABLE.DELETE 83) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_83) ST*SYMBOL.ADDRESSES))) (X_82 PROGN
(DT-VARIABLE.DELETE 82) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_82) ST*SYMBOL.ADDRESSES))) (X_81 PROGN (
DT-VARIABLE.DELETE 81) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_81) ST*SYMBOL.ADDRESSES))) (X_80 PROGN (
DT-VARIABLE.DELETE 80) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_80) ST*SYMBOL.ADDRESSES))) (X_79 PROGN (
DT-VARIABLE.DELETE 79) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_79) ST*SYMBOL.ADDRESSES)))) NIL NIL NIL ((X_78
PROGN (DT-VARIABLE.DELETE 78) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_78) ST*SYMBOL.ADDRESSES))) (X_77 PROGN
(DT-VARIABLE.DELETE 77) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_77) ST*SYMBOL.ADDRESSES))) (X_38 PROGN (
DT-VARIABLE.DELETE 38) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_38) ST*SYMBOL.ADDRESSES))) (X_37 PROGN (
DT-VARIABLE.DELETE 37) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_37) ST*SYMBOL.ADDRESSES)))) ((X_36 PROGN (
DT-VARIABLE.DELETE 36) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_36) ST*SYMBOL.ADDRESSES))) (X_35 PROGN (
DT-VARIABLE.DELETE 35) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_35) ST*SYMBOL.ADDRESSES))) (X_32 PROGN (
DT-VARIABLE.DELETE 32) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_32) ST*SYMBOL.ADDRESSES))) (X_31 PROGN (
DT-VARIABLE.DELETE 31) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_31) ST*SYMBOL.ADDRESSES)))) ((X_30 PROGN (
DT-VARIABLE.DELETE 30) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_30) ST*SYMBOL.ADDRESSES))) (X_29 PROGN (
DT-VARIABLE.DELETE 29) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_29) ST*SYMBOL.ADDRESSES))) (X_28 PROGN (
DT-VARIABLE.DELETE 28) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_28) ST*SYMBOL.ADDRESSES))) (X_27 PROGN (
DT-VARIABLE.DELETE 27) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_27) ST*SYMBOL.ADDRESSES)))) ((X_26 PROGN (
DT-VARIABLE.DELETE 26) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_26) ST*SYMBOL.ADDRESSES))) (X_25 PROGN (
DT-VARIABLE.DELETE 25) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_25) ST*SYMBOL.ADDRESSES))) (X_24 PROGN (
DT-VARIABLE.DELETE 24) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_24) ST*SYMBOL.ADDRESSES))) (X_23 PROGN (
DT-VARIABLE.DELETE 23) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_23) ST*SYMBOL.ADDRESSES)))) ((X_22 PROGN (
DT-VARIABLE.DELETE 22) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_22) ST*SYMBOL.ADDRESSES))) (X_21 PROGN (
DT-VARIABLE.DELETE 21) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) ST*SYMBOL.ADDRESSES))) (X_20 PROGN (
DT-VARIABLE.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_20) ST*SYMBOL.ADDRESSES))) (X_19 PROGN (
DT-VARIABLE.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_19) ST*SYMBOL.ADDRESSES)))) ((X_16 PROGN (
DT-VARIABLE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES))) (X_15 PROGN (
DT-VARIABLE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_15) ST*SYMBOL.ADDRESSES))) (X_14 PROGN (
DT-VARIABLE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES))) (X_13 PROGN (
DT-VARIABLE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_13) ST*SYMBOL.ADDRESSES)))) ((X_49 PROGN (
DT-VARIABLE.DELETE 49) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_49) ST*SYMBOL.ADDRESSES))) (X_50 PROGN (
DT-VARIABLE.DELETE 50) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_50) ST*SYMBOL.ADDRESSES))) (X_51 PROGN (
DT-VARIABLE.DELETE 51) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_51) ST*SYMBOL.ADDRESSES))) (X_52 PROGN (
DT-VARIABLE.DELETE 52) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_52) ST*SYMBOL.ADDRESSES)))) ((X_53 PROGN (
DT-VARIABLE.DELETE 53) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_53) ST*SYMBOL.ADDRESSES))) (X_54 PROGN (
DT-VARIABLE.DELETE 54) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_54) ST*SYMBOL.ADDRESSES))) (X_55 PROGN (
DT-VARIABLE.DELETE 55) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_55) ST*SYMBOL.ADDRESSES))) (X_56 PROGN (
DT-VARIABLE.DELETE 56) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_56) ST*SYMBOL.ADDRESSES)))) ((X_57 PROGN (
DT-VARIABLE.DELETE 57) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_57) ST*SYMBOL.ADDRESSES))) (X_58 PROGN (
DT-VARIABLE.DELETE 58) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_58) ST*SYMBOL.ADDRESSES))) (X_59 PROGN (
DT-VARIABLE.DELETE 59) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_59) ST*SYMBOL.ADDRESSES))) (X_60 PROGN (
DT-VARIABLE.DELETE 60) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_60) ST*SYMBOL.ADDRESSES)))) ((REACHABLE PROGN
(DT-PREDICATE.DELETE 61) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE REACHABLE) ST*SYMBOL.ADDRESSES))) (RIGHT PROGN
(DT-CONSTANT.DELETE 62) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE RIGHT) ST*SYMBOL.ADDRESSES))) (X_63 PROGN (
DT-VARIABLE.DELETE 63) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_63) ST*SYMBOL.ADDRESSES))) (X_64 PROGN (
DT-VARIABLE.DELETE 64) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_64) ST*SYMBOL.ADDRESSES))) (X_65 PROGN (
DT-VARIABLE.DELETE 65) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_65) ST*SYMBOL.ADDRESSES))) (X_66 PROGN (
DT-VARIABLE.DELETE 66) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_66) ST*SYMBOL.ADDRESSES)))) NIL NIL NIL ((POSSIBLE
PROGN (DT-PREDICATE.DELETE 67) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE POSSIBLE) ST*SYMBOL.ADDRESSES))) (
MISSIONARIES.RIGHT PROGN (DT-FUNCTION.DELETE 68) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE MISSIONARIES.RIGHT)
ST*SYMBOL.ADDRESSES))) (CANNIBALS.RIGHT PROGN (DT-FUNCTION.DELETE 69) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
CANNIBALS.RIGHT) ST*SYMBOL.ADDRESSES))) (BOAT PROGN (DT-FUNCTION.DELETE 70) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE BOAT) ST*SYMBOL.ADDRESSES))) (LEFT PROGN (DT-CONSTANT.DELETE 71) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
LEFT) ST*SYMBOL.ADDRESSES))) (CANNIBALS.LEFT PROGN (DT-FUNCTION.DELETE 73) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE CANNIBALS.LEFT) ST*SYMBOL.ADDRESSES))) (MISSIONARIES.LEFT PROGN (DT-FUNCTION.DELETE 74) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE MISSIONARIES.LEFT) ST*SYMBOL.ADDRESSES))) (S PROGN (DT-FUNCTION.DELETE 75) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE S) ST*SYMBOL.ADDRESSES))) (0 PROGN (DT-CONSTANT.DELETE 76) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE 0) ST*SYMBOL.ADDRESSES)))) NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY .
T) (TRUE . 1) (FALSE . 2) (0 . 76) (S . 75) (MISSIONARIES.LEFT . 74) (CANNIBALS.LEFT . 73) (LEFT . 71) (BOAT .
70) (CANNIBALS.RIGHT . 69) (MISSIONARIES.RIGHT . 68) (POSSIBLE . 67) (X_66 . 66) (X_65 . 65) (X_64 . 64) (X_63
. 63) (RIGHT . 62) (REACHABLE . 61) (X_60 . 60) (X_59 . 59) (X_58 . 58) (X_57 . 57) (X_56 . 56) (X_55 . 55) (X_54
. 54) (X_53 . 53) (X_52 . 52) (X_51 . 51) (X_50 . 50) (X_49 . 49) (X_13 . 13) (X_14 . 14) (X_15 . 15) (X_16 . 16)
(X_19 . 19) (X_20 . 20) (X_21 . 21) (X_22 . 22) (X_23 . 23) (X_24 . 24) (X_25 . 25) (X_26 . 26) (X_27 . 27) (X_28
. 28) (X_29 . 29) (X_30 . 30) (X_31 . 31) (X_32 . 32) (X_35 . 35) (X_36 . 36) (X_37 . 37) (X_38 . 38) (X_77 . 77)
(X_78 . 78) (X_79 . 79) (X_80 . 80) (X_81 . 81) (X_82 . 82) (X_83 . 83) (OUTNUMBER . 84) (X_85 . 85) (X_86 . 86)
(X_87 . 87) (X_88 . 88) (X_89 . 89))))))))
STOP
 

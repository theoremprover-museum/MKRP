(COND ((FMT-LOAD " 3-SEP-84 13:57:44" NIL (((*) COMMENT COMMENT) ((* If the dorkentaff does not nurkel, then the
chittafrithy) COMMENT COMMENT) ((* does not loptahop. If the almzootle either loptahops or) COMMENT COMMENT) ((*
knafters, then the dorkentaff nurkels. If the chitta-) COMMENT COMMENT) ((* frithy does not meave, then the almzootle
knafters.) COMMENT COMMENT) ((* If the bastelwurp loptahops, then the almzootle does not) COMMENT COMMENT) ((*
nurkel. If the bastelwurp does not nurkel, then the) COMMENT COMMENT) ((* almzootle nurkels.) COMMENT COMMENT)
((* Each is busy doing exactly one of the things mentioned,) COMMENT COMMENT) ((* and no two do the same.) COMMENT
COMMENT) ((* Now who is doing what?) COMMENT COMMENT) ((*) COMMENT COMMENT) ((*) COMMENT COMMENT) ((*) COMMENT
COMMENT) ((*) COMMENT COMMENT) ((* Encoding:) COMMENT COMMENT) ((* A = almzootle, B = bastelwurp, C = chittafrithy,
D = dorkentaff;) COMMENT COMMENT) ((* K = to knafter, L = to loptahop, M = to meave, N = to nurkel;) COMMENT COMMENT)
((* P = {A, B, C, D} set of all persons;) COMMENT COMMENT) ((* O = {K, L, M, N} set of all occupations;) COMMENT
COMMENT) ((* DO (X Y) iff person x does occupation y.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((*) COMMENT COMMENT)
((*) COMMENT COMMENT) ((TYPE A,B,C,D : P) (+ 1 NIL) TYPE) ((TYPE K,L,M,N : O) (+ 1 NIL) TYPE) ((TYPE DO (P O))
(+ 1 NIL) TYPE) ((NOT DO (D N) IMPL NOT DO (C L)) (IMPL (NOT (+ 23 (18 22) NIL)) (NOT (+ 23 (17 20) NIL))) 
QUANTIFICATION) ((DO (A L) OR DO (A K) IMPL DO (D N)) (IMPL (OR (+ 23 (15 20) NIL) (+ 23 (15 19) NIL)) (+ 23 (18
22) NIL)) QUANTIFICATION) ((NOT DO (C M) IMPL DO (A K)) (IMPL (NOT (+ 23 (17 21) NIL)) (+ 23 (15 19) NIL)) 
QUANTIFICATION) ((DO (B L) IMPL NOT DO (A N)) (IMPL (+ 23 (14 20) NIL) (NOT (+ 23 (15 22) NIL))) QUANTIFICATION)
((NOT DO (B N) IMPL DO (A N)) (IMPL (NOT (+ 23 (14 22) NIL)) (+ 23 (15 22) NIL)) QUANTIFICATION) ((ALL X:P (DO
(X K) OR DO (X L) OR DO (X M) OR DO (X N)) AND NOT (DO (X K) AND DO (X L)) AND NOT (DO (X K) AND DO (X M)) AND
NOT (DO (X K) AND DO (X N)) AND NOT (DO (X L) AND DO (X M)) AND NOT (DO (X L) AND DO (X N)) AND NOT (DO (X M) AND
DO (X N))) (ALL 24 (AND (OR (+ 23 (24 19) NIL) (OR (+ 23 (24 20) NIL) (OR (+ 23 (24 21) NIL) (+ 23 (24 22) NIL))))
(AND (NOT (AND (+ 23 (24 19) NIL) (+ 23 (24 20) NIL))) (AND (NOT (AND (+ 23 (24 19) NIL) (+ 23 (24 21) NIL))) (AND
(NOT (AND (+ 23 (24 19) NIL) (+ 23 (24 22) NIL))) (AND (NOT (AND (+ 23 (24 20) NIL) (+ 23 (24 21) NIL))) (AND (NOT
(AND (+ 23 (24 20) NIL) (+ 23 (24 22) NIL))) (NOT (AND (+ 23 (24 21) NIL) (+ 23 (24 22) NIL)))))))))) QUANTIFICATION)
((ALL Y:O NOT (DO (A Y) AND DO (B Y)) AND NOT (DO (A Y) AND DO (C Y)) AND NOT (DO (A Y) AND DO (D Y)) AND NOT (DO
(B Y) AND DO (C Y)) AND NOT (DO (B Y) AND DO (D Y)) AND NOT (DO (C Y) AND DO (D Y))) (ALL 25 (AND (NOT (AND (+
23 (15 25) NIL) (+ 23 (14 25) NIL))) (AND (NOT (AND (+ 23 (15 25) NIL) (+ 23 (17 25) NIL))) (AND (NOT (AND (+ 23
(15 25) NIL) (+ 23 (18 25) NIL))) (AND (NOT (AND (+ 23 (14 25) NIL) (+ 23 (17 25) NIL))) (AND (NOT (AND (+ 23 (14
25) NIL) (+ 23 (18 25) NIL))) (NOT (AND (+ 23 (17 25) NIL) (+ 23 (18 25) NIL))))))))) QUANTIFICATION))) (COND (
ST*LOAD.FLAG (PROGN (PROGN (DT-RESET) (PROG ((ADDRLIST (QUOTE (10150 10155 10170 10175 10180 10185 10190 10195
10200 ATP.MEMORY.NIL 10210 10205 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 10225 10240))) (DATALIST
(QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL
NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL)))
((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 A P (DT*ST-KIND NIL) CONSTANT 5 B P (DT*ST-KIND NIL) CONSTANT
5 C P (DT*ST-KIND NIL) CONSTANT 5 D P (DT*ST-KIND NIL) CONSTANT 5 K O (DT*ST-KIND NIL) CONSTANT 5 L O (DT*ST-KIND
NIL) CONSTANT 5 M O (DT*ST-KIND NIL) CONSTANT 5 N O (DT*ST-KIND NIL) CONSTANT 15 DO NIL NIL (P O) NIL NIL ((- 23
(POSITIVE))) ((+ 23 (NEGATIVE))) ((+ 23 (NIL))) ((- 23 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 P NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 O NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE
10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE 26 1) (IDIFFERENCE 10240 10145)) MEM*SIZE)
(MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ COUNTER1 26) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA
MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA
(DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 26) (MAPC ADDRLIST (FUNCTION
(LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR)
((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC
DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR
(IPLUS 10145 INCREMENT)) (RPAQ MEM*NEXT.VADR 26) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR)))
(RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (O P ANY)) (RPAQQ
DT*SORT.NR 1) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE 
DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS 
DT*COMPLETION.SORT)) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (22 21
20 19 18 17 14 15)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL NIL) (RPAQQ
DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ 
DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT 
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS (= := =: :=:)) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (23 2 1))
(RPAQQ DT*PREDICATE.ALL (23 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME
POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES
-SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ 
DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++))) (PROGN)
(PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE NIL))) (PROGN (SETPROPLIST (QUOTE O) (QUOTE (
DT*INVERSE.TRANSITIVE.CLOSURE (O ANY) DT*DIRECT.SUPERSORTS (ANY) DT*MINIMAL.SUBSORTS (O) DT*MAX.SUBSORTS ((O O)
(P) (ANY O)) DT*TRANSITIVE.CLOSURE (O) DT*DIRECT.SUBSORTS NIL NIL NIL))) (SETPROPLIST (QUOTE P) (QUOTE (
DT*INVERSE.TRANSITIVE.CLOSURE (P ANY) DT*DIRECT.SUPERSORTS (ANY) DT*MINIMAL.SUBSORTS (P) DT*MAX.SUBSORTS ((O) (P
P) (ANY P)) DT*TRANSITIVE.CLOSURE (P) DT*DIRECT.SUBSORTS NIL NIL NIL))) (SETPROPLIST (QUOTE ANY) (QUOTE (
DT*LEAST.SUPERSORTS ((ANY ANY)) DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS
(P) DT*MAX.SUBSORTS ((O O) (P P) (ANY ANY)) DT*TRANSITIVE.CLOSURE (O P ANY) DT*DIRECT.SUBSORTS (O P)))))) (RPAQQ
ST*STACK1 (NIL ((X_25 PROGN (DT-VARIABLE.DELETE 25) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_25) ST*SYMBOL.ADDRESSES)
)) (O DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE O) (QUOTE (ANY))) (O PUTPROP (QUOTE O) (QUOTE NIL))) ((X_24 PROGN
(DT-VARIABLE.DELETE 24) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_24) ST*SYMBOL.ADDRESSES))) (P 
DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE P) (QUOTE (ANY))) (P PUTPROP (QUOTE P) (QUOTE NIL))) NIL NIL NIL NIL NIL
((DO PROGN (DT-PREDICATE.DELETE 23) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE DO) ST*SYMBOL.ADDRESSES))) (O 
DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE O) (QUOTE (ANY))) (O PUTPROP (QUOTE O) (QUOTE NIL)) (P 
DT-SORT.ST.PUT.DIRECT.SUPERSORTS (QUOTE P) (QUOTE (ANY))) (P PUTPROP (QUOTE P) (QUOTE NIL))) ((N PROGN (
DT-CONSTANT.DELETE 22) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE N) ST*SYMBOL.ADDRESSES))) (M PROGN (DT-CONSTANT.DELETE
21) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE M) ST*SYMBOL.ADDRESSES))) (L PROGN (DT-CONSTANT.DELETE 20) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE L) ST*SYMBOL.ADDRESSES))) (K PROGN (DT-CONSTANT.DELETE 19) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE K) ST*SYMBOL.ADDRESSES))) (O PROGN (DT-SORT.ST.REMOVE (QUOTE O)) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE O) ST*SYMBOL.ADDRESSES))) (O REMPROP (QUOTE O) (QUOTE ST*DATA))) ((D PROGN
(DT-CONSTANT.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE D) ST*SYMBOL.ADDRESSES))) (C PROGN (
DT-CONSTANT.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE C) ST*SYMBOL.ADDRESSES))) (B PROGN (DT-CONSTANT.DELETE
14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B) ST*SYMBOL.ADDRESSES))) (A PROGN (DT-CONSTANT.DELETE 15) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) ST*SYMBOL.ADDRESSES))) (P PROGN (DT-SORT.ST.REMOVE (QUOTE P)) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE P) ST*SYMBOL.ADDRESSES))) (P REMPROP (QUOTE P) (QUOTE ST*DATA))) NIL NIL NIL
NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE
2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1)
(RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY))
(RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA)))))
(RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_14 . 14) (X_15 . 15) (P . T) (A . 15) (B .
14) (C . 17) (D . 18) (O . T) (K . 19) (L . 20) (M . 21) (N . 22) (DO . 23) (X_24 . 24) (X_25 . 25))))))))
STOP
 

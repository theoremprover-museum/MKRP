;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((* SORTS *) (SORT I,ITO,IXITO : ANY) (TYPE A[IXITO] (IXITO I I)) (TYPE A[ITO] (ITO I)) (* DEFINITION OF COMPOSITION *) (TYPE COMP (IXITO IXITO) : IXITO) (ALL RHO : IXITO ALL SIGMA : IXITO (ALL X : I ALL Y : I (EX Z : I A[IXITO] (RHO X Z) AND A[IXITO] (SIGMA Z Y)) EQV A[IXITO] (COMP (RHO SIGMA) X Y))))) (QUOTE (COMMENT (+ 0 NIL NIL) (+ 0 NIL NIL) (+ 0 NIL NIL) COMMENT (+ 0 NIL NIL) (ALL 6 (ALL 7 (ALL 8 (ALL 9 (EQV (EX 10 (AND (+ 3 (6 8 10) (KIND (EQV T 80))) (+ 3 (7 10 9) (KIND (EQV T 80))))) (+ 3 ((5 6 7) 8 9) (KIND (EQV NIL 80)))))))))) (QUOTE ((* THEOREM *) (ALL RHO : IXITO ALL SIGMA : IXITO ALL TAU : IXITO ALL X : I ALL Y : I A[IXITO] (COMP (COMP (RHO SIGMA) TAU) X Y) EQV A[IXITO] (COMP (RHO COMP (SIGMA TAU)) X Y)))) (QUOTE (COMMENT (ALL 11 (ALL 12 (ALL 13 (ALL 14 (ALL 15 (EQV (+ 3 ((5 (5 11 12) 13) 14 15) (KIND (EQV T 30))) (+ 3 ((5 11 (5 12 13)) 14 15) (KIND (EQV NIL 30))))))))))) (QUOTE ("Edit:     Axioms and Theorems edited: 14-MAY,1992 11:10 ")) (PROGN(PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (9865 9870 9875 9880 9885 9890 9895 9900 9905 9910 9924 9939 9954 9969 9984 9999))) (DATALIST (QUOTE (15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE))) ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC))) ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "A[IXITO]" NIL NIL (IXITO I I) NIL NIL ((- 3 (POSITIVE))) ((+ 3 (NEGATIVE))) ((+ 3 (NIL))) ((- 3 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "A[ITO]" NIL NIL (ITO I) NIL NIL ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE))) ((+ 4 (NIL))) ((- 4 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14 "COMP" NIL IXITO (IXITO IXITO) NIL NIL NIL NIL NIL 2 IXITO (DT*ST-KIND NIL) FUNCTION 5 IXITO NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 IXITO NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 I NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 I NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 I NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 IXITO NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 IXITO NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 IXITO NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 I NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 I NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (- MEM*SIZE 10000)) COUNTER1) (MEM-RESET) (COND ((> MEM*SIZE 10000) (SETQ COUNTER1 16) (MAPC (FUNCTION (LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) (COND ((EQL RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((EQL (QUOTE END) RADDR) RADDR) ((OR (EQL RADDR 0) (MINUSP RADDR)) RADDR) (T (+ RADDR INCREMENT)))))) ADDRLIST) (SETQ COUNTER1 MEM*SIZE) (MAPC (FUNCTION (LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA))) DATALIST)) (T (UNLESS (= MEM*SIZE 10000) (MEM-INITIALIZE 10000)) (SETQ COUNTER1 16) (MAPC (FUNCTION (LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))) ADDRLIST) (SETQ COUNTER1 MEM*SIZE) (MAPC (FUNCTION (LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA))) DATALIST))) (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9860 INCREMENT) 9860)) (SETQ MEM*NEXT.VADR 16 MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1) MEM*FIRST.REUSABLE.VADR NIL MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (IXITO ITO I ANY))) (SETQ DT*SORT.NR (QUOTE 5)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*ELEMENT.PREDICATE (QUOTE NIL)) (SETQ DT*OMEGA.CONSTANT (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE NIL)) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE (5))) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (4 3 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (4 3 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE IXITO) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE IXITO) (QUOTE DT*SORT.NUMBER)) (QUOTE 4)) (SETF (GET (QUOTE IXITO) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (IXITO))) (SETF (GET (QUOTE IXITO) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((IXITO IXITO) (ITO) (I) (ANY IXITO)))) (SETF (GET (QUOTE IXITO) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (IXITO))) (SETF (GET (QUOTE IXITO) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE IXITO) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (IXITO ANY)))) (PROGN (SETF (GET (QUOTE ITO) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ITO) (QUOTE DT*SORT.NUMBER)) (QUOTE 3)) (SETF (GET (QUOTE ITO) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ITO))) (SETF (GET (QUOTE ITO) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((IXITO) (ITO ITO) (I) (ANY ITO)))) (SETF (GET (QUOTE ITO) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ITO))) (SETF (GET (QUOTE ITO) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ITO) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ITO ANY)))) (PROGN (SETF (GET (QUOTE I) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE I) (QUOTE DT*SORT.NUMBER)) (QUOTE 2)) (SETF (GET (QUOTE I) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (I))) (SETF (GET (QUOTE I) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((IXITO) (ITO) (I I) (ANY I)))) (SETF (GET (QUOTE I) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (I))) (SETF (GET (QUOTE I) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE I) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (I ANY)))) (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (IXITO ITO I))) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (IXITO ITO I ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((IXITO IXITO) (ITO ITO) (I I) (ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ITO I))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
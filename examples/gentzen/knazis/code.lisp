;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-

(CONSTRUCTION  "Unix" "20-MAY,1992 19:30" 
              ("Edit:     Axioms and Theorems edited: 20-MAY,1992 19:29 "
               ))

(AXIOMS.INFIX    ((ALL X KNAZI (X) IMPL (BREISE (X) IMPL PLANDIEREN (X)))
                  (ALL X KNAZI (X) AND PLITZE (X) IMPL DEFFISKNASE (X))
                  (ALL X KNAZI (X) AND JERPEN (X) IMPL FRALIEREN (X))
                  (ALL X KNAZI (X) AND DEFFISKNASE (X) IMPL BEDRAUST (X))
                  (ALL X KNAZI (X) AND QUISTELN (X) IMPL JERPEN (X))
                  (ALL X KNAZI (X) AND NOT BREISE (X) IMPL NOT BEDRAUST (X))
                  (ALL X PNUNK (X) IMPL KNAZI (X) AND QUISTELN (X))
                  (NOT (EX X KNAZI (X) AND PLANDIEREN (X) AND FRALIEREN (X)))))

(THEOREMS.INFIX ((NOT (EX X PNUNK (X) AND PLITZE (X)))))

(AXIOMS.PREFIX   ((ALL 3 (IMPL (+ 4 (3) NIL) (IMPL (+ 5 (3) NIL) (+ 6 (3) NIL))))
                  (ALL 7 (IMPL (AND (+ 4 (7) NIL) (+ 8 (7) NIL)) (+ 9 (7) NIL)))
                  (ALL 10 (IMPL (AND (+ 4 (10) NIL) (+ 11 (10) NIL)) (+ 12 (10) NIL)))
                  (ALL 13 (IMPL (AND (+ 4 (13) NIL) (+ 9 (13) NIL)) (+ 14 (13) NIL)))
                  (ALL 15 (IMPL (AND (+ 4 (15) NIL) (+ 16 (15) NIL)) (+ 11 (15) NIL)))
                  (ALL 17 (IMPL (AND (+ 4 (17) NIL) (NOT (+ 5 (17) NIL))) (NOT (+ 14 (17) NIL))))
                  (ALL 18 (IMPL (+ 19 (18) NIL) (AND (+ 4 (18) NIL) (+ 16 (18) NIL))))
                  (NOT (EX 20 (AND (+ 4 (20) NIL) (AND (+ 6 (20) NIL) (+ 12 (20) NIL)))))))

(THEOREMS.PREFIX ((NOT (EX 21 (AND (+ 19 (21) NIL) (+ 8 (21) NIL))))))

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 0)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . 0)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS . T)
         )

(LINK.COLOURS (R RIW RD S SI SIW SID T TI TIW P PIW PD RIWD))

(AXIOMS (START.TIME 6800000)
        (PARTIAL   (CLAUSE 25 R.= AXIOM ((23 . ANY)) ((+ 2 (23 23)) ))(CLAUSE 27 A1 AXIOM ((18 . ANY))
                         ((- 19 (18)) (+ 4 (18)) )))
        (PARTIAL   (CLAUSE 29 A2 AXIOM ((22 . ANY))
                         ((- 19 (22)) (+ 16 (22)) )))
        (PARTIAL   (CLAUSE 32 A3 AXIOM ((3 . ANY))
                         ((- 4 (3)) (- 5 (3)) (+ 6 (3)) )))
        (PARTIAL   (CLAUSE 35 A4 AXIOM ((7 . ANY))
                         ((- 4 (7)) (- 8 (7)) (+ 9 (7)) )))
        (PARTIAL   (CLAUSE 39 A5 AXIOM ((10 . ANY))
                         ((- 4 (10)) (- 11 (10)) (+ 12 (10)) )))
        (PARTIAL   (CLAUSE 44 A6 AXIOM ((13 . ANY))
                         ((- 4 (13)) (- 9 (13)) (+ 14 (13)) )))
        (PARTIAL   (CLAUSE 51 A7 AXIOM ((15 . ANY))
                         ((- 4 (15)) (- 16 (15)) (+ 11 (15)) )))
        (PARTIAL   (CLAUSE 60 A8 AXIOM ((17 . ANY))
                         ((- 4 (17)) (+ 5 (17)) (- 14 (17)) )))
        (PARTIAL   (CLAUSE 70 A9 AXIOM ((20 . ANY))
                         ((- 4 (20)) (- 6 (20)) (- 12 (20)) )))
        (END.TIME 9400000)
        (FINAL 25 27 29 32 35 39 44 51 60 70)
        (SYMBOLS 
                 (LET (NEW.ADDRESS)
          (LIST (CONS   19 (DT-PREDICATE.CREATE "PNUNK" '(ANY)))
                         (CONS   16 (DT-PREDICATE.CREATE "QUISTELN" '(ANY)))
                         (CONS   14 (DT-PREDICATE.CREATE "BEDRAUST" '(ANY)))
                         (CONS   12 (DT-PREDICATE.CREATE "FRALIEREN" '(ANY)))
                         (CONS   11 (DT-PREDICATE.CREATE "JERPEN" '(ANY)))
                         (CONS    9 (DT-PREDICATE.CREATE "DEFFISKNASE" '(ANY)))
                         (CONS    8 (DT-PREDICATE.CREATE "PLITZE" '(ANY)))
                         (CONS    6 (DT-PREDICATE.CREATE "PLANDIEREN" '(ANY)))
                         (CONS    5 (DT-PREDICATE.CREATE "BREISE" '(ANY)))
                         (CONS    4 (DT-PREDICATE.CREATE "KNAZI" '(ANY)))
                         (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
                         (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                         (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED))))))
        (RESULT))

(THEOREMS (SPLITPART.IDENTIFIER 1)
          (START.TIME 9470000)
          (PARTIAL   (CLAUSE 21 T10 THEOREM () ((+ 19 (80)) )))
          (PARTIAL   (CLAUSE 83 T11 THEOREM () ((+ 8 (80)) )))
          (INITIAL   (CLAUSE 25 R.= AXIOM ((23 . ANY)) ((+ 2 (23 23)) ))
(CLAUSE 27 A1 AXIOM ((18 . ANY))
                           ((- 19 (18)) (+ 4 (18)) ))
(CLAUSE 29 A2 AXIOM ((22 . ANY))
                           ((- 19 (22)) (+ 16 (22)) ))
(CLAUSE 32 A3 AXIOM ((3 . ANY))
                           ((- 4 (3)) (- 5 (3)) (+ 6 (3)) ))
(CLAUSE 35 A4 AXIOM ((7 . ANY))
                           ((- 4 (7)) (- 8 (7)) (+ 9 (7)) ))
(CLAUSE 39 A5 AXIOM ((10 . ANY))
                           ((- 4 (10)) (- 11 (10)) (+ 12 (10)) ))
(CLAUSE 44 A6 AXIOM ((13 . ANY))
                           ((- 4 (13)) (- 9 (13)) (+ 14 (13)) ))
(CLAUSE 51 A7 AXIOM ((15 . ANY))
                           ((- 4 (15)) (- 16 (15)) (+ 11 (15)) ))
(CLAUSE 60 A8 AXIOM ((17 . ANY))
                           ((- 4 (17)) (+ 5 (17)) (- 14 (17)) ))
(CLAUSE 70 A9 AXIOM ((20 . ANY))
                           ((- 4 (20)) (- 6 (20)) (- 12 (20)) ))
(CLAUSE 21 T10 THEOREM () ((+ 19 (80)) ))
(CLAUSE 83 T11 THEOREM () ((+ 8 (80)) )) )
          (END.TIME 10680000)
          (FINAL 25 27 29 32 35 39 44 51 60 70 21 83)
          (SYMBOLS 
                   (LET (NEW.ADDRESS)
          (LIST (CONS   19 (DT-PREDICATE.CREATE "PNUNK" '(ANY)))
                           (CONS   16 (DT-PREDICATE.CREATE "QUISTELN" '(ANY)))
                           (CONS   14 (DT-PREDICATE.CREATE "BEDRAUST" '(ANY)))
                           (CONS   12 (DT-PREDICATE.CREATE "FRALIEREN" '(ANY)))
                           (CONS   11 (DT-PREDICATE.CREATE "JERPEN" '(ANY)))
                           (CONS    9 (DT-PREDICATE.CREATE "DEFFISKNASE" '(ANY)))
                           (CONS    8 (DT-PREDICATE.CREATE "PLITZE" '(ANY)))
                           (CONS    6 (DT-PREDICATE.CREATE "PLANDIEREN" '(ANY)))
                           (CONS    5 (DT-PREDICATE.CREATE "BREISE" '(ANY)))
                           (CONS    4 (DT-PREDICATE.CREATE "KNAZI" '(ANY)))
                           (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
                           (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (CONS   80 (DT-CONSTANT.CREATE "c_1" 'ANY)))))
          (RESULT))
(indices ((83 26) (21 25) (70 22 23 24) (60 16 17 18) (51 13 14 15) (44 10 11 12) (39 7 8 9) (35 4 5 6) (32 1 2 3) (29 19 21) (27 19 20) (25 NIL)))

(SPLITPARTS "Unix" "20-MAY,1992 19:30" NIL)

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 0)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . 0)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS . T)
         )

(REFUTATION (START.TIME 11010000)

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 0)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . 0)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS . T)
         )
            (INITIAL   (CLAUSE 25 R.= AXIOM ((23 . ANY)) ((+ 2 (23 23)) ))
(CLAUSE 27 A1 AXIOM ((18 . ANY))
                             ((- 19 (18)) (+ 4 (18)) ))
(CLAUSE 29 A2 AXIOM ((22 . ANY))
                             ((- 19 (22)) (+ 16 (22)) ))
(CLAUSE 32 A3 AXIOM ((3 . ANY))
                             ((- 4 (3)) (- 5 (3)) (+ 6 (3)) ))
(CLAUSE 35 A4 AXIOM ((7 . ANY))
                             ((- 4 (7)) (- 8 (7)) (+ 9 (7)) ))
(CLAUSE 39 A5 AXIOM ((10 . ANY))
                             ((- 4 (10)) (- 11 (10)) (+ 12 (10)) ))
(CLAUSE 44 A6 AXIOM ((13 . ANY))
                             ((- 4 (13)) (- 9 (13)) (+ 14 (13)) ))
(CLAUSE 51 A7 AXIOM ((15 . ANY))
                             ((- 4 (15)) (- 16 (15)) (+ 11 (15)) ))
(CLAUSE 60 A8 AXIOM ((17 . ANY))
                             ((- 4 (17)) (+ 5 (17)) (- 14 (17)) ))
(CLAUSE 70 A9 AXIOM ((20 . ANY))
                             ((- 4 (20)) (- 6 (20)) (- 12 (20)) ))
(CLAUSE 21 T10 THEOREM () ((+ 19 (80)) ))
(CLAUSE 83 T11 THEOREM () ((+ 8 (80)) )) )
            (OPERATION (CLAUSE 86 R1 (35 83) ()
                               ((- 4 (80)) (+ 9 (80)) ))
                       (RESOLUTION 83 1 35 2 NIL (7 80) 86))
            (OPERATION (CLAUSE 86 R1 (35 83) ()
                               ((- 4 (80)) (+ 9 (80)) ))
                       (REPLACEMENT.OPERATION (18 80) (86 27 21)
  (((86 . 1) (27 . 2) NIL) ((27 . 1) (21 . 1) NIL))
  (NIL NIL)
  NIL))
            (OPERATION (CLAUSE 96 R2 (44 86) ()
                               ((- 4 (80)) (+ 14 (80)) ))
                       (RESOLUTION 86 1 44 2 NIL (13 80) 96))
            (OPERATION (CLAUSE 96 R2 (44 86) ()
                               ((- 4 (80)) (+ 14 (80)) ))
                       (REPLACEMENT.OPERATION (18 80) (96 27 21)
  (((96 . 1) (27 . 2) NIL) ((27 . 1) (21 . 1) NIL))
  (NIL NIL)
  NIL))
            (OPERATION (CLAUSE 67 R3 (60 96) ()
                               ((- 4 (80)) (+ 5 (80)) ))
                       (RESOLUTION 96 1 60 3 NIL (17 80) 67))
            (OPERATION (CLAUSE 67 R3 (60 96) ()
                               ((- 4 (80)) (+ 5 (80)) ))
                       (REPLACEMENT.OPERATION (18 80) (67 27 21)
  (((67 . 1) (27 . 2) NIL) ((27 . 1) (21 . 1) NIL))
  (NIL NIL)
  NIL))
            (OPERATION (CLAUSE 90 R4 (32 67) ()
                               ((- 4 (80)) (+ 6 (80)) ))
                       (RESOLUTION 67 1 32 2 NIL (3 80) 90))
            (OPERATION (CLAUSE 90 R4 (32 67) ()
                               ((- 4 (80)) (+ 6 (80)) ))
                       (REPLACEMENT.OPERATION (18 80) (90 27 21)
  (((90 . 1) (27 . 2) NIL) ((27 . 1) (21 . 1) NIL))
  (NIL NIL)
  NIL))
            (OPERATION (CLAUSE 49 R5 (70 90) ()
                               ((- 4 (80)) (- 12 (80)) ))
                       (RESOLUTION 90 1 70 2 NIL (20 80) 49))
            (OPERATION (CLAUSE 49 R5 (70 90) ()
                               ((- 4 (80)) (- 12 (80)) ))
                       (REPLACEMENT.OPERATION (18 80) (49 27 21)
  (((49 . 1) (27 . 2) NIL) ((27 . 1) (21 . 1) NIL))
  (NIL NIL)
  NIL))
            (OPERATION (CLAUSE 41 R6 (49 39) ()
                               ((- 4 (80)) (- 11 (80)) ))
                       (RESOLUTION 39 3 49 1 NIL (10 80) 41))
            (OPERATION (CLAUSE 41 R6 (49 39) ()
                               ((- 4 (80)) (- 11 (80)) ))
                       (REPLACEMENT.OPERATION (18 80) (41 27 21)
  (((41 . 1) (27 . 2) NIL) ((27 . 1) (21 . 1) NIL))
  (NIL NIL)
  NIL))
            (OPERATION (CLAUSE 64 R7 (41 51) ()
                               ((- 4 (80)) (- 16 (80)) ))
                       (RESOLUTION 51 3 41 1 NIL (15 80) 64))
            (OPERATION (CLAUSE 64 R7 (41 51) ()
                               ((- 4 (80)) (- 16 (80)) ))
                       (REPLACEMENT.OPERATION (22 80) (64 29 21)
  (((64 . 2) (29 . 2) NIL) ((29 . 1) (21 . 1) NIL))
  (NIL NIL)
  NIL))
            (OPERATION (CLAUSE 64 R7 (41 51) () ((- 4 (80)) ))
                       (REPLACEMENT.OPERATION (18 80) (64 27 21)
  (((64 . 1) (27 . 2) NIL) ((27 . 1) (21 . 1) NIL))
  (NIL NIL)
  NIL))
            (END.TIME 14760000)
            (SYMBOLS 
                     (LET (NEW.ADDRESS)
          (LIST (CONS   19 (DT-PREDICATE.CREATE "PNUNK" '(ANY)))
                             (CONS   16 (DT-PREDICATE.CREATE "QUISTELN" '(ANY)))
                             (CONS   14 (DT-PREDICATE.CREATE "BEDRAUST" '(ANY)))
                             (CONS   12 (DT-PREDICATE.CREATE "FRALIEREN" '(ANY)))
                             (CONS   11 (DT-PREDICATE.CREATE "JERPEN" '(ANY)))
                             (CONS    9 (DT-PREDICATE.CREATE "DEFFISKNASE" '(ANY)))
                             (CONS    8 (DT-PREDICATE.CREATE "PLITZE" '(ANY)))
                             (CONS    6 (DT-PREDICATE.CREATE "PLANDIEREN" '(ANY)))
                             (CONS    5 (DT-PREDICATE.CREATE "BREISE" '(ANY)))
                             (CONS    4 (DT-PREDICATE.CREATE "KNAZI" '(ANY)))
                             (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
                             (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (CONS   80 (DT-CONSTANT.CREATE "c_1" 'ANY)))))
            (SPLITPART.IDENTIFIER 1)
            (RESULT SUCCESS 64)
)
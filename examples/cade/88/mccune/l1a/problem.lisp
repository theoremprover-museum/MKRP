;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((ALL X A (X X) = X) (ALL X O (X X) = X) (ALL X,Y A (X O (X Y)) = X) (ALL X,Y O (X A (X Y)) = X) (ALL X,Y A (X Y) = A (Y X)) (ALL X,Y O (X Y) = O (Y X)) (ALL X,Y,Z A (X A (Y Z)) = A (A (X Y) Z)) (ALL X,Y,Z O (X O (Y Z)) = O (O (X Y) Z)) (ALL X O (0 X) = X) (ALL X A (1 X) = X) (ALL X A (0 X) = 0) (ALL X O (1 X) = 1) (* MODULAR) (ALL X,Y,Z A (X Z) = X IMPL A (Z O (X Y)) = O (X A (Y Z))) (* COMPLEMENT) (ALL X,Y C (X Y) IMPL A (X Y) = 0) (ALL X,Y C (X Y) IMPL O (X Y) = 1) (ALL X,Y A (X Y) = 0 AND O (X Y) = 1 IMPL C (X Y)) (ALL X,Y UC (X Y) IMPL C (X Y)) (ALL X,Y,Z UC (X Y) AND C (X Z) IMPL Z = Y) (ALL X,Y C (X Y) IMPL UC (X Y) OR C (X F (X Y))) (ALL X,Y C (X Y) AND F (X Y) = Y IMPL UC (X Y)))) (QUOTE ((ALL 3 (+ 2 ((4 3 3) 3) NIL)) (ALL 5 (+ 2 ((6 5 5) 5) NIL)) (ALL 8 (ALL 7 (+ 2 ((4 7 (6 7 8)) 7) NIL))) (ALL 10 (ALL 9 (+ 2 ((6 9 (4 9 10)) 9) NIL))) (ALL 12 (ALL 11 (+ 2 ((4 11 12) (4 12 11)) NIL))) (ALL 14 (ALL 13 (+ 2 ((6 13 14) (6 14 13)) NIL))) (ALL 17 (ALL 16 (ALL 15 (+ 2 ((4 15 (4 16 17)) (4 (4 15 16) 17)) NIL)))) (ALL 20 (ALL 19 (ALL 18 (+ 2 ((6 18 (6 19 20)) (6 (6 18 19) 20)) NIL)))) (ALL 21 (+ 2 ((6 22 21) 21) NIL)) (ALL 23 (+ 2 ((4 24 23) 23) NIL)) (ALL 25 (+ 2 ((4 22 25) 22) NIL)) (ALL 26 (+ 2 ((6 24 26) 24) NIL)) COMMENT (ALL 29 (ALL 28 (ALL 27 (IMPL (+ 2 ((4 27 29) 27) NIL) (+ 2 ((4 29 (6 27 28)) (6 27 (4 28 29))) NIL))))) COMMENT (ALL 31 (ALL 30 (IMPL (+ 32 (30 31) NIL) (+ 2 ((4 30 31) 22) NIL)))) (ALL 34 (ALL 33 (IMPL (+ 32 (33 34) NIL) (+ 2 ((6 33 34) 24) NIL)))) (ALL 36 (ALL 35 (IMPL (AND (+ 2 ((4 35 36) 22) NIL) (+ 2 ((6 35 36) 24) NIL)) (+ 32 (35 36) NIL)))) (ALL 38 (ALL 37 (IMPL (+ 39 (37 38) NIL) (+ 32 (37 38) NIL)))) (ALL 42 (ALL 41 (ALL 40 (IMPL (AND (+ 39 (40 41) NIL) (+ 32 (40 42) NIL)) (+ 2 (42 41) NIL))))) (ALL 44 (ALL 43 (IMPL (+ 32 (43 44) NIL) (OR (+ 39 (43 44) NIL) (+ 32 (43 (45 43 44)) NIL))))) (ALL 47 (ALL 46 (IMPL (AND (+ 32 (46 47) NIL) (+ 2 ((45 46 47) 47) NIL)) (+ 39 (46 47) NIL)))))) (QUOTE ((* THEOREM *) (ALL X,Y,U,V C (X O (U V)) AND C (Y A (U V)) IMPL C (U O (X A (Y V)))))) (QUOTE (COMMENT (ALL 51 (ALL 50 (ALL 49 (ALL 48 (IMPL (AND (+ 32 (48 (6 50 51)) NIL) (+ 32 (49 (4 50 51)) NIL)) (+ 32 (50 (6 48 (4 49 51))) NIL)))))))) (QUOTE ("Edit:     Axioms and Theorems edited: 06-MAY,1992 09:10 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(9667 9672 9677 9682 9687 9692 9706 9711 9716 9721 9726 9731 9746 9751 9756 9761 9766
          9771 9776 9791 9796 9801 9806 9811 9816 9821 9826 9831 9836 9841 9846 9851 9856 9861
          9866 9871 9876 9881 9886 9891 9896 9901 9906 9911 9916 9930 9935 9949 9954 9969 9984
          9999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC)))
          ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 14 "A" NIL ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL)
          FUNCTION 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 "O" NIL ANY (ANY ANY)
          NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL) FUNCTION 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY "0"
          (DT*ST-KIND NIL) CONSTANT 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY
          "1" (DT*ST-KIND NIL) CONSTANT 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5
          ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "C" NIL NIL (ANY ANY) NIL NIL ((- 32 (POSITIVE))) ((+ 32 (NEGATIVE)))
          ((+ 32 (NIL))) ((- 32 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "UC" NIL NIL
          (ANY ANY) NIL NIL ((- 39 (POSITIVE))) ((+ 39 (NEGATIVE))) ((+ 39 (NIL)))
          ((- 39 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 14 "F" NIL ANY (ANY ANY) NIL NIL NIL NIL NIL 2 ANY (DT*ST-KIND NIL)
          FUNCTION 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE))
       (INCREMENT (- MEM*SIZE 10000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 10000)
             (SETQ COUNTER1 52)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 10000)
                 (MEM-INITIALIZE 10000))
               (SETQ COUNTER1 52)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9662 INCREMENT) 9662))
      (SETQ MEM*NEXT.VADR 52
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ANY))) (SETQ DT*SORT.NR (QUOTE 2)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*ELEMENT.PREDICATE (QUOTE NIL)) (SETQ DT*OMEGA.CONSTANT (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (24 22))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE (45 6 4))) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (39 32 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (39 32 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
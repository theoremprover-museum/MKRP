;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-

(CONSTRUCTION  "Unix" "09-JUL,1992 14:12" 
              ("Edit:     Axioms and Theorems edited: 02-APR,1992 08:49 "
               ))

(AXIOMS.INFIX    ((* AXIOMS *)
                  (EX |Z,W| (ALL |X,Y| F (X Y) EQV (X = Z) AND Y = W))))

(THEOREMS.INFIX ((* THEOREMS *)
                  (EX Z (ALL X (EX W (ALL Y F (X Y) EQV Y = W)) EQV X = Z))))

(AXIOMS.PREFIX   (COMMENT
                  (EX 4 (EX 3 (ALL 6 (ALL 5 (EQV (+ 7 (5 6) (KIND (EQV T 30))) (AND (+ 2 (5 3) (KIND (EQV NIL 30))) (+ 2 (6 4) (KIND (EQV NIL 30)))))))))))

(THEOREMS.PREFIX (COMMENT
                  (EX 8 (ALL 9 (EQV (EX 10 (ALL 11 (EQV (+ 7 (9 11) (KIND (EQV T 30 EQV T 31))) (+ 2 (11 10) (KIND (EQV NIL 30 EQV T 31)))))) (+ 2 (9 8) (KIND (EQV NIL 31))))))))

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . T)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . T)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 0)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . CLAUSE-GRAPH)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING F_2 F_3 F_1 F)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (+ 5 (* 2 X) Y)) (* (+ X (* X Y))) (- (* 2 X)) (0 2) (1 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . 0)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_MAXIMUM.TIME)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (GEN_OTHER.PROVER . MKRP)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 3)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 114)
          (PR_LITERALS)
         )

(LINK.COLOURS (R RIW RD S SI SIW SID T TI TIW P PIW PD RIWD))

(AXIOMS (START.TIME 1909540000)
        (PARTIAL   (CLAUSE 18 R.= AXIOM ((16 . ANY)) ((+ 2 (16 16)) ))(CLAUSE 21 A1 AXIOM ((12 . ANY)(4 . ANY))
                         ((- 7 (4 12)) (+ 2 (4 14)) )))
        (PARTIAL   (CLAUSE 25 A2 AXIOM ((13 . ANY)(3 . ANY))
                         ((- 7 (3 13)) (+ 2 (13 15)) )))
        (PARTIAL   (CLAUSE 31 A3 AXIOM ((6 . ANY)(5 . ANY))
                         ((+ 7 (5 6)) (- 2 (5 14)) (- 2 (6 15)) )))
        (END.TIME 1911050000)
        (FINAL 18 21 25 31)
        (SYMBOLS 
                 (LET (NEW.ADDRESS)
          (LIST (CONS    7 (DT-PREDICATE.CREATE "F" '(ANY ANY)))
                         (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
                         (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                         (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                         (CONS   15 (DT-CONSTANT.CREATE "c_2" 'ANY))
                         (CONS   14 (DT-CONSTANT.CREATE "c_1" 'ANY)))))
        (RESULT))

(THEOREMS (SPLITPART.IDENTIFIER 1)
          (START.TIME 1911170000)
          (PARTIAL   (CLAUSE 51 T4 THEOREM ((45 . ANY)(8 . ANY))
                           ((- 7 ((42 8) (46 45 8))) (- 2 ((46 45 8) 45)) (- 2 ((42 8) 8)) )))
          (PARTIAL   (CLAUSE 65 T5 THEOREM ((49 . ANY)(10 . ANY))
                           ((+ 7 ((42 10) (46 49 10))) (+ 2 ((46 49 10) 49)) (- 2 ((42 10) 10)) )))
          (PARTIAL   (CLAUSE 82 T6 THEOREM ((48 . ANY)(47 . ANY))
                           ((+ 7 ((42 47) 48)) (- 2 (48 (44 47))) (+ 2 ((42 47) 47)) )))
          (PARTIAL   (CLAUSE 108 T7 THEOREM ((43 . ANY)(9 . ANY))
                           ((- 7 ((42 9) 43)) (+ 2 (43 (44 9))) (+ 2 ((42 9) 9)) )))
          (INITIAL   (CLAUSE 18 R.= AXIOM ((16 . ANY)) ((+ 2 (16 16)) ))
(CLAUSE 21 A1 AXIOM ((12 . ANY)(4 . ANY))
                           ((- 7 (4 12)) (+ 2 (4 14)) ))
(CLAUSE 25 A2 AXIOM ((13 . ANY)(3 . ANY))
                           ((- 7 (3 13)) (+ 2 (13 15)) ))
(CLAUSE 31 A3 AXIOM ((6 . ANY)(5 . ANY))
                           ((+ 7 (5 6)) (- 2 (5 14)) (- 2 (6 15)) ))
(CLAUSE 51 T4 THEOREM ((45 . ANY)(8 . ANY))
                           ((- 7 ((42 8) (46 45 8))) (- 2 ((46 45 8) 45)) (- 2 ((42 8) 8)) ))
(CLAUSE 65 T5 THEOREM ((49 . ANY)(10 . ANY))
                           ((+ 7 ((42 10) (46 49 10))) (+ 2 ((46 49 10) 49)) (- 2 ((42 10) 10)) ))
(CLAUSE 82 T6 THEOREM ((48 . ANY)(47 . ANY))
                           ((+ 7 ((42 47) 48)) (- 2 (48 (44 47))) (+ 2 ((42 47) 47)) ))
(CLAUSE 108 T7 THEOREM ((43 . ANY)(9 . ANY))
                           ((- 7 ((42 9) 43)) (+ 2 (43 (44 9))) (+ 2 ((42 9) 9)) )) )
          (END.TIME 1926520000)
          (FINAL 18 21 25 31 51 65 82 108)
          (SYMBOLS 
                   (LET (NEW.ADDRESS)
          (LIST (CONS    7 (DT-PREDICATE.CREATE "F" '(ANY ANY)))
                           (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
                           (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (CONS   15 (DT-CONSTANT.CREATE "c_2" 'ANY))
                           (CONS   14 (DT-CONSTANT.CREATE "c_1" 'ANY))
                           (CONS   44 (DT-FUNCTION.CREATE "f_3" 'ANY '(ANY) 'NIL))
                           (CONS   46 (DT-FUNCTION.CREATE "f_2" 'ANY '(ANY ANY) 'NIL))
                           (CONS   42 (DT-FUNCTION.CREATE "f_1" 'ANY '(ANY) 'NIL)))))
          (RESULT))
(indices ((108 4 5 6) (82 4 5 6) (65 4 5 6) (51 4 5 6) (31 1 2 3) (25 1 3) (21 1 2) (18 NIL)))

(SPLITPARTS "Unix" "09-JUL,1992 14:12" NIL)

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . T)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . T)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 0)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . CLAUSE-GRAPH)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING F_2 F_3 F_1 F)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (+ 5 (* 2 X) Y)) (* (+ X (* X Y))) (- (* 2 X)) (0 2) (1 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . 0)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_MAXIMUM.TIME)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (GEN_OTHER.PROVER . MKRP)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 3)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 114)
          (PR_LITERALS)
         )

(REFUTATION (START.TIME 1927010000)

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . T)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . T)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 0)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . CLAUSE-GRAPH)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING F_2 F_3 F_1 F)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (+ 5 (* 2 X) Y)) (* (+ X (* X Y))) (- (* 2 X)) (0 2) (1 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . 0)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_MAXIMUM.TIME)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (GEN_OTHER.PROVER . MKRP)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 3)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 114)
          (PR_LITERALS)
         )
            (INITIAL   (CLAUSE 18 R.= AXIOM ((16 . ANY)) ((+ 2 (16 16)) ))
(CLAUSE 21 A1 AXIOM ((12 . ANY)(4 . ANY))
                             ((- 7 (4 12)) (+ 2 (4 14)) ))
(CLAUSE 25 A2 AXIOM ((13 . ANY)(3 . ANY))
                             ((- 7 (3 13)) (+ 2 (13 15)) ))
(CLAUSE 31 A3 AXIOM ((6 . ANY)(5 . ANY))
                             ((+ 7 (5 6)) (- 2 (5 14)) (- 2 (6 15)) ))
(CLAUSE 51 T4 THEOREM ((45 . ANY)(8 . ANY))
                             ((- 7 ((42 8) (46 45 8))) (- 2 ((46 45 8) 45)) (- 2 ((42 8) 8)) ))
(CLAUSE 65 T5 THEOREM ((49 . ANY)(10 . ANY))
                             ((+ 7 ((42 10) (46 49 10))) (+ 2 ((46 49 10) 49)) (- 2 ((42 10) 10)) ))
(CLAUSE 82 T6 THEOREM ((48 . ANY)(47 . ANY))
                             ((+ 7 ((42 47) 48)) (- 2 (48 (44 47))) (+ 2 ((42 47) 47)) ))
(CLAUSE 108 T7 THEOREM ((43 . ANY)(9 . ANY))
                             ((- 7 ((42 9) 43)) (+ 2 (43 (44 9))) (+ 2 ((42 9) 9)) )) )
            (OPERATION (CLAUSE 413 R1 (21 82) ((68 . ANY)(119 . ANY))
                               ((- 2 (119 (44 68))) (+ 2 ((42 68) 68)) (+ 2 ((42 68) 14)) ))
                       (RESOLUTION 82 1 21 1 NIL (4 (42 47) 48 12) 413))
            (OPERATION (CLAUSE 413 R1 (21 82) ((68 . ANY)(119 . ANY))
                               ((- 2 (119 (44 68))) (+ 2 ((42 68) 68)) (+ 2 ((42 68) 14)) ))
                       (REPLACEMENT.OPERATION (16 (44 68) 119 (44 68)) (413 18)
  (((413 . 1) (18 . 1) SYMMETRIC))
  (NIL)
  ((68 . ANY))))
            (OPERATION (CLAUSE 437 R1.F1 (413) () ((+ 2 ((42 14) 14)) ))
                       (FACTORIZATION 413 SYMMETRIC (68 14) 437))
            (OPERATION (CLAUSE 108 T7 THEOREM ((43 . ANY)(9 . ANY))
                               ((- 7 (14 43)) (+ 2 (43 (44 9))) (+ 2 ((42 9) 9)) ))
                       (REWRITE 413 1 108))
            (OPERATION (CLAUSE 82 T6 THEOREM ((48 . ANY)(47 . ANY))
                               ((+ 7 (14 48)) (- 2 (48 (44 47))) (+ 2 ((42 47) 47)) ))
                       (REWRITE 413 1 82))
            (OPERATION (CLAUSE 898 P1 (51 437) ((913 . ANY))
                               ((- 2 (14 14)) (- 7 ((42 14) (46 913 14))) (- 2 ((46 913 14) 913)) ))
                       (PARAMODULATION 437 1 (1) 51 3 (1) NIL (8 14) 898))
            (OPERATION (CLAUSE 898 P1 (51 437) ((913 . ANY))
                               ((- 2 (14 14)) (- 7 (14 (46 913 14))) (- 2 ((46 913 14) 913)) ))
                       (REWRITE 437 2 898))
            (OPERATION (CLAUSE 898 P1 (51 437) ((913 . ANY))
                               ((- 7 (14 (46 913 14))) (- 2 ((46 913 14) 913)) ))
                       (REPLACEMENT.OPERATION NIL (898 18)
  (((898 . 1) (18 . 1) NIL))
  (NIL)
  NIL))
            (OPERATION (CLAUSE 443 R2 (898 25) ((925 . ANY))
                               ((- 7 (925 (46 15 14))) (- 7 (14 (46 15 14))) ))
                       (RESOLUTION 25 2 898 2 SYMMETRIC (13 (46 15 14) 913 15) 443))
            (OPERATION (CLAUSE 443 R2 (898 25) ((925 . ANY))
                               ((- 7 (925 (46 15 14))) (- 7 (14 (46 15 14))) ))
                       (REPLACEMENT.OPERATION (925 14) (443)
  NIL
  ((((443 . 2) (443 . 1) NIL)))
  NIL))
            (OPERATION (CLAUSE 945 R3 (443 31) ()
                               ((- 2 (14 14)) (- 2 ((46 15 14) 15)) ))
                       (RESOLUTION 31 1 443 1 NIL (5 14 6 (46 15 14)) 945))
            (OPERATION (CLAUSE 945 R3 (443 31) () ((- 2 ((46 15 14) 15)) ))
                       (REPLACEMENT.OPERATION NIL (945 18)
  (((945 . 1) (18 . 1) NIL))
  (NIL)
  NIL))
            (OPERATION (CLAUSE 972 R4 (945 65) ()
                               ((+ 7 ((42 14) (46 15 14))) (- 2 ((42 14) 14)) ))
                       (RESOLUTION 65 2 945 1 SYMMETRIC (10 14 49 15) 972))
            (OPERATION (CLAUSE 972 R4 (945 65) ()
                               ((+ 7 ((42 14) (46 15 14))) (- 2 (14 14)) ))
                       (REWRITE 437 2 972))
            (OPERATION (CLAUSE 972 R4 (945 65) ()
                               ((+ 7 (14 (46 15 14))) (- 2 (14 14)) ))
                       (REWRITE 437 1 972))
            (OPERATION (CLAUSE 972 R4 (945 65) ()
                               ((+ 7 (14 (46 15 14))) (- 2 (14 14)) ))
                       (REPLACEMENT.OPERATION (16 14) (972 18)
  (((972 . 2) (18 . 1) SYMMETRIC))
  (NIL)
  NIL))
            (OPERATION (CLAUSE 972 R4 (945 65) () ((+ 7 (14 (46 15 14))) ))
                       (REPLACEMENT.OPERATION (3 14 13 (46 15 14)) (972 25 945)
  (((972 . 1) (25 . 1) NIL) ((25 . 2) (945 . 1) SYMMETRIC))
  (NIL NIL)
  NIL))
            (END.TIME 1970520000)
            (SYMBOLS 
                     (LET (NEW.ADDRESS)
          (LIST (CONS    7 (DT-PREDICATE.CREATE "F" '(ANY ANY)))
                             (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
                             (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (CONS   15 (DT-CONSTANT.CREATE "c_2" 'ANY))
                             (CONS   14 (DT-CONSTANT.CREATE "c_1" 'ANY))
                             (CONS   44 (DT-FUNCTION.CREATE "f_3" 'ANY '(ANY) 'NIL))
                             (CONS   46 (DT-FUNCTION.CREATE "f_2" 'ANY '(ANY ANY) 'NIL))
                             (CONS   42 (DT-FUNCTION.CREATE "f_1" 'ANY '(ANY) 'NIL)))))
            (SPLITPART.IDENTIFIER 1)
            (RESULT SUCCESS 972)
)
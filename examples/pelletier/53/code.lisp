;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-

(CONSTRUCTION  "Unix" "16-JUL,1992 18:12" 
              ("                                                                                                                     "
               "*********************************************************************************************************************"
               "                                                                                                                     "
               " FORMULA:  Date: 02-APR,1992 20:38"
               "           Axioms und Theorems for this proof have been read from"
               "              Axiom-File: NIL"
               "            Theorem-File: NIL"
               "                                                                                                                     "
               "*********************************************************************************************************************"
               ))

(AXIOMS.INFIX    ((* AXIOMS *)
                  (EX |X,Y| NOT Y = X AND (ALL Z Z = X OR Z = Y))))

(THEOREMS.INFIX ((* THEOREMS *)
                  ((EX Z (ALL X ((EX W (ALL Y (P (X Y) EQV Y = W))) EQV X = Z))) EQV (EX Z (ALL X ((EX W (ALL Y (P (Y X) EQV Y = W))) EQV X = Z))))))

(AXIOMS.PREFIX   (COMMENT
                  (EX 4 (EX 3 (AND (NOT (+ 2 (4 3) NIL)) (ALL 5 (OR (+ 2 (5 3) NIL) (+ 2 (5 4) NIL))))))))

(THEOREMS.PREFIX (COMMENT
                  (EQV (EX 6 (ALL 7 (EQV (EX 8 (ALL 9 (EQV (+ 10 (7 9) (KIND (EQV T 40 EQV T 41 EQV T 44))) (+ 2 (9 8) (KIND (EQV NIL 40 EQV T 41 EQV T 44)))))) (+ 2 (7 6) (KIND (EQV NIL 41 EQV T 44)))))) (EX 11 (ALL 12 (EQV (EX 13 (ALL 14 (EQV (+ 10 (14 12) (KIND (EQV T 42 EQV T 43 EQV NIL 44))) (+ 2 (14 13) (KIND (EQV NIL 42 EQV T 43 EQV NIL 44)))))) (+ 2 (12 11) (KIND (EQV NIL 43 EQV NIL 44)))))))))

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY)
          (RED.I_LINK.TAUTOLOGY . T)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . T)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY)
          (RED.D_CLAUSE.TAUTOLOGY . T)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . T)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY)
          (RED.D_LINK.TAUTOLOGY . T)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . T)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL . T)
          (FAC_EACH.STEP . T)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 10)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . DERSHOWITZ)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT 1)
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING = F_5 F_2 F_3 F_4 F_1 F_7 F_9 F_10 F_6 F_8 C_1 C_2 C_3 C_4 P)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (+ 5 (* 2 X) Y)) (* (+ X (* X Y))) (- (* 2 X)) (0 2) (1 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . T)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_MAXIMUM.TIME)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (GEN_OTHER.PROVER . MKRP)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS . T)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 3)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 114)
          (PR_LITERALS)
         )

(LINK.COLOURS (R RIW RD S SI SIW SID T TI TIW P PIW PD RIWD))

(AXIOMS (START.TIME 12212170000)
        (PARTIAL   (CLAUSE 17 R.= AXIOM ((3 . ANY)) ((+ 2 (3 3)) ))(CLAUSE 18 A1 AXIOM () ((- 2 (16 15)) )))
        (PARTIAL   (CLAUSE 20 A2 AXIOM ((4 . ANY))
                         ((+ 2 (4 15)) (+ 2 (4 16)) )))
        (END.TIME 12213770000)
        (FINAL 17 18 20)
        (SYMBOLS 
                 (LET (NEW.ADDRESS)
          (LIST (CONS   10 (DT-PREDICATE.CREATE "P" '(ANY ANY)))
                         (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
                         (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                         (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                         (CONS   16 (DT-CONSTANT.CREATE "c_2" 'ANY))
                         (CONS   15 (DT-CONSTANT.CREATE "c_1" 'ANY)))))
        (RESULT))
(indices ((20 2 3) (18 1) (17 NIL)))
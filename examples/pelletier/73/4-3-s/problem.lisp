;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((* AXIOMS *) (SORT O,H : ANY) (TYPE IN (O H)) (EX X,Y,Z,W : O NOT X = Y AND NOT X = Z AND NOT X = W AND NOT Y = Z AND NOT Y = W AND NOT Z = W) (EX X,Y,Z : H NOT X = Y AND NOT X = Z AND NOT Y = Z AND ALL W : H W = X OR W = Y OR W = Z) (ALL X : O EX Y : H IN (X Y)) (ALL X : H ALL Y,Z : O IN (Y X) AND IN (Z X) IMPL Y = Z))) (QUOTE (COMMENT (+ 0 NIL NIL) (+ 0 NIL NIL) (EX 7 (EX 6 (EX 5 (EX 4 (AND (NOT (+ 2 (4 5) NIL)) (AND (NOT (+ 2 (4 6) NIL)) (AND (NOT (+ 2 (4 7) NIL)) (AND (NOT (+ 2 (5 6) NIL)) (AND (NOT (+ 2 (5 7) NIL)) (NOT (+ 2 (6 7) NIL))))))))))) (EX 10 (EX 9 (EX 8 (AND (NOT (+ 2 (8 9) NIL)) (AND (NOT (+ 2 (8 10) NIL)) (AND (NOT (+ 2 (9 10) NIL)) (ALL 11 (OR (+ 2 (11 8) NIL) (OR (+ 2 (11 9) NIL) (+ 2 (11 10) NIL)))))))))) (ALL 12 (EX 13 (+ 3 (12 13) NIL))) (ALL 14 (ALL 16 (ALL 15 (IMPL (AND (+ 3 (15 14) NIL) (+ 3 (16 14) NIL)) (+ 2 (15 16) NIL))))))) (QUOTE NIL) (QUOTE NIL) (QUOTE ("Edit:     Axioms and Theorems edited: 01-JUL,1992 23:32 ")) (PROGN(PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (9879 9884 9889 9894 9899 9904 9909 9914 9919 9924 9929 9934 9939 9954 9969 9984 9999))) (DATALIST (QUOTE (15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE))) ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY) (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC))) ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "IN" NIL NIL (O H) NIL NIL ((- 3 (POSITIVE))) ((+ 3 (NEGATIVE))) ((+ 3 (NIL))) ((- 3 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 O NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 O NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 O NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 O NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 H NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 H NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 H NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 H NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 O NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 H NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 H NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 O NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 O NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (- MEM*SIZE 10000)) COUNTER1) (MEM-RESET) (COND ((> MEM*SIZE 10000) (SETQ COUNTER1 17) (MAPC (FUNCTION (LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) (COND ((EQL RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((EQL (QUOTE END) RADDR) RADDR) ((OR (EQL RADDR 0) (MINUSP RADDR)) RADDR) (T (+ RADDR INCREMENT)))))) ADDRLIST) (SETQ COUNTER1 MEM*SIZE) (MAPC (FUNCTION (LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA))) DATALIST)) (T (UNLESS (= MEM*SIZE 10000) (MEM-INITIALIZE 10000)) (SETQ COUNTER1 17) (MAPC (FUNCTION (LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))) ADDRLIST) (SETQ COUNTER1 MEM*SIZE) (MAPC (FUNCTION (LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA))) DATALIST))) (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9874 INCREMENT) 9874)) (SETQ MEM*NEXT.VADR 17 MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1) MEM*FIRST.REUSABLE.VADR NIL MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (H O ANY))) (SETQ DT*SORT.NR (QUOTE 4)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*ELEMENT.PREDICATE (QUOTE NIL)) (SETQ DT*OMEGA.CONSTANT (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE NIL)) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE NIL)) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (3 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (3 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE H) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE H) (QUOTE DT*SORT.NUMBER)) (QUOTE 3)) (SETF (GET (QUOTE H) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (H))) (SETF (GET (QUOTE H) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((H H) (O) (ANY H)))) (SETF (GET (QUOTE H) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (H))) (SETF (GET (QUOTE H) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE H) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (H ANY)))) (PROGN (SETF (GET (QUOTE O) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE O) (QUOTE DT*SORT.NUMBER)) (QUOTE 2)) (SETF (GET (QUOTE O) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (O))) (SETF (GET (QUOTE O) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((H) (O O) (ANY O)))) (SETF (GET (QUOTE O) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (O))) (SETF (GET (QUOTE O) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE O) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (O ANY)))) (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (H O))) (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (H O ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((H H) (O O) (ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (O))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
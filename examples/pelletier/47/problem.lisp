;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((* AXIOMS *) ((ALL X W (X) IMPL A (X)) AND (EX X W (X))) ((ALL X F (X) IMPL A (X)) AND (EX X F (X))) ((ALL X B (X) IMPL A (X)) AND (EX X B (X))) ((ALL X C (X) IMPL A (X)) AND (EX X C (X))) ((ALL X S (X) IMPL A (X)) AND (EX X S (X))) ((EX X G (X)) AND (ALL X G (X) IMPL P (X))) (ALL X A (X) IMPL (ALL Y P (Y) IMPL E (X Y)) OR (ALL Y (A (Y) AND SM (Y X) AND (EX Z P (Z) AND E (Y Z))) IMPL E (X Y))) (ALL X,Y B (Y) AND (S (X) OR C (X)) IMPL SM (X Y)) (ALL X,Y B (X) AND F (Y) IMPL SM (X Y)) (ALL X,Y F (X) AND W (Y) IMPL SM (X Y)) (ALL X,Y W (X) AND (F (Y) OR G (Y)) IMPL NOT E (X Y)) (ALL X,Y B (X) AND C (Y) IMPL E (X Y)) (ALL X,Y B (X) AND S (Y) IMPL NOT E (X Y)) (ALL X C (X) OR S (X) IMPL (EX Y P (Y) AND E (X Y))))) (QUOTE (COMMENT (AND (ALL 3 (IMPL (+ 4 (3) NIL) (+ 5 (3) NIL))) (EX 6 (+ 4 (6) NIL))) (AND (ALL 7 (IMPL (+ 8 (7) NIL) (+ 5 (7) NIL))) (EX 9 (+ 8 (9) NIL))) (AND (ALL 10 (IMPL (+ 11 (10) NIL) (+ 5 (10) NIL))) (EX 12 (+ 11 (12) NIL))) (AND (ALL 13 (IMPL (+ 14 (13) NIL) (+ 5 (13) NIL))) (EX 15 (+ 14 (15) NIL))) (AND (ALL 16 (IMPL (+ 17 (16) NIL) (+ 5 (16) NIL))) (EX 18 (+ 17 (18) NIL))) (AND (EX 19 (+ 20 (19) NIL)) (ALL 21 (IMPL (+ 20 (21) NIL) (+ 22 (21) NIL)))) (ALL 23 (IMPL (+ 5 (23) NIL) (OR (ALL 24 (IMPL (+ 22 (24) NIL) (+ 25 (23 24) NIL))) (ALL 26 (IMPL (AND (+ 5 (26) NIL) (AND (+ 27 (26 23) NIL) (EX 28 (AND (+ 22 (28) NIL) (+ 25 (26 28) NIL))))) (+ 25 (23 26) NIL)))))) (ALL 30 (ALL 29 (IMPL (AND (+ 11 (30) NIL) (OR (+ 17 (29) NIL) (+ 14 (29) NIL))) (+ 27 (29 30) NIL)))) (ALL 32 (ALL 31 (IMPL (AND (+ 11 (31) NIL) (+ 8 (32) NIL)) (+ 27 (31 32) NIL)))) (ALL 34 (ALL 33 (IMPL (AND (+ 8 (33) NIL) (+ 4 (34) NIL)) (+ 27 (33 34) NIL)))) (ALL 36 (ALL 35 (IMPL (AND (+ 4 (35) NIL) (OR (+ 8 (36) NIL) (+ 20 (36) NIL))) (NOT (+ 25 (35 36) NIL))))) (ALL 38 (ALL 37 (IMPL (AND (+ 11 (37) NIL) (+ 14 (38) NIL)) (+ 25 (37 38) NIL)))) (ALL 40 (ALL 39 (IMPL (AND (+ 11 (39) NIL) (+ 17 (40) NIL)) (NOT (+ 25 (39 40) NIL))))) (ALL 41 (IMPL (OR (+ 14 (41) NIL) (+ 17 (41) NIL)) (EX 42 (AND (+ 22 (42) NIL) (+ 25 (41 42) NIL))))))) (QUOTE ((* THEOREMS *) (EX X,Y A (X) AND A (Y) AND (EX Z G (Z) AND E (Y Z) AND E (X Y))))) (QUOTE (COMMENT (EX 44 (EX 43 (AND (+ 5 (43) NIL) (AND (+ 5 (44) NIL) (EX 45 (AND (+ 20 (45) NIL) (AND (+ 25 (44 45) NIL) (+ 25 (43 44) NIL)))))))))) (QUOTE ("Edit:     Axioms and Theorems edited: 08-APR,1992 21:01 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(9644 9649 9654 9659 9664 9669 9674 9679 9684 9689 9694 9699 9704 9709 9714 9719 9724
          9729 9744 9749 9764 9769 9774 9789 9794 9809 9814 9819 9834 9839 9844 9859 9864 9869
          9884 9889 9894 9909 9914 9919 9934 9949 9954 9969 9984 9999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC)))
          ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "W" NIL NIL (ANY) NIL NIL ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE)))
          ((+ 4 (NIL))) ((- 4 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "A" NIL NIL (ANY)
          NIL NIL ((- 5 (POSITIVE))) ((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY
          NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "F" NIL NIL (ANY) NIL NIL
          ((- 8 (POSITIVE))) ((+ 8 (NEGATIVE))) ((+ 8 (NIL))) ((- 8 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY
          NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "B" NIL NIL (ANY) NIL NIL
          ((- 11 (POSITIVE))) ((+ 11 (NEGATIVE))) ((+ 11 (NIL))) ((- 11 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY
          NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "C" NIL NIL (ANY) NIL NIL
          ((- 14 (POSITIVE))) ((+ 14 (NEGATIVE))) ((+ 14 (NIL))) ((- 14 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY
          NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "S" NIL NIL (ANY) NIL NIL
          ((- 17 (POSITIVE))) ((+ 17 (NEGATIVE))) ((+ 17 (NIL))) ((- 17 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY
          NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "G" NIL NIL (ANY) NIL NIL
          ((- 20 (POSITIVE))) ((+ 20 (NEGATIVE))) ((+ 20 (NIL))) ((- 20 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15
          "P" NIL NIL (ANY) NIL NIL ((- 22 (POSITIVE))) ((+ 22 (NEGATIVE))) ((+ 22 (NIL)))
          ((- 22 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "E" NIL NIL (ANY ANY) NIL NIL ((- 25 (POSITIVE))) ((+ 25 (NEGATIVE)))
          ((+ 25 (NIL))) ((- 25 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "SM" NIL NIL (ANY ANY) NIL NIL
          ((- 27 (POSITIVE))) ((+ 27 (NEGATIVE))) ((+ 27 (NIL))) ((- 27 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY
          NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 10000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 10000)
             (SETQ COUNTER1 46)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 10000)
                 (MEM-INITIALIZE 10000))
               (SETQ COUNTER1 46)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9639 INCREMENT) 9639))
      (SETQ MEM*NEXT.VADR 46
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ANY))) (SETQ DT*SORT.NR (QUOTE 2)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*ELEMENT.PREDICATE (QUOTE 25)) (SETQ DT*OMEGA.CONSTANT (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE NIL)) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE NIL)) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (27 25 22 20 17 14 11 8 5 4 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (27 25 22 20 17 14 11 8 5 4 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
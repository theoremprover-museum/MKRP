;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-

(CONSTRUCTION  "Unix" "09-JUL,1992 09:53" 
              ("Edit:     Axioms and Theorems edited: 05-MAR,1992 19:54 "
               ))

(AXIOMS.INFIX    ((* AXIOMS *)
                  (EX X L (X) AND K (X A))
                  (L (A) AND L (B) AND L (C))
                  (ALL X L (X) IMPL X = A OR X = B OR X = C)
                  (ALL |Y,X| K (X Y) IMPL H (X Y))
                  (ALL |X,Y| K (X Y) IMPL NOT R (X Y))
                  (ALL X H (A X) IMPL NOT H (C X))
                  (ALL X NOT X = B IMPL H (A X))
                  (ALL X NOT R (X A) IMPL H (B X))
                  (ALL X H (A X) IMPL H (B X))
                  (ALL X (EX Y NOT H (X Y)))
                  (NOT A = B)))

(THEOREMS.INFIX ((* THEOREMS *)
                  (K (A A))))

(AXIOMS.PREFIX   (COMMENT
                  (EX 3 (AND (+ 4 (3) NIL) (+ 6 (3 5) NIL)))
                  (AND (+ 4 (5) NIL) (AND (+ 4 (7) NIL) (+ 4 (8) NIL)))
                  (ALL 9 (IMPL (+ 4 (9) NIL) (OR (+ 2 (9 5) NIL) (OR (+ 2 (9 7) NIL) (+ 2 (9 8) NIL)))))
                  (ALL 11 (ALL 10 (IMPL (+ 6 (11 10) NIL) (+ 12 (11 10) NIL))))
                  (ALL 14 (ALL 13 (IMPL (+ 6 (13 14) NIL) (NOT (+ 15 (13 14) NIL)))))
                  (ALL 16 (IMPL (+ 12 (5 16) NIL) (NOT (+ 12 (8 16) NIL))))
                  (ALL 17 (IMPL (NOT (+ 2 (17 7) NIL)) (+ 12 (5 17) NIL)))
                  (ALL 18 (IMPL (NOT (+ 15 (18 5) NIL)) (+ 12 (7 18) NIL)))
                  (ALL 19 (IMPL (+ 12 (5 19) NIL) (+ 12 (7 19) NIL)))
                  (ALL 20 (EX 21 (NOT (+ 12 (20 21) NIL))))
                  (NOT (+ 2 (5 7) NIL))))

(THEOREMS.PREFIX (COMMENT
                  (+ 6 (5 5) NIL)))

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 0)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . 0)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_MAXIMUM.TIME)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (GEN_OTHER.PROVER . MKRP)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS)
         )

(LINK.COLOURS (R RIW RD S SI SIW SID T TI TIW P PIW PD RIWD))

(AXIOMS (START.TIME 14690000)
        (PARTIAL   (CLAUSE 24 R.= AXIOM ((21 . ANY)) ((+ 2 (21 21)) ))(CLAUSE 25 A1 AXIOM () ((+ 4 (22)) )))
        (PARTIAL   (CLAUSE 26 A2 AXIOM () ((+ 6 (22 5)) )))
        (PARTIAL   (CLAUSE 27 A3 AXIOM () ((+ 4 (5)) )))
        (PARTIAL   (CLAUSE 28 A4 AXIOM () ((+ 4 (7)) )))
        (PARTIAL   (CLAUSE 29 A5 AXIOM () ((+ 4 (8)) )))
        (PARTIAL   (CLAUSE 31 A6 AXIOM ((20 . ANY)) ((- 12 (20 (3 20))) )))
        (PARTIAL   (CLAUSE 32 A7 AXIOM () ((- 2 (5 7)) )))
        (PARTIAL   (CLAUSE 35 A8 AXIOM ((10 . ANY)(11 . ANY))
                         ((- 6 (11 10)) (+ 12 (11 10)) )))
        (PARTIAL   (CLAUSE 40 A9 AXIOM ((14 . ANY)(13 . ANY))
                         ((- 6 (13 14)) (- 15 (13 14)) )))
        (PARTIAL   (CLAUSE 44 A10 AXIOM ((16 . ANY))
                         ((- 12 (5 16)) (- 12 (8 16)) )))
        (PARTIAL   (CLAUSE 50 A11 AXIOM ((17 . ANY))
                         ((+ 2 (17 7)) (+ 12 (5 17)) )))
        (PARTIAL   (CLAUSE 57 A12 AXIOM ((18 . ANY))
                         ((+ 15 (18 5)) (+ 12 (7 18)) )))
        (PARTIAL   (CLAUSE 61 A13 AXIOM ((19 . ANY))
                         ((- 12 (5 19)) (+ 12 (7 19)) )))
        (PARTIAL   (CLAUSE 71 A14 AXIOM ((9 . ANY))
                         ((- 4 (9)) (+ 2 (9 5)) (+ 2 (9 7)) (+ 2 (9 8)) )))
        (END.TIME 20520000)
        (FINAL 24 25 26 27 28 29 31 32 35 40 44 50 57 61 71)
        (SYMBOLS 
                 (LET (NEW.ADDRESS)
          (LIST (CONS   15 (DT-PREDICATE.CREATE "R" '(ANY ANY)))
                         (CONS   12 (DT-PREDICATE.CREATE "H" '(ANY ANY)))
                         (CONS    6 (DT-PREDICATE.CREATE "K" '(ANY ANY)))
                         (CONS    4 (DT-PREDICATE.CREATE "L" '(ANY)))
                         (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
                         (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                         (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                         (CONS   22 (DT-CONSTANT.CREATE "c_1" 'ANY))
                         (CONS    8 (DT-CONSTANT.CREATE "c" 'ANY))
                         (CONS    7 (DT-CONSTANT.CREATE "b" 'ANY))
                         (CONS    5 (DT-CONSTANT.CREATE "a" 'ANY))
                         (CONS    3 (DT-FUNCTION.CREATE "f_1" 'ANY '(ANY) 'NIL)))))
        (RESULT))

(THEOREMS (SPLITPART.IDENTIFIER 1)
          (START.TIME 20600000)
          (PARTIAL   (CLAUSE 87 T15 THEOREM () ((- 6 (5 5)) )))
          (INITIAL   (CLAUSE 24 R.= AXIOM ((21 . ANY)) ((+ 2 (21 21)) ))
(CLAUSE 25 A1 AXIOM () ((+ 4 (22)) ))
(CLAUSE 26 A2 AXIOM () ((+ 6 (22 5)) ))
(CLAUSE 27 A3 AXIOM () ((+ 4 (5)) ))
(CLAUSE 28 A4 AXIOM () ((+ 4 (7)) ))
(CLAUSE 29 A5 AXIOM () ((+ 4 (8)) ))
(CLAUSE 31 A6 AXIOM ((20 . ANY)) ((- 12 (20 (3 20))) ))
(CLAUSE 32 A7 AXIOM () ((- 2 (5 7)) ))
(CLAUSE 35 A8 AXIOM ((10 . ANY)(11 . ANY))
                           ((- 6 (11 10)) (+ 12 (11 10)) ))
(CLAUSE 40 A9 AXIOM ((14 . ANY)(13 . ANY))
                           ((- 6 (13 14)) (- 15 (13 14)) ))
(CLAUSE 44 A10 AXIOM ((16 . ANY))
                           ((- 12 (5 16)) (- 12 (8 16)) ))
(CLAUSE 50 A11 AXIOM ((17 . ANY))
                           ((+ 2 (17 7)) (+ 12 (5 17)) ))
(CLAUSE 57 A12 AXIOM ((18 . ANY))
                           ((+ 15 (18 5)) (+ 12 (7 18)) ))
(CLAUSE 61 A13 AXIOM ((19 . ANY))
                           ((- 12 (5 19)) (+ 12 (7 19)) ))
(CLAUSE 71 A14 AXIOM ((9 . ANY))
                           ((- 4 (9)) (+ 2 (9 5)) (+ 2 (9 7)) (+ 2 (9 8)) ))
(CLAUSE 87 T15 THEOREM () ((- 6 (5 5)) )) )
          (END.TIME 22430000)
          (FINAL 24 25 26 27 28 29 31 32 35 40 44 50 57 61 71 87)
          (SYMBOLS 
                   (LET (NEW.ADDRESS)
          (LIST (CONS   15 (DT-PREDICATE.CREATE "R" '(ANY ANY)))
                           (CONS   12 (DT-PREDICATE.CREATE "H" '(ANY ANY)))
                           (CONS    6 (DT-PREDICATE.CREATE "K" '(ANY ANY)))
                           (CONS    4 (DT-PREDICATE.CREATE "L" '(ANY)))
                           (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
                           (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (CONS   22 (DT-CONSTANT.CREATE "c_1" 'ANY))
                           (CONS    8 (DT-CONSTANT.CREATE "c" 'ANY))
                           (CONS    7 (DT-CONSTANT.CREATE "b" 'ANY))
                           (CONS    5 (DT-CONSTANT.CREATE "a" 'ANY))
                           (CONS    3 (DT-FUNCTION.CREATE "f_1" 'ANY '(ANY) 'NIL)))))
          (RESULT))
(indices ((87 24) (71 6 7 8 9) (61 20 21) (57 18 19) (50 16 17) (44 14 15) (40 12 13) (35 10 11) (32 23) (31 22) (29 5) (28 4) (27 3) (26 2) (25 1) (24 NIL)))

(SPLITPARTS "Unix" "09-JUL,1992 09:53" NIL)

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 0)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . 0)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_MAXIMUM.TIME)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (GEN_OTHER.PROVER . MKRP)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS)
         )

(REFUTATION (START.TIME 22960000)

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 0)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . 0)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_MAXIMUM.TIME)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (GEN_OTHER.PROVER . MKRP)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS)
         )
            (INITIAL   (CLAUSE 24 R.= AXIOM ((21 . ANY)) ((+ 2 (21 21)) ))
(CLAUSE 25 A1 AXIOM () ((+ 4 (22)) ))
(CLAUSE 26 A2 AXIOM () ((+ 6 (22 5)) ))
(CLAUSE 27 A3 AXIOM () ((+ 4 (5)) ))
(CLAUSE 28 A4 AXIOM () ((+ 4 (7)) ))
(CLAUSE 29 A5 AXIOM () ((+ 4 (8)) ))
(CLAUSE 31 A6 AXIOM ((20 . ANY)) ((- 12 (20 (3 20))) ))
(CLAUSE 32 A7 AXIOM () ((- 2 (5 7)) ))
(CLAUSE 35 A8 AXIOM ((10 . ANY)(11 . ANY))
                             ((- 6 (11 10)) (+ 12 (11 10)) ))
(CLAUSE 40 A9 AXIOM ((14 . ANY)(13 . ANY))
                             ((- 6 (13 14)) (- 15 (13 14)) ))
(CLAUSE 44 A10 AXIOM ((16 . ANY))
                             ((- 12 (5 16)) (- 12 (8 16)) ))
(CLAUSE 50 A11 AXIOM ((17 . ANY))
                             ((+ 2 (17 7)) (+ 12 (5 17)) ))
(CLAUSE 57 A12 AXIOM ((18 . ANY))
                             ((+ 15 (18 5)) (+ 12 (7 18)) ))
(CLAUSE 61 A13 AXIOM ((19 . ANY))
                             ((- 12 (5 19)) (+ 12 (7 19)) ))
(CLAUSE 71 A14 AXIOM ((9 . ANY))
                             ((- 4 (9)) (+ 2 (9 5)) (+ 2 (9 7)) (+ 2 (9 8)) ))
(CLAUSE 87 T15 THEOREM () ((- 6 (5 5)) )) )
            (OPERATION (CLAUSE 70 R1 (71 25) ()
                               ((+ 2 (22 5)) (+ 2 (22 7)) (+ 2 (22 8)) ))
                       (RESOLUTION 25 1 71 1 NIL (9 22) 70))
            (OPERATION (CLAUSE 75 R2 (31 61) () ((- 12 (5 (3 7))) ))
                       (RESOLUTION 61 2 31 1 NIL (20 7 19 (3 7)) 75))
            (OPERATION (CLAUSE 118 R3 (40 57) ((116 . ANY))
                               ((+ 12 (7 116)) (- 6 (116 5)) ))
                       (RESOLUTION 57 1 40 2 NIL (18 13 14 5) 118))
            (OPERATION (CLAUSE 129 R4 (31 118) () ((- 6 ((3 7) 5)) ))
                       (RESOLUTION 118 1 31 1 NIL (20 7 116 (3 7)) 129))
            (OPERATION (CLAUSE 134 R5 (31 57) () ((+ 15 ((3 7) 5)) ))
                       (RESOLUTION 57 2 31 1 NIL (20 7 18 (3 7)) 134))
            (OPERATION (CLAUSE 58 R6 (32 50) () ((+ 12 (5 5)) ))
                       (RESOLUTION 50 1 32 1 SYMMETRIC (17 5) 58))
            (OPERATION (CLAUSE 142 R7 (40 26) () ((- 15 (22 5)) ))
                       (RESOLUTION 26 1 40 1 NIL (13 22 14 5) 142))
            (OPERATION (CLAUSE 148 R8 (35 26) () ((+ 12 (22 5)) ))
                       (RESOLUTION 26 1 35 1 NIL (11 22 10 5) 148))
            (OPERATION (CLAUSE 41 P1 (87 70) ()
                               ((- 6 (22 5)) (+ 2 (22 7)) (+ 2 (22 8)) ))
                       (PARAMODULATION 70 1 (2) 87 1 (1) NIL NIL 41))
            (OPERATION (CLAUSE 41 P1 (87 70) ()
                               ((- 6 (22 5)) (+ 2 (22 7)) (+ 2 (22 8)) ))
                       (REPLACEMENT.OPERATION NIL (41 26)
  (((41 . 1) (26 . 1) NIL))
  (NIL)
  NIL))
            (OPERATION (CLAUSE 170 P2 (32 41) ()
                               ((- 2 (5 22)) (+ 2 (22 8)) ))
                       (PARAMODULATION 41 1 (2) 32 1 (2) NIL NIL 170))
            (OPERATION (CLAUSE 103 P3 (75 41) ()
                               ((- 12 (5 (3 22))) (+ 2 (22 8)) ))
                       (PARAMODULATION 41 1 (2) 75 1 (2 1) NIL NIL 103))
            (OPERATION (CLAUSE 100 P4 (129 41) ()
                               ((- 6 ((3 22) 5)) (+ 2 (22 8)) ))
                       (PARAMODULATION 41 1 (2) 129 1 (1 1) NIL NIL 100))
            (OPERATION (CLAUSE 160 P5 (134 41) ()
                               ((+ 15 ((3 22) 5)) (+ 2 (22 8)) ))
                       (PARAMODULATION 41 1 (2) 134 1 (1 1) NIL NIL 160))
            (OPERATION (CLAUSE 178 P6 (50 41) ((174 . ANY))
                               ((+ 2 (174 22)) (+ 2 (22 8)) (+ 12 (5 174)) ))
                       (PARAMODULATION 41 1 (2) 50 1 (2) NIL NIL 178))
            (OPERATION (CLAUSE 193 P7 (57 41) ((209 . ANY))
                               ((+ 12 (22 209)) (+ 2 (22 8)) (+ 15 (209 5)) ))
                       (PARAMODULATION 41 1 (2) 57 2 (1) NIL NIL 193))
            (OPERATION (CLAUSE 230 P8 (61 41) ((229 . ANY))
                               ((+ 12 (22 229)) (+ 2 (22 8)) (- 12 (5 229)) ))
                       (PARAMODULATION 41 1 (2) 61 2 (1) NIL NIL 230))
            (OPERATION (CLAUSE 249 P9 (118 41) ((254 . ANY))
                               ((+ 12 (22 254)) (+ 2 (22 8)) (- 6 (254 5)) ))
                       (PARAMODULATION 41 1 (2) 118 1 (1) NIL NIL 249))
            (OPERATION (CLAUSE 273 R9 (249 26) ()
                               ((+ 12 (22 22)) (+ 2 (22 8)) ))
                       (RESOLUTION 26 1 249 3 NIL (254 22) 273))
            (OPERATION (CLAUSE 294 P10 (71 41) ((163 . ANY))
                               ((+ 2 (163 22)) (+ 2 (22 8)) (- 4 (163)) (+ 2 (163 5)) (+ 2 (163 8)) ))
                       (PARAMODULATION 41 1 (2) 71 3 (2) NIL NIL 294))
            (OPERATION (CLAUSE 339 R10 (103 50) ()
                               ((+ 2 ((3 22) 7)) (+ 2 (22 8)) ))
                       (RESOLUTION 50 2 103 1 NIL (17 (3 22)) 339))
            (OPERATION (CLAUSE 160 P5 (134 41) ()
                               ((+ 15 (7 5)) (+ 2 (22 8)) ))
                       (REWRITE 339 1 160))
            (OPERATION (CLAUSE 100 P4 (129 41) ()
                               ((- 6 (7 5)) (+ 2 (22 8)) ))
                       (REWRITE 339 1 100))
            (OPERATION (CLAUSE 103 P3 (75 41) ()
                               ((- 12 (5 7)) (+ 2 (22 8)) ))
                       (REWRITE 339 1 103))
            (OPERATION (CLAUSE 103 P3 (75 41) ()
                               ((- 12 (5 22)) (+ 2 (22 8)) ))
                       (REWRITE 41 1 103))
            (OPERATION (CLAUSE 100 P4 (129 41) ()
                               ((- 6 (22 5)) (+ 2 (22 8)) ))
                       (REWRITE 41 1 100))
            (OPERATION (CLAUSE 100 P4 (129 41) ()
                               ((- 6 (22 5)) (+ 2 (22 8)) ))
                       (REPLACEMENT.OPERATION NIL (100 26)
  (((100 . 1) (26 . 1) NIL))
  (NIL)
  NIL))
            (OPERATION (CLAUSE 71 A14 AXIOM ((9 . ANY))
                               ((- 4 (9)) (+ 2 (9 5)) (+ 2 (9 7)) (+ 2 (9 22)) ))
                       (REWRITE 100 4 71))
            (OPERATION (CLAUSE 44 A10 AXIOM ((16 . ANY))
                               ((- 12 (5 16)) (- 12 (22 16)) ))
                       (REWRITE 100 2 44))
            (OPERATION (CLAUSE 29 A5 AXIOM () ((+ 4 (22)) ))
                       (REWRITE 100 1 29))
            (OPERATION (CLAUSE 44 A10 AXIOM ((16 . ANY))
                               ((- 12 (5 16)) (- 12 (22 16)) ))
                       (REPLACEMENT.OPERATION (11 22 16 5 10 5) (44 35 58 26)
  (((44 . 2) (35 . 2) NIL) ((44 . 1) (58 . 1) NIL) ((35 . 1) (26 . 1) NIL))
  (NIL NIL NIL)
  NIL))
            (END.TIME 57350000)
            (SYMBOLS 
                     (LET (NEW.ADDRESS)
          (LIST (CONS   15 (DT-PREDICATE.CREATE "R" '(ANY ANY)))
                             (CONS   12 (DT-PREDICATE.CREATE "H" '(ANY ANY)))
                             (CONS    6 (DT-PREDICATE.CREATE "K" '(ANY ANY)))
                             (CONS    4 (DT-PREDICATE.CREATE "L" '(ANY)))
                             (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
                             (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (CONS   22 (DT-CONSTANT.CREATE "c_1" 'ANY))
                             (CONS    8 (DT-CONSTANT.CREATE "c" 'ANY))
                             (CONS    7 (DT-CONSTANT.CREATE "b" 'ANY))
                             (CONS    5 (DT-CONSTANT.CREATE "a" 'ANY))
                             (CONS    3 (DT-FUNCTION.CREATE "f_1" 'ANY '(ANY) 'NIL)))))
            (SPLITPART.IDENTIFIER 1)
            (RESULT SUCCESS 44)
)
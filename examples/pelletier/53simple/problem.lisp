;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((* AXIOMS *) (NOT 1 = 2))) (QUOTE (COMMENT (NOT (+ 2 (4 5) NIL)))) (QUOTE ((* THEOREMS *) (* THEOREMS *) (((((((P (1 1) EQV 1 = 1) AND (P (1 2) EQV 2 = 1)) OR ((P (1 1) EQV 1 = 2) AND (P (1 2) EQV 2 = 2))) EQV 1 = 1) AND ((((P (2 1) EQV 1 = 1) AND (P (2 2) EQV 2 = 1)) OR ((P (2 1) EQV 1 = 2) AND (P (2 2) EQV 2 = 2))) EQV 2 = 1)) OR (((((P (1 1) EQV 1 = 1) AND (P (1 2) EQV 2 = 1)) OR ((P (1 1) EQV 1 = 2) AND (P (1 2) EQV 2 = 2))) EQV 1 = 2) AND ((((P (2 1) EQV 1 = 1) AND (P (2 2) EQV 2 = 1)) OR ((P (2 1) EQV 1 = 2) AND (P (2 2) EQV 2 = 2))) EQV 2 = 2))) EQV ((((((P (1 1) EQV 1 = 1) AND (P (2 1) EQV 2 = 1)) OR ((P (1 1) EQV 1 = 2) AND (P (2 1) EQV 2 = 2))) EQV 1 = 1) AND ((((P (1 2) EQV 1 = 1) AND (P (2 2) EQV 2 = 1)) OR ((P (1 2) EQV 1 = 2) AND (P (2 2) EQV 2 = 2))) EQV 2 = 1)) OR (((((P (1 1) EQV 1 = 1) AND (P (2 1) EQV 2 = 1)) OR ((P (1 1) EQV 1 = 2) AND (P (2 1) EQV 2 = 2))) EQV 1 = 2) AND ((((P (1 2) EQV 1 = 1) AND (P (2 2) EQV 2 = 1)) OR ((P (1 2) EQV 1 = 2) AND (P (2 2) EQV 2 = 2))) EQV 2 = 2)))))) (QUOTE (COMMENT COMMENT (EQV (OR (AND (EQV (OR (AND (EQV (+ 3 (4 4) (KIND (EQV T 40 EQV T 44 EQV T 440))) (+ 2 (4 4) (KIND (EQV NIL 40 EQV T 44 EQV T 440)))) (EQV (+ 3 (4 5) (KIND (EQV T 41 EQV T 44 EQV T 440))) (+ 2 (5 4) (KIND (EQV NIL 41 EQV T 44 EQV T 440))))) (AND (EQV (+ 3 (4 4) (KIND (EQV T 42 EQV T 44 EQV T 440))) (+ 2 (4 5) (KIND (EQV NIL 42 EQV T 44 EQV T 440)))) (EQV (+ 3 (4 5) (KIND (EQV T 43 EQV T 44 EQV T 440))) (+ 2 (5 5) (KIND (EQV NIL 43 EQV T 44 EQV T 440)))))) (+ 2 (4 4) (KIND (EQV NIL 44 EQV T 440)))) (EQV (OR (AND (EQV (+ 3 (5 4) (KIND (EQV T 45 EQV T 49 EQV T 440))) (+ 2 (4 4) (KIND (EQV NIL 45 EQV T 49 EQV T 440)))) (EQV (+ 3 (5 5) (KIND (EQV T 46 EQV T 49 EQV T 440))) (+ 2 (5 4) (KIND (EQV NIL 46 EQV T 49 EQV T 440))))) (AND (EQV (+ 3 (5 4) (KIND (EQV T 47 EQV T 49 EQV T 440))) (+ 2 (4 5) (KIND (EQV NIL 47 EQV T 49 EQV T 440)))) (EQV (+ 3 (5 5) (KIND (EQV T 48 EQV T 49 EQV T 440))) (+ 2 (5 5) (KIND (EQV NIL 48 EQV T 49 EQV T 440)))))) (+ 2 (5 4) (KIND (EQV NIL 49 EQV T 440))))) (AND (EQV (OR (AND (EQV (+ 3 (4 4) (KIND (EQV T 410 EQV T 414 EQV T 440))) (+ 2 (4 4) (KIND (EQV NIL 410 EQV T 414 EQV T 440)))) (EQV (+ 3 (4 5) (KIND (EQV T 411 EQV T 414 EQV T 440))) (+ 2 (5 4) (KIND (EQV NIL 411 EQV T 414 EQV T 440))))) (AND (EQV (+ 3 (4 4) (KIND (EQV T 412 EQV T 414 EQV T 440))) (+ 2 (4 5) (KIND (EQV NIL 412 EQV T 414 EQV T 440)))) (EQV (+ 3 (4 5) (KIND (EQV T 413 EQV T 414 EQV T 440))) (+ 2 (5 5) (KIND (EQV NIL 413 EQV T 414 EQV T 440)))))) (+ 2 (4 5) (KIND (EQV NIL 414 EQV T 440)))) (EQV (OR (AND (EQV (+ 3 (5 4) (KIND (EQV T 415 EQV T 419 EQV T 440))) (+ 2 (4 4) (KIND (EQV NIL 415 EQV T 419 EQV T 440)))) (EQV (+ 3 (5 5) (KIND (EQV T 416 EQV T 419 EQV T 440))) (+ 2 (5 4) (KIND (EQV NIL 416 EQV T 419 EQV T 440))))) (AND (EQV (+ 3 (5 4) (KIND (EQV T 417 EQV T 419 EQV T 440))) (+ 2 (4 5) (KIND (EQV NIL 417 EQV T 419 EQV T 440)))) (EQV (+ 3 (5 5) (KIND (EQV T 418 EQV T 419 EQV T 440))) (+ 2 (5 5) (KIND (EQV NIL 418 EQV T 419 EQV T 440)))))) (+ 2 (5 5) (KIND (EQV NIL 419 EQV T 440)))))) (OR (AND (EQV (OR (AND (EQV (+ 3 (4 4) (KIND (EQV T 420 EQV T 424 EQV NIL 440))) (+ 2 (4 4) (KIND (EQV NIL 420 EQV T 424 EQV NIL 440)))) (EQV (+ 3 (5 4) (KIND (EQV T 421 EQV T 424 EQV NIL 440))) (+ 2 (5 4) (KIND (EQV NIL 421 EQV T 424 EQV NIL 440))))) (AND (EQV (+ 3 (4 4) (KIND (EQV T 422 EQV T 424 EQV NIL 440))) (+ 2 (4 5) (KIND (EQV NIL 422 EQV T 424 EQV NIL 440)))) (EQV (+ 3 (5 4) (KIND (EQV T 423 EQV T 424 EQV NIL 440))) (+ 2 (5 5) (KIND (EQV NIL 423 EQV T 424 EQV NIL 440)))))) (+ 2 (4 4) (KIND (EQV NIL 424 EQV NIL 440)))) (EQV (OR (AND (EQV (+ 3 (4 5) (KIND (EQV T 425 EQV T 429 EQV NIL 440))) (+ 2 (4 4) (KIND (EQV NIL 425 EQV T 429 EQV NIL 440)))) (EQV (+ 3 (5 5) (KIND (EQV T 426 EQV T 429 EQV NIL 440))) (+ 2 (5 4) (KIND (EQV NIL 426 EQV T 429 EQV NIL 440))))) (AND (EQV (+ 3 (4 5) (KIND (EQV T 427 EQV T 429 EQV NIL 440))) (+ 2 (4 5) (KIND (EQV NIL 427 EQV T 429 EQV NIL 440)))) (EQV (+ 3 (5 5) (KIND (EQV T 428 EQV T 429 EQV NIL 440))) (+ 2 (5 5) (KIND (EQV NIL 428 EQV T 429 EQV NIL 440)))))) (+ 2 (5 4) (KIND (EQV NIL 429 EQV NIL 440))))) (AND (EQV (OR (AND (EQV (+ 3 (4 4) (KIND (EQV T 430 EQV T 434 EQV NIL 440))) (+ 2 (4 4) (KIND (EQV NIL 430 EQV T 434 EQV NIL 440)))) (EQV (+ 3 (5 4) (KIND (EQV T 431 EQV T 434 EQV NIL 440))) (+ 2 (5 4) (KIND (EQV NIL 431 EQV T 434 EQV NIL 440))))) (AND (EQV (+ 3 (4 4) (KIND (EQV T 432 EQV T 434 EQV NIL 440))) (+ 2 (4 5) (KIND (EQV NIL 432 EQV T 434 EQV NIL 440)))) (EQV (+ 3 (5 4) (KIND (EQV T 433 EQV T 434 EQV NIL 440))) (+ 2 (5 5) (KIND (EQV NIL 433 EQV T 434 EQV NIL 440)))))) (+ 2 (4 5) (KIND (EQV NIL 434 EQV NIL 440)))) (EQV (OR (AND (EQV (+ 3 (4 5) (KIND (EQV T 435 EQV T 439 EQV NIL 440))) (+ 2 (4 4) (KIND (EQV NIL 435 EQV T 439 EQV NIL 440)))) (EQV (+ 3 (5 5) (KIND (EQV T 436 EQV T 439 EQV NIL 440))) (+ 2 (5 4) (KIND (EQV NIL 436 EQV T 439 EQV NIL 440))))) (AND (EQV (+ 3 (4 5) (KIND (EQV T 437 EQV T 439 EQV NIL 440))) (+ 2 (4 5) (KIND (EQV NIL 437 EQV T 439 EQV NIL 440)))) (EQV (+ 3 (5 5) (KIND (EQV T 438 EQV T 439 EQV NIL 440))) (+ 2 (5 5) (KIND (EQV NIL 438 EQV T 439 EQV NIL 440)))))) (+ 2 (5 5) (KIND (EQV NIL 439 EQV NIL 440))))))))) (QUOTE ("Edit:     Axioms and Theorems edited: 14-AUG,1990 14:23 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST '(99954 99949 99944 99969 99984 99999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC)))
          ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC)))
          NIL NIL (ST*DATA NIL DT*ST-KIND NIL) PREDICATE 5 ANY "2" (DT*ST-KIND NIL) CONSTANT 5
          ANY "1" (DT*ST-KIND NIL) CONSTANT 15 "P" NIL NIL (ANY ANY) NIL NIL ((- 3 (POSITIVE)))
          ((+ 3 (NEGATIVE))) ((+ 3 (NIL))) ((- 3 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE))
       (INCREMENT (- MEM*SIZE 100000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 100000)
             (SETQ COUNTER1 6)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 100000)
                 (MEM-INITIALIZE 100000))
               (SETQ COUNTER1 6)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 100000) (+ 99929 INCREMENT) 99929))
      (SETQ MEM*NEXT.VADR 6
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ANY))) (SETQ DT*SORT.NR (QUOTE 2)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (4 5))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE NIL)) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (3 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (3 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
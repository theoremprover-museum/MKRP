;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-

(CONSTRUCTION  "Unix" "17-JUL,1992 17:44" 
              ("Edit:     Axioms and Theorems edited: 06-NOV,1991 20:28 "
               ))

(AXIOMS.INFIX    ((* AXIOMS *)
                  (EX |X,Y| (ALL Z Z = X OR Z = Y))
                  (P (A) AND P (B))
                  (NOT A = B)))

(THEOREMS.INFIX ((* THEOREMS *)
                  (ALL X P (X))))

(AXIOMS.PREFIX   (COMMENT
                  (EX 4 (EX 3 (ALL 5 (OR (+ 2 (5 3) NIL) (+ 2 (5 4) NIL)))))
                  (AND (+ 7 (6) NIL) (+ 7 (8) NIL))
                  (NOT (+ 2 (6 8) NIL))))

(THEOREMS.PREFIX (COMMENT
                  (ALL 9 (+ 7 (9) NIL))))

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 0)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . 0)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_MAXIMUM.TIME)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (GEN_OTHER.PROVER . MKRP)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS)
         )

(LINK.COLOURS (R RIW RD S SI SIW SID T TI TIW P PIW PD RIWD))

(AXIOMS (START.TIME 10660000)
        (PARTIAL   (CLAUSE 12 R.= AXIOM ((4 . ANY)) ((+ 2 (4 4)) ))(CLAUSE 13 A1 AXIOM () ((+ 7 (6)) )))
        (PARTIAL   (CLAUSE 14 A2 AXIOM () ((+ 7 (8)) )))
        (PARTIAL   (CLAUSE 15 A3 AXIOM () ((- 2 (6 8)) )))
        (PARTIAL   (CLAUSE 17 A4 AXIOM ((5 . ANY))
                         ((+ 2 (5 10)) (+ 2 (5 11)) )))
        (END.TIME 16560000)
        (FINAL 12 13 14 15 17)
        (SYMBOLS 
                 (LET (NEW.ADDRESS)
          (LIST (CONS    7 (DT-PREDICATE.CREATE "P" '(ANY)))
                         (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
                         (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                         (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                         (CONS   11 (DT-CONSTANT.CREATE "c_2" 'ANY))
                         (CONS   10 (DT-CONSTANT.CREATE "c_1" 'ANY))
                         (CONS    8 (DT-CONSTANT.CREATE "b" 'ANY))
                         (CONS    6 (DT-CONSTANT.CREATE "a" 'ANY)))))
        (RESULT))

(THEOREMS (SPLITPART.IDENTIFIER 1)
          (START.TIME 16620000)
          (PARTIAL   (CLAUSE 9 T5 THEOREM () ((- 7 (25)) )))
          (INITIAL   (CLAUSE 12 R.= AXIOM ((4 . ANY)) ((+ 2 (4 4)) ))
(CLAUSE 13 A1 AXIOM () ((+ 7 (6)) ))
(CLAUSE 14 A2 AXIOM () ((+ 7 (8)) ))
(CLAUSE 15 A3 AXIOM () ((- 2 (6 8)) ))
(CLAUSE 17 A4 AXIOM ((5 . ANY))
                           ((+ 2 (5 10)) (+ 2 (5 11)) ))
(CLAUSE 9 T5 THEOREM () ((- 7 (25)) )) )
          (END.TIME 21020000)
          (FINAL 12 13 14 15 17 9)
          (SYMBOLS 
                   (LET (NEW.ADDRESS)
          (LIST (CONS    7 (DT-PREDICATE.CREATE "P" '(ANY)))
                           (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
                           (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                  (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                           (CONS   25 (DT-CONSTANT.CREATE "c_3" 'ANY))
                           (CONS   11 (DT-CONSTANT.CREATE "c_2" 'ANY))
                           (CONS   10 (DT-CONSTANT.CREATE "c_1" 'ANY))
                           (CONS    8 (DT-CONSTANT.CREATE "b" 'ANY))
                           (CONS    6 (DT-CONSTANT.CREATE "a" 'ANY)))))
          (RESULT))
(indices ((9 6) (17 1 2) (15 5) (14 4) (13 3) (12 NIL)))

(SPLITPARTS "Unix" "17-JUL,1992 17:45" NIL)

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 0)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . 0)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_MAXIMUM.TIME)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (GEN_OTHER.PROVER . MKRP)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS)
         )

(REFUTATION (START.TIME 21820000)

(OPTIONS (TWO_RULES)
          (TWO_RULES.MAXLEVEL . 1)
          (TWO_SUPPRESS.NORULES)
          (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.I_CLAUSE.PURITY . PARTIAL)
          (RED.I_CLAUSE.TAUTOLOGY . T)
          (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
          (RED.I_CLAUSE.SUBSUMPTION . T)
          (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
          (RED.I_CLAUSE.REPL.FACTORING . T)
          (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.I_CLAUSE.REWRITING . DEM)
          (RED.I_LINK.INCOMPATIBILITY . T)
          (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.I_LINK.TAUTOLOGY.RECHECK)
          (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.I_LINK.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
          (RED.D_CLAUSE.PURITY . PARTIAL)
          (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
          (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
          (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
          (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
          (RED.D_CLAUSE.REPL.FACTORING . T)
          (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
          (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
          (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
          (RED.D_CLAUSE.REWRITING . DEM)
          (RED.D_LINK.INCOMPATIBILITY . T)
          (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
          (RED.D_LINK.TAUTOLOGY.RECHECK)
          (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
          (RED.D_LINK.SUBSUMPTION.RECHECK)
          (FAC_INITIAL)
          (FAC_EACH.STEP)
          (STR_RESOLUTION . SET-OF-SUPPORT)
          (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
          (STR_LINK.DEPTH)
          (STR_TERM.DEPTH)
          (STR_FINITE.DOMAIN . T)
          (TERM_UNITS . T)
          (TERM_ITERATIONS . 0)
          (TERM_SET.OF.SUPPORT)
          (TERM_BREADTH.FIRST)
          (SORT_LITERALS)
          (SORT_MAX.UNIFICATION.RULE.STEPS . 100)
          (SORT_MAX.UNIFICATION.TREE.DEPTH . 100)
          (SORT_MAX.UNIFICATION.TREE.OPEN.NODES . 20)
          (SORT_UNIFIER.STOP.NUMBER . 100)
          (SORT_SHOW.VARIABLE.SORTS . T)
          (ER_PARAMODULATION . HEURISTIC-COMPLETION)
          (ER_WEIGHT.POLYNOMIALS)
          (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
          (ER_COMPLETION . UNFAILING)
          (ER_CP.REDUCTION . T)
          (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
          (ER_OPERATOR.ORDERING * - + 0 1)
          (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
          (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ (* 2 Y) X)) (* (X Y) (+ (* X Y) X)) (- (X) (* X X)) (0 NIL 2) (1 NIL 2))
          (ER_NARROW.DEPTH . 0)
          (ER_NARROW.NEXT . DEPTH)
          (ER_NARROW.TEST NORM C DELTA SL N)
          (ER_COMPILE)
          (GEN_SPLITTING . 0)
          (GEN_PRESIMPLIFICATION . T)
          (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
          (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
          (GEN_MANUAL.CONTROL)
          (GEN_MAXIMUM.STEPS)
          (GEN_MAXIMUM.TIME)
          (GEN_GRAPH.SAVING)
          (GEN_SAVE.FILE . SAVEDEFAULT)
          (GEN_LISP.GARBAGE.COLLECTION)
          (GEN_COMMON.LISP . T)
          (GEN_OTHER.PROVER . MKRP)
          (TR_PREPROCESSING)
          (TR_STEP.MODE . LR)
          (TR_DUMP)
          (TR_CLAUSE.MODE . I)
          (TR_LINK.MODE . I)
          (TR_TRACE.FILE)
          (TR_TERMINAL . T)
          (PR_INFIX.FORM . T)
          (PR_PREFIX.FORM)
          (PR_OPTIONS)
          (PR_AXIOM.CLAUSES . T)
          (PR_SYMBOLS)
          (PR_DIRECT.PROOF . T)
          (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
          (PR_PROTOCOL . STANDARD)
          (PR_LEFT.MARGIN . 0)
          (PR_RIGHT.MARGIN . 117)
          (PR_LATEX)
          (PR_LINELENGTH . 117)
          (PR_LITERALS)
         )
            (INITIAL   (CLAUSE 12 R.= AXIOM ((4 . ANY)) ((+ 2 (4 4)) ))
(CLAUSE 13 A1 AXIOM () ((+ 7 (6)) ))
(CLAUSE 14 A2 AXIOM () ((+ 7 (8)) ))
(CLAUSE 15 A3 AXIOM () ((- 2 (6 8)) ))
(CLAUSE 17 A4 AXIOM ((5 . ANY))
                             ((+ 2 (5 10)) (+ 2 (5 11)) ))
(CLAUSE 9 T5 THEOREM () ((- 7 (25)) )) )
            (OPERATION (CLAUSE 33 P1 (9 17) ()
                               ((- 7 (10)) (+ 2 (25 11)) ))
                       (PARAMODULATION 17 1 (1) 9 1 (1) NIL (5 25) 33))
            (OPERATION (CLAUSE 34 P2 (13 17) ()
                               ((+ 7 (10)) (+ 2 (6 11)) ))
                       (PARAMODULATION 17 1 (1) 13 1 (1) NIL (5 6) 34))
            (OPERATION (CLAUSE 21 R1 (33 34) ()
                               ((+ 2 (6 11)) (+ 2 (25 11)) ))
                       (RESOLUTION 34 1 33 1 NIL NIL 21))
            (OPERATION (CLAUSE 48 P3 (13 21) ()
                               ((+ 7 (11)) (+ 2 (25 11)) ))
                       (PARAMODULATION 21 1 (1) 13 1 (1) NIL NIL 48))
            (OPERATION (CLAUSE 46 P4 (15 21) ()
                               ((- 2 (11 8)) (+ 2 (25 11)) ))
                       (PARAMODULATION 21 1 (1) 15 1 (1) NIL NIL 46))
            (OPERATION (CLAUSE 54 P5 (13 34) ()
                               ((+ 7 (11)) (+ 7 (10)) ))
                       (PARAMODULATION 34 2 (1) 13 1 (1) NIL NIL 54))
            (OPERATION (CLAUSE 36 P6 (14 17) ()
                               ((+ 7 (10)) (+ 2 (8 11)) ))
                       (PARAMODULATION 17 1 (1) 14 1 (1) NIL (5 8) 36))
            (OPERATION (CLAUSE 22 R2 (33 36) ()
                               ((+ 2 (8 11)) (+ 2 (25 11)) ))
                       (RESOLUTION 36 1 33 1 NIL NIL 22))
            (OPERATION (CLAUSE 22 R2 (33 36) ()
                               ((+ 2 (8 11)) (+ 2 (25 11)) ))
                       (REPLACEMENT.OPERATION NIL (22 46)
  (((22 . 1) (46 . 1) SYMMETRIC))
  ((((22 . 2) (46 . 2) NIL)))
  NIL))
            (OPERATION (CLAUSE 17 A4 AXIOM ((5 . ANY))
                               ((+ 2 (5 10)) (+ 2 (5 25)) ))
                       (REWRITE 22 2 17))
            (OPERATION (CLAUSE 34 P2 (13 17) ()
                               ((+ 7 (10)) (+ 2 (6 25)) ))
                       (REWRITE 22 2 34))
            (OPERATION (CLAUSE 54 P5 (13 34) ()
                               ((+ 7 (25)) (+ 7 (10)) ))
                       (REWRITE 22 1 54))
            (OPERATION (CLAUSE 36 P6 (14 17) ()
                               ((+ 7 (10)) (+ 2 (8 25)) ))
                       (REWRITE 22 2 36))
            (OPERATION (CLAUSE 54 P5 (13 34) ()
                               ((+ 7 (25)) (+ 7 (10)) ))
                       (REPLACEMENT.OPERATION NIL (54 9)
  (((54 . 1) (9 . 1) NIL))
  (NIL)
  NIL))
            (OPERATION (CLAUSE 111 P7 (15 17) ()
                               ((- 2 (10 8)) (+ 2 (6 25)) ))
                       (PARAMODULATION 17 1 (1) 15 1 (1) NIL (5 6) 111))
            (OPERATION (CLAUSE 97 P8 (13 111) ()
                               ((+ 7 (25)) (- 2 (10 8)) ))
                       (PARAMODULATION 111 2 (1) 13 1 (1) NIL NIL 97))
            (OPERATION (CLAUSE 97 P8 (13 111) ()
                               ((+ 7 (25)) (- 2 (10 8)) ))
                       (REPLACEMENT.OPERATION NIL (97 9)
  (((97 . 1) (9 . 1) NIL))
  (NIL)
  NIL))
            (OPERATION (CLAUSE 60 P9 (97 17) ()
                               ((- 2 (10 10)) (+ 2 (8 25)) ))
                       (PARAMODULATION 17 1 (1) 97 1 (2) NIL (5 8) 60))
            (OPERATION (CLAUSE 60 P9 (97 17) () ((+ 2 (8 25)) ))
                       (REPLACEMENT.OPERATION NIL (60 12)
  (((60 . 1) (12 . 1) NIL))
  (NIL)
  NIL))
            (OPERATION (CLAUSE 14 A2 AXIOM () ((+ 7 (25)) ))
                       (REWRITE 60 1 14))
            (OPERATION (CLAUSE 15 A3 AXIOM () ((- 2 (6 25)) ))
                       (REWRITE 60 1 15))
            (OPERATION (CLAUSE 97 P8 (13 111) () ((- 2 (10 25)) ))
                       (REWRITE 60 1 97))
            (OPERATION (CLAUSE 14 A2 AXIOM () ((+ 7 (25)) ))
                       (REPLACEMENT.OPERATION NIL (14 9)
  (((14 . 1) (9 . 1) NIL))
  (NIL)
  NIL))
            (END.TIME 63430000)
            (SYMBOLS 
                     (LET (NEW.ADDRESS)
          (LIST (CONS    7 (DT-PREDICATE.CREATE "P" '(ANY)))
                             (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
                             (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
                                    (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
                             (CONS   25 (DT-CONSTANT.CREATE "c_3" 'ANY))
                             (CONS   11 (DT-CONSTANT.CREATE "c_2" 'ANY))
                             (CONS   10 (DT-CONSTANT.CREATE "c_1" 'ANY))
                             (CONS    8 (DT-CONSTANT.CREATE "b" 'ANY))
                             (CONS    6 (DT-CONSTANT.CREATE "a" 'ANY)))))
            (SPLITPART.IDENTIFIER 1)
            (RESULT SUCCESS 14)
)
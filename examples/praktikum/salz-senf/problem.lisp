;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((* ES GILT GENAU EINE DER 3 EIGENSCHAFTEN KEINS, EINS ODER BEIDES *) (ALL X BEIDE (X) OR KEINS (X) OR EINS (X)) (ALL X NOT (EINS (X) AND BEIDE (X))) (ALL X NOT (EINS (X) AND KEINS (X))) (ALL X NOT (BEIDE (X) AND KEINS (X))) (* DEFINITION VON EINS *) (ALL X EINS (X) IMPL SALZ (X) OR SENF (X)) (ALL X EINS (X) IMPL NOT (SALZ (X) AND SENF (X))) (* DEFINITION VON KEINS *) (ALL X KEINS (X) EQV NOT SALZ (X) AND NOT SENF (X)) (* DEFINITION VON BEIDE *) (ALL X BEIDE (X) EQV SALZ (X) AND SENF (X)) (* 1 SATZ *) (SALZ (ANTON) EQV EINS (BRUNO) OR EINS (DORA)) (SENF (ANTON) EQV KEINS (CLARA) OR BEIDE (ELSE)) (* 2 SATZ *) (SALZ (BRUNO) EQV EINS (ANTON) OR KEINS (ELSE)) (SENF (BRUNO) EQV BEIDE (CLARA) OR BEIDE (DORA)) (* 3 SATZ *) (SALZ (CLARA) EQV KEINS (ANTON) OR BEIDE (BRUNO)) (SENF (CLARA) EQV KEINS (DORA) OR KEINS (ELSE)) (* 4 SATZ *) (SALZ (DORA) EQV EINS (ANTON) OR EINS (CLARA)) (SENF (DORA) EQV KEINS (BRUNO) OR KEINS (ELSE)) (* 5 SATZ *) (SALZ (ELSE) EQV BEIDE (ANTON) OR BEIDE (DORA)) (SENF (ELSE) EQV EINS (BRUNO) OR EINS (CLARA)))) (QUOTE (COMMENT (ALL 3 (OR (+ 4 (3) NIL) (OR (+ 5 (3) NIL) (+ 6 (3) NIL)))) (ALL 7 (NOT (AND (+ 6 (7) NIL) (+ 4 (7) NIL)))) (ALL 8 (NOT (AND (+ 6 (8) NIL) (+ 5 (8) NIL)))) (ALL 9 (NOT (AND (+ 4 (9) NIL) (+ 5 (9) NIL)))) COMMENT (ALL 10 (IMPL (+ 6 (10) NIL) (OR (+ 11 (10) NIL) (+ 12 (10) NIL)))) (ALL 13 (IMPL (+ 6 (13) NIL) (NOT (AND (+ 11 (13) NIL) (+ 12 (13) NIL))))) COMMENT (ALL 14 (EQV (+ 5 (14) (KIND (EQV T 110))) (AND (NOT (+ 11 (14) (KIND (EQV NIL 110)))) (NOT (+ 12 (14) (KIND (EQV NIL 110))))))) COMMENT (ALL 15 (EQV (+ 4 (15) (KIND (EQV T 130))) (AND (+ 11 (15) (KIND (EQV NIL 130))) (+ 12 (15) (KIND (EQV NIL 130)))))) COMMENT (EQV (+ 11 (16) (KIND (EQV T 150))) (OR (+ 6 (17) (KIND (EQV NIL 150))) (+ 6 (18) (KIND (EQV NIL 150))))) (EQV (+ 12 (16) (KIND (EQV T 160))) (OR (+ 5 (19) (KIND (EQV NIL 160))) (+ 4 (20) (KIND (EQV NIL 160))))) COMMENT (EQV (+ 11 (17) (KIND (EQV T 180))) (OR (+ 6 (16) (KIND (EQV NIL 180))) (+ 5 (20) (KIND (EQV NIL 180))))) (EQV (+ 12 (17) (KIND (EQV T 190))) (OR (+ 4 (19) (KIND (EQV NIL 190))) (+ 4 (18) (KIND (EQV NIL 190))))) COMMENT (EQV (+ 11 (19) (KIND (EQV T 210))) (OR (+ 5 (16) (KIND (EQV NIL 210))) (+ 4 (17) (KIND (EQV NIL 210))))) (EQV (+ 12 (19) (KIND (EQV T 220))) (OR (+ 5 (18) (KIND (EQV NIL 220))) (+ 5 (20) (KIND (EQV NIL 220))))) COMMENT (EQV (+ 11 (18) (KIND (EQV T 240))) (OR (+ 6 (16) (KIND (EQV NIL 240))) (+ 6 (19) (KIND (EQV NIL 240))))) (EQV (+ 12 (18) (KIND (EQV T 250))) (OR (+ 5 (17) (KIND (EQV NIL 250))) (+ 5 (20) (KIND (EQV NIL 250))))) COMMENT (EQV (+ 11 (20) (KIND (EQV T 270))) (OR (+ 4 (16) (KIND (EQV NIL 270))) (+ 4 (18) (KIND (EQV NIL 270))))) (EQV (+ 12 (20) (KIND (EQV T 280))) (OR (+ 6 (17) (KIND (EQV NIL 280))) (+ 6 (19) (KIND (EQV NIL 280))))))) (QUOTE NIL) (QUOTE NIL) (QUOTE ("Edit:     Axioms and Theorems edited: 01-FEB,1990 17:01 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(59819 59824 59829 59834 59839 59844 59849 59854 59869 59884 59889 59894 59899 59904
          59919 59934 59949 59954 59969 59984 59999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL)))
          ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "BEIDE" NIL NIL (ANY) NIL NIL
          ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE))) ((+ 4 (NIL))) ((- 4 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "KEINS" NIL NIL (ANY) NIL NIL ((- 5 (POSITIVE)))
          ((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
          "EINS" NIL NIL (ANY) NIL NIL ((- 6 (POSITIVE))) ((+ 6 (NEGATIVE))) ((+ 6 (NIL)))
          ((- 6 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "SALZ" NIL NIL (ANY) NIL NIL
          ((- 11 (POSITIVE))) ((+ 11 (NEGATIVE))) ((+ 11 (NIL))) ((- 11 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "SENF" NIL NIL (ANY) NIL NIL ((- 12 (POSITIVE)))
          ((+ 12 (NEGATIVE))) ((+ 12 (NIL))) ((- 12 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY "ANTON" (DT*ST-KIND NIL) CONSTANT 5 ANY "BRUNO" (DT*ST-KIND NIL)
          CONSTANT 5 ANY "DORA" (DT*ST-KIND NIL) CONSTANT 5 ANY "CLARA" (DT*ST-KIND NIL)
          CONSTANT 5 ANY "ELSE" (DT*ST-KIND NIL) CONSTANT))
       (INCREMENT (- MEM*SIZE 60000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 60000)
             (SETQ COUNTER1 21)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 60000)
                 (MEM-INITIALIZE 60000))
               (SETQ COUNTER1 21)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 60000) (+ 59814 INCREMENT) 59814))
      (SETQ MEM*NEXT.VADR 21
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ANY))) (SETQ DT*SORT.NR (QUOTE 2)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (20 19 18 17 16))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE NIL)) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (12 11 6 5 4 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (12 11 6 5 4 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
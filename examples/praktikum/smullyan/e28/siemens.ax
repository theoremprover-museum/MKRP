(COND ((FMT-LOAD "20-NOV-84 16:55:48" NIL (((* AXIOMS FOR PROBLEM 28 %.) COMMENT COMMENT) ((* TWO PEOPLE, A AND
B %.) COMMENT COMMENT) ((* A SAYS: AT LEAST ONE OF US IS A KNAVE.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* WHAT
ARE A AND B.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* ATLEAST (X Y) MEANS: X SAYS: AT LEAST ONE OF US IS A KNAVE.)
COMMENT COMMENT) ((*) COMMENT COMMENT) ((ALL X,Y ATLEAST (X Y) AND KNIGHT (X) IMPL KNAVE (X) OR KNAVE (Y)) (ALL
17 (ALL 18 (IMPL (AND (+ 16 (18 17) NIL) (+ 15 (18) NIL)) (OR (+ 14 (18) NIL) (+ 14 (17) NIL))))) QUANTIFICATION)
((ALL X,Y NOT (ATLEAST (X Y) AND KNAVE (X))) (ALL 11 (ALL 12 (NOT (AND (+ 16 (12 11) NIL) (+ 14 (12) NIL))))) 
QUANTIFICATION) ((ALL X KNIGHT (X) EQV NOT KNAVE (X)) (ALL 9 (EQV (+ 15 (9) (KIND (EQV T 120))) (NOT (+ 14 (9)
(KIND (EQV NIL 120)))))) QUANTIFICATION) ((ATLEAST (A B)) (+ 16 (5 4) NIL) QUANTIFICATION))) (COND (ST*LOAD.FLAG
(PROGN (DT-RESET)) (PROG ((ADDRLIST (QUOTE (10470 10465 10460 10445 10430 ATP.MEMORY.NIL 10415 10410 ATP.MEMORY.NIL
10405 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 10400 10395 ATP.MEMORY.NIL 10485 10500))) (DATALIST (QUOTE (15
"TRUE" NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 15 "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL)))
NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 15 "ATLEAST" NIL NIL (ANY ANY) NIL NIL ((- 16 (POSITIVE))) ((+ 16 (NEGATIVE))) ((+ 16 (NIL)))
((- 16 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 KNIGHT NIL NIL (ANY) NIL NIL ((- 15 (POSITIVE))) ((+ 15 (NEGATIVE)))
((+ 15 (NIL))) ((- 15 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 KNAVE NIL NIL (ANY) NIL NIL ((- 14 (POSITIVE)))
((+ 14 (NEGATIVE))) ((+ 14 (NIL))) ((- 14 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 "A" ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 5 "B" ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT)))
(INCREMENT (IDIFFERENCE MEM*SIZE 10500)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 10500) (SETQ COUNTER1
19) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR
(QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ
COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
DATA))))) (T (COND ((NEQ MEM*SIZE 10500) (MEM-INITIALIZE 10500))) (SETQ COUNTER1 19) (MAPC ADDRLIST (FUNCTION (LAMBDA
(RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST
(FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE
10500) (RPAQ MEM*NEXT.RADR (IPLUS 10390 INCREMENT))) (T (RPAQ MEM*NEXT.RADR 10390))) (RPAQ MEM*NEXT.VADR 19) (RPAQ
MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ 
MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 2) (RPAQQ DT*SORT.PROPERTIES (
DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS 
DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG
NIL) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (4 5)) (RPAQQ DT*ABBREVIATIONS
NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL NIL) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE))
(RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS
(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC 
ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE))
(RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES
NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (14 15 16 2 1)) (RPAQQ DT*PREDICATE.ALL (14 15 16 2 1)) (RPAQQ 
DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES
DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))
(RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ 
DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL
PREDICATE.ALL))) (PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE NIL))) (PROGN (SETPROPLIST
(QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) 
DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL DT*ATTRIBUTE NIL DT*SORT.NUMBER
1)))) (PROGN (RPAQQ ST*STACK1 (NIL ((B PROGN (DT-CONSTANT.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
B) ST*SYMBOL.ADDRESSES))) (A PROGN (DT-CONSTANT.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) 
ST*SYMBOL.ADDRESSES)))) ((X_9 PROGN (DT-VARIABLE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_9) 
ST*SYMBOL.ADDRESSES)))) ((X_11 PROGN (DT-VARIABLE.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_11) 
ST*SYMBOL.ADDRESSES))) (X_12 PROGN (DT-VARIABLE.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_12) 
ST*SYMBOL.ADDRESSES)))) ((KNAVE PROGN (DT-PREDICATE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNAVE)
ST*SYMBOL.ADDRESSES))) (KNIGHT PROGN (DT-PREDICATE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNIGHT)
ST*SYMBOL.ADDRESSES))) (ATLEAST PROGN (DT-PREDICATE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ATLEAST)
ST*SYMBOL.ADDRESSES))) (X_17 PROGN (DT-VARIABLE.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17) 
ST*SYMBOL.ADDRESSES))) (X_18 PROGN (DT-VARIABLE.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18) 
ST*SYMBOL.ADDRESSES)))) NIL NIL NIL NIL NIL NIL NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL
(
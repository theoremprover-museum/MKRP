(COND ((FMT-LOAD "22-NOV-84 18:40:19" NIL (((* AXIOMS OF PROBLEM 34 %.) COMMENT COMMENT) ((* WE HAVE THREE PERSONS
A,B,C.) COMMENT COMMENT) ((* TWO PEOPLE ARE OF THE SAME TYPE , IF THEY ARE BOTH KNIGHTS) COMMENT COMMENT) ((* OR
BOTH KNAVES.) COMMENT COMMENT) ((* A SAYS : B IS A KNAVE.) COMMENT COMMENT) ((* B SAYS : A AND C ARE OF THE SAME
TYPE.) COMMENT COMMENT) ((* WHAT IS C ?) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* KNAVE2 (X,Y) MEANS : X SAYS
: Y IS A KNAVE.) COMMENT COMMENT) ((* SAME3 (X,Y,Z) MEANS : X SAYS : Y AND Z ARE OF THE SAME TYPE) COMMENT COMMENT)
((* SAME2 (X Y) MEANS X AND Y ARE OF THE SAME TYPE) COMMENT COMMENT) ((*) COMMENT COMMENT) ((ALL X KNIGHT (X) EQV
NOT KNAVE (X)) (ALL 42 (EQV (+ 41 (42) (KIND (EQV T 140))) (NOT (+ 40 (42) (KIND (EQV NIL 140)))))) QUANTIFICATION)
((ALL X,Y KNAVE (X) AND KNAVE2 (X Y) IMPL KNIGHT (Y)) (ALL 37 (ALL 38 (IMPL (AND (+ 40 (38) NIL) (+ 36 (38 37)
NIL)) (+ 41 (37) NIL)))) QUANTIFICATION) ((ALL X,Y KNIGHT (X) AND KNAVE2 (X Y) IMPL KNAVE (Y)) (ALL 22 (ALL 21
(IMPL (AND (+ 41 (21) NIL) (+ 36 (21 22) NIL)) (+ 40 (22) NIL)))) QUANTIFICATION) ((ALL X,Y SAME2 (X Y) EQV (KNIGHT
(X) AND KNIGHT (Y)) OR (KNAVE (X) AND KNAVE (Y))) (ALL 25 (ALL 24 (EQV (+ 27 (24 25) (KIND (EQV T 170))) (OR (AND
(+ 41 (24) (KIND (EQV NIL 170))) (+ 41 (25) (KIND (EQV NIL 170)))) (AND (+ 40 (24) (KIND (EQV NIL 170))) (+ 40
(25) (KIND (EQV NIL 170)))))))) QUANTIFICATION) ((ALL X,Y,Z KNIGHT (X) AND SAME3 (X Y Z) IMPL SAME2 (Y Z)) (ALL
48 (ALL 49 (ALL 50 (IMPL (AND (+ 41 (50) NIL) (+ 46 (50 49 48) NIL)) (+ 27 (49 48) NIL))))) QUANTIFICATION) ((ALL
X,Y,Z KNAVE (X) AND SAME3 (X Y Z) IMPL NOT SAME2 (Y Z)) (ALL 32 (ALL 28 (ALL 54 (IMPL (AND (+ 40 (54) NIL) (+ 46
(54 28 32) NIL)) (NOT (+ 27 (28 32) NIL)))))) QUANTIFICATION) ((KNAVE2 (A B)) (+ 36 (59 60) NIL) QUANTIFICATION)
((SAME3 (B A C)) (+ 46 (60 59 63) NIL) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (DT-RESET)) (PROG ((ADDRLIST
(QUOTE (19820 ATP.MEMORY.NIL ATP.MEMORY.NIL 19825 19830 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
19845 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 19875 19870 19865 ATP.MEMORY.NIL 19860 ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL 19970 19965 19950 ATP.MEMORY.NIL 19935 19930 19925 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
19835 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 19840 19890 ATP.MEMORY.NIL 19895 19900 ATP.MEMORY.NIL 19905
19910 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 19985 20000))) (DATALIST (QUOTE (15 "TRUE" NIL NIL NIL (DEFINED) NIL
((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE"
NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "KNIGHT" NIL NIL (ANY) NIL NIL ((- 41 (POSITIVE)))
((+ 41 (NEGATIVE))) ((+ 41 (NIL))) ((- 41 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "KNAVE" NIL NIL (ANY) NIL
NIL ((- 40 (POSITIVE))) ((+ 40 (NEGATIVE))) ((+ 40 (NIL))) ((- 40 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5
ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "KNAVE2"
NIL NIL (ANY ANY) NIL NIL ((- 36 (POSITIVE))) ((+ 36 (NEGATIVE))) ((+ 36 (NIL))) ((- 36 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "SAME2"
NIL NIL (ANY ANY) NIL NIL ((- 27 (POSITIVE))) ((+ 27 (NEGATIVE))) ((+ 27 (NIL))) ((- 27 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "SAME3" NIL NIL (ANY ANY ANY) NIL NIL ((- 46 (POSITIVE)))
((+ 46 (NEGATIVE))) ((+ 46 (NIL))) ((- 46 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 "A" ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 5 "B" ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT
5 "C" ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT))) (INCREMENT (IDIFFERENCE MEM*SIZE 20000)) COUNTER1) (MEM-RESET)
(COND ((IGREATERP MEM*SIZE 20000) (SETQ COUNTER1 64) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY
(SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR))
RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA)
(SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 20000) (MEM-INITIALIZE 20000)))
(SETQ COUNTER1 64) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR))))
(SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
DATA)))))) (COND ((IGREATERP MEM*SIZE 20000) (RPAQ MEM*NEXT.RADR (IPLUS 19815 INCREMENT))) (T (RPAQ MEM*NEXT.RADR
19815))) (RPAQ MEM*NEXT.VADR 64) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ 
MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR
2) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE
DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ 
DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL
(63 60 59)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL NIL) (RPAQQ 
DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ 
DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT 
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES
(46 27 36 40 41 2 1)) (RPAQQ DT*PREDICATE.ALL (46 27 36 40 41 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ
DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES
-ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE
2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++))
(RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL))) (PROGN) (PROGN (SETPROPLIST (QUOTE 
DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE NIL))) (PROGN (SETPROPLIST (QUOTE ANY) (QUOTE (DT*ATTRIBUTE NIL 
DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY ANY))
DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL DT*SORT.NUMBER 1)))) (PROGN (RPAQQ ST*STACK1 (NIL ((C PROGN
(DT-CONSTANT.DELETE 63) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE C) ST*SYMBOL.ADDRESSES)))) ((B PROGN (
DT-CONSTANT.DELETE 60) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B) ST*SYMBOL.ADDRESSES))) (A PROGN (DT-CONSTANT.DELETE
59) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) ST*SYMBOL.ADDRESSES)))) ((X_32 PROGN (DT-VARIABLE.DELETE 32)
(RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_32) ST*SYMBOL.ADDRESSES))) (X_28 PROGN (DT-VARIABLE.DELETE 28) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_28) ST*SYMBOL.ADDRESSES))) (X_54 PROGN (DT-VARIABLE.DELETE 54) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_54) ST*SYMBOL.ADDRESSES)))) ((SAME3 PROGN (DT-PREDICATE.DELETE 46) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SAME3) ST*SYMBOL.ADDRESSES))) (X_48 PROGN (DT-VARIABLE.DELETE 48) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_48) ST*SYMBOL.ADDRESSES))) (X_49 PROGN (DT-VARIABLE.DELETE 49) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_49) ST*SYMBOL.ADDRESSES))) (X_50 PROGN (DT-VARIABLE.DELETE 50) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_50) ST*SYMBOL.ADDRESSES)))) ((SAME2 PROGN (DT-PREDICATE.DELETE 27) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SAME2) ST*SYMBOL.ADDRESSES))) (X_25 PROGN (DT-VARIABLE.DELETE 25) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_25) ST*SYMBOL.ADDRESSES))) (X_24 PROGN (DT-VARIABLE.DELETE 24) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_24) ST*SYMBOL.ADDRESSES)))) ((X_22 PROGN (DT-VARIABLE.DELETE 22) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_22) ST*SYMBOL.ADDRESSES))) (X_21 PROGN (DT-VARIABLE.DELETE 21) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) ST*SYMBOL.ADDRESSES)))) ((KNAVE2 PROGN (DT-PREDICATE.DELETE 36) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNAVE2) ST*SYMBOL.ADDRESSES))) (X_37 PROGN (DT-VARIABLE.DELETE 37) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_37) ST*SYMBOL.ADDRESSES))) (X_38 PROGN (DT-VARIABLE.DELETE 38) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_38) ST*SYMBOL.ADDRESSES)))) ((KNAVE PROGN (DT-PREDICATE.DELETE 40) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNAVE) ST*SYMBOL.ADDRESSES))) (KNIGHT PROGN (DT-PREDICATE.DELETE 41) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNIGHT) ST*SYMBOL.ADDRESSES))) (X_42 PROGN (DT-VARIABLE.DELETE 42) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_42) ST*SYMBOL.ADDRESSES)))) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES)))
(TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY
PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY
REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_42
. 42) (KNIGHT . 41) (KNAVE . 40) (X_38 . 38) (X_37 . 37) (KNAVE2 . 36) (X_21 . 21) (X_22 . 22) (X_24 . 24) (X_25
. 25) (SAME2 . 27) (X_50 . 50) (X_49 . 49) (X_48 . 48) (SAME3 . 46) (X_54 . 54) (X_28 . 28) (X_32 . 32) (A . 59)
(B . 60) (C . 63))))))))STOP
 

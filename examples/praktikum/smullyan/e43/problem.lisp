;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((* AXIOMS FOR PROBLEM 43 %.) (* GIVEN THREE PEOPLE A,B AND C.) (* ONE IS A KNIGHT ,ONE A KNAVE ,ONE A NORMAL.) (* A SAYS : B IS OF HIGHER RANK THAN C.) (* B SAYS : C IS OF A HIGHER RANK THAN A.) (*) (* THEN C IS ASKED : WHO HAS A HIGHER RANK ,A OR B. WHAT DOES C ANSWER?) (*) (*) (* HRANK2 (X Y) MEANS : X IS OF A HIGHER RANK THAN Y.) (* HRANK3 (X Y Z) MEANS : X SAYS : Y IS OF A HIGHER RANK THAN Z.) (*) (*) (ALL X KNIGHT (X) EQV NOT KNAVE (X) AND NOT NORMAL (X)) (ALL X KNAVE (X) EQV NOT KNIGHT (X) AND NOT NORMAL (X)) (ALL X NORMAL (X) EQV NOT KNIGHT (X) AND NOT KNAVE (X)) (ALL X,Y,Z HRANK3 (X Y Z) AND KNAVE (X) IMPL NOT HRANK2 (Y Z)) (ALL X,Y,Z HRANK3 (X Y Z) AND KNIGHT (X) IMPL HRANK2 (Y Z)) (ALL X,Y HRANK2 (X Y) EQV KNIGHT (X) AND NOT KNIGHT (Y) OR NORMAL (X) AND KNAVE (Y)) (NORMAL (A) OR NORMAL (B) OR NORMAL (C)) (KNIGHT (A) OR KNIGHT (B) OR KNIGHT (C)) (KNAVE (A) OR KNAVE (B) OR KNAVE (C)) (HRANK3 (A B C)) (HRANK3 (B C A)) (HRANK3 (C B A) OR HRANK3 (C A B)))) (QUOTE (COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT (ALL 2 (EQV (+ 3 (2) (KIND (EQV T 150))) (AND (NOT (+ 4 (2) (KIND (EQV NIL 150)))) (NOT (+ 5 (2) (KIND (EQV NIL 150))))))) (ALL 6 (EQV (+ 4 (6) (KIND (EQV T 160))) (AND (NOT (+ 3 (6) (KIND (EQV NIL 160)))) (NOT (+ 5 (6) (KIND (EQV NIL 160))))))) (ALL 7 (EQV (+ 5 (7) (KIND (EQV T 170))) (AND (NOT (+ 3 (7) (KIND (EQV NIL 170)))) (NOT (+ 4 (7) (KIND (EQV NIL 170))))))) (ALL 10 (ALL 9 (ALL 8 (IMPL (AND (+ 11 (8 9 10) NIL) (+ 4 (8) NIL)) (NOT (+ 12 (9 10) NIL)))))) (ALL 15 (ALL 14 (ALL 13 (IMPL (AND (+ 11 (13 14 15) NIL) (+ 3 (13) NIL)) (+ 12 (14 15) NIL))))) (ALL 17 (ALL 16 (EQV (+ 12 (16 17) (KIND (EQV T 200))) (OR (AND (+ 3 (16) (KIND (EQV NIL 200))) (NOT (+ 3 (17) (KIND (EQV NIL 200))))) (AND (+ 5 (16) (KIND (EQV NIL 200))) (+ 4 (17) (KIND (EQV NIL 200)))))))) (OR (+ 5 (18) NIL) (OR (+ 5 (19) NIL) (+ 5 (20) NIL))) (OR (+ 3 (18) NIL) (OR (+ 3 (19) NIL) (+ 3 (20) NIL))) (OR (+ 4 (18) NIL) (OR (+ 4 (19) NIL) (+ 4 (20) NIL))) (+ 11 (18 19 20) NIL) (+ 11 (19 20 18) NIL) (OR (+ 11 (20 19 18) NIL) (+ 11 (20 18 19) NIL)))) (QUOTE ((HRANK3 (C B A)))) (QUOTE ((+ 11 (20 19 18) NIL))) (QUOTE ("Edit:     Axioms and Theorems edited: 15-DEC,1989 14:47 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(19829 19834 19839 19844 19849 19854 19859 19864 19879 19894 19899 19904 19909 19914
          19919 19934 19949 19964 19969 19984 19999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "KNIGHT" NIL NIL (ANY) NIL NIL ((- 3 (POSITIVE))) ((+ 3 (NEGATIVE)))
          ((+ 3 (NIL))) ((- 3 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "KNAVE" NIL NIL
          (ANY) NIL NIL ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE))) ((+ 4 (NIL))) ((- 4 (NIL))) NIL
          NIL (DT*ST-KIND NIL) PREDICATE 15 "NORMAL" NIL NIL (ANY) NIL NIL ((- 5 (POSITIVE)))
          ((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5
          ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "HRANK3" NIL NIL (ANY ANY ANY) NIL NIL
          ((- 11 (POSITIVE))) ((+ 11 (NEGATIVE))) ((+ 11 (NIL))) ((- 11 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "HRANK2" NIL NIL (ANY ANY) NIL NIL ((- 12 (POSITIVE)))
          ((+ 12 (NEGATIVE))) ((+ 12 (NIL))) ((- 12 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY "A" (DT*ST-KIND NIL) CONSTANT 5 ANY
          "B" (DT*ST-KIND NIL) CONSTANT 5 ANY "C" (DT*ST-KIND NIL) CONSTANT))
       (INCREMENT (- MEM*SIZE 20000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 20000)
             (SETQ COUNTER1 21)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 20000)
                 (MEM-INITIALIZE 20000))
               (SETQ COUNTER1 21)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 20000) (+ 19824 INCREMENT) 19824))
      (SETQ MEM*NEXT.VADR 21
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ANY))) (SETQ DT*SORT.NR (QUOTE 2)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (20 19 18))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE NIL)) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE NIL)) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (12 11 5 4 3 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (12 11 5 4 3 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
(COND ((FMT-LOAD " 5-OCT-84 06:00:17"
NIL(((* SMULLYAN: KAPITEL 3, RITTER UND SCHURKEN) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* AUFGABE 26) COMMENT COMMENT) ((* ES STANDEN EINMAL DREI DER INSELBEWOHNER - A, B UND C - ZUSAMMEN IN EINEM GARTEN.) COMMENT COMMENT) ((* EIN FREMDER GING
VORBEI IND FRAGTE A: BIST DU EIN RITTER ODER IN SCHURKE?) COMMENT COMMENT) ((* A ANTWORTETE, ABER SEHR UNDEUTLICH, SO DASS DER FREMDE NICHT VERSTEHEN KONNTE, WAS ER GESAGT HATTE.) COMMENT COMMENT) ((* DANN FRAGE DER FREMDE B: WAS HAT A GESAGT?
B ANTWORTETE: A HAT GESAGT, DASS EINER VON UNS EIN RITTER IST.) COMMENT COMMENT) ((* DARAUF SAGT C: GLAUBE DEM B NICHT, ER LUEGT!) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* DIE FRAGE IST: WAS SIND B UND C?) COMMENT COMMENT) ((*) COMMENT COMMENT)
((ALL X SCHURKE (X) EQV NOT RITTER (X)) (ALL 4 (EQV (+ 5 (4) (KIND (EQV T 130))) (NOT (+ 6 (4) (KIND (EQV NIL 130)))))) QUANTIFICATION) ((*) COMMENT COMMENT) ((* DAS PRAEDIKAT R2 SOLL BEDEUTEN: R2 (X Y) IS WAHR, WENN X SAGT, DASS Y EIN RITTER
IST,) COMMENT COMMENT) ((* DAS PRAEDIKAT S2 SOLL BEDEUTEN: S2 (X Y) IS WAHR, WENN X SAGT, DASS Y EIN SCHURKE IST.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((ALL X,Y S2 (X Y) EQV NOT R2 (X Y)) (ALL 8 (ALL 7 (EQV (+ 9 (7 8) (KIND (EQV T 180))) (NOT
(+ 10 (7 8) (KIND (EQV NIL 180))))))) QUANTIFICATION) ((*) COMMENT COMMENT) ((ALL X,Y RITTER (X) AND R2 (X Y) IMPL RITTER (Y)) (ALL 12 (ALL 11 (IMPL (AND (+ 6 (11) NIL) (+ 10 (11 12) NIL)) (+ 6 (12) NIL)))) QUANTIFICATION) ((ALL X,Y RITTER (X)
AND S2 (X Y) IMPL SCHURKE (Y)) (ALL 14 (ALL 13 (IMPL (AND (+ 6 (13) NIL) (+ 9 (13 14) NIL)) (+ 5 (14) NIL)))) QUANTIFICATION) ((ALL X,Y SCHURKE (X) AND R2 (X Y) IMPL SCHURKE (Y)) (ALL 16 (ALL 15 (IMPL (AND (+ 5 (15) NIL) (+ 10 (15 16) NIL)) (+
5 (16) NIL)))) QUANTIFICATION) ((ALL X,Y SCHURKE (X) AND S2 (X Y) IMPL RITTER (Y)) (ALL 18 (ALL 17 (IMPL (AND (+ 5 (17) NIL) (+ 9 (17 18) NIL)) (+ 6 (18) NIL)))) QUANTIFICATION) ((*) COMMENT COMMENT) ((* DAS PRAEDIKAT R3 SOLL BEDEUTEN: R3 (X Y
Z) IS WAHR, WENN X SAGT, DASS Y SAGT, DASS Z EIN RITTER IST.) COMMENT COMMENT) ((* DAS PRAEDIKAT S3 SOLL BEDEUTEN: S3 (X Y Z) IS WAHR, WENN X SAGT, DASS Y SAGT, DASS Z EIN SCHURKE IST.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((ALL X,Y,Z S3 (X
Y Z) EQV NOT R3 (X Y Z)) (ALL 21 (ALL 20 (ALL 19 (EQV (+ 22 (19 20 21) (KIND (EQV T 280))) (NOT (+ 23 (19 20 21) (KIND (EQV NIL 280)))))))) QUANTIFICATION) ((*) COMMENT COMMENT) ((ALL X,Y,Z RITTER (X) AND R3 (X Y Z) IMPL R2 (Y Z)) (ALL 26 (ALL
25 (ALL 24 (IMPL (AND (+ 6 (24) NIL) (+ 23 (24 25 26) NIL)) (+ 10 (25 26) NIL))))) QUANTIFICATION) ((ALL X,Y,Z RITTER (X) AND S3 (X Y Z) IMPL S2 (Y Z)) (ALL 29 (ALL 28 (ALL 27 (IMPL (AND (+ 6 (27) NIL) (+ 22 (27 28 29) NIL)) (+ 9 (28 29) NIL)))))
QUANTIFICATION) ((ALL X,Y,Z SCHURKE (X) AND R3 (X Y Z) IMPL S2 (Y Z)) (ALL 32 (ALL 31 (ALL 30 (IMPL (AND (+ 5 (30) NIL) (+ 23 (30 31 32) NIL)) (+ 9 (31 32) NIL))))) QUANTIFICATION) ((ALL X,Y,Z SCHURKE (X) AND S3 (X Y Z) IMPL R2 (Y Z)) (ALL 35
(ALL 34 (ALL 33 (IMPL (AND (+ 5 (33) NIL) (+ 22 (33 34 35) NIL)) (+ 10 (34 35) NIL))))) QUANTIFICATION) ((*) COMMENT COMMENT) (((R3 (B A A) AND S3 (B A B) AND S3 (B A C)) OR (S3 (B A A) AND R3 (B A B) AND S3 (B A C)) OR (S3 (B A A) AND S3 (B A
B) AND R3 (B A C))) (OR (AND (+ 23 (36 37 37) NIL) (AND (+ 22 (36 37 36) NIL) (+ 22 (36 37 38) NIL))) (OR (AND (+ 22 (36 37 37) NIL) (AND (+ 23 (36 37 36) NIL) (+ 22 (36 37 38) NIL))) (AND (+ 22 (36 37 37) NIL) (AND (+ 22 (36 37 36) NIL) (+ 23
(36 37 38) NIL))))) QUANTIFICATION) ((S2 (C B)) (+ 9 (38 36) NIL) QUANTIFICATION) ((*) COMMENT COMMENT) ((* ERGEBNISS DES ERSTEN TEILS:) COMMENT COMMENT) ((SCHURKE (B)) (+ 5 (36) NIL) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (9980 9985 9990 9995 10000 10005 10010 10015 10020 10025 10030 10035 10040 10045 10050 10065 10080 10085 10090 10095 10100 10105 10110 10115 10120 10125 10130 10135 10150 10165 10170 10175 10190 10205 10210 ATP.MEMORY.NIL
10225 10240))) (DATALIST (QUOTE (15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE)))
((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "SCHURKE" NIL NIL (ANY) NIL NIL ((- 5 (POSITIVE))) ((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
15 "RITTER" NIL NIL (ANY) NIL NIL ((- 6 (POSITIVE))) ((+ 6 (NEGATIVE))) ((+ 6 (NIL))) ((- 6 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "S2"
NIL NIL (ANY ANY) NIL NIL ((- 9 (POSITIVE))) ((+ 9 (NEGATIVE))) ((+ 9 (NIL))) ((- 9 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "R2" NIL NIL (ANY ANY) NIL NIL ((- 10 (POSITIVE))) ((+ 10 (NEGATIVE))) ((+ 10 (NIL))) ((- 10 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL
DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY
NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "S3" NIL NIL (ANY ANY ANY) NIL NIL ((- 22 (POSITIVE))) ((+ 22 (NEGATIVE))) ((+ 22 (NIL))) ((- 22 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
"R3" NIL NIL (ANY ANY ANY) NIL NIL ((- 23 (POSITIVE))) ((+ 23 (NEGATIVE))) ((+ 23 (NIL))) ((- 23 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 "B" ANY (DT*ST-KIND NIL) CONSTANT 5 "A" ANY (DT*ST-KIND NIL) CONSTANT 5 "C" ANY (DT*ST-KIND NIL) CONSTANT))) (INCREMENT (IDIFFERENCE MEM*SIZE 10240)) COUNTER1) (MEM-RESET) (COND ((IGREATERP (IPLUS (IDIFFERENCE 39 1) (IDIFFERENCE
10240 9975)) MEM*SIZE) (MEM=SATURATION.ENTERED)) ((EQ MEM*SIZE 10240) (SETQ COUNTER1 39) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION
(LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (SETQ COUNTER1 39) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ
RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (RPAQ MEM*NEXT.RADR (IPLUS 9975 INCREMENT)) (RPAQ
MEM*NEXT.VADR 39) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 2) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS
DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (38 37 36)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL NIL)
(RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST
SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ 
DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (23 22 10 9 6 5 2 1)) (RPAQQ DT*PREDICATE.ALL (23 22 10 9 6 5 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES
DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --))
(RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)))
(PROGN)
(PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE NIL)))
(PROGN (SETPROPLIST (QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL DT*SORT.NUMBER 1))))
(PROGN (RPAQQ ST*STACK1 (NIL NIL NIL NIL NIL ((C PROGN (DT-CONSTANT.DELETE 38) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE C) ST*SYMBOL.ADDRESSES))) (A PROGN (DT-CONSTANT.DELETE 37) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) ST*SYMBOL.ADDRESSES)))
(B PROGN (DT-CONSTANT.DELETE 36) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B) ST*SYMBOL.ADDRESSES)))) NIL ((X_35 PROGN (DT-VARIABLE.DELETE 35) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_35) ST*SYMBOL.ADDRESSES))) (X_34 PROGN (DT-VARIABLE.DELETE
34) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_34) ST*SYMBOL.ADDRESSES))) (X_33 PROGN (DT-VARIABLE.DELETE 33) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_33) ST*SYMBOL.ADDRESSES)))) ((X_32 PROGN (DT-VARIABLE.DELETE 32) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE X_32) ST*SYMBOL.ADDRESSES))) (X_31 PROGN (DT-VARIABLE.DELETE 31) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_31) ST*SYMBOL.ADDRESSES))) (X_30 PROGN (DT-VARIABLE.DELETE 30) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_30) 
ST*SYMBOL.ADDRESSES)))) ((X_29 PROGN (DT-VARIABLE.DELETE 29) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_29) ST*SYMBOL.ADDRESSES))) (X_28 PROGN (DT-VARIABLE.DELETE 28) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_28) ST*SYMBOL.ADDRESSES))) (X_27
PROGN (DT-VARIABLE.DELETE 27) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_27) ST*SYMBOL.ADDRESSES)))) ((X_26 PROGN (DT-VARIABLE.DELETE 26) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_26) ST*SYMBOL.ADDRESSES))) (X_25 PROGN (DT-VARIABLE.DELETE
25) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_25) ST*SYMBOL.ADDRESSES))) (X_24 PROGN (DT-VARIABLE.DELETE 24) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_24) ST*SYMBOL.ADDRESSES)))) NIL ((R3 PROGN (DT-PREDICATE.DELETE 23) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE R3) ST*SYMBOL.ADDRESSES))) (S3 PROGN (DT-PREDICATE.DELETE 22) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE S3) ST*SYMBOL.ADDRESSES))) (X_21 PROGN (DT-VARIABLE.DELETE 21) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) 
ST*SYMBOL.ADDRESSES))) (X_20 PROGN (DT-VARIABLE.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_20) ST*SYMBOL.ADDRESSES))) (X_19 PROGN (DT-VARIABLE.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_19) ST*SYMBOL.ADDRESSES)))) NIL
NIL NIL NIL ((X_18 PROGN (DT-VARIABLE.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18) ST*SYMBOL.ADDRESSES))) (X_17 PROGN (DT-VARIABLE.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17) ST*SYMBOL.ADDRESSES)))) ((X_16 PROGN
(DT-VARIABLE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES))) (X_15 PROGN (DT-VARIABLE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_15) ST*SYMBOL.ADDRESSES)))) ((X_14 PROGN (DT-VARIABLE.DELETE 14) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES))) (X_13 PROGN (DT-VARIABLE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_13) ST*SYMBOL.ADDRESSES)))) ((X_12 PROGN (DT-VARIABLE.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE X_12) ST*SYMBOL.ADDRESSES))) (X_11 PROGN (DT-VARIABLE.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_11) ST*SYMBOL.ADDRESSES)))) NIL ((R2 PROGN (DT-PREDICATE.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE R2) ST*SYMBOL.ADDRESSES))
) (S2 PROGN (DT-PREDICATE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE S2) ST*SYMBOL.ADDRESSES))) (X_8 PROGN (DT-VARIABLE.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_8) ST*SYMBOL.ADDRESSES))) (X_7 PROGN (DT-VARIABLE.DELETE 7)
(RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_7) ST*SYMBOL.ADDRESSES)))) NIL NIL NIL NIL ((RITTER PROGN (DT-PREDICATE.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE RITTER) ST*SYMBOL.ADDRESSES))) (SCHURKE PROGN (DT-PREDICATE.DELETE 5) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SCHURKE) ST*SYMBOL.ADDRESSES))) (X_4 PROGN (DT-VARIABLE.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_4) ST*SYMBOL.ADDRESSES)))) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL ((FALSE PROGN (
DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY))
(RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_4 . 4) (SCHURKE . 5) (RITTER . 6) (X_7 . 7) (X_8 . 8) (S2 .
9) (R2 . 10) (X_11 . 11) (X_12 . 12) (X_13 . 13) (X_14 . 14) (X_15 . 15) (X_16 . 16) (X_17 . 17) (X_18 . 18) (X_19 . 19) (X_20 . 20) (X_21 . 21) (S3 . 22) (R3 . 23) (X_24 . 24) (X_25 . 25) (X_26 . 26) (X_27 . 27) (X_28 . 28) (X_29 . 29) (X_30
. 30) (X_31 . 31) (X_32 . 32) (X_33 . 33) (X_34 . 34) (X_35 . 35) (B . 36) (A . 37) (C . 38))))))))STOP
 

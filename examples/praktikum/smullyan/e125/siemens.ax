(COND ((FMT-LOAD " 4-APR-85 11:19:11"
NIL(((* SMULLYAN, CHAPTER 8, PROBLEM 125) COMMENT COMMENT) ((* ANOTHER TIME I WAS VISITING A DIFFERENT ISLAND OF
KNIGHTS,) COMMENT COMMENT) ((* KNAVES, AND NORMALS.) COMMENT COMMENT) ((ALL X KNIGHT (X) IMPL NOT KNAVE (X)) (ALL
3 (IMPL (+ 4 (3) NIL) (NOT (+ 5 (3) NIL)))) QUANTIFICATION) ((ALL X KNAVE (X) IMPL NOT NORMAL (X)) (ALL 6 (IMPL
(+ 5 (6) NIL) (NOT (+ 7 (6) NIL)))) QUANTIFICATION) ((ALL X NORMAL (X) IMPL NOT KNIGHT (X)) (ALL 8 (IMPL (+ 7 (8)
NIL) (NOT (+ 4 (8) NIL)))) QUANTIFICATION) ((ALL X,Y KNIGHT (X) AND ANSWER (X Y) IMPL T (Y)) (ALL 10 (ALL 9 (IMPL
(AND (+ 4 (9) NIL) (+ 11 (9 10) NIL)) (+ 12 (10) NIL)))) QUANTIFICATION) ((ALL X,Y KNAVE (X) AND ANSWER (X Y) IMPL
NOT T (Y)) (ALL 14 (ALL 13 (IMPL (AND (+ 5 (13) NIL) (+ 11 (13 14) NIL)) (NOT (+ 12 (14) NIL))))) QUANTIFICATION)
((ALL X KNIGHT (X) OR KNAVE (X) OR NORMAL (X)) (ALL 15 (OR (+ 4 (15) NIL) (OR (+ 5 (15) NIL) (+ 7 (15) NIL))))
QUANTIFICATION) ((* IT WAS RUMORED THAT THERE WAS GOLD ON THE ISLAND, AND I) COMMENT COMMENT) ((* WANTED TO FIND
OUT WHETHER THERE WAS. THE KING OF THE ISLAND,) COMMENT COMMENT) ((* WHO WAS A KNIGHT, GRACIOUSLY INTRODUCED ME
TO THREE OF THE) COMMENT COMMENT) ((* NATIVES, A, B, C, AND TOLD ME THAT AT MOST ONE OF THEM WAS) COMMENT COMMENT)
((* NORMAL.) COMMENT COMMENT) ((((KNIGHT (A) OR KNAVE (A)) AND (KNIGHT (B) OR KNAVE (B))) OR ((KNIGHT (A) OR KNAVE
(A)) AND (KNIGHT (C) OR KNAVE (C))) OR ((KNIGHT (B) OR KNAVE (B)) AND (KNIGHT (C) OR KNAVE (C)))) (OR (AND (OR
(+ 4 (16) NIL) (+ 5 (16) NIL)) (OR (+ 4 (17) NIL) (+ 5 (17) NIL))) (OR (AND (OR (+ 4 (16) NIL) (+ 5 (16) NIL))
(OR (+ 4 (18) NIL) (+ 5 (18) NIL))) (AND (OR (+ 4 (17) NIL) (+ 5 (17) NIL)) (OR (+ 4 (18) NIL) (+ 5 (18) NIL)))))
QUANTIFICATION) ((* I WAS ALLOWED TO ASK TWO YES-NO QUESTIONS TO WHICHEVER ONES) COMMENT COMMENT) ((* I WISHED.)
COMMENT COMMENT) ((T (YES1) EQV QUESTION1) (EQV (+ 12 (19) NIL) (+ 20 NIL NIL)) QUANTIFICATION) ((T (NO1) EQV NOT
QUESTION1) (EQV (+ 12 (21) NIL) (NOT (+ 20 NIL NIL))) QUANTIFICATION) ((T (YES2-A) EQV QUESTION2-A) (EQV (+ 12
(25) NIL) (+ 22 NIL NIL)) QUANTIFICATION) ((T (NO2-A) EQV NOT QUESTION2-A) (EQV (+ 12 (27) NIL) (NOT (+ 22 NIL
NIL))) QUANTIFICATION) ((T (YES2-B) EQV QUESTION2-B) (EQV (+ 12 (30) NIL) (+ 31 NIL NIL)) QUANTIFICATION) ((T (NO2-B)
EQV NOT QUESTION2-B) (EQV (+ 12 (32) NIL) (NOT (+ 31 NIL NIL))) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(MEM-RESTORE NIL NIL 33 10265 10500 (QUOTE (10270 10285 10290 ATP.MEMORY.NIL ATP.MEMORY.NIL 10295 ATP.MEMORY.NIL
10315 ATP.MEMORY.NIL ATP.MEMORY.NIL 10310 10320 10335 10340 10345 10350 10355 10360 10365 10370 10385 10400 10405
10410 10415 10430 10435 10450 10465 10470 10485 10500))(QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE)))
((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED)
NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY
NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 KNIGHT NIL NIL (ANY) NIL NIL ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE)))
((+ 4 (NIL))) ((- 4 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 KNAVE NIL NIL (ANY) NIL NIL ((- 5 (POSITIVE)))
((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 15 NORMAL NIL NIL (ANY) NIL NIL ((- 7 (POSITIVE))) ((+ 7 (NEGATIVE))) ((+ 7 (NIL))) ((- 7 (NIL)))
NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 ANSWER NIL NIL (ANY ANY) NIL NIL ((- 11
(POSITIVE))) ((+ 11 (NEGATIVE))) ((+ 11 (NIL))) ((- 11 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 T NIL NIL
(ANY) NIL NIL ((- 12 (POSITIVE))) ((+ 12 (NEGATIVE))) ((+ 12 (NIL))) ((- 12 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 A ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 5 B ANY (ST*ATTRIBUTE
NIL DT*ST-KIND NIL) CONSTANT 5 C ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 5 YES1 ANY (ST*ATTRIBUTE NIL DT*ST-KIND
NIL) CONSTANT 15 QUESTION1 NIL NIL NIL NIL NIL ((- 20 (POSITIVE))) ((+ 20 (NEGATIVE))) ((+ 20 (NIL))) ((- 20 (NIL)))
NIL NIL (DT*ST-KIND NIL) PREDICATE 5 NO1 ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 5 YES2-A ANY (ST*ATTRIBUTE
NIL DT*ST-KIND NIL) CONSTANT 15 QUESTION2-A NIL NIL NIL NIL NIL ((- 22 (POSITIVE))) ((+ 22 (NEGATIVE))) ((+ 22
(NIL))) ((- 22 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 NO2-A ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT
5 YES2-B ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 15 QUESTION2-B NIL NIL NIL NIL NIL ((- 31 (POSITIVE)))
((+ 31 (NEGATIVE))) ((+ 31 (NIL))) ((- 31 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 NO2-B ANY (ST*ATTRIBUTE
NIL DT*ST-KIND NIL) CONSTANT)))(PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 2) (RPAQQ DT*SORT.PROPERTIES
(DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS 
DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG
NIL) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (32 30 27 25 21 19 18 17
16)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL NIL) (RPAQQ 
DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ 
DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT 
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES
(31 22 20 12 11 7 5 4 2 1)) (RPAQQ DT*PREDICATE.ALL (31 22 20 12 11 7 5 4 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES
NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE
+ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ
DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ 
DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE NIL)))
(PROGN (SETPROPLIST (QUOTE ANY) (QUOTE (DT*ATTRIBUTE NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS
NIL DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*SORT.NUMBER 1 
DT*DIRECT.SUBSORTS NIL))))
(PROGN (RPAQQ ST*STACK1 (NIL ((NO2-B PROGN (DT-CONSTANT.DELETE 32) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NO2-B)
ST*SYMBOL.ADDRESSES)))) ((QUESTION2-B PROGN (DT-PREDICATE.DELETE 31) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
QUESTION2-B) ST*SYMBOL.ADDRESSES))) (YES2-B PROGN (DT-CONSTANT.DELETE 30) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
YES2-B) ST*SYMBOL.ADDRESSES)))) ((NO2-A PROGN (DT-CONSTANT.DELETE 27) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
NO2-A) ST*SYMBOL.ADDRESSES)))) ((QUESTION2-A PROGN (DT-PREDICATE.DELETE 22) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE QUESTION2-A) ST*SYMBOL.ADDRESSES))) (YES2-A PROGN (DT-CONSTANT.DELETE 25) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE YES2-A) ST*SYMBOL.ADDRESSES)))) ((NO1 PROGN (DT-CONSTANT.DELETE 21) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE NO1) ST*SYMBOL.ADDRESSES)))) ((QUESTION1 PROGN (DT-PREDICATE.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE QUESTION1) ST*SYMBOL.ADDRESSES))) (YES1 PROGN (DT-CONSTANT.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE YES1) ST*SYMBOL.ADDRESSES)))) NIL NIL ((C PROGN (DT-CONSTANT.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE C) ST*SYMBOL.ADDRESSES))) (B PROGN (DT-CONSTANT.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B)
ST*SYMBOL.ADDRESSES))) (A PROGN (DT-CONSTANT.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) 
ST*SYMBOL.ADDRESSES)))) NIL NIL NIL NIL NIL ((X_15 PROGN (DT-VARIABLE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE X_15) ST*SYMBOL.ADDRESSES)))) ((X_14 PROGN (DT-VARIABLE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
X_14) ST*SYMBOL.ADDRESSES))) (X_13 PROGN (DT-VARIABLE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_13)
ST*SYMBOL.ADDRESSES)))) ((T PROGN (DT-PREDICATE.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE T) 
ST*SYMBOL.ADDRESSES))) (ANSWER PROGN (DT-PREDICATE.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANSWER)
ST*SYMBOL.ADDRESSES))) (X_10 PROGN (DT-VARIABLE.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_10) 
ST*SYMBOL.ADDRESSES))) (X_9 PROGN (DT-VARIABLE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_9) 
ST*SYMBOL.ADDRESSES)))) ((X_8 PROGN (DT-VARIABLE.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_8) 
ST*SYMBOL.ADDRESSES)))) ((NORMAL PROGN (DT-PREDICATE.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NORMAL)
ST*SYMBOL.ADDRESSES))) (X_6 PROGN (DT-VARIABLE.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_6) 
ST*SYMBOL.ADDRESSES)))) ((KNAVE PROGN (DT-PREDICATE.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNAVE)
ST*SYMBOL.ADDRESSES))) (KNIGHT PROGN (DT-PREDICATE.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNIGHT)
ST*SYMBOL.ADDRESSES))) (X_3 PROGN (DT-VARIABLE.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_3) 
ST*SYMBOL.ADDRESSES)))) NIL NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE)
ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY)
ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE
. 1) (FALSE . 2) (X_3 . 3) (KNIGHT . 4) (KNAVE . 5) (X_6 . 6) (NORMAL . 7) (X_8 . 8) (X_9 . 9) (X_10 . 10) (ANSWER
. 11) (T . 12) (X_13 . 13) (X_14 . 14) (X_15 . 15) (A . 16) (B . 17) (C . 18) (YES1 . 19) (QUESTION1 . 20) (NO1
. 21) (YES2-A . 25) (QUESTION2-A . 22) (NO2-A . 27) (YES2-B . 30) (QUESTION2-B . 31) (NO2-B . 32))))))))STOP
 

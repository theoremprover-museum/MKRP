;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
dit:     Axioms and Theorems edited: 15-DEC,1989 01:34 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(9562 9567 9572 9577 9582 9587 9592 9597 9602 9607 9612 9617 9622 9627 9632 9637 9642
          9647 9652 9657 9662 9667 9672 9677 9692 9706 9711 9716 9731 9736 9741 9746 9751 9756
          9761 9766 9780 9785 9790 9795 9800 9805 9810 9815 9829 9834 9839 9844 9849 9854 9859
          9874 9889 9904 9919 9934 9949 9964 9969 9984 9999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "MO" NIL NIL (ANY) NIL NIL ((- 3 (POSITIVE))) ((+ 3 (NEGATIVE)))
          ((+ 3 (NIL))) ((- 3 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "TU" NIL NIL (ANY)
          NIL NIL ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE))) ((+ 4 (NIL))) ((- 4 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "WE" NIL NIL (ANY) NIL NIL ((- 5 (POSITIVE)))
          ((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
          "TH" NIL NIL (ANY) NIL NIL ((- 6 (POSITIVE))) ((+ 6 (NEGATIVE))) ((+ 6 (NIL)))
          ((- 6 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FR" NIL NIL (ANY) NIL NIL
          ((- 7 (POSITIVE))) ((+ 7 (NEGATIVE))) ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "SA" NIL NIL (ANY) NIL NIL ((- 8 (POSITIVE)))
          ((+ 8 (NEGATIVE))) ((+ 8 (NIL))) ((- 8 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
          "SU" NIL NIL (ANY) NIL NIL ((- 9 (POSITIVE))) ((+ 9 (NEGATIVE))) ((+ 9 (NIL)))
          ((- 9 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 DAYS NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 "YESTERDAY" NIL
          DAYS (DAYS) NIL NIL NIL NIL NIL 1 DAYS (DT*ST-KIND NIL) FUNCTION 5 DAYS NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 14 "TOMORROW" NIL DAYS (DAYS) NIL NIL NIL
          NIL NIL 1 DAYS (DT*ST-KIND NIL) FUNCTION 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "LA2" NIL NIL (ANIMAL DAYS DAYS DAYS) NIL NIL ((- 32 (POSITIVE)))
          ((+ 32 (NEGATIVE))) ((+ 32 (NIL))) ((- 32 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          5 ANIMAL "LION" (DT*ST-KIND NIL) CONSTANT 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 14 "LYING.DAYS" NIL ANY (ANY) NIL NIL NIL NIL NIL 1 ANY (DT*ST-KIND NIL)
          FUNCTION 15 "MEMBER" NIL NIL (ANY ANY) NIL NIL ((- 36 (POSITIVE)))
          ((+ 36 (NEGATIVE))) ((+ 36 (NIL))) ((- 36 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          5 ANIMAL NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANIMAL NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANIMAL NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANIMAL NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 DAYS "MONDAY" (DT*ST-KIND NIL) CONSTANT
          5 DAYS "TUESDAY" (DT*ST-KIND NIL) CONSTANT 5 DAYS "WEDNESDAY" (DT*ST-KIND NIL)
          CONSTANT 5 DAYS "THURSDAY" (DT*ST-KIND NIL) CONSTANT 5 DAYS "FRIDAY" (DT*ST-KIND NIL)
          CONSTANT 5 DAYS "SATURDAY" (DT*ST-KIND NIL) CONSTANT 5 DAYS "SUNDAY" (DT*ST-KIND NIL)
          CONSTANT 5 DAYS NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 10000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 10000)
             (SETQ COUNTER1 61)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 10000)
                 (MEM-INITIALIZE 10000))
               (SETQ COUNTER1 61)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9557 INCREMENT) 9557))
      (SETQ MEM*NEXT.VADR 61
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ANIMAL DAYS ANY))) (SETQ DT*SORT.NR (QUOTE 4)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (59 58 57 56 55 54 53 33))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE (35 24 16))) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE NIL)) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (36 32 9 8 7 6 5 4 3 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (36 32 9 8 7 6 5 4 3 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ANIMAL) (QUOTE DT*SORT.NUMBER)) (QUOTE 3)) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANIMAL))) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANIMAL ANIMAL) (DAYS) (ANY ANIMAL)))) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ANIMAL))) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANIMAL) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY ANIMAL)))) (PROGN (SETF (GET (QUOTE DAYS) (QUOTE DT*SORT.NUMBER)) (QUOTE 2)) (SETF (GET (QUOTE DAYS) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE DAYS) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (DAYS))) (SETF (GET (QUOTE DAYS) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANIMAL) (DAYS DAYS) (ANY DAYS)))) (SETF (GET (QUOTE DAYS) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (DAYS))) (SETF (GET (QUOTE DAYS) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE DAYS) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY DAYS)))) (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (ANIMAL DAYS))) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY ANIMAL DAYS))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANIMAL ANIMAL) (DAYS DAYS) (ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (DAYS))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
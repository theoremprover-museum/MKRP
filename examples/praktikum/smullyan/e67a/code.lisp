;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-

(CONSTRUCTION  "Genera 8.0.1 Logical Pathnames Translation Files NEWEST IP-TCP 422.2 PS 415.1 RPC 415.0 Embedding Support 407.0 UX Support 416.0 CLX 419.0 C Runtime 416.0 Compiler Tools Package 411.0 Compiler Tools Runtime 411.0 C Packages 413.0 Minimal Lexer Runtime 416.0 Lexer Package 415.0 Syntax Editor Runtime 411.0 Experimental X Server 409.0 X Documentation 403.0 KKL 19.2 HADES 14.21 Waltz 6.0 COLUMN 6.0 Experimental MKRP 48.4" "10-JUL,1991 12:23" 
   ("Edit:     Axioms and Theorems edited: 10-JUL,1991 12:23 "
   ))

(AXIOMS.INFIX    ((* IN SHAKESPEARE^S MERCHANT OF VENICE PORTIA HAD THREE CASKETS)
   (* HE WAS LUCKY ENOUGH (OR WISE ENOUGH) TO CHOOSE THE ONE WITH)
   (* THE |PORTRAIT,| THEN HE COULD CLAIM PORTIA AS HIS BRIDE.)
   (* ON THE LID OF EACH CASKET WAS AN INSCRIPTION TO HELP THE SUITOR)
   (* CHOOSE WISELY.)
   (* NOW SUPPOSE PORTIA WANTED TO CHOOSE HER HUSBAND NOT ON THE BASIS)
   (* OF |VIRTUE,| BUT SIMPLY ON THE BASIS OF INTELLIGENCE. SHE HAD THE)
   (* FOLLOWING INSCRIPTIONS PUT ON THE CASKETS |:|)
   (*)
   (* GOLD |:| THE PORTRAIT IS IN THIS CASKET.)
   (* SILVER |:| THE PORTRAIT IS NOT IN THIS CASKET.)
   (* LEAD |:| THE PORTRAIT IS NOT IN THE GOLD CASKET.)
   (*)
   (* PORTIA EXPLAINED TO THE SUITOR THAT OF THE THREE STATEMENTS AT)
   (* MOST ONE WAS TRUE.)
   (* WHICH CASKET SHOULD THE SUITOR CHOOSE ?)
   (*)
   (* WE DEFINE THE FOLLOWING PREDICATES |:|)
   (* PORTRAIT (X) --- THE PORTRAIT IS IN CASKET X)
   (* TRUTH (X) --- THE INSCRIPTION X IS TRUE)
   (* INSCR.PORTRAIT (X Y) --- THE INSCRIPTION X TELLS THAT)
   (* THE PORTRAIT IS IN CASKET Y)
   (* NEG.INSCR.PORTRAIT (X Y) --- THE INSCRIPTION X TELLS THAT)
   (* THE PORTRAIT IS NOT IN CASKET Y)
   (*)
   (* DECLARATIONS |:|)
   (TYPE |GOLD,SILVER,LEAD| |:| CASKET)
   (TYPE INSCRIPTION (CASKET) |:| INSCRIPT)
   (TYPE PORTRAIT (CASKET))
   (TYPE TRUTH (INSCRIPT))
   (TYPE INSCR.PORTRAIT (INSCRIPT CASKET))
   (TYPE NEG.INSCR.PORTRAIT (INSCRIPT CASKET))
   (*)
   (* THEN THE FOLLOWING PROPOSITIONS HOLD.)
   (*)
   (* THERE IS EXACTLY ONE PORTRAIT |:|)
   (PORTRAIT (GOLD) OR PORTRAIT (SILVER) OR PORTRAIT (LEAD))
   (NOT (PORTRAIT (GOLD) AND PORTRAIT (SILVER) OR PORTRAIT (SILVER) AND PORTRAIT (LEAD) OR PORTRAIT (LEAD) AND PORTRAIT (GOLD)))
   (*)
   (* AT MOST ONE INSCRIPTION TELLS THE TRUTH |:|)
   (NOT (TRUTH (INSCRIPTION (GOLD)) AND TRUTH (INSCRIPTION (SILVER)) OR TRUTH (INSCRIPTION (SILVER)) AND TRUTH (INSCRIPTION (LEAD)) OR TRUTH (INSCRIPTION (LEAD)) AND TRUTH (INSCRIPTION (GOLD))))
   (*)
   (* IMPLICATIONS TO BE DRAWN FROM INSCRIPTION |:|)
   (ALL X |:| INSCRIPT ALL Y |:| CASKET INSCR.PORTRAIT (X Y) AND TRUTH (X) IMPL PORTRAIT (Y))
   (ALL X |:| INSCRIPT ALL Y |:| CASKET INSCR.PORTRAIT (X Y) AND NOT TRUTH (X) IMPL NOT PORTRAIT (Y))
   (ALL X |:| INSCRIPT ALL Y |:| CASKET NEG.INSCR.PORTRAIT (X Y) AND TRUTH (X) IMPL NOT PORTRAIT (Y))
   (ALL X |:| INSCRIPT ALL Y |:| CASKET NEG.INSCR.PORTRAIT (X Y) AND NOT TRUTH (X) IMPL PORTRAIT (Y))
   (*)
   (* ACTUAL INSCRIPTIONS |:|)
   (INSCR.PORTRAIT (INSCRIPTION (GOLD) GOLD))
   (NEG.INSCR.PORTRAIT (INSCRIPTION (SILVER) SILVER))
   (NEG.INSCR.PORTRAIT (INSCRIPTION (LEAD) GOLD))))

(THEOREMS.INFIX ((* THEOREMS FOR THE FIRST PORTIA PROBLEM (SM.E67A))
   (*)
   (PORTRAIT (SILVER))))

(AXIOMS.PREFIX   (COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   (+ 0 NIL NIL)
   (+ 0 NIL NIL)
   (+ 0 NIL NIL)
   (+ 0 NIL NIL)
   (+ 0 NIL NIL)
   (+ 0 NIL NIL)
   COMMENT
   COMMENT
   COMMENT
   COMMENT
   (OR (+ 7 (3) NIL) (OR (+ 7 (4) NIL) (+ 7 (5) NIL)))
   (NOT (OR (AND (+ 7 (3) NIL) (+ 7 (4) NIL)) (OR (AND (+ 7 (4) NIL) (+ 7 (5) NIL)) (AND (+ 7 (5) NIL) (+ 7 (3) NIL)))))
   COMMENT
   COMMENT
   (NOT (OR (AND (+ 8 ((6 3)) NIL) (+ 8 ((6 4)) NIL)) (OR (AND (+ 8 ((6 4)) NIL) (+ 8 ((6 5)) NIL)) (AND (+ 8 ((6 5)) NIL) (+ 8 ((6 3)) NIL)))))
   COMMENT
   COMMENT
   (ALL 11 (ALL 12 (IMPL (AND (+ 9 (11 12) NIL) (+ 8 (11) NIL)) (+ 7 (12) NIL))))
   (ALL 13 (ALL 14 (IMPL (AND (+ 9 (13 14) NIL) (NOT (+ 8 (13) NIL))) (NOT (+ 7 (14) NIL)))))
   (ALL 15 (ALL 16 (IMPL (AND (+ 10 (15 16) NIL) (+ 8 (15) NIL)) (NOT (+ 7 (16) NIL)))))
   (ALL 17 (ALL 18 (IMPL (AND (+ 10 (17 18) NIL) (NOT (+ 8 (17) NIL))) (+ 7 (18) NIL))))
   COMMENT
   COMMENT
   (+ 9 ((6 3) 3) NIL)
   (+ 10 ((6 4) 4) NIL)
   (+ 10 ((6 5) 3) NIL)))

(THEOREMS.PREFIX (COMMENT
   COMMENT
   (+ 7 (4) NIL)))

(OPTIONS (TWO_RULES)
    (TWO_RULES.MAXLEVEL . 1)
    (TWO_SUPPRESS.NORULES)
    (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.I_CLAUSE.PURITY . P)
    (RED.I_CLAUSE.TAUTOLOGY . T)
    (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
    (RED.I_CLAUSE.SUBSUMPTION . T)
    (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
    (RED.I_CLAUSE.REPL.FACTORING . T)
    (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.I_CLAUSE.REWRITING . DEM)
    (RED.I_LINK.INCOMPATIBILITY . T)
    (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.I_LINK.TAUTOLOGY.RECHECK)
    (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.I_LINK.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.D_CLAUSE.PURITY . P)
    (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
    (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
    (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
    (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.REPL.FACTORING . T)
    (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.D_CLAUSE.REWRITING . DEM)
    (RED.D_LINK.INCOMPATIBILITY . T)
    (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_LINK.TAUTOLOGY.RECHECK)
    (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.D_LINK.SUBSUMPTION.RECHECK)
    (FAC_INITIAL)
    (FAC_EACH.STEP)
    (STR_RESOLUTION . SET-OF-SUPPORT)
    (STR_PAR-RES . 10)
    (STR_E-RESOLUTION)
    (STR_LINK.DEPTH)
    (STR_TERM.DEPTH)
    (STR_R.DEMODULATION . T)
    (STR_P.DEMODULATION . T)
    (STR_INDUCTION)
    (STR_FINITE.DOMAIN . T)
    (STR_SORT.LITERALS)
    (TERM_UNITS . T)
    (TERM_ITERATIONS . 0)
    (TERM_SET.OF.SUPPORT)
    (TERM_BREADTH.FIRST)
    (ER_PARAMODULATION . HEURISTIC-COMPLETION)
    (ER_COMPLETION . UNFAILING)
    (ER_CP.REDUCTION . T)
    (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
    (ER_OPERATOR.ORDERING * - + 0 1)
    (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
    (ER_POLYNOMIAL.VARIABLES X Y Z U V W)
    (ER_POLYNOMIAL.WEIGHT (+ (+ X (* 2 Y))) (* (+ X (* X Y))) (- (+ (* 2 X) -1)) (0 2) (1 2))
    (ER_LINK.DEPTH.WEIGHT . 0)
    (ER_UNIT.FOCUS . 0)
    (ER_UNIT.FOCUS.WEIGHT . 1)
    (ER_EQUATION.FOCUS . 2)
    (ER_NARROW.DEPTH . 0)
    (ER_NARROW.NEXT . DEPTH)
    (ER_NARROW.TEST NORM C DELTA SL N)
    (ER_NARROW.LIMIT.FACTOR . 0)
    (ER_COMPILE)
    (GEN_SPLITTING . 0)
    (GEN_PRESIMPLIFICATION . T)
    (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
    (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
    (GEN_MANUAL.CONTROL)
    (GEN_MAXIMUM.STEPS)
    (GEN_GRAPH.SAVING)
    (GEN_SAVE.FILE . SAVEDEFAULT)
    (GEN_LISP.GARBAGE.COLLECTION)
    (GEN_COMMON.LISP)
    (TR_PREPROCESSING)
    (TR_STEP.MODE . LR)
    (TR_DUMP)
    (TR_CLAUSE.MODE . I)
    (TR_LINK.MODE . I)
    (TR_TRACE.FILE)
    (TR_TERMINAL . T)
    (PR_LATEX)
    (PR_INFIX.FORM . T)
    (PR_PREFIX.FORM)
    (PR_OPTIONS)
    (PR_AXIOM.CLAUSES . T)
    (PR_SYMBOLS)
    (PR_DIRECT.PROOF . T)
    (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
    (PR_STATISTICS)
    (PR_PROTOCOL . T)
    (PR_LEFT.MARGIN . 3)
    (PR_RIGHT.MARGIN . 117)
    (PR_LINELENGTH . 114)
    (PR_LITERALS . T)
   )

(LINK.COLOURS (R RIW RD S SI SIW SID T TI TIW P PIW PD RIWD))

(AXIOMS (START.TIME 78667882)
   (PARTIAL   (CLAUSE 21 R.= AXIOM ((19 . ANY)) ((+ 2 (19 19)) ))(CLAUSE 22 A1 AXIOM () ((+ 9 ((6 3) 3)) )))
   (PARTIAL   (CLAUSE 23 A2 AXIOM () ((+ 10 ((6 4) 4)) )))
   (PARTIAL   (CLAUSE 24 A3 AXIOM () ((+ 10 ((6 5) 3)) )))
   (PARTIAL   (CLAUSE 25 A4 AXIOM ()
   ((- 7 (3)) (- 7 (4)) )))
   (PARTIAL   (CLAUSE 26 A5 AXIOM ()
   ((- 7 (4)) (- 7 (5)) )))
   (PARTIAL   (CLAUSE 28 A6 AXIOM ()
   ((- 7 (5)) (- 7 (3)) )))
   (PARTIAL   (CLAUSE 31 A7 AXIOM ()
   ((- 8 ((6 3))) (- 8 ((6 4))) )))
   (PARTIAL   (CLAUSE 32 A8 AXIOM ()
   ((- 8 ((6 4))) (- 8 ((6 5))) )))
   (PARTIAL   (CLAUSE 34 A9 AXIOM ()
   ((- 8 ((6 5))) (- 8 ((6 3))) )))
   (PARTIAL   (CLAUSE 37 A10 AXIOM ()
   ((+ 7 (3)) (+ 7 (4)) (+ 7 (5)) )))
   (PARTIAL   (CLAUSE 46 A11 AXIOM ((12 . CASKET)(11 . INSCRIPT))
   ((- 9 (11 12)) (- 8 (11)) (+ 7 (12)) )))
   (PARTIAL   (CLAUSE 65 A12 AXIOM ((14 . CASKET)(13 . INSCRIPT))
   ((- 9 (13 14)) (+ 8 (13)) (- 7 (14)) )))
   (PARTIAL   (CLAUSE 87 A13 AXIOM ((16 . CASKET)(15 . INSCRIPT))
   ((- 10 (15 16)) (- 8 (15)) (- 7 (16)) )))
   (PARTIAL   (CLAUSE 111 A14 AXIOM ((18 . CASKET)(17 . INSCRIPT))
   ((- 10 (17 18)) (+ 8 (17)) (+ 7 (18)) )))
   (END.TIME 78681635)
   (FINAL 21 22 23 24 25 26 28 31 32 34 37 46 65 87 111)
   (SYMBOLS 
   (LET (NEW.ADDRESS)
   (LIST (CONS   10 (DT-PREDICATE.CREATE "NEG.INSCR.PORTRAIT" '(INSCRIPT CASKET)))
   (CONS    9 (DT-PREDICATE.CREATE "INSCR.PORTRAIT" '(INSCRIPT CASKET)))
   (CONS    8 (DT-PREDICATE.CREATE "TRUTH" '(INSCRIPT)))
   (CONS    7 (DT-PREDICATE.CREATE "PORTRAIT" '(CASKET)))
   (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
   (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (CONS    5 (DT-CONSTANT.CREATE "lead" 'CASKET))
   (CONS    4 (DT-CONSTANT.CREATE "silver" 'CASKET))
   (CONS    3 (DT-CONSTANT.CREATE "gold" 'CASKET))
   (CONS    6 (DT-FUNCTION.CREATE "inscription" 'INSCRIPT '(CASKET) 'NIL)))))
   (RESULT))

(THEOREMS (SPLITPART.IDENTIFIER 1)
   (START.TIME 78681813)
   (PARTIAL   (CLAUSE 136 T15 THEOREM () ((- 7 (4)) )))
   (OPERATION (CLAUSE 37 A10 AXIOM ()
   ((+ 7 (3)) (+ 7 (4)) (+ 7 (5)) ))
   (REPLACEMENT.OPERATION NIL (37 136)
  (((37 . 2) (136 . 1) NIL))
  (NIL)
  NIL))
   (INITIAL   (CLAUSE 21 R.= AXIOM ((19 . ANY)) ((+ 2 (19 19)) ))
(CLAUSE 22 A1 AXIOM () ((+ 9 ((6 3) 3)) ))
(CLAUSE 23 A2 AXIOM () ((+ 10 ((6 4) 4)) ))
(CLAUSE 24 A3 AXIOM () ((+ 10 ((6 5) 3)) ))
(CLAUSE 28 A6 AXIOM ()
   ((- 7 (5)) (- 7 (3)) ))
(CLAUSE 31 A7 AXIOM ()
   ((- 8 ((6 3))) (- 8 ((6 4))) ))
(CLAUSE 32 A8 AXIOM ()
   ((- 8 ((6 4))) (- 8 ((6 5))) ))
(CLAUSE 34 A9 AXIOM ()
   ((- 8 ((6 5))) (- 8 ((6 3))) ))
(CLAUSE 37 A10 THEOREM ()
   ((+ 7 (3)) (+ 7 (5)) ))
(CLAUSE 46 A11 AXIOM ((12 . CASKET)(11 . INSCRIPT))
   ((- 9 (11 12)) (- 8 (11)) (+ 7 (12)) ))
(CLAUSE 65 A12 AXIOM ((14 . CASKET)(13 . INSCRIPT))
   ((- 9 (13 14)) (+ 8 (13)) (- 7 (14)) ))
(CLAUSE 87 A13 AXIOM ((16 . CASKET)(15 . INSCRIPT))
   ((- 10 (15 16)) (- 8 (15)) (- 7 (16)) ))
(CLAUSE 111 A14 AXIOM ((18 . CASKET)(17 . INSCRIPT))
   ((- 10 (17 18)) (+ 8 (17)) (+ 7 (18)) ))
(CLAUSE 136 T15 THEOREM () ((- 7 (4)) ))   )
   (END.TIME 78686743)
   (FINAL 21 22 23 24 28 31 32 34 37 46 65 87 111 136)
   (SYMBOLS 
   (LET (NEW.ADDRESS)
   (LIST (CONS   10 (DT-PREDICATE.CREATE "NEG.INSCR.PORTRAIT" '(INSCRIPT CASKET)))
   (CONS    9 (DT-PREDICATE.CREATE "INSCR.PORTRAIT" '(INSCRIPT CASKET)))
   (CONS    8 (DT-PREDICATE.CREATE "TRUTH" '(INSCRIPT)))
   (CONS    7 (DT-PREDICATE.CREATE "PORTRAIT" '(CASKET)))
   (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
   (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (CONS    5 (DT-CONSTANT.CREATE "lead" 'CASKET))
   (CONS    4 (DT-CONSTANT.CREATE "silver" 'CASKET))
   (CONS    3 (DT-CONSTANT.CREATE "gold" 'CASKET))
   (CONS    6 (DT-FUNCTION.CREATE "inscription" 'INSCRIPT '(CASKET) 'NIL)))))
   (RESULT))
(indices ((136 31) (111 25 26 27) (87 22 23 24) (65 19 20 21) (46 16 17 18) (37 1 2 3) (34 14 15) (32 12 13) (31 10 11) (28 8 9) (26 6 7) (25 4 5) (24 30) (23 29) (22 28) (21 NIL)))

(SPLITPARTS "Genera 8.0.1 Logical Pathnames Translation Files NEWEST IP-TCP 422.2 PS 415.1 RPC 415.0 Embedding Support 407.0 UX Support 416.0 CLX 419.0 C Runtime 416.0 Compiler Tools Package 411.0 Compiler Tools Runtime 411.0 C Packages 413.0 Minimal Lexer Runtime 416.0 Lexer Package 415.0 Syntax Editor Runtime 411.0 Experimental X Server 409.0 X Documentation 403.0 KKL 19.2 HADES 14.21 Waltz 6.0 COLUMN 6.0 Experimental MKRP 48.4" "10-JUL,1991 12:24" NIL)

(OPTIONS (TWO_RULES)
    (TWO_RULES.MAXLEVEL . 1)
    (TWO_SUPPRESS.NORULES)
    (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.I_CLAUSE.PURITY . P)
    (RED.I_CLAUSE.TAUTOLOGY . T)
    (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
    (RED.I_CLAUSE.SUBSUMPTION . T)
    (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
    (RED.I_CLAUSE.REPL.FACTORING . T)
    (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.I_CLAUSE.REWRITING . DEM)
    (RED.I_LINK.INCOMPATIBILITY . T)
    (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.I_LINK.TAUTOLOGY.RECHECK)
    (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.I_LINK.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.D_CLAUSE.PURITY . P)
    (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
    (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
    (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
    (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.REPL.FACTORING . T)
    (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.D_CLAUSE.REWRITING . DEM)
    (RED.D_LINK.INCOMPATIBILITY . T)
    (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_LINK.TAUTOLOGY.RECHECK)
    (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.D_LINK.SUBSUMPTION.RECHECK)
    (FAC_INITIAL)
    (FAC_EACH.STEP)
    (STR_RESOLUTION . SET-OF-SUPPORT)
    (STR_PAR-RES . 10)
    (STR_E-RESOLUTION)
    (STR_LINK.DEPTH)
    (STR_TERM.DEPTH)
    (STR_R.DEMODULATION . T)
    (STR_P.DEMODULATION . T)
    (STR_INDUCTION)
    (STR_FINITE.DOMAIN . T)
    (STR_SORT.LITERALS)
    (TERM_UNITS . T)
    (TERM_ITERATIONS . 0)
    (TERM_SET.OF.SUPPORT)
    (TERM_BREADTH.FIRST)
    (ER_PARAMODULATION . HEURISTIC-COMPLETION)
    (ER_COMPLETION . UNFAILING)
    (ER_CP.REDUCTION . T)
    (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
    (ER_OPERATOR.ORDERING * - + 0 1)
    (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
    (ER_POLYNOMIAL.VARIABLES X Y Z U V W)
    (ER_POLYNOMIAL.WEIGHT (+ (+ X (* 2 Y))) (* (+ X (* X Y))) (- (+ (* 2 X) -1)) (0 2) (1 2))
    (ER_LINK.DEPTH.WEIGHT . 0)
    (ER_UNIT.FOCUS . 0)
    (ER_UNIT.FOCUS.WEIGHT . 1)
    (ER_EQUATION.FOCUS . 2)
    (ER_NARROW.DEPTH . 0)
    (ER_NARROW.NEXT . DEPTH)
    (ER_NARROW.TEST NORM C DELTA SL N)
    (ER_NARROW.LIMIT.FACTOR . 0)
    (ER_COMPILE)
    (GEN_SPLITTING . 0)
    (GEN_PRESIMPLIFICATION . T)
    (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
    (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
    (GEN_MANUAL.CONTROL)
    (GEN_MAXIMUM.STEPS)
    (GEN_GRAPH.SAVING)
    (GEN_SAVE.FILE . SAVEDEFAULT)
    (GEN_LISP.GARBAGE.COLLECTION)
    (GEN_COMMON.LISP)
    (TR_PREPROCESSING)
    (TR_STEP.MODE . LR)
    (TR_DUMP)
    (TR_CLAUSE.MODE . I)
    (TR_LINK.MODE . I)
    (TR_TRACE.FILE)
    (TR_TERMINAL . T)
    (PR_LATEX)
    (PR_INFIX.FORM . T)
    (PR_PREFIX.FORM)
    (PR_OPTIONS)
    (PR_AXIOM.CLAUSES . T)
    (PR_SYMBOLS)
    (PR_DIRECT.PROOF . T)
    (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
    (PR_STATISTICS)
    (PR_PROTOCOL . T)
    (PR_LEFT.MARGIN . 3)
    (PR_RIGHT.MARGIN . 117)
    (PR_LINELENGTH . 114)
    (PR_LITERALS . T)
   )

(REFUTATION (START.TIME 78689190)

(OPTIONS (TWO_RULES)
    (TWO_RULES.MAXLEVEL . 1)
    (TWO_SUPPRESS.NORULES)
    (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.I_CLAUSE.PURITY . P)
    (RED.I_CLAUSE.TAUTOLOGY . T)
    (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
    (RED.I_CLAUSE.SUBSUMPTION . T)
    (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
    (RED.I_CLAUSE.REPL.FACTORING . T)
    (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.I_CLAUSE.REWRITING . DEM)
    (RED.I_LINK.INCOMPATIBILITY . T)
    (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.I_LINK.TAUTOLOGY.RECHECK)
    (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.I_LINK.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.D_CLAUSE.PURITY . P)
    (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
    (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
    (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
    (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.REPL.FACTORING . T)
    (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.D_CLAUSE.REWRITING . DEM)
    (RED.D_LINK.INCOMPATIBILITY . T)
    (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_LINK.TAUTOLOGY.RECHECK)
    (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.D_LINK.SUBSUMPTION.RECHECK)
    (FAC_INITIAL)
    (FAC_EACH.STEP)
    (STR_RESOLUTION . SET-OF-SUPPORT)
    (STR_PAR-RES . 10)
    (STR_E-RESOLUTION)
    (STR_LINK.DEPTH)
    (STR_TERM.DEPTH)
    (STR_R.DEMODULATION . T)
    (STR_P.DEMODULATION . T)
    (STR_INDUCTION)
    (STR_FINITE.DOMAIN . T)
    (STR_SORT.LITERALS)
    (TERM_UNITS . T)
    (TERM_ITERATIONS . 0)
    (TERM_SET.OF.SUPPORT)
    (TERM_BREADTH.FIRST)
    (ER_PARAMODULATION . HEURISTIC-COMPLETION)
    (ER_COMPLETION . UNFAILING)
    (ER_CP.REDUCTION . T)
    (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
    (ER_OPERATOR.ORDERING * - + 0 1)
    (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
    (ER_POLYNOMIAL.VARIABLES X Y Z U V W)
    (ER_POLYNOMIAL.WEIGHT (+ (+ X (* 2 Y))) (* (+ X (* X Y))) (- (+ (* 2 X) -1)) (0 2) (1 2))
    (ER_LINK.DEPTH.WEIGHT . 0)
    (ER_UNIT.FOCUS . 0)
    (ER_UNIT.FOCUS.WEIGHT . 1)
    (ER_EQUATION.FOCUS . 2)
    (ER_NARROW.DEPTH . 0)
    (ER_NARROW.NEXT . DEPTH)
    (ER_NARROW.TEST NORM C DELTA SL N)
    (ER_NARROW.LIMIT.FACTOR . 0)
    (ER_COMPILE)
    (GEN_SPLITTING . 0)
    (GEN_PRESIMPLIFICATION . T)
    (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
    (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
    (GEN_MANUAL.CONTROL)
    (GEN_MAXIMUM.STEPS)
    (GEN_GRAPH.SAVING)
    (GEN_SAVE.FILE . SAVEDEFAULT)
    (GEN_LISP.GARBAGE.COLLECTION)
    (GEN_COMMON.LISP)
    (TR_PREPROCESSING)
    (TR_STEP.MODE . LR)
    (TR_DUMP)
    (TR_CLAUSE.MODE . I)
    (TR_LINK.MODE . I)
    (TR_TRACE.FILE)
    (TR_TERMINAL . T)
    (PR_LATEX)
    (PR_INFIX.FORM . T)
    (PR_PREFIX.FORM)
    (PR_OPTIONS)
    (PR_AXIOM.CLAUSES . T)
    (PR_SYMBOLS)
    (PR_DIRECT.PROOF . T)
    (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
    (PR_STATISTICS)
    (PR_PROTOCOL . T)
    (PR_LEFT.MARGIN . 3)
    (PR_RIGHT.MARGIN . 117)
    (PR_LINELENGTH . 114)
    (PR_LITERALS . T)
   )
   (INITIAL   (CLAUSE 21 R.= AXIOM ((19 . ANY)) ((+ 2 (19 19)) ))
(CLAUSE 22 A1 AXIOM () ((+ 9 ((6 3) 3)) ))
(CLAUSE 23 A2 AXIOM () ((+ 10 ((6 4) 4)) ))
(CLAUSE 24 A3 AXIOM () ((+ 10 ((6 5) 3)) ))
(CLAUSE 28 A6 AXIOM ()
   ((- 7 (5)) (- 7 (3)) ))
(CLAUSE 31 A7 AXIOM ()
   ((- 8 ((6 3))) (- 8 ((6 4))) ))
(CLAUSE 32 A8 AXIOM ()
   ((- 8 ((6 4))) (- 8 ((6 5))) ))
(CLAUSE 34 A9 AXIOM ()
   ((- 8 ((6 5))) (- 8 ((6 3))) ))
(CLAUSE 37 A10 THEOREM ()
   ((+ 7 (3)) (+ 7 (5)) ))
(CLAUSE 46 A11 AXIOM ((12 . CASKET)(11 . INSCRIPT))
   ((- 9 (11 12)) (- 8 (11)) (+ 7 (12)) ))
(CLAUSE 65 A12 AXIOM ((14 . CASKET)(13 . INSCRIPT))
   ((- 9 (13 14)) (+ 8 (13)) (- 7 (14)) ))
(CLAUSE 87 A13 AXIOM ((16 . CASKET)(15 . INSCRIPT))
   ((- 10 (15 16)) (- 8 (15)) (- 7 (16)) ))
(CLAUSE 111 A14 AXIOM ((18 . CASKET)(17 . INSCRIPT))
   ((- 10 (17 18)) (+ 8 (17)) (+ 7 (18)) ))
(CLAUSE 136 T15 THEOREM () ((- 7 (4)) ))   )
   (OPERATION (CLAUSE 51 R1 (87 24) ()
   ((- 8 ((6 5))) (- 7 (3)) ))
   (RESOLUTION 24 1 87 1 NIL (15 (6 5) 16 3) 51))
   (OPERATION (CLAUSE 101 R2 (65 22) ()
   ((+ 8 ((6 3))) (- 7 (3)) ))
   (RESOLUTION 22 1 65 1 NIL (13 (6 3) 14 3) 101))
   (OPERATION (CLAUSE 120 R3 (46 22) ()
   ((- 8 ((6 3))) (+ 7 (3)) ))
   (RESOLUTION 22 1 46 1 NIL (11 (6 3) 12 3) 120))
   (OPERATION (CLAUSE 140 R4 (111 23) ()
   ((+ 8 ((6 4))) (+ 7 (4)) ))
   (RESOLUTION 23 1 111 1 NIL (17 (6 4) 18 4) 140))
   (OPERATION (CLAUSE 140 R4 (111 23) ()
   ((+ 8 ((6 4))) (+ 7 (4)) ))
   (REPLACEMENT.OPERATION NIL (140 136)
  (((140 . 2) (136 . 1) NIL))
  (NIL)
  NIL))
   (OPERATION (CLAUSE 32 A8 AXIOM ()
   ((- 8 ((6 4))) (- 8 ((6 5))) ))
   (REPLACEMENT.OPERATION NIL (32 140)
  (((32 . 1) (140 . 1) NIL))
  (NIL)
  NIL))
   (OPERATION (CLAUSE 31 A7 AXIOM ()
   ((- 8 ((6 3))) (- 8 ((6 4))) ))
   (REPLACEMENT.OPERATION NIL (31 140)
  (((31 . 2) (140 . 1) NIL))
  (NIL)
  NIL))
   (OPERATION (CLAUSE 101 R2 (65 22) ()
   ((+ 8 ((6 3))) (- 7 (3)) ))
   (REPLACEMENT.OPERATION NIL (101 31)
  (((101 . 1) (31 . 1) NIL))
  (NIL)
  NIL))
   (OPERATION (CLAUSE 101 R2 (65 22) () ((- 7 (3)) ))
   (REPLACEMENT.OPERATION (18 3 17 (6 5)) (101 111 24 32)
  (((101 . 1) (111 . 3) NIL) ((111 . 1) (24 . 1) NIL) ((111 . 2) (32 . 1) NIL))
  (NIL NIL NIL)
  NIL))
   (END.TIME 78700970)
   (SYMBOLS 
   (LET (NEW.ADDRESS)
   (LIST (CONS   10 (DT-PREDICATE.CREATE "NEG.INSCR.PORTRAIT" '(INSCRIPT CASKET)))
   (CONS    9 (DT-PREDICATE.CREATE "INSCR.PORTRAIT" '(INSCRIPT CASKET)))
   (CONS    8 (DT-PREDICATE.CREATE "TRUTH" '(INSCRIPT)))
   (CONS    7 (DT-PREDICATE.CREATE "PORTRAIT" '(CASKET)))
   (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE)))
   (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (CONS    5 (DT-CONSTANT.CREATE "lead" 'CASKET))
   (CONS    4 (DT-CONSTANT.CREATE "silver" 'CASKET))
   (CONS    3 (DT-CONSTANT.CREATE "gold" 'CASKET))
   (CONS    6 (DT-FUNCTION.CREATE "inscription" 'INSCRIPT '(CASKET) 'NIL)))))
   (SPLITPART.IDENTIFIER 1)
   (RESULT SUCCESS 101)
)
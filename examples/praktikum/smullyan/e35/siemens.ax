(COND ((FMT-LOAD "18-DEC-84 00:07:56" NIL (((* AXIOMS OF PROBLAM 35 %.) COMMENT COMMENT) ((* THERE ARE THREE PEOPLE:
A, B, C.) COMMENT COMMENT) ((* A SAYS: B AND C ARE OF THE SAME TYPE.) COMMENT COMMENT) ((* SOMEONE AKS C: ARE A
AND B OF THE SAME TYPE?) COMMENT COMMENT) ((* WHAT DOES C ANSWER?) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* SAME2
(X Y) MEANS: X AND Y ARE OF THE SAME TYPE.) COMMENT COMMENT) ((* SAME3 (X Y Z) MEANS: X SAYS THAT Y AND Z ARE OF
THE SAME TYPE.) COMMENT COMMENT) ((* NSAME3 (X Y Z) MEANS: X SAYS THAT Y AND Z ARE NOT OF THE SAME TYPE.) COMMENT
COMMENT) ((*) COMMENT COMMENT) ((ALL X KNIGHT (X) EQV NOT KNAVE (X)) (ALL 3 (EQV (+ 4 (3) (KIND (EQV T 120))) (NOT
(+ 5 (3) (KIND (EQV NIL 120)))))) QUANTIFICATION) ((ALL X,Y SAME2 (X Y) EQV (KNIGHT (X) AND KNIGHT (Y)) OR (KNAVE
(X) AND KNAVE (Y))) (ALL 7 (ALL 6 (EQV (+ 8 (6 7) (KIND (EQV T 130))) (OR (AND (+ 4 (6) (KIND (EQV NIL 130))) (+
4 (7) (KIND (EQV NIL 130)))) (AND (+ 5 (6) (KIND (EQV NIL 130))) (+ 5 (7) (KIND (EQV NIL 130)))))))) QUANTIFICATION)
((ALL X,Y,Z SAME3 (X Y Z) AND KNIGHT (X) IMPL SAME2 (Y Z)) (ALL 11 (ALL 10 (ALL 9 (IMPL (AND (+ 12 (9 10 11) NIL)
(+ 4 (9) NIL)) (+ 8 (10 11) NIL))))) QUANTIFICATION) ((ALL X,Y,Z SAME3 (X Y Z) AND KNAVE (X) IMPL NOT SAME2 (Y
Z)) (ALL 15 (ALL 14 (ALL 13 (IMPL (AND (+ 12 (13 14 15) NIL) (+ 5 (13) NIL)) (NOT (+ 8 (14 15) NIL)))))) QUANTIFICATION)
((ALL X,Y,Z NSAME3 (X Y Z) AND KNIGHT (X) IMPL NOT SAME2 (Y Z)) (ALL 18 (ALL 17 (ALL 16 (IMPL (AND (+ 19 (16 17
18) NIL) (+ 4 (16) NIL)) (NOT (+ 8 (17 18) NIL)))))) QUANTIFICATION) ((ALL X,Y,Z NSAME3 (X Y Z) AND KNAVE (X) IMPL
SAME2 (Y Z)) (ALL 22 (ALL 21 (ALL 20 (IMPL (AND (+ 19 (20 21 22) NIL) (+ 5 (20) NIL)) (+ 8 (21 22) NIL))))) 
QUANTIFICATION) ((SAME3 (A B C)) (+ 12 (23 24 25) NIL) QUANTIFICATION) ((SAME3 (C A B) OR NSAME3 (C A B)) (OR (+
12 (25 23 24) NIL) (+ 19 (25 23 24) NIL)) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (DT-RESET)) (PROG ((ADDRLIST
(QUOTE (10310 10315 10320 10325 10330 10335 10350 10355 10360 10365 10370 10375 10380 10395 10400 10405 10410 10425
10430 10435 10450 10465 10470 10485 10500))) (DATALIST (QUOTE (15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE)))
((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL NIL (DEFINED)
NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY
NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "KNIGHT" NIL NIL (ANY) NIL NIL ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE)))
((+ 4 (NIL))) ((- 4 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "KNAVE" NIL NIL (ANY) NIL NIL ((- 5 (POSITIVE)))
((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "SAME2" NIL NIL (ANY ANY) NIL NIL ((-
8 (POSITIVE))) ((+ 8 (NEGATIVE))) ((+ 8 (NIL))) ((- 8 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 15 "SAME3" NIL NIL (ANY ANY ANY) NIL NIL ((- 12 (POSITIVE))) ((+ 12 (NEGATIVE))) ((+ 12 (NIL)))
((- 12 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 15 "NSAME3" NIL NIL (ANY ANY ANY) NIL NIL ((- 19 (POSITIVE))) ((+ 19 (NEGATIVE))) ((+ 19 (NIL)))
((- 19 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 "A" ANY (ST*ATTRIBUTE
NIL DT*ST-KIND NIL) CONSTANT 5 "B" ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 5 "C" ANY (ST*ATTRIBUTE NIL DT*ST-KIND
NIL) CONSTANT))) (INCREMENT (IDIFFERENCE MEM*SIZE 10500)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 10500)
(SETQ COUNTER1 26) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND
((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT)))))))
(SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
DATA))))) (T (COND ((NEQ MEM*SIZE 10500) (MEM-INITIALIZE 10500))) (SETQ COUNTER1 26) (MAPC ADDRLIST (FUNCTION (LAMBDA
(RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST
(FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE
10500) (RPAQ MEM*NEXT.RADR (IPLUS 10305 INCREMENT))) (T (RPAQ MEM*NEXT.RADR 10305))) (RPAQ MEM*NEXT.VADR 26) (RPAQ
MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ 
MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 2) (RPAQQ DT*SORT.PROPERTIES (
DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS 
DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG
NIL) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (25 24 23)) (RPAQQ 
DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL NIL) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES
(ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ
DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE
SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC
DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ 
DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (19 12 8 5 4 2 1)) (RPAQQ DT*PREDICATE.ALL (19 12
8 5 4 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES
NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES
-TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ
DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL
PREDICATE.ALL))) (PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED (2 1))))) (PROGN
(SETPROPLIST (QUOTE ANY) (QUOTE (DT*ATTRIBUTE NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL
DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*SORT.NUMBER 1 DT*DIRECT.SUBSORTS
NIL)))) (PROGN (RPAQQ ST*STACK1 (NIL NIL ((C PROGN (DT-CONSTANT.DELETE 25) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE C) ST*SYMBOL.ADDRESSES))) (B PROGN (DT-CONSTANT.DELETE 24) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B)
ST*SYMBOL.ADDRESSES))) (A PROGN (DT-CONSTANT.DELETE 23) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) 
ST*SYMBOL.ADDRESSES)))) ((X_22 PROGN (DT-VARIABLE.DELETE 22) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_22) 
ST*SYMBOL.ADDRESSES))) (X_21 PROGN (DT-VARIABLE.DELETE 21) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) 
ST*SYMBOL.ADDRESSES))) (X_20 PROGN (DT-VARIABLE.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_20) 
ST*SYMBOL.ADDRESSES)))) ((NSAME3 PROGN (DT-PREDICATE.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NSAME3)
ST*SYMBOL.ADDRESSES))) (X_18 PROGN (DT-VARIABLE.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18) 
ST*SYMBOL.ADDRESSES))) (X_17 PROGN (DT-VARIABLE.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_17) 
ST*SYMBOL.ADDRESSES))) (X_16 PROGN (DT-VARIABLE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) 
ST*SYMBOL.ADDRESSES)))) ((X_15 PROGN (DT-VARIABLE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_15) 
ST*SYMBOL.ADDRESSES))) (X_14 PROGN (DT-VARIABLE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) 
ST*SYMBOL.ADDRESSES))) (X_13 PROGN (DT-VARIABLE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_13) 
ST*SYMBOL.ADDRESSES)))) ((SAME3 PROGN (DT-PREDICATE.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SAME3)
ST*SYMBOL.ADDRESSES))) (X_11 PROGN (DT-VARIABLE.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_11) 
ST*SYMBOL.ADDRESSES))) (X_10 PROGN (DT-VARIABLE.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_10) 
ST*SYMBOL.ADDRESSES))) (X_9 PROGN (DT-VARIABLE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_9) 
ST*SYMBOL.ADDRESSES)))) ((SAME2 PROGN (DT-PREDICATE.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SAME2)
ST*SYMBOL.ADDRESSES))) (X_7 PROGN (DT-VARIABLE.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_7) 
ST*SYMBOL.ADDRESSES))) (X_6 PROGN (DT-VARIABLE.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_6) 
ST*SYMBOL.ADDRESSES)))) ((KNAVE PROGN (DT-PREDICATE.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNAVE)
ST*SYMBOL.ADDRESSES))) (KNIGHT PROGN (DT-PREDICATE.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNIGHT)
ST*SYMBOL.ADDRESSES))) (X_3 PROGN (DT-VARIABLE.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_3) 
ST*SYMBOL.ADDRESSES)))) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ
ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_3 . 3) (KNIGHT . 4) (KNAVE . 5) (X_6 . 6) (X_7 . 7)
(SAME2 . 8) (X_9 . 9) (X_10 . 10) (X_11 . 11) (SAME3 . 12) (X_13 . 13) (X_14 . 14) (X_15 . 15) (X_16 . 16) (X_17
. 17) (X_18 . 18) (NSAME3 . 19) (X_20 . 20) (X_21 . 21) (X_22 . 22) (A . 23) (B . 24) (C . 25))))))))STOP
 

;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((* E67B) (*) (* PORTIA^S SUITOR CHOSE CORRECTLY, SO THEY MARRIED AND LIVED QUITE HAPPILY -) (* AT LEAST FOR A WHILE. THEN ONE DAY, PORTIA HAD THE FOLLOWING THOUGHTS :) (* THOUGH MY HUSBAND SHOWED SOME INTELLIGENCE IN CHOOSING THE RIGHT CASKET,) (* THE PROBLEM WASN^T REALLY THAT DIFFICULT. SURELY I COULD HAVE MADE THE) (* PROBLEM HARDER AND GOTTEN A REALLY CLEVER HUSBAND.) (* SO SHE FORTHWITH DIVORCED HER HUSBAND AND DECIDED TO GET A CLEVERER ONE.) (* THIS TIME SHE HAD THE FOLLOWING INSCRIPTIONS PUT ON THE CASKETS :) (*) (* GOLD : THE PORTRAIT IS NOT IN THE SILVER CASKET) (* SILVER : THE PORTRAIT IS NOT IN THIS CASKET) (* LEAD : THE PORTRAIT IS IN THIS CASKET) (*) (* PORTIA EXPLAINED TO THE SUITOR THAT AT LEAST ONE OF THE THREE STATEMENTS) (* WAS TRUE AND AT LEAST ONE OF THEM WAS FALSE.) (* WHICH CASKET CONTAINS THE PORTRAIT?) (*) (* AXIOMS FOR THE 2ND PROBLEM OF PORTIA I. (E67B)) (*) (* THE SAME FUNCTION, PREDICATES AND SORTS AS IN E67A) (* DECLARATIONS :) (*) (TYPE GOLD,SILVER,LEAD : CASKET) (TYPE INSCRIPTION (CASKET) : INSCRIPT) (TYPE PORTRAIT (CASKET)) (TYPE TRUTH (INSCRIPT)) (TYPE INSCR.PORTRAIT (INSCRIPT CASKET)) (TYPE NEG.INSCR.PORTRAIT (INSCRIPT CASKET)) (*) (* THE SAME GENERAL KNOWLEDGE IS USED AS IN E67A) (*) (PORTRAIT (GOLD) OR PORTRAIT (SILVER) OR PORTRAIT (LEAD)) (NOT (PORTRAIT (GOLD) AND PORTRAIT (SILVER) OR PORTRAIT (SILVER) AND PORTRAIT (LEAD) OR PORTRAIT (LEAD) AND PORTRAIT (GOLD))) (ALL X : INSCRIPT ALL Y : CASKET INSCR.PORTRAIT (X Y) AND TRUTH (X) IMPL PORTRAIT (Y)) (ALL X : INSCRIPT ALL Y : CASKET INSCR.PORTRAIT (X Y) AND NOT TRUTH (X) IMPL NOT PORTRAIT (Y)) (ALL X : INSCRIPT ALL Y : CASKET NEG.INSCR.PORTRAIT (X Y) AND TRUTH (X) IMPL NOT PORTRAIT (Y)) (ALL X : INSCRIPT ALL Y : CASKET NEG.INSCR.PORTRAIT (X Y) AND NOT TRUTH (X) IMPL PORTRAIT (Y)) (*) (* IN ADDITION TO THIS KNOWLEDGE THERE IS INFORMATION SPECIAL TO) (* THIS PROBLEM :) (* ACTUAL INSCRIPTIONS ON THE CASKETS :) (NEG.INSCR.PORTRAIT (INSCRIPTION (GOLD) SILVER)) (NEG.INSCR.PORTRAIT (INSCRIPTION (SILVER) SILVER)) (INSCR.PORTRAIT (INSCRIPTION (LEAD) LEAD)) (*) (* AT LEAST ONE OF THE STATEMENTS IS TRUE, AND AT LEAST ONE IS FALSE :) (TRUTH (INSCRIPTION (GOLD)) OR TRUTH (INSCRIPTION (SILVER)) OR TRUTH (INSCRIPTION (LEAD))) (NOT TRUTH (INSCRIPTION (GOLD)) OR NOT TRUTH (INSCRIPTION (SILVER)) OR NOT TRUTH (INSCRIPTION (LEAD))) (*) (* WHICH CASKET CONTAINS THE PORTRAIT ?))) (QUOTE (COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) COMMENT COMMENT COMMENT (OR (+ 6 (2) NIL) (OR (+ 6 (3) NIL) (+ 6 (4) NIL))) (NOT (OR (AND (+ 6 (2) NIL) (+ 6 (3) NIL)) (OR (AND (+ 6 (3) NIL) (+ 6 (4) NIL)) (AND (+ 6 (4) NIL) (+ 6 (2) NIL))))) (ALL 10 (ALL 11 (IMPL (AND (+ 8 (10 11) NIL) (+ 7 (10) NIL)) (+ 6 (11) NIL)))) (ALL 12 (ALL 13 (IMPL (AND (+ 8 (12 13) NIL) (NOT (+ 7 (12) NIL))) (NOT (+ 6 (13) NIL))))) (ALL 14 (ALL 15 (IMPL (AND (+ 9 (14 15) NIL) (+ 7 (14) NIL)) (NOT (+ 6 (15) NIL))))) (ALL 16 (ALL 17 (IMPL (AND (+ 9 (16 17) NIL) (NOT (+ 7 (16) NIL))) (+ 6 (17) NIL)))) COMMENT COMMENT COMMENT COMMENT (+ 9 ((5 2) 3) NIL) (+ 9 ((5 3) 3) NIL) (+ 8 ((5 4) 4) NIL) COMMENT COMMENT (OR (+ 7 ((5 2)) NIL) (OR (+ 7 ((5 3)) NIL) (+ 7 ((5 4)) NIL))) (OR (NOT (+ 7 ((5 2)) NIL)) (OR (NOT (+ 7 ((5 3)) NIL)) (NOT (+ 7 ((5 4)) NIL)))) COMMENT COMMENT)) (QUOTE ((* THEOREMS FOR THE 2ND PORTIA PROBLEM (SM.E67B)) (*) (PORTRAIT (GOLD)))) (QUOTE (COMMENT COMMENT (+ 6 (2) NIL))) (QUOTE ("Edit:     Axioms and Theorems edited: 15-DEC,1989 15:05 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(9845 9850 9855 9860 9865 9870 9875 9880 9895 9910 9925 9940 9954 9959 9964 9969 9984
          9999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 CASKET "GOLD" (DT*ST-KIND NIL) CONSTANT 5
          CASKET "SILVER" (DT*ST-KIND NIL) CONSTANT 5 CASKET "LEAD" (DT*ST-KIND NIL) CONSTANT
          14 "INSCRIPTION" NIL INSCRIPT (CASKET) NIL NIL NIL NIL NIL 1 INSCRIPT
          (DT*ST-KIND NIL) FUNCTION 15 "PORTRAIT" NIL NIL (CASKET) NIL NIL ((- 6 (POSITIVE)))
          ((+ 6 (NEGATIVE))) ((+ 6 (NIL))) ((- 6 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
          "TRUTH" NIL NIL (INSCRIPT) NIL NIL ((- 7 (POSITIVE))) ((+ 7 (NEGATIVE)))
          ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "INSCR.PORTRAIT"
          NIL NIL (INSCRIPT CASKET) NIL NIL ((- 8 (POSITIVE))) ((+ 8 (NEGATIVE))) ((+ 8 (NIL)))
          ((- 8 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "NEG.INSCR.PORTRAIT" NIL NIL
          (INSCRIPT CASKET) NIL NIL ((- 9 (POSITIVE))) ((+ 9 (NEGATIVE))) ((+ 9 (NIL)))
          ((- 9 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 INSCRIPT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CASKET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 INSCRIPT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CASKET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 INSCRIPT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CASKET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 INSCRIPT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CASKET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 10000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 10000)
             (SETQ COUNTER1 18)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 10000)
                 (MEM-INITIALIZE 10000))
               (SETQ COUNTER1 18)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9840 INCREMENT) 9840))
      (SETQ MEM*NEXT.VADR 18
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (INSCRIPT CASKET ANY))) (SETQ DT*SORT.NR (QUOTE 4)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (4 3 2))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE (5))) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE NIL)) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (9 8 7 6 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (9 8 7 6 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE INSCRIPT) (QUOTE DT*SORT.NUMBER)) (QUOTE 3)) (SETF (GET (QUOTE INSCRIPT) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE INSCRIPT) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (INSCRIPT))) (SETF (GET (QUOTE INSCRIPT) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((INSCRIPT INSCRIPT) (CASKET) (ANY INSCRIPT)))) (SETF (GET (QUOTE INSCRIPT) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (INSCRIPT))) (SETF (GET (QUOTE INSCRIPT) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE INSCRIPT) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY INSCRIPT)))) (PROGN (SETF (GET (QUOTE CASKET) (QUOTE DT*SORT.NUMBER)) (QUOTE 2)) (SETF (GET (QUOTE CASKET) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE CASKET) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (CASKET))) (SETF (GET (QUOTE CASKET) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((INSCRIPT) (CASKET CASKET) (ANY CASKET)))) (SETF (GET (QUOTE CASKET) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (CASKET))) (SETF (GET (QUOTE CASKET) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE CASKET) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY CASKET)))) (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (INSCRIPT CASKET))) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY INSCRIPT CASKET))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((INSCRIPT INSCRIPT) (CASKET CASKET) (ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (CASKET))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
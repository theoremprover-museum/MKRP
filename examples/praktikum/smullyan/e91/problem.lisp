;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((* PROBLEM E91) (*) (* THIS TIME WE GET THE FOLLOWING STATEMENTS :) (* A : AT LEAST ONE OF THE THREE OF US IS A KNAVE.) (* B : C IS A KNIGHT.) (* GIVEN THAT THERE IS EXACTLY ONE WEREWOLF AND THAT HE IS A KNIGHT,) (* WHO IS THE WEREWOLF?) (*) (*) (* THE FUNCTION STATE (X) AND THE PREDICATES TRUTH (X) , KNIGHT (X) , KNAVE (X) ,) (* AND WEREWOLF (X) MEAN THE SAME AS IN E89.) (* THE FOLLOWING PREDICATES ARE NEW :) (* STATE.KNIGHT (X Y) - STATEMENT X TELLS THAT PERSON Y IS A KNIGHT) (* AT-LEAST-ONE-KNAVE (X Y Z) - AT LEAST ONE PERSON X,Y,OR Z IS A KNAVE) (* STATE.AT-LEAST-ONE-KNAVE (S X Y Z) - STATEMENT S TELLS THAT AT LEAST ONE) (* PERSON X,Y, OR Z IS A KNAVE) (*) (* DECLARATIONS :) (TYPE A,B,C : PERSON) (TYPE STATE (PERSON) : STATEMENT) (TYPE TRUTH (STATEMENT)) (TYPE KNIGHT (PERSON)) (TYPE KNAVE (PERSON)) (TYPE WEREWOLF (PERSON)) (TYPE STATE.KNIGHT (STATEMENT PERSON)) (TYPE AT-LEAST-ONE-KNAVE (PERSON PERSON PERSON)) (TYPE STATE.AT-LEAST-ONE-KNAVE (STATEMENT PERSON PERSON PERSON)) (*) (* EVERY INHABITANT IS EITHER A KNIGHT OR A KNAVE :) (ALL X : PERSON KNIGHT (X) OR KNAVE (X)) (ALL X : PERSON NOT (KNIGHT (X) AND KNAVE (X))) (*) (* KNIGHT ALWAYS TELL THE TRUTH AND KNAVE ALWAYS LIE :) (ALL X : PERSON KNIGHT (X) EQV TRUTH (STATE (X))) (ALL X : PERSON KNAVE (X) EQV NOT (TRUTH (STATE (X)))) (*) (* A WEREWOLF CAN BE A KNIGHT OR A KNAVE :) (ALL X : PERSON WEREWOLF (X) IMPL KNIGHT (X) OR KNAVE (X)) (*) (* THERE IS EXACTLY ONE WEREWOLF :) (WEREWOLF (A) OR WEREWOLF (B) OR WEREWOLF (C)) (NOT (WEREWOLF (A) AND WEREWOLF (B) OR WEREWOLF (B) AND WEREWOLF (C) OR WEREWOLF (C) AND WEREWOLF (A))) (*) (* EXPLANATION OF AT-LEAST-ONE-KNAVE :) (ALL X,Y,Z : PERSON AT-LEAST-ONE-KNAVE (X Y Z) EQV KNAVE (X) OR KNAVE (Y) OR KNAVE (Z)) (*) (* IMPLICATIONS ABOUT STATEMENTS :) (ALL X : STATEMENT ALL Y : PERSON STATE.KNIGHT (X Y) AND TRUTH (X) IMPL KNIGHT (Y)) (ALL X : STATEMENT ALL Y : PERSON STATE.KNIGHT (X Y) AND NOT (TRUTH (X)) IMPL NOT (KNIGHT (Y))) (ALL S : STATEMENT ALL X,Y,Z : PERSON STATE.AT-LEAST-ONE-KNAVE (S X Y Z) AND TRUTH (S) IMPL AT-LEAST-ONE-KNAVE (X Y Z)) (ALL S : STATEMENT ALL X,Y,Z : PERSON STATE.AT-LEAST-ONE-KNAVE (S X Y Z) AND NOT (TRUTH (S)) IMPL NOT (AT-LEAST-ONE-KNAVE (X Y Z))) (*) (* THE WEREWOLF IS A KNIGHT :) (ALL X : PERSON WEREWOLF (X) IMPL KNIGHT (X)) (*) (* ACTUAL STATEMENTS :) (STATE.AT-LEAST-ONE-KNAVE (STATE (A) A B C)) (STATE.KNIGHT (STATE (B) C)))) (QUOTE (COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT (+ 0 NIL NIL) (+ 0 NIL NIL) (+ 0 NIL NIL) (+ 0 NIL NIL) (+ 0 NIL NIL) (+ 0 NIL NIL) (+ 0 NIL NIL) (+ 0 NIL NIL) (+ 0 NIL NIL) COMMENT COMMENT (ALL 14 (OR (+ 8 (14) NIL) (+ 9 (14) NIL))) (ALL 15 (NOT (AND (+ 8 (15) NIL) (+ 9 (15) NIL)))) COMMENT COMMENT (ALL 16 (EQV (+ 8 (16) (KIND (EQV T 350))) (+ 7 ((6 16)) (KIND (EQV NIL 350))))) (ALL 17 (EQV (+ 9 (17) (KIND (EQV T 360))) (NOT (+ 7 ((6 17)) (KIND (EQV NIL 360)))))) COMMENT COMMENT (ALL 18 (IMPL (+ 10 (18) NIL) (OR (+ 8 (18) NIL) (+ 9 (18) NIL)))) COMMENT COMMENT (OR (+ 10 (3) NIL) (OR (+ 10 (4) NIL) (+ 10 (5) NIL))) (NOT (OR (AND (+ 10 (3) NIL) (+ 10 (4) NIL)) (OR (AND (+ 10 (4) NIL) (+ 10 (5) NIL)) (AND (+ 10 (5) NIL) (+ 10 (3) NIL))))) COMMENT COMMENT (ALL 21 (ALL 20 (ALL 19 (EQV (+ 12 (19 20 21) (KIND (EQV T 460))) (OR (+ 9 (19) (KIND (EQV NIL 460))) (OR (+ 9 (20) (KIND (EQV NIL 460))) (+ 9 (21) (KIND (EQV NIL 460))))))))) COMMENT COMMENT (ALL 22 (ALL 23 (IMPL (AND (+ 11 (22 23) NIL) (+ 7 (22) NIL)) (+ 8 (23) NIL)))) (ALL 24 (ALL 25 (IMPL (AND (+ 11 (24 25) NIL) (NOT (+ 7 (24) NIL))) (NOT (+ 8 (25) NIL))))) (ALL 26 (ALL 29 (ALL 28 (ALL 27 (IMPL (AND (+ 13 (26 27 28 29) NIL) (+ 7 (26) NIL)) (+ 12 (27 28 29) NIL)))))) (ALL 30 (ALL 33 (ALL 32 (ALL 31 (IMPL (AND (+ 13 (30 31 32 33) NIL) (NOT (+ 7 (30) NIL))) (NOT (+ 12 (31 32 33) NIL))))))) COMMENT COMMENT (ALL 34 (IMPL (+ 10 (34) NIL) (+ 8 (34) NIL))) COMMENT COMMENT (+ 13 ((6 3) 3 4 5) NIL) (+ 11 ((6 4) 5) NIL))) (QUOTE ((* THEOREM FOR E91) (WEREWOLF (A)))) (QUOTE (COMMENT (+ 10 (3) NIL))) (QUOTE ("Edit:     Axioms and Theorems edited: 09-JUL,1991 16:11 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(9720 9725 9730 9735 9740 9745 9750 9755 9760 9765 9770 9775 9780 9785 9790 9795 9800
          9805 9810 9815 9820 9835 9850 9865 9880 9895 9910 9925 9939 9944 9949 9954 9969 9984
          9999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC)))
          ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 PERSON "A" (DT*ST-KIND NIL) CONSTANT 5 PERSON
          "B" (DT*ST-KIND NIL) CONSTANT 5 PERSON "C" (DT*ST-KIND NIL) CONSTANT 14 "STATE" NIL
          STATEMENT (PERSON) NIL NIL NIL NIL NIL 1 STATEMENT (DT*ST-KIND NIL) FUNCTION 15
          "TRUTH" NIL NIL (STATEMENT) NIL NIL ((- 7 (POSITIVE))) ((+ 7 (NEGATIVE)))
          ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "KNIGHT" NIL NIL
          (PERSON) NIL NIL ((- 8 (POSITIVE))) ((+ 8 (NEGATIVE))) ((+ 8 (NIL))) ((- 8 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "KNAVE" NIL NIL (PERSON) NIL NIL
          ((- 9 (POSITIVE))) ((+ 9 (NEGATIVE))) ((+ 9 (NIL))) ((- 9 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "WEREWOLF" NIL NIL (PERSON) NIL NIL ((- 10 (POSITIVE)))
          ((+ 10 (NEGATIVE))) ((+ 10 (NIL))) ((- 10 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          15 "STATE.KNIGHT" NIL NIL (STATEMENT PERSON) NIL NIL ((- 11 (POSITIVE)))
          ((+ 11 (NEGATIVE))) ((+ 11 (NIL))) ((- 11 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          15 "AT-LEAST-ONE-KNAVE" NIL NIL (PERSON PERSON PERSON) NIL NIL ((- 12 (POSITIVE)))
          ((+ 12 (NEGATIVE))) ((+ 12 (NIL))) ((- 12 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          15 "STATE.AT-LEAST-ONE-KNAVE" NIL NIL (STATEMENT PERSON PERSON PERSON) NIL NIL
          ((- 13 (POSITIVE))) ((+ 13 (NEGATIVE))) ((+ 13 (NIL))) ((- 13 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5
          PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 10000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 10000)
             (SETQ COUNTER1 35)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 10000)
                 (MEM-INITIALIZE 10000))
               (SETQ COUNTER1 35)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9715 INCREMENT) 9715))
      (SETQ MEM*NEXT.VADR 35
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (STATEMENT PERSON ANY))) (SETQ DT*SORT.NR (QUOTE 4)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*ELEMENT.PREDICATE (QUOTE NIL)) (SETQ DT*OMEGA.CONSTANT (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (5 4 3))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE (6))) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (13 12 11 10 9 8 7 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (13 12 11 10 9 8 7 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE STATEMENT) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE STATEMENT) (QUOTE DT*SORT.NUMBER)) (QUOTE 3)) (SETF (GET (QUOTE STATEMENT) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (STATEMENT))) (SETF (GET (QUOTE STATEMENT) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((STATEMENT STATEMENT) (PERSON) (ANY STATEMENT)))) (SETF (GET (QUOTE STATEMENT) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (STATEMENT))) (SETF (GET (QUOTE STATEMENT) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE STATEMENT) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY STATEMENT)))) (PROGN (SETF (GET (QUOTE PERSON) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE PERSON) (QUOTE DT*SORT.NUMBER)) (QUOTE 2)) (SETF (GET (QUOTE PERSON) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (PERSON))) (SETF (GET (QUOTE PERSON) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((STATEMENT) (PERSON PERSON) (ANY PERSON)))) (SETF (GET (QUOTE PERSON) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (PERSON))) (SETF (GET (QUOTE PERSON) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE PERSON) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY PERSON)))) (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (STATEMENT PERSON))) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY STATEMENT PERSON))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((STATEMENT STATEMENT) (PERSON PERSON) (ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (PERSON))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
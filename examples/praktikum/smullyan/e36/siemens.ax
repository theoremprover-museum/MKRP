(COND ((FMT-LOAD "18-DEC-84 00:32:55" NIL (((* THERE ARE TWO PEOPLE A ,B %.) COMMENT COMMENT) ((* A IS ASKED:IS
EITHER OF YOU A KNIGHT ?) COMMENT COMMENT) ((* HE GIVES AN ANSWER AND WE KNOW WHAT THEY ARE %.) COMMENT COMMENT)
((*) COMMENT COMMENT) ((* WHAT ARE THEY ?) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* NO (X) MEANS X ANSWERS WITH
NO %.) COMMENT COMMENT) ((* YES (X) MEANS X ANSWERS WITH YES %.) COMMENT COMMENT) ((* EITHER2 (X Y) MEANS X OR
Y IS A KNIGHT %.) COMMENT COMMENT) ((* EITHER3 (X Y Z) MEANS X SAYS: Y OR Z IS A KNIGHT %.) COMMENT COMMENT) ((*
NEITHER3 (X Y Z) MEANS X SAYS: Y AND Z ARE KNAVES %.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((ALL X KNAVE (X)
EQV NOT KNIGHT (X)) (ALL 4 (EQV (+ 5 (4) (KIND (EQV T 140))) (NOT (+ 6 (4) (KIND (EQV NIL 140)))))) QUANTIFICATION)
((ALL X NO (X) EQV NOT YES (X)) (ALL 7 (EQV (+ 8 (7) (KIND (EQV T 150))) (NOT (+ 9 (7) (KIND (EQV NIL 150))))))
QUANTIFICATION) ((ALL X NO (X) IMPL NEITHER3 (X A B)) (ALL 10 (IMPL (+ 8 (10) NIL) (+ 13 (10 11 12) NIL))) 
QUANTIFICATION) ((ALL X YES (X) IMPL EITHER3 (X A B)) (ALL 14 (IMPL (+ 9 (14) NIL) (+ 15 (14 11 12) NIL))) 
QUANTIFICATION) ((ALL X EITHER3 (X A B) AND KNIGHT (X) IMPL EITHER2 (A B)) (ALL 16 (IMPL (AND (+ 15 (16 11 12)
NIL) (+ 6 (16) NIL)) (+ 17 (11 12) NIL))) QUANTIFICATION) ((ALL X EITHER3 (X A B) AND KNAVE (X) IMPL NOT EITHER2
(A B)) (ALL 18 (IMPL (AND (+ 15 (18 11 12) NIL) (+ 5 (18) NIL)) (NOT (+ 17 (11 12) NIL)))) QUANTIFICATION) ((ALL
X NEITHER3 (X A B) AND KNIGHT (X) IMPL NOT EITHER2 (A B)) (ALL 19 (IMPL (AND (+ 13 (19 11 12) NIL) (+ 6 (19) NIL))
(NOT (+ 17 (11 12) NIL)))) QUANTIFICATION) ((ALL X NEITHER3 (X A B) AND KNAVE (X) IMPL EITHER2 (A B)) (ALL 20 (IMPL
(AND (+ 13 (20 11 12) NIL) (+ 5 (20) NIL)) (+ 17 (11 12) NIL))) QUANTIFICATION) ((ALL X,Y EITHER2 (X Y) EQV KNIGHT
(X) OR KNIGHT (Y)) (ALL 22 (ALL 21 (EQV (+ 17 (21 22) (KIND (EQV T 220))) (OR (+ 6 (21) (KIND (EQV NIL 220))) (+
6 (22) (KIND (EQV NIL 220))))))) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (DT-RESET)) (PROG ((ADDRLIST (QUOTE
(10310 10315 10320 10325 10330 10345 10350 10365 10370 10385 10390 10395 10400 10415 10430 10435 10450 10465 10470
ATP.MEMORY.NIL 10485 10500))) (DATALIST (QUOTE (15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE)))
((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE)))
((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 15 "KNAVE" NIL NIL (ANY) NIL NIL ((- 5 (POSITIVE))) ((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL)))
NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "KNIGHT" NIL NIL (ANY) NIL NIL ((- 6 (POSITIVE))) ((+ 6 (NEGATIVE))) ((+
6 (NIL))) ((- 6 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
15 "NO" NIL NIL (ANY) NIL NIL ((- 8 (POSITIVE))) ((+ 8 (NEGATIVE))) ((+ 8 (NIL))) ((- 8 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 15 "YES" NIL NIL (ANY) NIL NIL ((- 9 (POSITIVE))) ((+ 9 (NEGATIVE))) ((+ 9 (NIL))) ((- 9 (NIL)))
NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 "A" ANY (ST*ATTRIBUTE
NIL DT*ST-KIND NIL) CONSTANT 5 "B" ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 15 "NEITHER3" NIL NIL (ANY ANY
ANY) NIL NIL ((- 13 (POSITIVE))) ((+ 13 (NEGATIVE))) ((+ 13 (NIL))) ((- 13 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "EITHER3" NIL NIL (ANY ANY ANY) NIL NIL ((- 15 (POSITIVE)))
((+ 15 (NEGATIVE))) ((+ 15 (NIL))) ((- 15 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 15 "EITHER2" NIL NIL (ANY ANY) NIL NIL ((- 17 (POSITIVE))) ((+ 17 (NEGATIVE))) ((+ 17 (NIL)))
((- 17 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE
MEM*SIZE 10500)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 10500) (SETQ COUNTER1 23) (MAPC ADDRLIST (FUNCTION
(LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR)
((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC
DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE
10500) (MEM-INITIALIZE 10500))) (SETQ COUNTER1 23) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ
COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA
MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 10500) (RPAQ MEM*NEXT.RADR (IPLUS
10305 INCREMENT))) (T (RPAQ MEM*NEXT.RADR 10305))) (RPAQ MEM*NEXT.VADR 23) (RPAQ MEM*REST (ADD1 (IDIFFERENCE 
MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ
DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 2) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS 
DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS
DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ
DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (12 11)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER
0) (RPAQQ DT*FUNCTION.ALL NIL) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES
NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES
(17 15 13 9 8 6 5 2 1)) (RPAQQ DT*PREDICATE.ALL (17 15 13 9 8 6 5 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL)
(RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE
+ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ
DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ 
DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL))) (PROGN) (PROGN
(SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE NIL))) (PROGN (SETPROPLIST (QUOTE ANY) (QUOTE (DT*ATTRIBUTE
NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY
ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*SORT.NUMBER 1 DT*DIRECT.SUBSORTS NIL)))) (PROGN (RPAQQ ST*STACK1 (NIL ((X_22
PROGN (DT-VARIABLE.DELETE 22) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_22) ST*SYMBOL.ADDRESSES))) (X_21 PROGN
(DT-VARIABLE.DELETE 21) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_21) ST*SYMBOL.ADDRESSES)))) ((X_20 PROGN (
DT-VARIABLE.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_20) ST*SYMBOL.ADDRESSES)))) ((X_19 PROGN (
DT-VARIABLE.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_19) ST*SYMBOL.ADDRESSES)))) ((X_18 PROGN (
DT-VARIABLE.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18) ST*SYMBOL.ADDRESSES)))) ((EITHER2 PROGN
(DT-PREDICATE.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EITHER2) ST*SYMBOL.ADDRESSES))) (X_16 PROGN
(DT-VARIABLE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES)))) ((EITHER3 PROGN
(DT-PREDICATE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EITHER3) ST*SYMBOL.ADDRESSES))) (X_14 PROGN
(DT-VARIABLE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES)))) ((NEITHER3 PROGN
(DT-PREDICATE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NEITHER3) ST*SYMBOL.ADDRESSES))) (B PROGN (
DT-CONSTANT.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B) ST*SYMBOL.ADDRESSES))) (A PROGN (DT-CONSTANT.DELETE
11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) ST*SYMBOL.ADDRESSES))) (X_10 PROGN (DT-VARIABLE.DELETE 10) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_10) ST*SYMBOL.ADDRESSES)))) ((YES PROGN (DT-PREDICATE.DELETE 9) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE YES) ST*SYMBOL.ADDRESSES))) (NO PROGN (DT-PREDICATE.DELETE 8) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NO) ST*SYMBOL.ADDRESSES))) (X_7 PROGN (DT-VARIABLE.DELETE 7) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_7) ST*SYMBOL.ADDRESSES)))) ((KNIGHT PROGN (DT-PREDICATE.DELETE 6) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNIGHT) ST*SYMBOL.ADDRESSES))) (KNAVE PROGN (DT-PREDICATE.DELETE 5) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNAVE) ST*SYMBOL.ADDRESSES))) (X_4 PROGN (DT-VARIABLE.DELETE 4) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_4) ST*SYMBOL.ADDRESSES)))) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES)))
(TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY
PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY
REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_4 .
4) (KNAVE . 5) (KNIGHT . 6) (X_7 . 7) (NO . 8) (YES . 9) (X_10 . 10) (A . 11) (B . 12) (NEITHER3 . 13) (X_14 .
14) (EITHER3 . 15) (X_16 . 16) (EITHER2 . 17) (X_18 . 18) (X_19 . 19) (X_20 . 20) (X_21 . 21) (X_22 . 22))))))))STOP
 

(COND ((FMT-LOAD " 7-DEC-84 21:35:25" NIL (((* AXIOMS FOR PROBLEM 42 %.) COMMENT COMMENT) ((* GIVEN TWO PEOPLE
A AND B.) COMMENT COMMENT) ((* EACH OF THEM IS KNIGHT, KNAVE OR NORMAL.) COMMENT COMMENT) ((* A SAYS : I AM OF
LOWER RANK THAN B.) COMMENT COMMENT) ((* B SAYS : THAT IS NOT TRUE.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((*
CAN THE RANKS OF A OR B BE DETERMINED ?) COMMENT COMMENT) ((* CAN IT BE DETERMINED, IF ONE OF THESE STATEMENTS
IS TRUE OR FALSE.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* LRANK2 (X Y) MEANS : X IS OF A LOWER RANK THAN Y.)
COMMENT COMMENT) ((* LRANK3 (X Y Z) MEANS : X SAYS : Y IS OF A LOWER RANK THAN Z.) COMMENT COMMENT) ((* NLRANK3
(X Y Z) MEANS : X SAYS : Y IS NOT OF A LOWER RANK THAN Z.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((ALL X KNIGHT
(X) EQV NOT KNAVE (X) AND NOT NORMAL (X)) (ALL 165 (EQV (+ 164 (165) (KIND (EQV T 150))) (AND (NOT (+ 163 (165)
(KIND (EQV NIL 150)))) (NOT (+ 161 (165) (KIND (EQV NIL 150))))))) QUANTIFICATION) ((ALL X KNAVE (X) EQV NOT KNIGHT
(X) AND NOT NORMAL (X)) (ALL 173 (EQV (+ 163 (173) (KIND (EQV T 160))) (AND (NOT (+ 164 (173) (KIND (EQV NIL 160))))
(NOT (+ 161 (173) (KIND (EQV NIL 160))))))) QUANTIFICATION) ((ALL X NORMAL (X) EQV NOT KNIGHT (X) AND NOT KNAVE
(X)) (ALL 178 (EQV (+ 161 (178) (KIND (EQV T 170))) (AND (NOT (+ 164 (178) (KIND (EQV NIL 170)))) (NOT (+ 163 (178)
(KIND (EQV NIL 170))))))) QUANTIFICATION) ((ALL X,Y LRANK (X Y) EQV KNAVE (X) AND (NORMAL (Y) OR KNIGHT (Y)) OR
NORMAL (X) AND KNIGHT (Y)) (ALL 182 (ALL 183 (EQV (+ 181 (183 182) (KIND (EQV T 180))) (OR (AND (+ 163 (183) (KIND
(EQV NIL 180))) (OR (+ 161 (182) (KIND (EQV NIL 180))) (+ 164 (182) (KIND (EQV NIL 180))))) (AND (+ 161 (183) (KIND
(EQV NIL 180))) (+ 164 (182) (KIND (EQV NIL 180)))))))) QUANTIFICATION) ((ALL X,Y,Z LRANK3 (X Y Z) AND KNAVE (X)
IMPL NOT LRANK (Y Z)) (ALL 152 (ALL 169 (ALL 171 (IMPL (AND (+ 74 (171 169 152) NIL) (+ 163 (171) NIL)) (NOT (+
181 (169 152) NIL)))))) QUANTIFICATION) ((ALL X,Y,Z LRANK3 (X Y Z) AND KNIGHT (X) IMPL LRANK (Y Z)) (ALL 140 (ALL
144 (ALL 32 (IMPL (AND (+ 74 (32 144 140) NIL) (+ 164 (32) NIL)) (+ 181 (144 140) NIL))))) QUANTIFICATION) ((ALL
X,Y,Z NLRANK3 (X Y Z) AND KNAVE (X) IMPL LRANK (Y Z)) (ALL 176 (ALL 158 (ALL 157 (IMPL (AND (+ 177 (157 158 176)
NIL) (+ 163 (157) NIL)) (+ 181 (158 176) NIL))))) QUANTIFICATION) ((ALL X,Y,Z NLRANK3 (X Y Z) AND KNIGHT (X) IMPL
NOT LRANK (Y Z)) (ALL 188 (ALL 187 (ALL 186 (IMPL (AND (+ 177 (186 187 188) NIL) (+ 164 (186) NIL)) (NOT (+ 181
(187 188) NIL)))))) QUANTIFICATION) ((LRANK3 (A A B)) (+ 74 (189 189 190) NIL) QUANTIFICATION) ((NLRANK3 (B A B))
(+ 177 (190 189 190) NIL) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (DT-RESET)) (PROG ((ADDRLIST (QUOTE (19790
19795 19800 19805 19810 ATP.MEMORY.NIL ATP.MEMORY.NIL 19910 19905 19900 ATP.MEMORY.NIL ATP.MEMORY.NIL 19915 19825
19830 ATP.MEMORY.NIL ATP.MEMORY.NIL 19920 ATP.MEMORY.NIL 19885 ATP.MEMORY.NIL 19880 ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL 19970 19965 19950 ATP.MEMORY.NIL 19935 ATP.MEMORY.NIL ATP.MEMORY.NIL 19835 19840 ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 19875 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 19850 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 19845 ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
19870 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL 19855 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
19985 20000))) (DATALIST (QUOTE (15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+
1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE)))
((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 15 "KNIGHT" NIL NIL (ANY) NIL NIL ((- 164 (POSITIVE))) ((+ 164 (NEGATIVE))) ((+ 164 (NIL))) ((-
164 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "KNAVE" NIL NIL (ANY) NIL NIL ((- 163 (POSITIVE))) ((+ 163 (NEGATIVE)))
((+ 163 (NIL))) ((- 163 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "NORMAL" NIL NIL (ANY) NIL NIL ((- 161 (POSITIVE)))
((+ 161 (NEGATIVE))) ((+ 161 (NIL))) ((- 161 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL
DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "LRANK" NIL NIL (ANY ANY) NIL NIL ((-
181 (POSITIVE))) ((+ 181 (NEGATIVE))) ((+ 181 (NIL))) ((- 181 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY
NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "LRANK3" NIL NIL (ANY ANY ANY) NIL NIL ((- 74 (POSITIVE))) ((+ 74 (NEGATIVE)))
((+ 74 (NIL))) ((- 74 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "NLRANK3" NIL NIL (ANY ANY ANY) NIL NIL ((- 177 (POSITIVE))) ((+ 177 (NEGATIVE)))
((+ 177 (NIL))) ((- 177 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 "A" ANY
(ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 5 "B" ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT))) (INCREMENT (
IDIFFERENCE MEM*SIZE 20000)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 20000) (SETQ COUNTER1 191) (MAPC
ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE 
ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1
(ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))
(T (COND ((NEQ MEM*SIZE 20000) (MEM-INITIALIZE 20000))) (SETQ COUNTER1 191) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR)
(SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION
(LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 20000) (RPAQ
MEM*NEXT.RADR (IPLUS 19785 INCREMENT))) (T (RPAQ MEM*NEXT.RADR 19785))) (RPAQ MEM*NEXT.VADR 191) (RPAQ MEM*REST
(ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR
NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 2) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS 
DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS
DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ 
DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (190 189)) (RPAQQ DT*ABBREVIATIONS
NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL NIL) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE))
(RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS
(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC 
ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE))
(RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES
NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (177 74 181 161 163 164 2 1)) (RPAQQ DT*PREDICATE.ALL (177 74 181 161 163
164 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES 
NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES
-TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ
DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL
PREDICATE.ALL))) (PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE NIL))) (PROGN (SETPROPLIST
(QUOTE ANY) (QUOTE (DT*ATTRIBUTE NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS
(ANY) DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL DT*SORT.NUMBER 1)))) (PROGN
(RPAQQ ST*STACK1 (NIL NIL ((B PROGN (DT-CONSTANT.DELETE 190) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B) 
ST*SYMBOL.ADDRESSES))) (A PROGN (DT-CONSTANT.DELETE 189) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) 
ST*SYMBOL.ADDRESSES)))) ((X_188 PROGN (DT-VARIABLE.DELETE 188) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_188)
ST*SYMBOL.ADDRESSES))) (X_187 PROGN (DT-VARIABLE.DELETE 187) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_187)
ST*SYMBOL.ADDRESSES))) (X_186 PROGN (DT-VARIABLE.DELETE 186) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_186)
ST*SYMBOL.ADDRESSES)))) ((NLRANK3 PROGN (DT-PREDICATE.DELETE 177) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NLRANK3)
ST*SYMBOL.ADDRESSES))) (X_176 PROGN (DT-VARIABLE.DELETE 176) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_176)
ST*SYMBOL.ADDRESSES))) (X_158 PROGN (DT-VARIABLE.DELETE 158) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_158)
ST*SYMBOL.ADDRESSES))) (X_157 PROGN (DT-VARIABLE.DELETE 157) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_157)
ST*SYMBOL.ADDRESSES)))) ((X_140 PROGN (DT-VARIABLE.DELETE 140) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_140)
ST*SYMBOL.ADDRESSES))) (X_144 PROGN (DT-VARIABLE.DELETE 144) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_144)
ST*SYMBOL.ADDRESSES))) (X_32 PROGN (DT-VARIABLE.DELETE 32) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_32) 
ST*SYMBOL.ADDRESSES)))) ((LRANK3 PROGN (DT-PREDICATE.DELETE 74) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE LRANK3)
ST*SYMBOL.ADDRESSES))) (X_152 PROGN (DT-VARIABLE.DELETE 152) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_152)
ST*SYMBOL.ADDRESSES))) (X_169 PROGN (DT-VARIABLE.DELETE 169) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_169)
ST*SYMBOL.ADDRESSES))) (X_171 PROGN (DT-VARIABLE.DELETE 171) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_171)
ST*SYMBOL.ADDRESSES)))) ((LRANK PROGN (DT-PREDICATE.DELETE 181) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE LRANK)
ST*SYMBOL.ADDRESSES))) (X_182 PROGN (DT-VARIABLE.DELETE 182) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_182)
ST*SYMBOL.ADDRESSES))) (X_183 PROGN (DT-VARIABLE.DELETE 183) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_183)
ST*SYMBOL.ADDRESSES)))) ((X_178 PROGN (DT-VARIABLE.DELETE 178) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_178)
ST*SYMBOL.ADDRESSES)))) ((X_173 PROGN (DT-VARIABLE.DELETE 173) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_173)
ST*SYMBOL.ADDRESSES)))) ((NORMAL PROGN (DT-PREDICATE.DELETE 161) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NORMAL)
ST*SYMBOL.ADDRESSES))) (KNAVE PROGN (DT-PREDICATE.DELETE 163) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNAVE)
ST*SYMBOL.ADDRESSES))) (KNIGHT PROGN (DT-PREDICATE.DELETE 164) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNIGHT)
ST*SYMBOL.ADDRESSES))) (X_165 PROGN (DT-VARIABLE.DELETE 165) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_165)
ST*SYMBOL.ADDRESSES)))) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE
2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1)
(RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY))
(RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA)))))
(RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_165 . 165) (KNIGHT . 164) (KNAVE . 163) (NORMAL
. 161) (X_173 . 173) (X_178 . 178) (X_183 . 183) (X_182 . 182) (LRANK . 181) (X_171 . 171) (X_169 . 169) (X_152
. 152) (LRANK3 . 74) (X_32 . 32) (X_144 . 144) (X_140 . 140) (X_157 . 157) (X_158 . 158) (X_176 . 176) (NLRANK3
. 177) (X_186 . 186) (X_187 . 187) (X_188 . 188) (A . 189) (B . 190))))))))STOP
 

(COND ((FMT-LOAD "12-FEB-85 14:48:55"
NIL(((* WHAT TO DO IN THE FOREST OF WEREWOLVES.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* SUPPOSE YOU ARE VISITING A FOREST IN WHICH EVERY INHABITANT IS EITHER) COMMENT COMMENT) ((* A KNIGHT OR A KNAVE. (WE RECALL THAT KNIGHTS ALWAYS TELL THE
TRUTH AND KNAVES ALWAYS LIE.)) COMMENT COMMENT) ((* IN ADDITION, SOME OF THE INHABITANTS ARE WEREWOLVES AND HAVE THE) COMMENT COMMENT) ((* ANNOYING HABIT OF SOMETIMES TURNING INTO WOLVES AT NIGHT AND DEVOURING) COMMENT COMMENT) ((* PEOPLE. A WEREWOLF
CAN BE EITHER A KNIGHT OR A KNAVE.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* E88.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* YOU ARE INTERVIEWING THREE INHABITANTS,A,B,AND C, AND IT IS KNOWN THAT) COMMENT COMMENT) ((* EXACTLY ONE OF THEM IS
A WEREWOLF. THEY MAKE THE FOLLOWING STATEMENTS:) COMMENT COMMENT) ((* A: C IS A WEREWOLF.) COMMENT COMMENT) ((* B: I AM NOT A WEREWOLF.) COMMENT COMMENT) ((* C: AT LEAST TWO OF US ARE KNAVES.) COMMENT COMMENT) ((* OUR PROBLEM HAS TWO PARTS:) COMMENT
COMMENT) ((* (A) IS THE WEREWOLF A KNIGHT OR A KNAVE?) COMMENT COMMENT) ((* (B) IF YOU HAVE TO TAKE ONE OF THEM AS A TRAVELING COMPANION, AND IT IS) COMMENT COMMENT) ((* MORE IMPORTANT THAT HE NOT BE A WEREWOLF THAN THAT HE NOT BE A KNAVE,) COMMENT
COMMENT) ((* WHICH ONE WOULD YOU PICK?) COMMENT COMMENT) ((* WE DEFINE THE FOLLOWING PREDICATES:) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* KNIGHT (X) ...MEANS THAT X IS A KNIGHT.) COMMENT COMMENT) ((* KNAVE (X) ...MEANS THAT X IS A KNAVE.) COMMENT
COMMENT) ((* WEREWOLF (X) ...MEANS THAT X IS A WEREWOLF.) COMMENT COMMENT) ((* TRUTH (X) ...MEANS THAT THE STATEMENT X IS TRUE.) COMMENT COMMENT) ((* STATE.WEREWOLF (X Y) ...THE STATEMENT X MEANS THAT Y IS A WEREWOLF.) COMMENT COMMENT) ((* 
NEG.STATE.WEREWOLF (X Y) ...THE STATEMENT X MEANS THAT Y IS NOT A WEREWOLF.) COMMENT COMMENT) ((* AT.LEAST.TWO.KNAVES (X Y Z) ...MEANS THAT AT LEAST TWO OF X,Y AND Z ARE KNAVES.) COMMENT COMMENT) ((* STATE.AT.LEAST.TWO.KNAVES (U V W X) ...THE
STATEMENT U MEANS THAT AT LEAST TWO OF V,W AND X ARE KNAVES.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* WE DEFINE THE FOLLOWING FUNCTION:) COMMENT COMMENT) ((* STATE (X) ...ASSIGNS EACH PERSON A STATEMENT.) COMMENT COMMENT) ((*) COMMENT COMMENT)
((TYPE A,B,C:PERSON) (+ 1 NIL) TYPE) ((TYPE KNIGHT (PERSON)) (+ 1 NIL) TYPE) ((TYPE KNAVE (PERSON)) (+ 1 NIL) TYPE) ((TYPE WEREWOLF (PERSON)) (+ 1 NIL) TYPE) ((TYPE TRUTH (STATEMENT)) (+ 1 NIL) TYPE) ((TYPE STATE.WEREWOLF (STATEMENT PERSON)) (+
1 NIL) TYPE) ((TYPE NEG.STATE.WEREWOLF (STATEMENT PERSON)) (+ 1 NIL) TYPE) ((TYPE AT.LEAST.TWO.KNAVES (PERSON PERSON PERSON)) (+ 1 NIL) TYPE) ((TYPE STATE.AT.LEAST.TWO.KNAVES (STATEMENT PERSON PERSON PERSON)) (+ 1 NIL) TYPE) ((TYPE STATE (PERSON)
:STATEMENT) (+ 1 NIL) TYPE) ((*) COMMENT COMMENT) ((* EVERY INHABITANT IS EITHER A KNIGHT OR A KNAVE:) COMMENT COMMENT) ((ALL X:PERSON KNIGHT (X) OR KNAVE (X)) (ALL 18 (OR (+ 42 (18) NIL) (+ 43 (18) NIL))) QUANTIFICATION) ((ALL X:PERSON NOT (KNIGHT
(X) AND KNAVE (X))) (ALL 36 (NOT (AND (+ 42 (36) NIL) (+ 43 (36) NIL)))) QUANTIFICATION) ((*) COMMENT COMMENT) ((* KNIGHTS ALWAYS TELL THE TRUTH AND KNAVES ALWAYS LIE:) COMMENT COMMENT) ((ALL X:PERSON KNIGHT (X) EQV TRUTH (STATE (X))) (ALL 35
(EQV (+ 42 (35) NIL) (+ 25 ((17 35)) NIL))) QUANTIFICATION) ((ALL X:PERSON KNAVE (X) EQV NOT TRUTH (STATE (X))) (ALL 33 (EQV (+ 43 (33) NIL) (NOT (+ 25 ((17 33)) NIL)))) QUANTIFICATION) ((*) COMMENT COMMENT) ((* EXACTLY ONE OF THEM IS A WEREWOLF:)
COMMENT COMMENT) ((WEREWOLF (A) AND NOT WEREWOLF (B) AND NOT WEREWOLF (C) OR NOT WEREWOLF (A) AND WEREWOLF (B) AND NOT WEREWOLF (C) OR NOT WEREWOLF (A) AND NOT WEREWOLF (B) AND WEREWOLF (C)) (OR (AND (+ 44 (38) NIL) (AND (NOT (+ 44 (39) NIL))
(NOT (+ 44 (41) NIL)))) (OR (AND (NOT (+ 44 (38) NIL)) (AND (+ 44 (39) NIL) (NOT (+ 44 (41) NIL)))) (AND (NOT (+ 44 (38) NIL)) (AND (NOT (+ 44 (39) NIL)) (+ 44 (41) NIL))))) QUANTIFICATION) ((*) COMMENT COMMENT) ((* EQUIVALENCES:) COMMENT COMMENT)
((ALL X,Y,Z:PERSON AT.LEAST.TWO.KNAVES (X Y Z) EQV (KNAVE (X) AND KNAVE (Y) OR KNAVE (X) AND KNAVE (Z) OR KNAVE (Y) AND KNAVE (Z))) (ALL 48 (ALL 47 (ALL 32 (EQV (+ 22 (32 47 48) NIL) (OR (AND (+ 43 (32) NIL) (+ 43 (47) NIL)) (OR (AND (+ 43 (32)
NIL) (+ 43 (48) NIL)) (AND (+ 43 (47) NIL) (+ 43 (48) NIL)))))))) QUANTIFICATION) ((*) COMMENT COMMENT) ((* IMPLICATIONS ABOUT STATEMENTS:) COMMENT COMMENT) ((ALL X:STATEMENT ALL Y:PERSON TRUTH (X) AND STATE.WEREWOLF (X Y) IMPL WEREWOLF (Y)) (ALL
49 (ALL 50 (IMPL (AND (+ 25 (49) NIL) (+ 24 (49 50) NIL)) (+ 44 (50) NIL)))) QUANTIFICATION) ((ALL X:STATEMENT ALL Y:PERSON NOT TRUTH (X) AND STATE.WEREWOLF (X Y) IMPL NOT WEREWOLF (Y)) (ALL 51 (ALL 52 (IMPL (AND (NOT (+ 25 (51) NIL)) (+ 24 (51
52) NIL)) (NOT (+ 44 (52) NIL))))) QUANTIFICATION) ((ALL X:STATEMENT ALL Y:PERSON TRUTH (X) AND NEG.STATE.WEREWOLF (X Y) IMPL NOT WEREWOLF (Y)) (ALL 53 (ALL 54 (IMPL (AND (+ 25 (53) NIL) (+ 23 (53 54) NIL)) (NOT (+ 44 (54) NIL))))) QUANTIFICATION)
((ALL X:STATEMENT ALL Y:PERSON NOT TRUTH (X) AND NEG.STATE.WEREWOLF (X Y) IMPL WEREWOLF (Y)) (ALL 55 (ALL 56 (IMPL (AND (NOT (+ 25 (55) NIL)) (+ 23 (55 56) NIL)) (+ 44 (56) NIL)))) QUANTIFICATION) ((ALL U:STATEMENT ALL V,W,X:PERSON 
STATE.AT.LEAST.TWO.KNAVES (U V W X) AND TRUTH (U) IMPL AT.LEAST.TWO.KNAVES (V W X)) (ALL 57 (ALL 60 (ALL 59 (ALL 58 (IMPL (AND (+ 16 (57 58 59 60) NIL) (+ 25 (57) NIL)) (+ 22 (58 59 60) NIL)))))) QUANTIFICATION) ((ALL U:STATEMENT ALL V,W,X:PERSON
STATE.AT.LEAST.TWO.KNAVES (U V W X) AND NOT TRUTH (U) IMPL NOT AT.LEAST.TWO.KNAVES (V W X)) (ALL 61 (ALL 64 (ALL 63 (ALL 62 (IMPL (AND (+ 16 (61 62 63 64) NIL) (NOT (+ 25 (61) NIL))) (NOT (+ 22 (62 63 64) NIL))))))) QUANTIFICATION) ((*) COMMENT
COMMENT) ((* ACTUAL STATEMENTS:) COMMENT COMMENT) ((STATE.WEREWOLF (STATE (A) C)) (+ 24 ((17 38) 41) NIL) QUANTIFICATION) ((NEG.STATE.WEREWOLF (STATE (B) B)) (+ 23 ((17 39) 39) NIL) QUANTIFICATION) ((STATE.AT.LEAST.TWO.KNAVES (STATE (C) A B C))
(+ 16 ((17 41) 38 39 41) NIL) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(MEM-RESTORE NIL NIL 65 10206 10500 (QUOTE (10211 10216 10221 10226 10231 10236 10241 10246 10251 10256 10261 10266 10271 10276 10281 10286 10291 10296 ATP.MEMORY.NIL ATP.MEMORY.NIL 10425 10440 10455 10460 ATP.MEMORY.NIL 10465 10470 ATP.MEMORY.NIL
10316 10311 ATP.MEMORY.NIL 10306 10301 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 10410 10395 10380 10365 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 10321 10335 10350 ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 10485 10500))(QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+
1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 A PERSON (ST*ATTRIBUTE NIL
DT*ST-KIND NIL) CONSTANT 5 B PERSON (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 5 C PERSON (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 15 KNIGHT NIL NIL (PERSON) NIL NIL ((- 42 (POSITIVE))) ((+ 42 (NEGATIVE))) ((+ 42 (NIL))) ((- 42 (NIL))) NIL NIL
(DT*ST-KIND NIL) PREDICATE 15 KNAVE NIL NIL (PERSON) NIL NIL ((- 43 (POSITIVE))) ((+ 43 (NEGATIVE))) ((+ 43 (NIL))) ((- 43 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 WEREWOLF NIL NIL (PERSON) NIL NIL ((- 44 (POSITIVE))) ((+ 44 (NEGATIVE)))
((+ 44 (NIL))) ((- 44 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 TRUTH NIL NIL (STATEMENT) NIL NIL ((- 25 (POSITIVE))) ((+ 25 (NEGATIVE))) ((+ 25 (NIL))) ((- 25 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 STATE.WEREWOLF NIL NIL (STATEMENT
PERSON) NIL NIL ((- 24 (POSITIVE))) ((+ 24 (NEGATIVE))) ((+ 24 (NIL))) ((- 24 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 NEG.STATE.WEREWOLF NIL NIL (STATEMENT PERSON) NIL NIL ((- 23 (POSITIVE))) ((+ 23 (NEGATIVE))) ((+ 23 (NIL))) ((- 23 (NIL)))
NIL NIL (DT*ST-KIND NIL) PREDICATE 15 AT.LEAST.TWO.KNAVES NIL NIL (PERSON PERSON PERSON) NIL NIL ((- 22 (POSITIVE))) ((+ 22 (NEGATIVE))) ((+ 22 (NIL))) ((- 22 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 STATE.AT.LEAST.TWO.KNAVES NIL NIL (STATEMENT
PERSON PERSON PERSON) NIL NIL ((- 16 (POSITIVE))) ((+ 16 (NEGATIVE))) ((+ 16 (NIL))) ((- 16 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14 STATE NIL STATEMENT (PERSON) NIL NIL NIL NIL NIL 1 STATEMENT (DT*ST-KIND NIL) FUNCTION 5 PERSON NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT
NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA NIL
DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE)))(PROGN (RPAQQ DT*SORT.ALL (STATEMENT PERSON ANY)) (RPAQQ DT*SORT.NR 8) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS
DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (41 39 38)) (RPAQQ DT*ABBREVIATIONS NIL)
(RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL (17)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES
MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (16 22 23 24 25 44 43 42 2 1)) (RPAQQ DT*PREDICATE.ALL (16 22 23 24 25 44 43 42 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ
DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2)
(RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE NIL)))
(PROGN (SETPROPLIST (QUOTE STATEMENT) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (STATEMENT ANY) DT*DIRECT.SUPERSORTS (ANY) DT*MINIMAL.SUBSORTS (STATEMENT) DT*MAX.SUBSORTS ((STATEMENT STATEMENT) (PERSON) (ANY STATEMENT)) DT*TRANSITIVE.CLOSURE (STATEMENT)
DT*DIRECT.SUBSORTS NIL DT*ATTRIBUTE NIL DT*SORT.NUMBER 7))) (SETPROPLIST (QUOTE PERSON) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (PERSON ANY) DT*DIRECT.SUPERSORTS (ANY) DT*MINIMAL.SUBSORTS (PERSON) DT*MAX.SUBSORTS ((STATEMENT) (PERSON PERSON) (ANY
PERSON)) DT*TRANSITIVE.CLOSURE (PERSON) DT*DIRECT.SUBSORTS NIL DT*ATTRIBUTE NIL DT*SORT.NUMBER 6))) (SETPROPLIST (QUOTE ANY) (QUOTE (DT*LEAST.SUPERSORTS ((ANY ANY)) DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS
(PERSON) DT*MAX.SUBSORTS ((STATEMENT STATEMENT) (PERSON PERSON) (ANY ANY)) DT*TRANSITIVE.CLOSURE (STATEMENT PERSON ANY) DT*DIRECT.SUBSORTS (STATEMENT PERSON) DT*ATTRIBUTE NIL DT*SORT.NUMBER 1))))
(PROGN (RPAQQ ST*STACK1 (NIL NIL NIL NIL NIL NIL ((X_64 PROGN (DT-VARIABLE.DELETE 64) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_64) ST*SYMBOL.ADDRESSES))) (X_63 PROGN (DT-VARIABLE.DELETE 63) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_63)
ST*SYMBOL.ADDRESSES))) (X_62 PROGN (DT-VARIABLE.DELETE 62) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_62) ST*SYMBOL.ADDRESSES))) (X_61 PROGN (DT-VARIABLE.DELETE 61) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_61) ST*SYMBOL.ADDRESSES)))) ((X_60
PROGN (DT-VARIABLE.DELETE 60) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_60) ST*SYMBOL.ADDRESSES))) (X_59 PROGN (DT-VARIABLE.DELETE 59) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_59) ST*SYMBOL.ADDRESSES))) (X_58 PROGN (DT-VARIABLE.DELETE 58)
(RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_58) ST*SYMBOL.ADDRESSES))) (X_57 PROGN (DT-VARIABLE.DELETE 57) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_57) ST*SYMBOL.ADDRESSES)))) ((X_56 PROGN (DT-VARIABLE.DELETE 56) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE X_56) ST*SYMBOL.ADDRESSES))) (X_55 PROGN (DT-VARIABLE.DELETE 55) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_55) ST*SYMBOL.ADDRESSES)))) ((X_54 PROGN (DT-VARIABLE.DELETE 54) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_54) 
ST*SYMBOL.ADDRESSES))) (X_53 PROGN (DT-VARIABLE.DELETE 53) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_53) ST*SYMBOL.ADDRESSES)))) ((X_52 PROGN (DT-VARIABLE.DELETE 52) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_52) ST*SYMBOL.ADDRESSES))) (X_51
PROGN (DT-VARIABLE.DELETE 51) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_51) ST*SYMBOL.ADDRESSES)))) ((X_50 PROGN (DT-VARIABLE.DELETE 50) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_50) ST*SYMBOL.ADDRESSES))) (X_49 PROGN (DT-VARIABLE.DELETE
49) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_49) ST*SYMBOL.ADDRESSES)))) NIL NIL ((X_48 PROGN (DT-VARIABLE.DELETE 48) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_48) ST*SYMBOL.ADDRESSES))) (X_47 PROGN (DT-VARIABLE.DELETE 47) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_47) ST*SYMBOL.ADDRESSES))) (X_32 PROGN (DT-VARIABLE.DELETE 32) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_32) ST*SYMBOL.ADDRESSES)))) NIL NIL NIL NIL NIL ((X_33 PROGN (DT-VARIABLE.DELETE 33) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_33) ST*SYMBOL.ADDRESSES)))) ((X_35 PROGN (DT-VARIABLE.DELETE 35) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_35) ST*SYMBOL.ADDRESSES)))) NIL NIL ((X_36 PROGN (DT-VARIABLE.DELETE 36) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE X_36) ST*SYMBOL.ADDRESSES)))) ((X_18 PROGN (DT-VARIABLE.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18) ST*SYMBOL.ADDRESSES)))) NIL NIL ((STATE PROGN (DT-FUNCTION.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
STATE) ST*SYMBOL.ADDRESSES)))) ((STATE.AT.LEAST.TWO.KNAVES PROGN (DT-PREDICATE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE STATE.AT.LEAST.TWO.KNAVES) ST*SYMBOL.ADDRESSES)))) ((AT.LEAST.TWO.KNAVES PROGN (DT-PREDICATE.DELETE 22) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE AT.LEAST.TWO.KNAVES) ST*SYMBOL.ADDRESSES)))) ((NEG.STATE.WEREWOLF PROGN (DT-PREDICATE.DELETE 23) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NEG.STATE.WEREWOLF) ST*SYMBOL.ADDRESSES)))) ((STATE.WEREWOLF PROGN
(DT-PREDICATE.DELETE 24) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE STATE.WEREWOLF) ST*SYMBOL.ADDRESSES)))) ((TRUTH PROGN (DT-PREDICATE.DELETE 25) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUTH) ST*SYMBOL.ADDRESSES))) (STATEMENT PROGN (
DT-SORT.ST.REMOVE (QUOTE STATEMENT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE STATEMENT) ST*SYMBOL.ADDRESSES))) (STATEMENT REMPROP (QUOTE STATEMENT) (QUOTE ST*DATA))) ((WEREWOLF PROGN (DT-PREDICATE.DELETE 44) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE WEREWOLF) ST*SYMBOL.ADDRESSES)))) ((KNAVE PROGN (DT-PREDICATE.DELETE 43) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNAVE) ST*SYMBOL.ADDRESSES)))) ((KNIGHT PROGN (DT-PREDICATE.DELETE 42) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNIGHT)
ST*SYMBOL.ADDRESSES)))) ((C PROGN (DT-CONSTANT.DELETE 41) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE C) ST*SYMBOL.ADDRESSES))) (B PROGN (DT-CONSTANT.DELETE 39) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B) ST*SYMBOL.ADDRESSES))) (A PROGN (
DT-CONSTANT.DELETE 38) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) ST*SYMBOL.ADDRESSES))) (PERSON PROGN (DT-SORT.ST.REMOVE (QUOTE PERSON)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PERSON) ST*SYMBOL.ADDRESSES))) (PERSON REMPROP (QUOTE PERSON)
(QUOTE ST*DATA))) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) 
ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES)))
(ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (PERSON . T) (A . 38) (B . 39) (C . 41) (KNIGHT . 42) (KNAVE . 43) (WEREWOLF . 44) (STATEMENT . T) (TRUTH . 25) (STATE.WEREWOLF . 24)
(NEG.STATE.WEREWOLF . 23) (AT.LEAST.TWO.KNAVES . 22) (STATE.AT.LEAST.TWO.KNAVES . 16) (STATE . 17) (X_18 . 18) (X_36 . 36) (X_35 . 35) (X_33 . 33) (X_32 . 32) (X_47 . 47) (X_48 . 48) (X_49 . 49) (X_50 . 50) (X_51 . 51) (X_52 . 52) (X_53 . 53)
(X_54 . 54) (X_55 . 55) (X_56 . 56) (X_57 . 57) (X_58 . 58) (X_59 . 59) (X_60 . 60) (X_61 . 61) (X_62 . 62) (X_63 . 63) (X_64 . 64))))))))STOP
 

(COND ((FMT-LOAD "22-APR-85 21:03:18" NIL (((* AXIOMS FOR PROBLEM 33 %.) COMMENT COMMENT) ((* THERE ARE TWO PERSONS
A AND B) COMMENT COMMENT) ((* A SAYS : I AM A KNAVE ,BUT B IS NOT.) COMMENT COMMENT) ((* WHAT ARE A AND B ?) COMMENT
COMMENT) ((*) COMMENT COMMENT) ((* BUT (X) MEANS : X SAYS : I AM A KNAVE ,BUT B IS NOT.) COMMENT COMMENT) ((*)
COMMENT COMMENT) ((ALL X KNIGHT (X) EQV NOT KNAVE (X)) (ALL 3 (EQV (+ 4 (3) NIL) (NOT (+ 5 (3) NIL)))) QUANTIFICATION)
((ALL X NOT (KNIGHT (X) AND BUT (X))) (ALL 6 (NOT (AND (+ 4 (6) NIL) (+ 7 (6) NIL)))) QUANTIFICATION) ((ALL X KNAVE
(X) AND BUT (X) IMPL NOT (KNAVE (X) AND KNIGHT (B))) (ALL 8 (IMPL (AND (+ 5 (8) NIL) (+ 7 (8) NIL)) (NOT (AND (+
5 (8) NIL) (+ 4 (9) NIL))))) QUANTIFICATION) ((BUT (A)) (+ 7 (10) NIL) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN
(DT-RESET)) (MEM-RESTORE NIL NIL 11 10400 10500 (QUOTE (10405 10410 10415 10430 10435 10450 10465 10470 10485 10500))
(QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL
NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL)))
((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 KNIGHT
NIL NIL (ANY) NIL NIL ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE))) ((+ 4 (NIL))) ((- 4 (NIL))) NIL NIL (DT*ST-KIND NIL)
PREDICATE 15 KNAVE NIL NIL (ANY) NIL NIL ((- 5 (POSITIVE))) ((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL))) NIL
NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 BUT NIL NIL (ANY) NIL NIL
((- 7 (POSITIVE))) ((+ 7 (NEGATIVE))) ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 B ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 5 A ANY (ST*ATTRIBUTE
NIL DT*ST-KIND NIL) CONSTANT))) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 2) (RPAQQ DT*SORT.PROPERTIES
(DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS 
DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG
NIL) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (10 9)) (RPAQQ DT*ABBREVIATIONS
NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL NIL) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE))
(RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS
(PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC 
ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE))
(RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES
NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (7 5 4 2 1)) (RPAQQ DT*PREDICATE.ALL (7 5 4 2 1)) (RPAQQ 
DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES
DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))
(RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ 
DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL
PREDICATE.ALL))) (PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED (2 1))))) (PROGN
(SETPROPLIST (QUOTE ANY) (QUOTE (DT*ATTRIBUTE NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL
DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*SORT.NUMBER 1 DT*DIRECT.SUBSORTS
NIL)))) (PROGN (RPAQQ ST*STACK1 (NIL ((A PROGN (DT-CONSTANT.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
A) ST*SYMBOL.ADDRESSES)))) ((B PROGN (DT-CONSTANT.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B) 
ST*SYMBOL.ADDRESSES))) (X_8 PROGN (DT-VARIABLE.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_8) 
ST*SYMBOL.ADDRESSES)))) ((BUT PROGN (DT-PREDICATE.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BUT) 
ST*SYMBOL.ADDRESSES))) (X_6 PROGN (DT-VARIABLE.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_6) 
ST*SYMBOL.ADDRESSES)))) ((KNAVE PROGN (DT-PREDICATE.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNAVE)
ST*SYMBOL.ADDRESSES))) (KNIGHT PROGN (DT-PREDICATE.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNIGHT)
ST*SYMBOL.ADDRESSES))) (X_3 PROGN (DT-VARIABLE.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_3) 
ST*SYMBOL.ADDRESSES)))) NIL NIL NIL NIL NIL NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL
(ANY . T) (TRUE . 1) (FALSE . 2) (X_3 . 3) (KNIGHT . 4) (KNAVE . 5) (X_6 . 6) (BUT . 7) (X_8 . 8) (B . 9) (A .
10))))))))STOP
 

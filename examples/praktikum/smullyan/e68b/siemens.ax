(COND ((FMT-LOAD "29-NOV-84 18:44:46"
NIL(((* 68B. SECOND TEST.) COMMENT COMMENT) ((* IF THE SUITOR PASSED THE FIRST TEST, HE WAS TAKEN INTO ANOTHER) COMMENT COMMENT) ((* ROOM IN WHICH THERE WERE THREE MORE CASKETS. AGAIN EACH CASKET) COMMENT COMMENT) ((* HAD TWO SENTENCES INSCRIBED
ON THE LID. PORTIA EXPLAINED THAT) COMMENT COMMENT) ((* ON ONE OF THE LIDS, BOTH STATEMENTS WERE TRUE; ON ANOTHER,) COMMENT COMMENT) ((* BOTH STATEMENTS WERE FALSE; AND ON THE THIRD, ONE STATEMENT) COMMENT COMMENT) ((* WAS TRUE AND ONE WAS FALSE.)
COMMENT COMMENT) ((*) COMMENT COMMENT) ((* GOLD: (1) THE PORTRAIT IS NOT IN THIS CASKET) COMMENT COMMENT) ((* (2) IT IS IN THE SILVER CASKET) COMMENT COMMENT) ((* SILVER: (1) THE PORTRAIT IS NOT IN THE GOLD CASKET) COMMENT COMMENT) ((* (2) IT
IS IN THE LEAD CASKET) COMMENT COMMENT) ((* LEAD: (1) THE PORTRAIT IS NOT IN THIS CASKET) COMMENT COMMENT) ((* (2) IT IS IN THE GOLD CASKET) COMMENT COMMENT) ((*) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* WE DEFINE THE FOLLOWING FUNCTIONS:) COMMENT
COMMENT) ((* FIRST (X) SECOND (X) , WHICH MAP AN ELEMENT OF THE SORT CASKET) COMMENT COMMENT) ((* TO AN ELEMENT OF THE SORT INSCRIPT.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* WE DEFINE THE FOLLOWING PREDICATES:) COMMENT
COMMENT) ((*) COMMENT COMMENT) ((* THE PREDICATES PORTRAIT, TRUTH, NEGATIVE.INSCRIPTION AND) COMMENT COMMENT) ((* INSCRIPTION MEAN THE SAME AS IN 66, 67 AND 68A.) COMMENT COMMENT) ((* BOTH.TRUE (X Y) - BOTH INSCRIPTIONS, X AND Y, ARE TRUE) COMMENT
COMMENT) ((* BOTH.FALSE (X Y) - BOTH INSCRIPTIONS, X AND Y, ARE FALSE) COMMENT COMMENT) ((* TRUE.FALSE (X Y) - ONE OF THE INSCRIPTIONS, X AND Y, IS TRUE) COMMENT COMMENT) ((* AND ONE OF THEM IS FALSE) COMMENT COMMENT) ((*) COMMENT COMMENT) ((*)
COMMENT COMMENT) ((* DECLARATIONS:) COMMENT COMMENT) ((*) COMMENT COMMENT) ((TYPE G,S,L : CASKET) (+ 1 NIL) TYPE) ((TYPE FIRST (CASKET) : INSCRIPT) (+ 1 NIL) TYPE) ((TYPE SECOND (CASKET) : INSCRIPT) (+ 1 NIL) TYPE) ((*) COMMENT COMMENT) ((*) COMMENT
COMMENT) ((* FORMULAS:) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* THE PORTRAIT IS IN EXACTLY ONE CASKET) COMMENT COMMENT) ((PORTRAIT (GOLD) OR PORTRAIT (SILVER) OR PORTRAIT (LEAD)) (OR (+ 8 (3) NIL) (OR (+ 8 (4) NIL) (+ 8 (5) NIL))) QUANTIFICATION)
((NOT (PORTRAIT (GOLD) AND PORTRAIT (SILVER) OR PORTRAIT (SILVER) AND PORTRAIT (LEAD) OR PORTRAIT (LEAD) AND PORTRAIT (GOLD))) (NOT (OR (AND (+ 8 (3) NIL) (+ 8 (4) NIL)) (OR (AND (+ 8 (4) NIL) (+ 8 (5) NIL)) (AND (+ 8 (5) NIL) (+ 8 (3) NIL)))))
QUANTIFICATION) ((*) COMMENT COMMENT) ((* IMPLICATIONS TO BE DRAWN FROM INSCRIPTIONS:) COMMENT COMMENT) ((ALL X:INSCRIPT ALL Y:CASKET INSCRIPTION (X Y) AND TRUTH (X) IMPL PORTRAIT (Y)) (ALL 9 (ALL 10 (IMPL (AND (+ 11 (9 10) NIL) (+ 12 (9) NIL))
(+ 8 (10) NIL)))) QUANTIFICATION) ((ALL X:INSCRIPT ALL Y:CASKET INSCRIPTION (X Y) AND NOT TRUTH (X) IMPL NOT PORTRAIT (Y)) (ALL 13 (ALL 14 (IMPL (AND (+ 11 (13 14) NIL) (NOT (+ 12 (13) NIL))) (NOT (+ 8 (14) NIL))))) QUANTIFICATION) ((ALL X:INSCRIPT
ALL Y:CASKET NEGATIVE.INSCRIPTION (X Y) AND TRUTH (X) IMPL NOT PORTRAIT (Y)) (ALL 15 (ALL 16 (IMPL (AND (+ 17 (15 16) NIL) (+ 12 (15) NIL)) (NOT (+ 8 (16) NIL))))) QUANTIFICATION) ((ALL X:INSCRIPT ALL Y:CASKET NEGATIVE.INSCRIPTION (X Y) AND NOT
TRUTH (X) IMPL PORTRAIT (Y)) (ALL 18 (ALL 19 (IMPL (AND (+ 17 (18 19) NIL) (NOT (+ 12 (18) NIL))) (+ 8 (19) NIL)))) QUANTIFICATION) ((*) COMMENT COMMENT) ((* INFORMATION ABOUT TRUTH OF INSCRIPTIONS:) COMMENT COMMENT) ((BOTH.TRUE (FIRST (GOLD)
SECOND (GOLD)) OR BOTH.TRUE (FIRST (SILVER) SECOND (SILVER)) OR BOTH.TRUE (FIRST (LEAD) SECOND (LEAD))) (OR (+ 20 ((6 3) (7 3)) NIL) (OR (+ 20 ((6 4) (7 4)) NIL) (+ 20 ((6 5) (7 5)) NIL))) QUANTIFICATION) ((BOTH.FALSE (FIRST (GOLD) SECOND (GOLD))
OR BOTH.FALSE (FIRST (SILVER) SECOND (SILVER)) OR BOTH.FALSE (FIRST (LEAD) SECOND (LEAD))) (OR (+ 21 ((6 3) (7 3)) NIL) (OR (+ 21 ((6 4) (7 4)) NIL) (+ 21 ((6 5) (7 5)) NIL))) QUANTIFICATION) ((TRUE.FALSE (FIRST (GOLD) SECOND (GOLD)) OR TRUE.FALSE
(FIRST (SILVER) SECOND (SILVER)) OR TRUE.FALSE (FIRST (LEAD) SECOND (LEAD))) (OR (+ 22 ((6 3) (7 3)) NIL) (OR (+ 22 ((6 4) (7 4)) NIL) (+ 22 ((6 5) (7 5)) NIL))) QUANTIFICATION) ((ALL X,Y:INSCRIPT BOTH.TRUE (X Y) EQV TRUTH (X) AND TRUTH (Y)) (ALL
24 (ALL 23 (EQV (+ 20 (23 24) (KIND (EQV T 560))) (AND (+ 12 (23) (KIND (EQV NIL 560))) (+ 12 (24) (KIND (EQV NIL 560))))))) QUANTIFICATION) ((ALL X,Y:INSCRIPT BOTH.FALSE (X Y) EQV NOT TRUTH (X) AND NOT TRUTH (Y)) (ALL 26 (ALL 25 (EQV (+ 21 (25
26) (KIND (EQV T 570))) (AND (NOT (+ 12 (25) (KIND (EQV NIL 570)))) (NOT (+ 12 (26) (KIND (EQV NIL 570)))))))) QUANTIFICATION) ((ALL X,Y:INSCRIPT TRUE.FALSE (X Y) EQV NOT BOTH.TRUE (X Y) AND NOT BOTH.FALSE (X Y)) (ALL 28 (ALL 27 (EQV (+ 22 (27
28) (KIND (EQV T 580))) (AND (NOT (+ 20 (27 28) (KIND (EQV NIL 580)))) (NOT (+ 21 (27 28) (KIND (EQV NIL 580)))))))) QUANTIFICATION) ((*) COMMENT COMMENT) ((* ACTUAL INSCRIPTIONS:) COMMENT COMMENT) ((NEGATIVE.INSCRIPTION (FIRST (GOLD) GOLD)) (+
17 ((6 3) 3) NIL) QUANTIFICATION) ((INSCRIPTION (SECOND (GOLD) SILVER)) (+ 11 ((7 3) 4) NIL) QUANTIFICATION) ((NEGATIVE.INSCRIPTION (FIRST (SILVER) GOLD)) (+ 17 ((6 4) 3) NIL) QUANTIFICATION) ((INSCRIPTION (SECOND (SILVER) LEAD)) (+ 11 ((7 4)
5) NIL) QUANTIFICATION) ((NEGATIVE.INSCRIPTION (FIRST (LEAD) LEAD)) (+ 17 ((6 5) 5) NIL) QUANTIFICATION) ((INSCRIPTION (SECOND (LEAD) GOLD)) (+ 11 ((7 5) 3) NIL) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(PROG ((ADDRLIST (QUOTE (10257 10262 10267 10272 10277 10282 10297 10312 10327 10332 10337 10352 10357 10362 10367 10372 10387 10402 10407 10412 10427 10441 10455 10460 10465 10470 10485 10500))) (DATALIST (QUOTE (15 "TRUE" NIL NIL NIL (DEFINED)
NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
5 GOLD CASKET (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 5 SILVER CASKET (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 5 LEAD CASKET (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 14 FIRST NIL INSCRIPT (CASKET) NIL NIL NIL NIL NIL 1 INSCRIPT (DT*ST-KIND
NIL) FUNCTION 14 SECOND NIL INSCRIPT (CASKET) NIL NIL NIL NIL NIL 1 INSCRIPT (DT*ST-KIND NIL) FUNCTION 15 PORTRAIT NIL NIL (ANY) NIL NIL ((- 8 (POSITIVE))) ((+ 8 (NEGATIVE))) ((+ 8 (NIL))) ((- 8 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 INSCRIPT
NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CASKET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 INSCRIPTION NIL NIL (ANY ANY) NIL NIL ((- 11 (POSITIVE))) ((+ 11 (NEGATIVE))) ((+ 11 (NIL))) ((- 11 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
15 TRUTH NIL NIL (ANY) NIL NIL ((- 12 (POSITIVE))) ((+ 12 (NEGATIVE))) ((+ 12 (NIL))) ((- 12 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 INSCRIPT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CASKET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 INSCRIPT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CASKET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 NEGATIVE.INSCRIPTION NIL NIL (ANY ANY) NIL NIL ((- 17 (POSITIVE))) ((+ 17 (NEGATIVE))) ((+ 17 (NIL))) ((- 17 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 5 INSCRIPT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CASKET NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 BOTH.TRUE NIL NIL (ANY ANY) NIL NIL ((- 20 (POSITIVE))) ((+ 20 (NEGATIVE))) ((+ 20 (NIL))) ((- 20 (NIL))) NIL NIL
(DT*ST-KIND NIL) PREDICATE 15 BOTH.FALSE NIL NIL (ANY ANY) NIL NIL ((- 21 (POSITIVE))) ((+ 21 (NEGATIVE))) ((+ 21 (NIL))) ((- 21 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 TRUE.FALSE NIL NIL (ANY ANY) NIL NIL ((- 22 (POSITIVE))) ((+ 22 (NEGATIVE)))
((+ 22 (NIL))) ((- 22 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 INSCRIPT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 INSCRIPT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 INSCRIPT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 INSCRIPT
NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 INSCRIPT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 INSCRIPT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 10500)) COUNTER1) (MEM-RESET) (COND ((IGREATERP
MEM*SIZE 10500) (SETQ COUNTER1 29) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT)))))))
(SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 10500) (MEM-INITIALIZE 10500))) (SETQ COUNTER1 29) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR)
(SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 10500) (RPAQ MEM*NEXT.RADR
(IPLUS 10252 INCREMENT))) (T (RPAQ MEM*NEXT.RADR 10252))) (RPAQ MEM*NEXT.VADR 29) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL))
(PROGN (RPAQQ DT*SORT.ALL (INSCRIPT CASKET ANY)) (RPAQQ DT*SORT.NR 4) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS
DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (5 4 3)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL
(7 6)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS
SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ
DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (22 21 20 17 12 11 8 2 1)) (RPAQQ DT*PREDICATE.ALL (22 21 20 17 12 11 8 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES 
NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ 
DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE (DEFINED (2 1)))))
(PROGN (SETPROPLIST (QUOTE INSCRIPT) (QUOTE (DT*ATTRIBUTE NIL DT*INVERSE.TRANSITIVE.CLOSURE (INSCRIPT ANY) DT*DIRECT.SUPERSORTS (ANY) DT*MINIMAL.SUBSORTS (INSCRIPT) DT*MAX.SUBSORTS ((INSCRIPT INSCRIPT) (CASKET) (ANY INSCRIPT)) DT*TRANSITIVE.CLOSURE
(INSCRIPT) DT*SORT.NUMBER 3 DT*DIRECT.SUBSORTS NIL))) (SETPROPLIST (QUOTE CASKET) (QUOTE (DT*ATTRIBUTE NIL DT*INVERSE.TRANSITIVE.CLOSURE (CASKET ANY) DT*DIRECT.SUPERSORTS (ANY) DT*MINIMAL.SUBSORTS (CASKET) DT*MAX.SUBSORTS ((INSCRIPT) (CASKET CASKET)
(ANY CASKET)) DT*TRANSITIVE.CLOSURE (CASKET) DT*SORT.NUMBER 2 DT*DIRECT.SUBSORTS NIL))) (SETPROPLIST (QUOTE ANY) (QUOTE (DT*ATTRIBUTE NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (CASKET) DT*MAX.SUBSORTS
((INSCRIPT INSCRIPT) (CASKET CASKET) (ANY ANY)) DT*TRANSITIVE.CLOSURE (INSCRIPT CASKET ANY) DT*SORT.NUMBER 1 DT*DIRECT.SUBSORTS (INSCRIPT CASKET)))))
(PROGN (RPAQQ ST*STACK1 (NIL NIL NIL NIL NIL NIL NIL NIL NIL ((X_28 PROGN (DT-VARIABLE.DELETE 28) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_28) ST*SYMBOL.ADDRESSES))) (X_27 PROGN (DT-VARIABLE.DELETE 27) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
X_27) ST*SYMBOL.ADDRESSES)))) ((X_26 PROGN (DT-VARIABLE.DELETE 26) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_26) ST*SYMBOL.ADDRESSES))) (X_25 PROGN (DT-VARIABLE.DELETE 25) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_25) ST*SYMBOL.ADDRESSES))))
((X_24 PROGN (DT-VARIABLE.DELETE 24) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_24) ST*SYMBOL.ADDRESSES))) (X_23 PROGN (DT-VARIABLE.DELETE 23) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_23) ST*SYMBOL.ADDRESSES)))) ((TRUE.FALSE PROGN (
DT-PREDICATE.DELETE 22) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE.FALSE) ST*SYMBOL.ADDRESSES)))) ((BOTH.FALSE PROGN (DT-PREDICATE.DELETE 21) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BOTH.FALSE) ST*SYMBOL.ADDRESSES)))) ((BOTH.TRUE PROGN
(DT-PREDICATE.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE BOTH.TRUE) ST*SYMBOL.ADDRESSES)))) NIL NIL ((X_19 PROGN (DT-VARIABLE.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_19) ST*SYMBOL.ADDRESSES))) (X_18 PROGN (DT-VARIABLE.DELETE
18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_18) ST*SYMBOL.ADDRESSES)))) ((NEGATIVE.INSCRIPTION PROGN (DT-PREDICATE.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NEGATIVE.INSCRIPTION) ST*SYMBOL.ADDRESSES))) (X_16 PROGN (DT-VARIABLE.DELETE
16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES))) (X_15 PROGN (DT-VARIABLE.DELETE 15) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_15) ST*SYMBOL.ADDRESSES)))) ((X_14 PROGN (DT-VARIABLE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES))) (X_13 PROGN (DT-VARIABLE.DELETE 13) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_13) ST*SYMBOL.ADDRESSES)))) ((TRUTH PROGN (DT-PREDICATE.DELETE 12) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUTH)
ST*SYMBOL.ADDRESSES))) (INSCRIPTION PROGN (DT-PREDICATE.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE INSCRIPTION) ST*SYMBOL.ADDRESSES))) (X_10 PROGN (DT-VARIABLE.DELETE 10) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_10) ST*SYMBOL.ADDRESSES)))
(X_9 PROGN (DT-VARIABLE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_9) ST*SYMBOL.ADDRESSES)))) NIL NIL NIL ((PORTRAIT PROGN (DT-PREDICATE.DELETE 8) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PORTRAIT) ST*SYMBOL.ADDRESSES)))) NIL NIL
NIL NIL NIL ((SECOND PROGN (DT-FUNCTION.DELETE 7) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SECOND) ST*SYMBOL.ADDRESSES)))) ((FIRST PROGN (DT-FUNCTION.DELETE 6) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FIRST) ST*SYMBOL.ADDRESSES))) (INSCRIPT
PROGN (DT-SORT.ST.REMOVE (QUOTE INSCRIPT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE INSCRIPT) ST*SYMBOL.ADDRESSES))) (INSCRIPT REMPROP (QUOTE INSCRIPT) (QUOTE ST*DATA))) ((LEAD PROGN (DT-CONSTANT.DELETE 5) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE LEAD) ST*SYMBOL.ADDRESSES))) (SILVER PROGN (DT-CONSTANT.DELETE 4) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SILVER) ST*SYMBOL.ADDRESSES))) (GOLD PROGN (DT-CONSTANT.DELETE 3) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE GOLD) ST*SYMBOL.ADDRESSES)))
(CASKET PROGN (DT-SORT.ST.REMOVE (QUOTE CASKET)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CASKET) ST*SYMBOL.ADDRESSES))) (CASKET REMPROP (QUOTE CASKET) (QUOTE ST*DATA))) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE
. 1) (FALSE . 2) (CASKET . T) (GOLD . 3) (SILVER . 4) (LEAD . 5) (INSCRIPT . T) (FIRST . 6) (SECOND . 7) (PORTRAIT . 8) (X_9 . 9) (X_10 . 10) (INSCRIPTION . 11) (TRUTH . 12) (X_13 . 13) (X_14 . 14) (X_15 . 15) (X_16 . 16) (NEGATIVE.INSCRIPTION
. 17) (X_18 . 18) (X_19 . 19) (BOTH.TRUE . 20) (BOTH.FALSE . 21) (TRUE.FALSE . 22) (X_23 . 23) (X_24 . 24) (X_25 . 25) (X_26 . 26) (X_27 . 27
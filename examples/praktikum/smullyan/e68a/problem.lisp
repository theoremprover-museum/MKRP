;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((* PORTIA AND HER HUSBAND DID,AS A MATTER OF FACT, LIVE HAPPILY) (* EVER AFTER. THEY HAD A DAUGHTER PORTIA II - HENCEFORTH TO BE) (* CALLED PORTIA. WHEN THE YOUNG PORTIA GREW TO YOUNG WOMANHOOD) (* SHE WAS BOTH CLEVER AND BEAUTIFUL, JUST LIKE HER MOMMY. SHE) (* ALSO DECIDED TO SELECT HER HUSBAND BY THE CASKET METHOD. THE) (* SUITOR HAD TO PASS TWO TESTS IN ORDER TO WIN HER.) (*) (* 68A. THE FIRST TEST.) (*) (* IN THIS TEST EACH LID CONTAINED TWO STATEMENTS, AND PORTIA EX-) (* PLAINED THAT NO LID CONTAINED MORE THAN ONE FALSE STATEMENT.) (*) (* GOLD : (1) THE PORTRAIT IS NOT IN HERE.) (* (2) THE ARTIST OF THE PORTRAIT IS FROM VENICE) (* SILVER : (1) THE PORTRAIT IS NOT IN THE GOLD CASKET) (* (2) THE ARTIST OF THE PORTRAIT IS REALLY FROM FLORENCE) (* LEAD : (1) THE PORTRAIT IS NOT IN HERE) (* (2) THE PORTRAIT IS REALLY IN THE SILVER CASKET) (*) (* WHICH CASKET CONTAINS THE PORTRAIT?) (*) (* WE DEFINE THE FOLLOWING PREDICATES :) (* THE PREDICATES PORTRAIT,TRUTH,INSRIPTION,NEGATIVE.INSCRIPTION) (* MEAN THE SAME AS IN 66 AND 67) (TYPE PORTRAIT (CASKET)) (TYPE TRUTH (INSCRIPT)) (TYPE INSCRIPTION (INSCRIPT CASKET)) (TYPE NEGATIVE.INSCRIPTION (INSCRIPT CASKET)) (* V---THE ARTIST OF THE PORTRAIT IS FROM VENICE) (* F---THE ARTIST OF THE PORTRAIT IS FROM FLORENCE) (* INSCRIPTION.VENICE (X) --- THE INSCRIPTION X TELLS THAT THE ARTIST OF THE PORTRAIT) (* IS FROM VENICE.) (* INSCRIPTION.FLORENCE (X) --- THE INSCRIPTION X TELLS THAT THE ARTIST OF THE PORTRAIT) (* IS FROM FLORENCE) (TYPE INSCRIPTION.VENICE (INSCRIPT)) (TYPE INSCRIPTION.FLORENCE (INSCRIPT)) (*) (* WE DEFINE THE FOLLOWING FUNCTIONS :) (* FIRST (X) ---ASSIGNS EACH CASKET AN INSCRIPTION) (* SECOND (X) ---ASSIGNS EACH CASKET AN INSCRIPTION) (TYPE GOLD,SILVER,LEAD : CASKET) (TYPE FIRST (CASKET) : INSCRIPT) (TYPE SECOND (CASKET) : INSCRIPT) (*) (* THEN THE FOLLOWING PROPOSITIONS HOLD.) (*) (* THERE IS EXACTLY ONE PORTRAIT :) (PORTRAIT (GOLD) OR PORTRAIT (SILVER) OR PORTRAIT (LEAD)) (NOT (PORTRAIT (GOLD) AND PORTRAIT (SILVER) OR PORTRAIT (GOLD) AND PORTRAIT (LEAD) OR PORTRAIT (SILVER) AND PORTRAIT (LEAD))) (*) (* NO MORE THAN ONE INSCRIPTION IS FALSE ON ANY CASKET :) (ALL X : CASKET TRUTH (FIRST (X)) OR TRUTH (SECOND (X))) (*) (* THE ARTIST OF THE PORTRAIT IS EITHER FROM VENICE OR FROM FLORENCE) (NOT (VENICE AND FLORENCE)) (*) (* IMPLICATIONS TO BE DRAWN FROM INSCRIPTION :) (ALL X : INSCRIPT ALL Y : CASKET INSCRIPTION (X Y) AND TRUTH (X) IMPL PORTRAIT (Y)) (ALL X : INSCRIPT ALL Y : CASKET INSCRIPTION (X Y) AND NOT TRUTH (X) IMPL NOT PORTRAIT (Y)) (ALL X : INSCRIPT ALL Y : CASKET NEGATIVE.INSCRIPTION (X Y) AND TRUTH (X) IMPL NOT PORTRAIT (Y)) (ALL X : INSCRIPT ALL Y : CASKET NEGATIVE.INSCRIPTION (X Y) AND NOT TRUTH (X) IMPL PORTRAIT (Y)) (ALL X : INSCRIPT INSCRIPTION.VENICE (X) AND TRUTH (X) IMPL VENICE) (ALL X : INSCRIPT INSCRIPTION.VENICE (X) AND NOT TRUTH (X) IMPL NOT VENICE) (ALL X : INSCRIPT INSCRIPTION.FLORENCE (X) AND TRUTH (X) IMPL FLORENCE) (ALL X : INSCRIPT INSCRIPTION.FLORENCE (X) AND NOT TRUTH (X) IMPL NOT FLORENCE) (NEGATIVE.INSCRIPTION (FIRST (GOLD) GOLD) AND INSCRIPTION.VENICE (SECOND (GOLD))) (NEGATIVE.INSCRIPTION (FIRST (SILVER) GOLD) AND INSCRIPTION.FLORENCE (SECOND (SILVER))) (NEGATIVE.INSCRIPTION (FIRST (LEAD) LEAD) AND INSCRIPTION (SECOND (LEAD) SILVER)))) (QUOTE (COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT (+ 0 NIL NIL) (+ 0 NIL NIL) (+ 0 NIL NIL) (+ 0 NIL NIL) COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT (+ 0 NIL NIL) (+ 0 NIL NIL) COMMENT COMMENT COMMENT COMMENT (+ 0 NIL NIL) (+ 0 NIL NIL) (+ 0 NIL NIL) COMMENT COMMENT COMMENT COMMENT (OR (+ 3 (9) NIL) (OR (+ 3 (10) NIL) (+ 3 (11) NIL))) (NOT (OR (AND (+ 3 (9) NIL) (+ 3 (10) NIL)) (OR (AND (+ 3 (9) NIL) (+ 3 (11) NIL)) (AND (+ 3 (10) NIL) (+ 3 (11) NIL))))) COMMENT COMMENT (ALL 14 (OR (+ 4 ((12 14)) NIL) (+ 4 ((13 14)) NIL))) COMMENT COMMENT (NOT (AND (+ 15 NIL NIL) (+ 16 NIL NIL))) COMMENT COMMENT (ALL 17 (ALL 18 (IMPL (AND (+ 5 (17 18) NIL) (+ 4 (17) NIL)) (+ 3 (18) NIL)))) (ALL 19 (ALL 20 (IMPL (AND (+ 5 (19 20) NIL) (NOT (+ 4 (19) NIL))) (NOT (+ 3 (20) NIL))))) (ALL 21 (ALL 22 (IMPL (AND (+ 6 (21 22) NIL) (+ 4 (21) NIL)) (NOT (+ 3 (22) NIL))))) (ALL 23 (ALL 24 (IMPL (AND (+ 6 (23 24) NIL) (NOT (+ 4 (23) NIL))) (+ 3 (24) NIL)))) (ALL 25 (IMPL (AND (+ 7 (25) NIL) (+ 4 (25) NIL)) (+ 15 NIL NIL))) (ALL 26 (IMPL (AND (+ 7 (26) NIL) (NOT (+ 4 (26) NIL))) (NOT (+ 15 NIL NIL)))) (ALL 27 (IMPL (AND (+ 8 (27) NIL) (+ 4 (27) NIL)) (+ 16 NIL NIL))) (ALL 28 (IMPL (AND (+ 8 (28) NIL) (NOT (+ 4 (28) NIL))) (NOT (+ 16 NIL NIL)))) (AND (+ 6 ((12 9) 9) NIL) (+ 7 ((13 9)) NIL)) (AND (+ 6 ((12 10) 9) NIL) (+ 8 ((13 10)) NIL)) (AND (+ 6 ((12 11) 11) NIL) (+ 5 ((13 11) 10) NIL)))) (QUOTE ((* THEOREMS FOR THE THIRD PORTIA PROBLEM (SM.E68A)) (*) (PORTRAIT (SILVER)))) (QUOTE (COMMENT COMMENT (+ 3 (10) NIL))) (QUOTE ("Edit:     Axioms and Theorems edited: 16-JUL,1991 10:50 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(9731 9736 9741 9746 9751 9756 9761 9766 9771 9776 9781 9786 9801 9816 9821 9835 9849
          9854 9859 9864 9879 9894 9909 9924 9939 9954 9969 9984 9999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "=" NIL NIL (ANY ANY)
          (DEFINED SYMMETRIC REFLEXIVE SYMMETRIC REFLEXIVE) NIL ((- 2 (POSITIVE . SYMMETRIC)))
          ((+ 2 (NEGATIVE . SYMMETRIC))) ((+ 2 (NIL . SYMMETRIC))) ((- 2 (NIL . SYMMETRIC)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "PORTRAIT" NIL NIL (CASKET) NIL NIL
          ((- 3 (POSITIVE))) ((+ 3 (NEGATIVE))) ((+ 3 (NIL))) ((- 3 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "TRUTH" NIL NIL (INSCRIPT) NIL NIL ((- 4 (POSITIVE)))
          ((+ 4 (NEGATIVE))) ((+ 4 (NIL))) ((- 4 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
          "INSCRIPTION" NIL NIL (INSCRIPT CASKET) NIL NIL ((- 5 (POSITIVE))) ((+ 5 (NEGATIVE)))
          ((+ 5 (NIL))) ((- 5 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
          "NEGATIVE.INSCRIPTION" NIL NIL (INSCRIPT CASKET) NIL NIL ((- 6 (POSITIVE)))
          ((+ 6 (NEGATIVE))) ((+ 6 (NIL))) ((- 6 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
          "INSCRIPTION.VENICE" NIL NIL (INSCRIPT) NIL NIL ((- 7 (POSITIVE))) ((+ 7 (NEGATIVE)))
          ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
          "INSCRIPTION.FLORENCE" NIL NIL (INSCRIPT) NIL NIL ((- 8 (POSITIVE)))
          ((+ 8 (NEGATIVE))) ((+ 8 (NIL))) ((- 8 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5
          CASKET "GOLD" (DT*ST-KIND NIL) CONSTANT 5 CASKET "SILVER" (DT*ST-KIND NIL) CONSTANT
          5 CASKET "LEAD" (DT*ST-KIND NIL) CONSTANT 14 "FIRST" NIL INSCRIPT (CASKET) NIL NIL
          NIL NIL NIL 1 INSCRIPT (DT*ST-KIND NIL) FUNCTION 14 "SECOND" NIL INSCRIPT (CASKET)
          NIL NIL NIL NIL NIL 1 INSCRIPT (DT*ST-KIND NIL) FUNCTION 5 CASKET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "VENICE" NIL NIL NIL NIL NIL
          ((- 15 (POSITIVE))) ((+ 15 (NEGATIVE))) ((+ 15 (NIL))) ((- 15 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "FLORENCE" NIL NIL NIL NIL NIL ((- 16 (POSITIVE)))
          ((+ 16 (NEGATIVE))) ((+ 16 (NIL))) ((- 16 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          5 INSCRIPT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CASKET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 INSCRIPT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CASKET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 INSCRIPT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CASKET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 INSCRIPT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 CASKET NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 INSCRIPT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 INSCRIPT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 INSCRIPT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 INSCRIPT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 10000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 10000)
             (SETQ COUNTER1 29)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 10000)
                 (MEM-INITIALIZE 10000))
               (SETQ COUNTER1 29)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9726 INCREMENT) 9726))
      (SETQ MEM*NEXT.VADR 29
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (INSCRIPT CASKET ANY))) (SETQ DT*SORT.NR (QUOTE 4)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*ELEMENT.PREDICATE (QUOTE NIL)) (SETQ DT*OMEGA.CONSTANT (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (11 10 9))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE (13 12))) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE (2))) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (16 15 8 7 6 5 4 3 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (16 15 8 7 6 5 4 3 2 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE INSCRIPT) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE INSCRIPT) (QUOTE DT*SORT.NUMBER)) (QUOTE 3)) (SETF (GET (QUOTE INSCRIPT) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (INSCRIPT))) (SETF (GET (QUOTE INSCRIPT) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((INSCRIPT INSCRIPT) (CASKET) (ANY INSCRIPT)))) (SETF (GET (QUOTE INSCRIPT) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (INSCRIPT))) (SETF (GET (QUOTE INSCRIPT) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE INSCRIPT) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY INSCRIPT)))) (PROGN (SETF (GET (QUOTE CASKET) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE CASKET) (QUOTE DT*SORT.NUMBER)) (QUOTE 2)) (SETF (GET (QUOTE CASKET) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (CASKET))) (SETF (GET (QUOTE CASKET) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((INSCRIPT) (CASKET CASKET) (ANY CASKET)))) (SETF (GET (QUOTE CASKET) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (CASKET))) (SETF (GET (QUOTE CASKET) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE CASKET) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY CASKET)))) (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (INSCRIPT CASKET))) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY INSCRIPT CASKET))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((INSCRIPT INSCRIPT) (CASKET CASKET) (ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (CASKET))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
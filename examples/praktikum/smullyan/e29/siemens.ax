(COND ((FMT-LOAD "22-NOV-84 18:18:40" NIL (((* AXIOMS FOR PROBLEM 29 %.) COMMENT COMMENT) ((*) COMMENT COMMENT)
((* THERE ARE TWO PERSONS, A AND B) COMMENT COMMENT) ((* A SAYS: EITHER I AM A KNAVE OR B IS A KNIGHT) COMMENT
COMMENT) ((*) COMMENT COMMENT) ((* WHAT ARE A AND B) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* EITHER (X) MEANS
X SAYS, EITHER I AM A KNAVE OR B IS A KNIGHT) COMMENT COMMENT) ((*) COMMENT COMMENT) ((ALL X KNIGHT (X) EQV NOT
KNAVE (X)) (ALL 14 (EQV (+ 11 (14) (KIND (EQV T 110))) (NOT (+ 9 (14) (KIND (EQV NIL 110)))))) QUANTIFICATION)
((ALL X KNIGHT (X) AND EITHER (X) IMPL KNAVE (X) OR KNIGHT (B)) (ALL 16 (IMPL (AND (+ 11 (16) NIL) (+ 17 (16) NIL))
(OR (+ 9 (16) NIL) (+ 11 (18) NIL)))) QUANTIFICATION) ((ALL X KNAVE (X) AND EITHER (X) IMPL NOT (KNAVE (X) OR KNIGHT
(B))) (ALL 19 (IMPL (AND (+ 9 (19) NIL) (+ 17 (19) NIL)) (NOT (OR (+ 9 (19) NIL) (+ 11 (18) NIL))))) QUANTIFICATION)
((EITHER (A)) (+ 17 (20) NIL) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (DT-RESET)) (PROG ((ADDRLIST (QUOTE
(19905 19910 19915 19930 19935 ATP.MEMORY.NIL 19970 ATP.MEMORY.NIL ATP.MEMORY.NIL 19965 ATP.MEMORY.NIL 19950 
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 19985 20000))) (DATALIST
(QUOTE (15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL
NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2
(NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15
"KNIGHT" NIL NIL (ANY) NIL NIL ((- 11 (POSITIVE))) ((+ 11 (NEGATIVE))) ((+ 11 (NIL))) ((- 11 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 15 "KNAVE" NIL NIL (ANY) NIL NIL ((- 9 (POSITIVE))) ((+ 9 (NEGATIVE))) ((+ 9 (NIL))) ((- 9 (NIL)))
NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "EITHER" NIL NIL (ANY)
NIL NIL ((- 17 (POSITIVE))) ((+ 17 (NEGATIVE))) ((+ 17 (NIL))) ((- 17 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
5 "B" ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 "A"
ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT))) (INCREMENT (IDIFFERENCE MEM*SIZE 20000)) COUNTER1) (MEM-RESET)
(COND ((IGREATERP MEM*SIZE 20000) (SETQ COUNTER1 21) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY
(SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR))
RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA)
(SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 20000) (MEM-INITIALIZE 20000)))
(SETQ COUNTER1 21) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR))))
(SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
DATA)))))) (COND ((IGREATERP MEM*SIZE 20000) (RPAQ MEM*NEXT.RADR (IPLUS 19900 INCREMENT))) (T (RPAQ MEM*NEXT.RADR
19900))) (RPAQ MEM*NEXT.VADR 21) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ 
MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR
2) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE
DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ 
DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL
(20 18)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL NIL) (RPAQQ 
DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ 
DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT 
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES
(17 9 11 2 1)) (RPAQQ DT*PREDICATE.ALL (17 9 11 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ 
DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES
-ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE
2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++))
(RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL))) (PROGN) (PROGN (SETPROPLIST (QUOTE 
DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE NIL))) (PROGN (SETPROPLIST (QUOTE ANY) (QUOTE (DT*ATTRIBUTE NIL 
DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) DT*MAX.SUBSORTS ((ANY ANY))
DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL DT*SORT.NUMBER 1)))) (PROGN (RPAQQ ST*STACK1 (NIL ((A PROGN
(DT-CONSTANT.DELETE 20) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) ST*SYMBOL.ADDRESSES)))) ((X_19 PROGN (
DT-VARIABLE.DELETE 19) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_19) ST*SYMBOL.ADDRESSES)))) ((B PROGN (
DT-CONSTANT.DELETE 18) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B) ST*SYMBOL.ADDRESSES))) (EITHER PROGN (
DT-PREDICATE.DELETE 17) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EITHER) ST*SYMBOL.ADDRESSES))) (X_16 PROGN (
DT-VARIABLE.DELETE 16) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_16) ST*SYMBOL.ADDRESSES)))) ((KNAVE PROGN (
DT-PREDICATE.DELETE 9) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNAVE) ST*SYMBOL.ADDRESSES))) (KNIGHT PROGN (
DT-PREDICATE.DELETE 11) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNIGHT) ST*SYMBOL.ADDRESSES))) (X_14 PROGN (
DT-VARIABLE.DELETE 14) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_14) ST*SYMBOL.ADDRESSES)))) NIL NIL NIL NIL
NIL NIL NIL NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) 
ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) 
ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY)
ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE
. 1) (FALSE . 2) (X_14 . 14) (KNIGHT . 11) (KNAVE . 9) (X_16 . 16) (EITHER . 17) (B . 18) (X_19 . 19) (A . 20))))))))
STOP
 

;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((* AXIOMS FOR PROBLEM 41 :) (* THERE ARE TWO PEOPLE A AND B.) (* EACH OF WHOM IS EITHER A KNIGHT,OR A KNAVE,OR A NORMAL.) (* A SAYS : B IS A KNIGHT.) (* B SAYS : A IS A KNAVE %.) (* PROVE : EITHER ONE OF THEM IS TELLING THE TRUTH BUT IS NOT A KNIGHT OR ONE OF THEM IS LYING BUT IS NOT A KNAVE.) (*) (* KNIGHT2 (X Y) MEANS X SAYS Y IS A KNIGHT.) (* KNAVE2 (X Y) MEANS X SAYS Y IS A KNAVE.) (* TRUTH (X) MEANS X SAYS THE TRUTH.) (* LIE (X) MEANS X IS TELLING A LIE.) (*) (ALL X NORMAL (X) EQV NOT KNIGHT (X) AND NOT KNAVE (X)) (ALL X KNAVE (X) EQV NOT NORMAL (X) AND NOT KNIGHT (X)) (ALL X KNIGHT (X) EQV NOT NORMAL (X) AND NOT KNAVE (X)) (ALL X,Y KNIGHT2 (X Y) AND KNAVE (X) IMPL NOT KNIGHT (Y)) (ALL X,Y KNIGHT2 (X Y) AND KNIGHT (X) IMPL KNIGHT (Y)) (ALL X,Y KNAVE2 (X Y) AND KNIGHT (X) IMPL KNAVE (Y)) (ALL X,Y KNAVE2 (X Y) AND KNAVE (X) IMPL NOT KNAVE (Y)) (ALL X,Y KNIGHT2 (X Y) AND TRUTH (X) IMPL KNIGHT (Y)) (ALL X,Y KNIGHT2 (X Y) AND LIE (X) IMPL NOT KNIGHT (Y)) (ALL X,Y KNAVE2 (X Y) AND TRUTH (X) IMPL KNAVE (Y)) (ALL X,Y KNAVE2 (X Y) AND LIE (X) IMPL NOT KNAVE (Y)) (ALL X,Y KNIGHT2 (X Y) AND KNIGHT (Y) IMPL TRUTH (X)) (ALL X,Y KNIGHT2 (X Y) AND NOT KNIGHT (Y) IMPL LIE (X)) (ALL X,Y KNAVE2 (X Y) AND KNAVE (Y) IMPL TRUTH (X)) (ALL X,Y KNAVE2 (X Y) AND NOT KNAVE (Y) IMPL LIE (X)) (ALL X TRUTH (X) EQV NOT LIE (X)) (ALL X TRUTH (X) IMPL NORMAL (X) OR KNIGHT (X)) (ALL X LIE (X) IMPL KNAVE (X) OR NORMAL (X)) (KNIGHT2 (A B)) (KNAVE2 (B A)))) (QUOTE (COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT (ALL 2 (EQV (+ 3 (2) (KIND (EQV T 140))) (AND (NOT (+ 4 (2) (KIND (EQV NIL 140)))) (NOT (+ 5 (2) (KIND (EQV NIL 140))))))) (ALL 6 (EQV (+ 5 (6) (KIND (EQV T 150))) (AND (NOT (+ 3 (6) (KIND (EQV NIL 150)))) (NOT (+ 4 (6) (KIND (EQV NIL 150))))))) (ALL 7 (EQV (+ 4 (7) (KIND (EQV T 160))) (AND (NOT (+ 3 (7) (KIND (EQV NIL 160)))) (NOT (+ 5 (7) (KIND (EQV NIL 160))))))) (ALL 9 (ALL 8 (IMPL (AND (+ 10 (8 9) NIL) (+ 5 (8) NIL)) (NOT (+ 4 (9) NIL))))) (ALL 12 (ALL 11 (IMPL (AND (+ 10 (11 12) NIL) (+ 4 (11) NIL)) (+ 4 (12) NIL)))) (ALL 14 (ALL 13 (IMPL (AND (+ 15 (13 14) NIL) (+ 4 (13) NIL)) (+ 5 (14) NIL)))) (ALL 17 (ALL 16 (IMPL (AND (+ 15 (16 17) NIL) (+ 5 (16) NIL)) (NOT (+ 5 (17) NIL))))) (ALL 19 (ALL 18 (IMPL (AND (+ 10 (18 19) NIL) (+ 20 (18) NIL)) (+ 4 (19) NIL)))) (ALL 22 (ALL 21 (IMPL (AND (+ 10 (21 22) NIL) (+ 23 (21) NIL)) (NOT (+ 4 (22) NIL))))) (ALL 25 (ALL 24 (IMPL (AND (+ 15 (24 25) NIL) (+ 20 (24) NIL)) (+ 5 (25) NIL)))) (ALL 27 (ALL 26 (IMPL (AND (+ 15 (26 27) NIL) (+ 23 (26) NIL)) (NOT (+ 5 (27) NIL))))) (ALL 29 (ALL 28 (IMPL (AND (+ 10 (28 29) NIL) (+ 4 (29) NIL)) (+ 20 (28) NIL)))) (ALL 31 (ALL 30 (IMPL (AND (+ 10 (30 31) NIL) (NOT (+ 4 (31) NIL))) (+ 23 (30) NIL)))) (ALL 33 (ALL 32 (IMPL (AND (+ 15 (32 33) NIL) (+ 5 (33) NIL)) (+ 20 (32) NIL)))) (ALL 35 (ALL 34 (IMPL (AND (+ 15 (34 35) NIL) (NOT (+ 5 (35) NIL))) (+ 23 (34) NIL)))) (ALL 36 (EQV (+ 20 (36) (KIND (EQV T 290))) (NOT (+ 23 (36) (KIND (EQV NIL 290)))))) (ALL 37 (IMPL (+ 20 (37) NIL) (OR (+ 3 (37) NIL) (+ 4 (37) NIL)))) (ALL 38 (IMPL (+ 23 (38) NIL) (OR (+ 5 (38) NIL) (+ 3 (38) NIL)))) (+ 10 (39 40) NIL) (+ 15 (40 39) NIL))) (QUOTE (((TRUTH (B) IMPL NOT KNIGHT (B)) AND (NOT TRUTH (B) IMPL (LIE (A) AND NOT KNIGHT (A)))))) (QUOTE ((AND (IMPL (+ 20 (40) NIL) (NOT (+ 4 (40) NIL))) (IMPL (NOT (+ 20 (40) NIL)) (AND (+ 23 (39) NIL) (NOT (+ 4 (39) NIL))))))) (QUOTE ("Edit:     Axioms and Theorems edited: 15-DEC,1989 14:32 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(9709 9714 9719 9724 9729 9734 9739 9744 9749 9754 9759 9764 9769 9774 9779 9784 9789
          9804 9809 9814 9829 9834 9839 9844 9849 9864 9869 9874 9879 9884 9899 9904 9909 9914
          9919 9934 9949 9964 9969 9984 9999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "NORMAL" NIL NIL (ANY) NIL NIL ((- 3 (POSITIVE))) ((+ 3 (NEGATIVE)))
          ((+ 3 (NIL))) ((- 3 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "KNIGHT" NIL NIL
          (ANY) NIL NIL ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE))) ((+ 4 (NIL))) ((- 4 (NIL))) NIL
          NIL (DT*ST-KIND NIL) PREDICATE 15 "KNAVE" NIL NIL (ANY) NIL NIL ((- 5 (POSITIVE)))
          ((+ 5 (NEGATIVE))) ((+ 5 (NIL))) ((- 5 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5
          ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "KNIGHT2" NIL NIL
          (ANY ANY) NIL NIL ((- 10 (POSITIVE))) ((+ 10 (NEGATIVE))) ((+ 10 (NIL)))
          ((- 10 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "KNAVE2" NIL NIL (ANY ANY) NIL NIL
          ((- 15 (POSITIVE))) ((+ 15 (NEGATIVE))) ((+ 15 (NIL))) ((- 15 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY
          NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "TRUTH" NIL NIL (ANY) NIL NIL ((- 20 (POSITIVE))) ((+ 20 (NEGATIVE)))
          ((+ 20 (NIL))) ((- 20 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "LIE" NIL NIL (ANY) NIL NIL ((- 23 (POSITIVE))) ((+ 23 (NEGATIVE)))
          ((+ 23 (NIL))) ((- 23 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY "A"
          (DT*ST-KIND NIL) CONSTANT 5 ANY "B" (DT*ST-KIND NIL) CONSTANT))
       (INCREMENT (- MEM*SIZE 10000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 10000)
             (SETQ COUNTER1 41)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 10000)
                 (MEM-INITIALIZE 10000))
               (SETQ COUNTER1 41)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9704 INCREMENT) 9704))
      (SETQ MEM*NEXT.VADR 41
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ANY))) (SETQ DT*SORT.NR (QUOTE 2)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (40 39))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE NIL)) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE NIL)) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (23 20 15 10 5 4 3 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (23 20 15 10 5 4 3 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
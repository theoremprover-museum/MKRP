(COND ((FMT-LOAD "19-DEC-84 21:07:24" NIL (((* AXIOMS FOR PROBLEM 41 :) COMMENT COMMENT) ((* THERE ARE TWO PEOPLE
A AND B.) COMMENT COMMENT) ((* EACH OF WHOM IS EITHER A KNIGHT,OR A KNAVE,OR A NORMAL.) COMMENT COMMENT) ((* A
SAYS :B IS A KNIGHT.) COMMENT COMMENT) ((* B SAYS : A IS A KNAVE %.) COMMENT COMMENT) ((* PROVE: EITHER ONE OF
THEM IS TELLING THE TRUTH BUT IS NOT A KNIGHT OR ONE OF THEM IS LYING BUT IS NOT A KNAVE.) COMMENT COMMENT) ((*)
COMMENT COMMENT) ((* KNIGHT2 (X Y) MEANS X SAYS Y IS A KNIGHT.) COMMENT COMMENT) ((* KNAVE2 (X Y) MEANS X SAYS
Y IS A KNAVE.) COMMENT COMMENT) ((* TRUTH (X) MEANS X SAYS THE TRUTH.) COMMENT COMMENT) ((* LIE (X) MEANS X IS
TELLING A LIE.) COMMENT COMMENT) ((*) COMMENT COMMENT) ((ALL X NORMAL (X) EQV NOT KNIGHT (X) AND NOT KNAVE (X))
(ALL 160 (EQV (+ 159 (160) (KIND (EQV T 140))) (AND (NOT (+ 158 (160) (KIND (EQV NIL 140)))) (NOT (+ 156 (160)
(KIND (EQV NIL 140))))))) QUANTIFICATION) ((ALL X KNAVE (X) EQV NOT NORMAL (X) AND NOT KNIGHT (X)) (ALL 155 (EQV
(+ 156 (155) (KIND (EQV T 150))) (AND (NOT (+ 159 (155) (KIND (EQV NIL 150)))) (NOT (+ 158 (155) (KIND (EQV NIL
150))))))) QUANTIFICATION) ((ALL X KNIGHT (X) EQV NOT NORMAL (X) AND NOT KNAVE (X)) (ALL 154 (EQV (+ 158 (154)
(KIND (EQV T 160))) (AND (NOT (+ 159 (154) (KIND (EQV NIL 160)))) (NOT (+ 156 (154) (KIND (EQV NIL 160))))))) 
QUANTIFICATION) ((ALL X,Y KNIGHT2 (X Y) AND KNAVE (X) IMPL NOT KNIGHT (Y)) (ALL 101 (ALL 153 (IMPL (AND (+ 110
(153 101) NIL) (+ 156 (153) NIL)) (NOT (+ 158 (101) NIL))))) QUANTIFICATION) ((ALL X,Y KNIGHT2 (X Y) AND KNIGHT
(X) IMPL KNIGHT (Y)) (ALL 114 (ALL 116 (IMPL (AND (+ 110 (116 114) NIL) (+ 158 (116) NIL)) (+ 158 (114) NIL))))
QUANTIFICATION) ((ALL X,Y KNAVE2 (X Y) AND KNIGHT (X) IMPL KNAVE (Y)) (ALL 66 (ALL 95 (IMPL (AND (+ 25 (95 66)
NIL) (+ 158 (95) NIL)) (+ 156 (66) NIL)))) QUANTIFICATION) ((ALL X,Y KNAVE2 (X Y) AND KNAVE (X) IMPL NOT KNAVE
(Y)) (ALL 107 (ALL 32 (IMPL (AND (+ 25 (32 107) NIL) (+ 156 (32) NIL)) (NOT (+ 156 (107) NIL))))) QUANTIFICATION)
((ALL X,Y KNIGHT2 (X Y) AND TRUTH (X) IMPL KNIGHT (Y)) (ALL 120 (ALL 108 (IMPL (AND (+ 110 (108 120) NIL) (+ 127
(108) NIL)) (+ 158 (120) NIL)))) QUANTIFICATION) ((ALL X,Y KNIGHT2 (X Y) AND LIE (X) IMPL NOT KNIGHT (Y)) (ALL
130 (ALL 128 (IMPL (AND (+ 110 (128 130) NIL) (+ 136 (128) NIL)) (NOT (+ 158 (130) NIL))))) QUANTIFICATION) ((ALL
X,Y KNAVE2 (X Y) AND TRUTH (X) IMPL KNAVE (Y)) (ALL 132 (ALL 135 (IMPL (AND (+ 25 (135 132) NIL) (+ 127 (135) NIL))
(+ 156 (132) NIL)))) QUANTIFICATION) ((ALL X,Y KNAVE2 (X Y) AND LIE (X) IMPL NOT KNAVE (Y)) (ALL 141 (ALL 133 (IMPL
(AND (+ 25 (133 141) NIL) (+ 136 (133) NIL)) (NOT (+ 156 (141) NIL))))) QUANTIFICATION) ((ALL X,Y KNIGHT2 (X Y)
AND KNIGHT (Y) IMPL TRUTH (X)) (ALL 144 (ALL 143 (IMPL (AND (+ 110 (143 144) NIL) (+ 158 (144) NIL)) (+ 127 (143)
NIL)))) QUANTIFICATION) ((ALL X,Y KNIGHT2 (X Y) AND NOT KNIGHT (Y) IMPL LIE (X)) (ALL 150 (ALL 145 (IMPL (AND (+
110 (145 150) NIL) (NOT (+ 158 (150) NIL))) (+ 136 (145) NIL)))) QUANTIFICATION) ((ALL X,Y KNAVE2 (X Y) AND KNAVE
(Y) IMPL TRUTH (X)) (ALL 164 (ALL 163 (IMPL (AND (+ 25 (163 164) NIL) (+ 156 (164) NIL)) (+ 127 (163) NIL)))) 
QUANTIFICATION) ((ALL X,Y KNAVE2 (X Y) AND NOT KNAVE (Y) IMPL LIE (X)) (ALL 166 (ALL 165 (IMPL (AND (+ 25 (165
166) NIL) (NOT (+ 156 (166) NIL))) (+ 136 (165) NIL)))) QUANTIFICATION) ((ALL X TRUTH (X) EQV NOT LIE (X)) (ALL
167 (EQV (+ 127 (167) (KIND (EQV T 290))) (NOT (+ 136 (167) (KIND (EQV NIL 290)))))) QUANTIFICATION) ((ALL X TRUTH
(X) IMPL NORMAL (X) OR KNIGHT (X)) (ALL 168 (IMPL (+ 127 (168) NIL) (OR (+ 159 (168) NIL) (+ 158 (168) NIL))))
QUANTIFICATION) ((ALL X LIE (X) IMPL KNAVE (X) OR NORMAL (X)) (ALL 169 (IMPL (+ 136 (169) NIL) (OR (+ 156 (169)
NIL) (+ 159 (169) NIL)))) QUANTIFICATION) ((KNIGHT2 (A B)) (+ 110 (170 171) NIL) QUANTIFICATION) ((KNAVE2 (B A))
(+ 25 (171 170) NIL) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (DT-RESET)) (PROG ((ADDRLIST (QUOTE (19710 19715
19720 19725 19730 19735 19740 19745 19750 ATP.MEMORY.NIL ATP.MEMORY.NIL 19970 19965 19950 ATP.MEMORY.NIL 19935
19920 19915 19910 ATP.MEMORY.NIL ATP.MEMORY.NIL 19755 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
19760 19765 19770 ATP.MEMORY.NIL 19775 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 19805 19790
ATP.MEMORY.NIL 19780 19785 ATP.MEMORY.NIL 19810 ATP.MEMORY.NIL 19815 19830 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 19835 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 19885 ATP.MEMORY.NIL
19880 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 19900 ATP.MEMORY.NIL 19840 19845 ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 19905 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL 19875 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 19870 ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
19850 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 19865 ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 19985 20000))) (DATALIST (QUOTE (15
"TRUE" NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 15 "FALSE" NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL)))
NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "NORMAL" NIL NIL (ANY)
NIL NIL ((- 159 (POSITIVE))) ((+ 159 (NEGATIVE))) ((+ 159 (NIL))) ((- 159 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
15 "KNIGHT" NIL NIL (ANY) NIL NIL ((- 158 (POSITIVE))) ((+ 158 (NEGATIVE))) ((+ 158 (NIL))) ((- 158 (NIL))) NIL
NIL (DT*ST-KIND NIL) PREDICATE 15 "KNAVE" NIL NIL (ANY) NIL NIL ((- 156 (POSITIVE))) ((+ 156 (NEGATIVE))) ((+ 156
(NIL))) ((- 156 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "KNIGHT2" NIL NIL (ANY ANY) NIL NIL ((- 110 (POSITIVE))) ((+ 110 (NEGATIVE))
) ((+ 110 (NIL))) ((- 110 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "KNAVE2" NIL NIL (ANY ANY) NIL NIL ((- 25 (POSITIVE))) ((+
25 (NEGATIVE))) ((+ 25 (NIL))) ((- 25 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "TRUTH" NIL NIL (ANY) NIL NIL ((- 127 (POSITIVE)))
((+ 127 (NEGATIVE))) ((+ 127 (NIL))) ((- 127 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL
DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "LIE" NIL NIL (ANY) NIL NIL
((- 136 (POSITIVE))) ((+ 136 (NEGATIVE))) ((+ 136 (NIL))) ((- 136 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5
ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL
(ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 "A" ANY (ST*ATTRIBUTE
NIL DT*ST-KIND NIL) CONSTANT 5 "B" ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT))) (INCREMENT (IDIFFERENCE MEM*SIZE
20000)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE 20000) (SETQ COUNTER1 172) (MAPC ADDRLIST (FUNCTION (LAMBDA
(RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) (COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ
RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT))))))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST
(FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA))))) (T (COND ((NEQ MEM*SIZE 20000)
(MEM-INITIALIZE 20000))) (SETQ COUNTER1 172) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1
(SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY
(SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP MEM*SIZE 20000) (RPAQ MEM*NEXT.RADR (IPLUS 19705 INCREMENT))
) (T (RPAQ MEM*NEXT.RADR 19705))) (RPAQ MEM*NEXT.VADR 172) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR)
)) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ
DT*SORT.NR 2) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE 
DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS 
DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER
0) (RPAQQ DT*CONSTANT.ALL (171 170)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL
NIL) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ 
DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT 
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES
(136 127 25 110 156 158 159 2 1)) (RPAQQ DT*PREDICATE.ALL (136 127 25 110 156 158 159 2 1)) (RPAQQ 
DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES
DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))
(RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ 
DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL
PREDICATE.ALL))) (PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE NIL))) (PROGN (SETPROPLIST
(QUOTE ANY) (QUOTE (DT*ATTRIBUTE NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS
(ANY) DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL DT*SORT.NUMBER 1)))) (PROGN
(RPAQQ ST*STACK1 (NIL NIL ((B PROGN (DT-CONSTANT.DELETE 171) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B) 
ST*SYMBOL.ADDRESSES))) (A PROGN (DT-CONSTANT.DELETE 170) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) 
ST*SYMBOL.ADDRESSES)))) ((X_169 PROGN (DT-VARIABLE.DELETE 169) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_169)
ST*SYMBOL.ADDRESSES)))) ((X_168 PROGN (DT-VARIABLE.DELETE 168) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_168)
ST*SYMBOL.ADDRESSES)))) ((X_167 PROGN (DT-VARIABLE.DELETE 167) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_167)
ST*SYMBOL.ADDRESSES)))) ((X_166 PROGN (DT-VARIABLE.DELETE 166) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_166)
ST*SYMBOL.ADDRESSES))) (X_165 PROGN (DT-VARIABLE.DELETE 165) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_165)
ST*SYMBOL.ADDRESSES)))) ((X_164 PROGN (DT-VARIABLE.DELETE 164) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_164)
ST*SYMBOL.ADDRESSES))) (X_163 PROGN (DT-VARIABLE.DELETE 163) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_163)
ST*SYMBOL.ADDRESSES)))) ((X_150 PROGN (DT-VARIABLE.DELETE 150) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_150)
ST*SYMBOL.ADDRESSES))) (X_145 PROGN (DT-VARIABLE.DELETE 145) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_145)
ST*SYMBOL.ADDRESSES)))) ((X_144 PROGN (DT-VARIABLE.DELETE 144) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_144)
ST*SYMBOL.ADDRESSES))) (X_143 PROGN (DT-VARIABLE.DELETE 143) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_143)
ST*SYMBOL.ADDRESSES)))) ((X_141 PROGN (DT-VARIABLE.DELETE 141) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_141)
ST*SYMBOL.ADDRESSES))) (X_133 PROGN (DT-VARIABLE.DELETE 133) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_133)
ST*SYMBOL.ADDRESSES)))) ((X_132 PROGN (DT-VARIABLE.DELETE 132) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_132)
ST*SYMBOL.ADDRESSES))) (X_135 PROGN (DT-VARIABLE.DELETE 135) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_135)
ST*SYMBOL.ADDRESSES)))) ((LIE PROGN (DT-PREDICATE.DELETE 136) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE LIE) 
ST*SYMBOL.ADDRESSES))) (X_130 PROGN (DT-VARIABLE.DELETE 130) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_130)
ST*SYMBOL.ADDRESSES))) (X_128 PROGN (DT-VARIABLE.DELETE 128) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_128)
ST*SYMBOL.ADDRESSES)))) ((TRUTH PROGN (DT-PREDICATE.DELETE 127) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUTH)
ST*SYMBOL.ADDRESSES))) (X_120 PROGN (DT-VARIABLE.DELETE 120) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_120)
ST*SYMBOL.ADDRESSES))) (X_108 PROGN (DT-VARIABLE.DELETE 108) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_108)
ST*SYMBOL.ADDRESSES)))) ((X_107 PROGN (DT-VARIABLE.DELETE 107) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_107)
ST*SYMBOL.ADDRESSES))) (X_32 PROGN (DT-VARIABLE.DELETE 32) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_32) 
ST*SYMBOL.ADDRESSES)))) ((KNAVE2 PROGN (DT-PREDICATE.DELETE 25) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNAVE2)
ST*SYMBOL.ADDRESSES))) (X_66 PROGN (DT-VARIABLE.DELETE 66) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_66) 
ST*SYMBOL.ADDRESSES))) (X_95 PROGN (DT-VARIABLE.DELETE 95) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_95) 
ST*SYMBOL.ADDRESSES)))) ((X_114 PROGN (DT-VARIABLE.DELETE 114) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_114)
ST*SYMBOL.ADDRESSES))) (X_116 PROGN (DT-VARIABLE.DELETE 116) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_116)
ST*SYMBOL.ADDRESSES)))) ((KNIGHT2 PROGN (DT-PREDICATE.DELETE 110) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNIGHT2)
ST*SYMBOL.ADDRESSES))) (X_101 PROGN (DT-VARIABLE.DELETE 101) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_101)
ST*SYMBOL.ADDRESSES))) (X_153 PROGN (DT-VARIABLE.DELETE 153) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_153)
ST*SYMBOL.ADDRESSES)))) ((X_154 PROGN (DT-VARIABLE.DELETE 154) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_154)
ST*SYMBOL.ADDRESSES)))) ((X_155 PROGN (DT-VARIABLE.DELETE 155) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_155)
ST*SYMBOL.ADDRESSES)))) ((KNAVE PROGN (DT-PREDICATE.DELETE 156) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNAVE)
ST*SYMBOL.ADDRESSES))) (KNIGHT PROGN (DT-PREDICATE.DELETE 158) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNIGHT)
ST*SYMBOL.ADDRESSES))) (NORMAL PROGN (DT-PREDICATE.DELETE 159) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NORMAL)
ST*SYMBOL.ADDRESSES))) (X_160 PROGN (DT-VARIABLE.DELETE 160) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_160)
ST*SYMBOL.ADDRESSES)))) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ
ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_160 . 160) (NORMAL . 159) (KNIGHT . 158) (KNAVE .
156) (X_155 . 155) (X_154 . 154) (X_153 . 153) (X_101 . 101) (KNIGHT2 . 110) (X_116 . 116) (X_114 . 114) (X_95
. 95) (X_66 . 66) (KNAVE2 . 25) (X_32 . 32) (X_107 . 107) (X_108 . 108) (X_120 . 120) (TRUTH . 127) (X_128 . 128)
(X_130 . 130) (LIE . 136) (X_135 . 135) (X_132 . 132) (X_133 . 133) (X_141 . 141) (X_143 . 143) (X_144 . 144) (X_145
. 145) (X_150 . 150) (X_163 . 163) (X_164 . 164) (X_165 . 165) (X_166 . 166) (X_167 . 167) (X_168 . 168) (X_169
. 169) (A . 170) (B . 171))))))))STOP
 

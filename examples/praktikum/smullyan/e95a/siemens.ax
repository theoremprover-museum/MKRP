(COND ((FMT-LOAD " 1-FEB-85 14:38:12"
NIL(((* PROBLEM E95) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* DECLARATIONS:) COMMENT COMMENT) ((TYPE A:PERSON) (+ 1 NIL) TYPE) ((*) COMMENT COMMENT) ((* FUNCTIONS:) COMMENT COMMENT) ((TYPE KNIGHT (PERSON) : STATEMENT) (+ 1 NIL) TYPE) ((TYPE
KNAVE (PERSON) : STATEMENT) (+ 1 NIL) TYPE) ((TYPE RICH (PERSON) :STATEMENT) (+ 1 NIL) TYPE) ((TYPE POOR (PERSON) :STATEMENT) (+ 1 NIL) TYPE) ((TYPE NOT1 (STATEMENT) :STATEMENT) (+ 1 NIL) TYPE) ((TYPE AND2 (STATEMENT STATEMENT) :STATEMENT) (+
1 NIL) TYPE) ((TYPE OR2 (STATEMENT STATEMENT) :STATEMENT) (+ 1 NIL) TYPE) ((*) COMMENT COMMENT) ((* PREDICATES:) COMMENT COMMENT) ((TYPE CORRECT (STATEMENT)) (+ 1 NIL) TYPE) ((TYPE SAYS (PERSON STATEMENT)) (+ 1 NIL) TYPE) ((*) COMMENT COMMENT)
((* EXPLANATIONS:) COMMENT COMMENT) ((ASSOCIATIVE (AND2)) (+ 1 NIL) PROPERTY) ((ASSOCIATIVE (OR2)) (+ 1 NIL) PROPERTY) ((ALL S: STATEMENT CORRECT (NOT1 (S)) EQV NOT CORRECT (S)) (ALL 51 (EQV (+ 53 ((56 51)) NIL) (NOT (+ 53 (51) NIL)))) QUANTIFICATION)
((ALL S,T: STATEMENT CORRECT (AND2 (S T)) EQV CORRECT (S) AND CORRECT (T)) (ALL 49 (ALL 50 (EQV (+ 53 ((55 50 49)) NIL) (AND (+ 53 (50) NIL) (+ 53 (49) NIL))))) QUANTIFICATION) ((ALL S,T: STATEMENT CORRECT (OR2 (S T)) EQV CORRECT (S) OR CORRECT
(T)) (ALL 63 (ALL 62 (EQV (+ 53 ((54 62 63)) NIL) (OR (+ 53 (62) NIL) (+ 53 (63) NIL))))) QUANTIFICATION) ((*) COMMENT COMMENT) ((* IMPLICATIONS:) COMMENT COMMENT) ((ALL S: STATEMENT ALL P:PERSON SAYS (P S) AND CORRECT (KNIGHT (P)) IMPL CORRECT
(S)) (ALL 64 (ALL 65 (IMPL (AND (+ 52 (65 64) NIL) (+ 53 ((58 65)) NIL)) (+ 53 (64) NIL)))) QUANTIFICATION) ((ALL S: STATEMENT ALL P:PERSON SAYS (P S) AND CORRECT (KNAVE (P)) IMPL NOT CORRECT (S)) (ALL 66 (ALL 67 (IMPL (AND (+ 52 (67 66) NIL)
(+ 53 ((60 67)) NIL)) (NOT (+ 53 (66) NIL))))) QUANTIFICATION) ((*) COMMENT COMMENT) ((* EVERY PERSON IS EITHER A KNIGHT OR A KNAVE:) COMMENT COMMENT) ((ALL P:PERSON CORRECT (KNIGHT (P)) EQV NOT (CORRECT (KNAVE (P)))) (ALL 68 (EQV (+ 53 ((58 68))
NIL) (NOT (+ 53 ((60 68)) NIL)))) QUANTIFICATION) ((*) COMMENT COMMENT) ((* EVERY PERSON IS EITHER RICH OR POOR:) COMMENT COMMENT) ((ALL P:PERSON CORRECT (RICH (P)) EQV NOT (CORRECT (POOR (P)))) (ALL 69 (EQV (+ 53 ((61 69)) NIL) (NOT (+ 53 ((57
69)) NIL)))) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(MEM-RESTORE NIL NIL 70 10282 10500 (QUOTE (10287 10292 10297 10302 10307 10312 10317 10322 10437 10451 10470 10465 10423 10409 10395 10381 10367 10352 10337 10332 10327 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 10485 10500))(QUOTE (15 TRUE NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((-
1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 A PERSON (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 14 KNIGHT
NIL STATEMENT (PERSON) NIL NIL NIL NIL NIL 1 STATEMENT (DT*ST-KIND NIL) FUNCTION 14 KNAVE NIL STATEMENT (PERSON) NIL NIL NIL NIL NIL 1 STATEMENT (DT*ST-KIND NIL) FUNCTION 14 RICH NIL STATEMENT (PERSON) NIL NIL NIL NIL NIL 1 STATEMENT (DT*ST-KIND
NIL) FUNCTION 14 POOR NIL STATEMENT (PERSON) NIL NIL NIL NIL NIL 1 STATEMENT (DT*ST-KIND NIL) FUNCTION 14 NOT1 NIL STATEMENT (STATEMENT) NIL NIL NIL NIL NIL 1 STATEMENT (DT*ST-KIND NIL) FUNCTION 14 AND2 (ASSOCIATIVE) STATEMENT (STATEMENT STATEMENT)
NIL NIL NIL NIL NIL 2 STATEMENT (DT*ST-KIND NIL) FUNCTION 14 OR2 (ASSOCIATIVE) STATEMENT (STATEMENT STATEMENT) NIL NIL NIL NIL NIL 2 STATEMENT (DT*ST-KIND NIL) FUNCTION 15 CORRECT NIL NIL (STATEMENT) NIL NIL ((- 53 (POSITIVE))) ((+ 53 (NEGATIVE)))
((+ 53 (NIL))) ((- 53 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 SAYS NIL NIL (PERSON STATEMENT) NIL NIL ((- 52 (POSITIVE))) ((+ 52 (NEGATIVE))) ((+ 52 (NIL))) ((- 52 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE)))(PROGN (RPAQQ DT*SORT.ALL (STATEMENT PERSON ANY)) (RPAQQ DT*SORT.NR 12) (RPAQQ DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE
DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL
(59)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL (54 55 56 57 61 60 58)) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES (ASSOCIATIVE)) (RPAQQ 
DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ 
DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (52 53 2 1)) (RPAQQ DT*PREDICATE.ALL
(52 53 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))
(RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE NIL)))
(PROGN (SETPROPLIST (QUOTE STATEMENT) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (STATEMENT ANY) DT*DIRECT.SUPERSORTS (ANY) DT*MINIMAL.SUBSORTS (STATEMENT) DT*MAX.SUBSORTS ((STATEMENT STATEMENT) (PERSON) (ANY STATEMENT)) DT*TRANSITIVE.CLOSURE (STATEMENT)
DT*DIRECT.SUBSORTS NIL DT*ATTRIBUTE NIL DT*SORT.NUMBER 11))) (SETPROPLIST (QUOTE PERSON) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (PERSON ANY) DT*DIRECT.SUPERSORTS (ANY) DT*MINIMAL.SUBSORTS (PERSON) DT*MAX.SUBSORTS ((STATEMENT) (PERSON PERSON) (ANY
PERSON)) DT*TRANSITIVE.CLOSURE (PERSON) DT*DIRECT.SUBSORTS NIL DT*ATTRIBUTE NIL DT*SORT.NUMBER 10))) (SETPROPLIST (QUOTE ANY) (QUOTE (DT*LEAST.SUPERSORTS ((ANY ANY)) DT*ATTRIBUTE NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL
DT*MINIMAL.SUBSORTS (PERSON) DT*MAX.SUBSORTS ((STATEMENT STATEMENT) (PERSON PERSON) (ANY ANY)) DT*TRANSITIVE.CLOSURE (STATEMENT PERSON ANY) DT*SORT.NUMBER 1 DT*DIRECT.SUBSORTS (STATEMENT PERSON)))))
(PROGN (RPAQQ ST*STACK1 (NIL ((X_69 PROGN (DT-VARIABLE.DELETE 69) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_69) ST*SYMBOL.ADDRESSES)))) NIL NIL ((X_68 PROGN (DT-VARIABLE.DELETE 68) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_68) ST*SYMBOL.ADDRESSES)
))) NIL NIL ((X_67 PROGN (DT-VARIABLE.DELETE 67) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_67) ST*SYMBOL.ADDRESSES))) (X_66 PROGN (DT-VARIABLE.DELETE 66) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_66) ST*SYMBOL.ADDRESSES)))) ((X_65 PROGN
(DT-VARIABLE.DELETE 65) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_65) ST*SYMBOL.ADDRESSES))) (X_64 PROGN (DT-VARIABLE.DELETE 64) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_64) ST*SYMBOL.ADDRESSES)))) NIL NIL ((X_63 PROGN (DT-VARIABLE.DELETE
63) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_63) ST*SYMBOL.ADDRESSES))) (X_62 PROGN (DT-VARIABLE.DELETE 62) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_62) ST*SYMBOL.ADDRESSES)))) ((X_49 PROGN (DT-VARIABLE.DELETE 49) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE X_49) ST*SYMBOL.ADDRESSES))) (X_50 PROGN (DT-VARIABLE.DELETE 50) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_50) ST*SYMBOL.ADDRESSES)))) ((X_51 PROGN (DT-VARIABLE.DELETE 51) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_51) 
ST*SYMBOL.ADDRESSES)))) ((OR2 PROG1 NIL (DT-FUNCTION.CHANGE 54 (QUOTE STATEMENT) (QUOTE (STATEMENT STATEMENT)) NIL) (DT-FUNCTION.PUT.ATTRIBUTES 54 (QUOTE NIL))) (OR2 PROG1 NIL (DT-PUTPROP 54 (QUOTE NIL)) (DT-PUTPROP 54 (QUOTE NIL)))) ((AND2 PROG1
NIL (DT-FUNCTION.CHANGE 55 (QUOTE STATEMENT) (QUOTE (STATEMENT STATEMENT)) NIL) (DT-FUNCTION.PUT.ATTRIBUTES 55 (QUOTE NIL))) (AND2 PROG1 NIL (DT-PUTPROP 55 (QUOTE NIL)) (DT-PUTPROP 55 (QUOTE NIL)))) NIL NIL ((SAYS PROGN (DT-PREDICATE.DELETE 52)
(RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SAYS) ST*SYMBOL.ADDRESSES)))) ((CORRECT PROGN (DT-PREDICATE.DELETE 53) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CORRECT) ST*SYMBOL.ADDRESSES)))) NIL NIL ((OR2 PROGN (DT-FUNCTION.DELETE 54) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE OR2) ST*SYMBOL.ADDRESSES)))) ((AND2 PROGN (DT-FUNCTION.DELETE 55) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE AND2) ST*SYMBOL.ADDRESSES)))) ((NOT1 PROGN (DT-FUNCTION.DELETE 56) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE NOT1) ST*SYMBOL.ADDRESSES)))) ((POOR PROGN (DT-FUNCTION.DELETE 57) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE POOR) ST*SYMBOL.ADDRESSES)))) ((RICH PROGN (DT-FUNCTION.DELETE 61) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE RICH) ST*SYMBOL.ADDRESSES)
))) ((KNAVE PROGN (DT-FUNCTION.DELETE 60) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNAVE) ST*SYMBOL.ADDRESSES)))) ((KNIGHT PROGN (DT-FUNCTION.DELETE 58) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNIGHT) ST*SYMBOL.ADDRESSES))) (STATEMENT PROGN
(DT-SORT.ST.REMOVE (QUOTE STATEMENT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE STATEMENT) ST*SYMBOL.ADDRESSES))) (STATEMENT REMPROP (QUOTE STATEMENT) (QUOTE ST*DATA))) NIL NIL ((A PROGN (DT-CONSTANT.DELETE 59) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE A) ST*SYMBOL.ADDRESSES))) (PERSON PROGN (DT-SORT.ST.REMOVE (QUOTE PERSON)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PERSON) ST*SYMBOL.ADDRESSES))) (PERSON REMPROP (QUOTE PERSON) (QUOTE ST*DATA))) NIL NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE
2) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (PERSON . T) (A . 59) (STATEMENT . T) (KNIGHT . 58) (KNAVE . 60) (RICH . 61) (POOR . 57)
(NOT1 . 56) (AND2 . 55) (OR2 . 54) (CORRECT . 53) (SAYS . 52) (X_51 . 51) (X_50 . 50) (X_49 . 49) (X_62 . 62) (X_63 . 63) (X_64 . 64) (X_65 . 65) (X_66 . 66) (X_67 . 67) (X_68 . 68) (X_69 . 69))))))))STOP
 

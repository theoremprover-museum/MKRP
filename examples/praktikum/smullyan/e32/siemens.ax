(COND ((FMT-LOAD "20-DEC-84 23:18:20" NIL (((* AXIOMS OF PROBLEM 32 %.) COMMENT COMMENT) ((* WE HAVE THREE PEOPLE:
A, B, C.) COMMENT COMMENT) ((* A SAYS: ALL OF US ARE KNAVES.) COMMENT COMMENT) ((* B SAYS: EXACTLY ONE OF US IS
A KNAVE.) COMMENT COMMENT) ((* WHAT ARE A, B, C?) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* EVERY (X) MEANS: X
SAYS: WE ARE ALL KNAVES.) COMMENT COMMENT) ((* EXACT (X) MEANS: X SAYS: EXACTLY ONE OF US IS A KNAVE.) COMMENT
COMMENT) ((*) COMMENT COMMENT) ((ALL X KNIGHT (X) EQV NOT KNAVE (X)) (ALL 92 (EQV (+ 91 (92) (KIND (EQV T 110)))
(NOT (+ 88 (92) (KIND (EQV NIL 110)))))) QUANTIFICATION) ((ALL X NOT (KNIGHT (X) AND EVERY (X))) (ALL 26 (NOT (AND
(+ 91 (26) NIL) (+ 81 (26) NIL)))) QUANTIFICATION) ((ALL X (KNAVE (X) AND EVERY (X)) IMPL NOT (KNAVE (A) AND KNAVE
(B) AND KNAVE (C))) (ALL 93 (IMPL (AND (+ 88 (93) NIL) (+ 81 (93) NIL)) (NOT (AND (+ 88 (94) NIL) (AND (+ 88 (95)
NIL) (+ 88 (96) NIL)))))) QUANTIFICATION) ((ALL X (KNAVE (X) AND EXACT (X)) IMPL NOT ((KNAVE (A) OR KNAVE (B) OR
KNAVE (C)) AND NOT (KNAVE (A) AND KNAVE (B)) AND NOT (KNAVE (A) AND KNAVE (C)) AND NOT (KNAVE (B) AND KNAVE (C))))
(ALL 97 (IMPL (AND (+ 88 (97) NIL) (+ 98 (97) NIL)) (NOT (AND (OR (+ 88 (94) NIL) (OR (+ 88 (95) NIL) (+ 88 (96)
NIL))) (AND (NOT (AND (+ 88 (94) NIL) (+ 88 (95) NIL))) (AND (NOT (AND (+ 88 (94) NIL) (+ 88 (96) NIL))) (NOT (AND
(+ 88 (95) NIL) (+ 88 (96) NIL))))))))) QUANTIFICATION) ((ALL X KNIGHT (X) AND EXACT (X) IMPL (KNAVE (A) OR KNAVE
(B) OR KNAVE (C)) AND NOT (KNAVE (A) AND KNAVE (B)) AND NOT (KNAVE (A) AND KNAVE (C)) AND NOT (KNAVE (B) AND KNAVE
(C))) (ALL 99 (IMPL (AND (+ 91 (99) NIL) (+ 98 (99) NIL)) (AND (OR (+ 88 (94) NIL) (OR (+ 88 (95) NIL) (+ 88 (96)
NIL))) (AND (NOT (AND (+ 88 (94) NIL) (+ 88 (95) NIL))) (AND (NOT (AND (+ 88 (94) NIL) (+ 88 (96) NIL))) (NOT (AND
(+ 88 (95) NIL) (+ 88 (96) NIL)))))))) QUANTIFICATION) ((EVERY (A)) (+ 81 (94) NIL) QUANTIFICATION) ((EXACT (B))
(+ 98 (95) NIL) QUANTIFICATION))) (COND (ST*LOAD.FLAG (PROGN (DT-RESET)) (PROG ((ADDRLIST (QUOTE (19875 19890 19895
19900 19905 19910 19915 19970 19965 ATP.MEMORY.NIL ATP.MEMORY.NIL 19950 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 19930 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL 19935 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL 19985 20000))) (DATALIST (QUOTE (15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 1 (POSITIVE)))
((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL NIL (DEFINED)
NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY
NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "KNIGHT" NIL NIL (ANY) NIL NIL ((- 91 (POSITIVE))) ((+ 91 (NEGATIVE)))
((+ 91 (NIL))) ((- 91 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "KNAVE" NIL NIL (ANY) NIL NIL ((- 88 (POSITIVE)))
((+ 88 (NEGATIVE))) ((+ 88 (NIL))) ((- 88 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE 15 "EVERY" NIL NIL (ANY) NIL NIL ((- 81 (POSITIVE))) ((+ 81 (NEGATIVE))) ((+ 81 (NIL))) ((- 81
(NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 "A" ANY (ST*ATTRIBUTE
NIL DT*ST-KIND NIL) CONSTANT 5 "B" ANY (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 5 "C" ANY (ST*ATTRIBUTE NIL DT*ST-KIND
NIL) CONSTANT 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "EXACT" NIL NIL (ANY) NIL NIL ((- 98 (POSITIVE)))
((+ 98 (NEGATIVE))) ((+ 98 (NIL))) ((- 98 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND
SYS-VAR) VARIABLE))) (INCREMENT (IDIFFERENCE MEM*SIZE 20000)) COUNTER1) (MEM-RESET) (COND ((IGREATERP MEM*SIZE
20000) (SETQ COUNTER1 100) (MAPC ADDRLIST (FUNCTION (LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
(COND ((EQ RADDR (QUOTE ATP.MEMORY.NIL)) RADDR) ((OR (EQ RADDR 0) (MINUSP RADDR)) RADDR) (T (IPLUS RADDR INCREMENT)))))))
(SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1))
DATA))))) (T (COND ((NEQ MEM*SIZE 20000) (MEM-INITIALIZE 20000))) (SETQ COUNTER1 100) (MAPC ADDRLIST (FUNCTION
(LAMBDA (RADDR) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) RADDR)))) (SETQ COUNTER1 (ADD1 MEM*SIZE)) (MAPC
DATALIST (FUNCTION (LAMBDA (DATA) (SETA MEM*MEMORY (SETQ COUNTER1 (SUB1 COUNTER1)) DATA)))))) (COND ((IGREATERP
MEM*SIZE 20000) (RPAQ MEM*NEXT.RADR (IPLUS 19870 INCREMENT))) (T (RPAQ MEM*NEXT.RADR 19870))) (RPAQ MEM*NEXT.VADR
100) (RPAQ MEM*REST (ADD1 (IDIFFERENCE MEM*NEXT.RADR MEM*NEXT.VADR))) (RPAQ MEM*FIRST.REUSABLE.VADR NIL) (RPAQ
MEM*LAST.REUSABLE.VADR NIL)) (PROGN (RPAQQ DT*SORT.ALL (ANY)) (RPAQQ DT*SORT.NR 2) (RPAQQ DT*SORT.PROPERTIES (
DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS 
DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ DT*SORT.COMMON.COMPUTE.FLAG
NIL) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL (96 95 94)) (RPAQQ 
DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL NIL) (RPAQQ DT*FUNCTION.ADMISSIBLE.THEORIES
(ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES NIL) (RPAQQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ
DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE
SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES)) (RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC
DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ 
DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES (98 81 88 91 2 1)) (RPAQQ DT*PREDICATE.ALL (98 81
88 91 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES
NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES
-TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE 2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ
DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++)) (RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL
PREDICATE.ALL))) (PROGN) (PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE NIL))) (PROGN (SETPROPLIST
(QUOTE ANY) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (ANY) 
DT*MAX.SUBSORTS ((ANY ANY)) DT*TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUBSORTS NIL DT*ATTRIBUTE NIL DT*SORT.NUMBER
1)))) (PROGN (RPAQQ ST*STACK1 (NIL NIL NIL ((X_99 PROGN (DT-VARIABLE.DELETE 99) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE X_99) ST*SYMBOL.ADDRESSES)))) ((EXACT PROGN (DT-PREDICATE.DELETE 98) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE EXACT) ST*SYMBOL.ADDRESSES))) (X_97 PROGN (DT-VARIABLE.DELETE 97) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
X_97) ST*SYMBOL.ADDRESSES)))) ((C PROGN (DT-CONSTANT.DELETE 96) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE C) 
ST*SYMBOL.ADDRESSES))) (B PROGN (DT-CONSTANT.DELETE 95) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE B) 
ST*SYMBOL.ADDRESSES))) (A PROGN (DT-CONSTANT.DELETE 94) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) 
ST*SYMBOL.ADDRESSES))) (X_93 PROGN (DT-VARIABLE.DELETE 93) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_93) 
ST*SYMBOL.ADDRESSES)))) ((EVERY PROGN (DT-PREDICATE.DELETE 81) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE EVERY)
ST*SYMBOL.ADDRESSES))) (X_26 PROGN (DT-VARIABLE.DELETE 26) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_26) 
ST*SYMBOL.ADDRESSES)))) ((KNAVE PROGN (DT-PREDICATE.DELETE 88) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNAVE)
ST*SYMBOL.ADDRESSES))) (KNIGHT PROGN (DT-PREDICATE.DELETE 91) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNIGHT)
ST*SYMBOL.ADDRESSES))) (X_92 PROGN (DT-VARIABLE.DELETE 92) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_92) 
ST*SYMBOL.ADDRESSES)))) NIL NIL NIL NIL NIL NIL NIL NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ 
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ
ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ
ST*SYMBOL.ADDRESSES (NIL (ANY . T) (TRUE . 1) (FALSE . 2) (X_92 . 92) (KNIGHT . 91) (KNAVE . 88) (X_26 . 26) (EVERY
. 81) (X_93 . 93) (A . 94) (B . 95) (C . 96) (X_97 . 97) (EXACT . 98) (X_99 . 99))))))))STOP
 

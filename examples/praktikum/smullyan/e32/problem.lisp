;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((* AXIOMS OF PROBLEM 32 %.) (* WE HAVE THREE PEOPLE : A, B, C.) (* A SAYS : ALL OF US ARE KNAVES.) (* B SAYS : EXACTLY ONE OF US IS A KNAVE.) (* WHAT ARE A, B, C?) (*) (* EVERY (X) MEANS : X SAYS : WE ARE ALL KNAVES.) (* EXACT (X) MEANS : X SAYS : EXACTLY ONE OF US IS A KNAVE.) (*) (ALL X KNIGHT (X) EQV NOT KNAVE (X)) (ALL X NOT (KNIGHT (X) AND EVERY (X))) (ALL X (KNAVE (X) AND EVERY (X)) IMPL NOT (KNAVE (A) AND KNAVE (B) AND KNAVE (C))) (ALL X (KNAVE (X) AND EXACT (X)) IMPL NOT ((KNAVE (A) OR KNAVE (B) OR KNAVE (C)) AND NOT (KNAVE (A) AND KNAVE (B)) AND NOT (KNAVE (A) AND KNAVE (C)) AND NOT (KNAVE (B) AND KNAVE (C)))) (ALL X KNIGHT (X) AND EXACT (X) IMPL (KNAVE (A) OR KNAVE (B) OR KNAVE (C)) AND NOT (KNAVE (A) AND KNAVE (B)) AND NOT (KNAVE (A) AND KNAVE (C)) AND NOT (KNAVE (B) AND KNAVE (C))) (EVERY (A)) (EXACT (B)))) (QUOTE (COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT (ALL 2 (EQV (+ 3 (2) (KIND (EQV T 110))) (NOT (+ 4 (2) (KIND (EQV NIL 110)))))) (ALL 5 (NOT (AND (+ 3 (5) NIL) (+ 6 (5) NIL)))) (ALL 7 (IMPL (AND (+ 4 (7) NIL) (+ 6 (7) NIL)) (NOT (AND (+ 4 (8) NIL) (AND (+ 4 (9) NIL) (+ 4 (10) NIL)))))) (ALL 11 (IMPL (AND (+ 4 (11) NIL) (+ 12 (11) NIL)) (NOT (AND (OR (+ 4 (8) NIL) (OR (+ 4 (9) NIL) (+ 4 (10) NIL))) (AND (NOT (AND (+ 4 (8) NIL) (+ 4 (9) NIL))) (AND (NOT (AND (+ 4 (8) NIL) (+ 4 (10) NIL))) (NOT (AND (+ 4 (9) NIL) (+ 4 (10) NIL))))))))) (ALL 13 (IMPL (AND (+ 3 (13) NIL) (+ 12 (13) NIL)) (AND (OR (+ 4 (8) NIL) (OR (+ 4 (9) NIL) (+ 4 (10) NIL))) (AND (NOT (AND (+ 4 (8) NIL) (+ 4 (9) NIL))) (AND (NOT (AND (+ 4 (8) NIL) (+ 4 (10) NIL))) (NOT (AND (+ 4 (9) NIL) (+ 4 (10) NIL)))))))) (+ 6 (8) NIL) (+ 12 (9) NIL))) (QUOTE ((KNAVE (A) AND KNAVE (B) AND KNIGHT (B) AND KNIGHT (C)))) (QUOTE ((AND (+ 4 (8) NIL) (AND (+ 4 (9) NIL) (AND (+ 3 (9) NIL) (+ 3 (10) NIL)))))) (QUOTE ("Edit:     Axioms and Theorems edited: 07-DEC,1989 18:25 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(19874 19889 19894 19899 19904 19909 19914 19929 19934 19949 19964 19969 19984 19999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR)
          VARIABLE 15 "KNIGHT" NIL NIL (ANY) NIL NIL ((- 3 (POSITIVE))) ((+ 3 (NEGATIVE)))
          ((+ 3 (NIL))) ((- 3 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "KNAVE" NIL NIL
          (ANY) NIL NIL ((- 4 (POSITIVE))) ((+ 4 (NEGATIVE))) ((+ 4 (NIL))) ((- 4 (NIL))) NIL
          NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE
          15 "EVERY" NIL NIL (ANY) NIL NIL ((- 6 (POSITIVE))) ((+ 6 (NEGATIVE))) ((+ 6 (NIL)))
          ((- 6 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 ANY "A" (DT*ST-KIND NIL) CONSTANT 5 ANY
          "B" (DT*ST-KIND NIL) CONSTANT 5 ANY "C" (DT*ST-KIND NIL) CONSTANT 5 ANY NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 15 "EXACT" NIL NIL (ANY) NIL NIL
          ((- 12 (POSITIVE))) ((+ 12 (NEGATIVE))) ((+ 12 (NIL))) ((- 12 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 5 ANY NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 20000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 20000)
             (SETQ COUNTER1 14)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 20000)
                 (MEM-INITIALIZE 20000))
               (SETQ COUNTER1 14)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 20000) (+ 19869 INCREMENT) 19869))
      (SETQ MEM*NEXT.VADR 14
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (ANY))) (SETQ DT*SORT.NR (QUOTE 2)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (10 9 8))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE NIL)) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE NIL)) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (12 6 4 3 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (12 6 4 3 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
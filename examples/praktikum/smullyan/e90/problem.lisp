;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-
(PREP-PROBLEM.SPECIFICATION (QUOTE ((* PROBLEM E90.) (*) (* IN THIS AND THE NEXT TWO PROBLEMS THERE ARE AGAIN THREE INHABITANTS) (* A,B,C, EACH OF WHOM IS EITHER A KNIGHT OR A KNAVE. HOWEVER ONLY TWO) (* OF THEM, A, B, MAKE STATEMENTS. BUT IN THESE STATEMENTS, THE WORD US) (* REFERS TO THE THREE PEOPLE A,B,C - NOT TO JUST A AND B. SUPPOSE A,B MAKE) (* THE FOLLOWING STATEMENTS :) (* A : AT LEAST ONE OF THE THREE OF US IS A KNIGHT.) (* B : AT LEAST ONE OF THE THREE OF US IS A KNAVE.) (* GIVEN THAT AT LEAST ONE OF THEM IS A WEREWOLF, AND THAT NONE OF THEM) (* IS BOTH A KNIGHT AND A WEREWOLF, WHICH ONE ARE WEREWOLVES?) (*) (* WE DEFINE THE FOLLOWING PREDICATES :) (*) (* KNIGHT (X) ---MEANS THAT X IS A KNIGHT.) (* KNAVE (X) ---MEANS THAT X IS A KNAVE.) (* WEREWOLF (X) ---MEANS THAT X IS A WEREWOLF.) (* TRUTH (X) --- MEANS THAT THE STATEMENT X IS TRUE.) (* AT.LEAST.ONE.KNIGHT (X Y Z) ---MEANS THAT AT LEAST ONE OF X,Y,Z IS A KNIGHT.) (* AT.LEAST.ONE.KNAVE (X Y Z) ---MEANS THAT AT LEAST ONE OF X,Y,Z IS A KNAVE.) (* STATE.AT.LEAST.ONE.KNIGHT (U V W X) ---THE STATEMENT U MEANS THAT AT LEAST ONE OF V,W,X IS A KNIGHT.) (*) (* STATE.AT.LEAST.ONE.KNAVE (U V W X) ---THE STATEMENT U MEANS THAT AT LEAST) (* ONE OF V,W,X IS A KNAVE.) (*) (* WE DEFINE THE FOLLOWING FUNCTION :) (*) (* STATE (X) ---ASSIGNS EACH PERSON A STATEMENT.) (*) (TYPE A,B,C : PERSON) (TYPE KNAVE (PERSON)) (TYPE KNIGHT (PERSON)) (TYPE WEREWOLF (PERSON)) (TYPE TRUTH (STATEMENT)) (TYPE AT.LEAST.ONE.KNIGHT (PERSON PERSON PERSON)) (TYPE AT.LEAST.ONE.KNAVE (PERSON PERSON PERSON)) (TYPE STATE.AT.LEAST.ONE.KNIGHT (STATEMENT PERSON PERSON PERSON)) (TYPE STATE.AT.LEAST.ONE.KNAVE (STATEMENT PERSON PERSON PERSON)) (TYPE STATE (PERSON) : STATEMENT) (*) (* EVERY INHABITANT IS EITHER A KNIGHT OR A KNAVE :) (ALL X : PERSON KNIGHT (X) OR KNAVE (X)) (ALL X : PERSON NOT (KNIGHT (X) AND KNAVE (X))) (*) (* KNIGHTS ALWAYS TELL THE TRUTH AND KNAVES ALWAYS LIE :) (ALL X : PERSON KNIGHT (X) EQV TRUTH (STATE (X))) (ALL X : PERSON KNAVE (X) EQV NOT TRUTH (STATE (X))) (*) (* AT LEAST ONE OF THEM IS A WEREWOLF :) (WEREWOLF (A) OR WEREWOLF (B) OR WEREWOLF (C)) (*) (* NONE OF THEM IS BOTH A KNIGHT AND A WEREWOLF :) (ALL X : PERSON NOT (KNIGHT (X) AND WEREWOLF (X))) (*) (* EQUIVALENCES :) (ALL X,Y,Z : PERSON AT.LEAST.ONE.KNIGHT (X Y Z) EQV KNIGHT (X) OR KNIGHT (Y) OR KNIGHT (Z)) (ALL X,Y,Z : PERSON AT.LEAST.ONE.KNAVE (X Y Z) EQV KNAVE (X) OR KNAVE (Y) OR KNAVE (Z)) (*) (* IMPLICATIONS ABOUT STATEMENTS :) (ALL U : STATEMENT ALL V,W,X : PERSON STATE.AT.LEAST.ONE.KNIGHT (U V W X) AND TRUTH (U) IMPL AT.LEAST.ONE.KNIGHT (V W X)) (ALL U : STATEMENT ALL V,W,X : PERSON STATE.AT.LEAST.ONE.KNIGHT (U V W X) AND NOT TRUTH (U) IMPL NOT AT.LEAST.ONE.KNIGHT (V W X)) (ALL U : STATEMENT ALL V,W,X : PERSON STATE.AT.LEAST.ONE.KNAVE (U V W X) AND TRUTH (U) IMPL AT.LEAST.ONE.KNAVE (V W X)) (ALL U : STATEMENT ALL V,W,X : PERSON STATE.AT.LEAST.ONE.KNAVE (U V W X) AND NOT TRUTH (U) IMPL NOT AT.LEAST.ONE.KNAVE (V W X)) (*) (* ACTUAL STATEMENTS :) (STATE.AT.LEAST.ONE.KNIGHT (STATE (A) A B C)) (STATE.AT.LEAST.ONE.KNAVE (STATE (B) A B C)))) (QUOTE (COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT COMMENT (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) (+ 0 NIL) COMMENT COMMENT (ALL 14 (OR (+ 6 (14) NIL) (+ 5 (14) NIL))) (ALL 15 (NOT (AND (+ 6 (15) NIL) (+ 5 (15) NIL)))) COMMENT COMMENT (ALL 16 (EQV (+ 6 (16) (KIND (EQV T 470))) (+ 8 ((13 16)) (KIND (EQV NIL 470))))) (ALL 17 (EQV (+ 5 (17) (KIND (EQV T 480))) (NOT (+ 8 ((13 17)) (KIND (EQV NIL 480)))))) COMMENT COMMENT (OR (+ 7 (2) NIL) (OR (+ 7 (3) NIL) (+ 7 (4) NIL))) COMMENT COMMENT (ALL 18 (NOT (AND (+ 6 (18) NIL) (+ 7 (18) NIL)))) COMMENT COMMENT (ALL 21 (ALL 20 (ALL 19 (EQV (+ 9 (19 20 21) (KIND (EQV T 570))) (OR (+ 6 (19) (KIND (EQV NIL 570))) (OR (+ 6 (20) (KIND (EQV NIL 570))) (+ 6 (21) (KIND (EQV NIL 570))))))))) (ALL 24 (ALL 23 (ALL 22 (EQV (+ 10 (22 23 24) (KIND (EQV T 580))) (OR (+ 5 (22) (KIND (EQV NIL 580))) (OR (+ 5 (23) (KIND (EQV NIL 580))) (+ 5 (24) (KIND (EQV NIL 580))))))))) COMMENT COMMENT (ALL 25 (ALL 28 (ALL 27 (ALL 26 (IMPL (AND (+ 11 (25 26 27 28) NIL) (+ 8 (25) NIL)) (+ 9 (26 27 28) NIL)))))) (ALL 29 (ALL 32 (ALL 31 (ALL 30 (IMPL (AND (+ 11 (29 30 31 32) NIL) (NOT (+ 8 (29) NIL))) (NOT (+ 9 (30 31 32) NIL))))))) (ALL 33 (ALL 36 (ALL 35 (ALL 34 (IMPL (AND (+ 12 (33 34 35 36) NIL) (+ 8 (33) NIL)) (+ 10 (34 35 36) NIL)))))) (ALL 37 (ALL 40 (ALL 39 (ALL 38 (IMPL (AND (+ 12 (37 38 39 40) NIL) (NOT (+ 8 (37) NIL))) (NOT (+ 10 (38 39 40) NIL))))))) COMMENT COMMENT (+ 11 ((13 2) 2 3 4) NIL) (+ 12 ((13 3) 2 3 4) NIL))) (QUOTE ((WEREWOLF (C)))) (QUOTE ((+ 7 (4) NIL))) (QUOTE ("Edit:     Axioms and Theorems edited: 16-DEC,1989 01:34 ")) (PROGN(PROGN (DT-RESET))

(PROG ((ADDRLIST
        '(9690 9695 9700 9705 9710 9715 9720 9725 9730 9735 9740 9745 9750 9755 9760 9765 9770
          9775 9780 9785 9790 9795 9800 9805 9810 9815 9820 9834 9849 9864 9879 9894 9909 9924
          9939 9954 9959 9964 9969 9984 9999))
       (DATALIST
        '(15 "TRUE" NIL NIL NIL (DEFINED) NIL ((- 0 (POSITIVE))) ((+ 0 (NEGATIVE)))
          ((+ 0 (NIL))) ((- 0 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "FALSE" NIL NIL
          NIL (DEFINED) NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL)))
          NIL NIL (DT*ST-KIND NIL) PREDICATE 5 PERSON "A" (DT*ST-KIND NIL) CONSTANT 5 PERSON
          "B" (DT*ST-KIND NIL) CONSTANT 5 PERSON "C" (DT*ST-KIND NIL) CONSTANT 15 "KNAVE" NIL
          NIL (PERSON) NIL NIL ((- 5 (POSITIVE))) ((+ 5 (NEGATIVE))) ((+ 5 (NIL)))
          ((- 5 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 "KNIGHT" NIL NIL (PERSON) NIL
          NIL ((- 6 (POSITIVE))) ((+ 6 (NEGATIVE))) ((+ 6 (NIL))) ((- 6 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "WEREWOLF" NIL NIL (PERSON) NIL NIL ((- 7 (POSITIVE)))
          ((+ 7 (NEGATIVE))) ((+ 7 (NIL))) ((- 7 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
          "TRUTH" NIL NIL (STATEMENT) NIL NIL ((- 8 (POSITIVE))) ((+ 8 (NEGATIVE)))
          ((+ 8 (NIL))) ((- 8 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
          "AT.LEAST.ONE.KNIGHT" NIL NIL (PERSON PERSON PERSON) NIL NIL ((- 9 (POSITIVE)))
          ((+ 9 (NEGATIVE))) ((+ 9 (NIL))) ((- 9 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
          "AT.LEAST.ONE.KNAVE" NIL NIL (PERSON PERSON PERSON) NIL NIL ((- 10 (POSITIVE)))
          ((+ 10 (NEGATIVE))) ((+ 10 (NIL))) ((- 10 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE
          15 "STATE.AT.LEAST.ONE.KNIGHT" NIL NIL (STATEMENT PERSON PERSON PERSON) NIL NIL
          ((- 11 (POSITIVE))) ((+ 11 (NEGATIVE))) ((+ 11 (NIL))) ((- 11 (NIL))) NIL NIL
          (DT*ST-KIND NIL) PREDICATE 15 "STATE.AT.LEAST.ONE.KNAVE" NIL NIL
          (STATEMENT PERSON PERSON PERSON) NIL NIL ((- 12 (POSITIVE))) ((+ 12 (NEGATIVE)))
          ((+ 12 (NIL))) ((- 12 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 14 "STATE" NIL
          STATEMENT (PERSON) NIL NIL NIL NIL NIL 1 STATEMENT (DT*ST-KIND NIL) FUNCTION 5
          PERSON NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL
          (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE))
       (INCREMENT (- MEM*SIZE 10000))
       COUNTER1)
      (MEM-RESET)
      (COND ((> MEM*SIZE 10000)
             (SETQ COUNTER1 41)
             (MAPC #'(LAMBDA (RADDR)
                       (SETF (AREF MEM*MEMORY (DECF COUNTER1))
                              (COND ((EQL RADDR 'ATP.MEMORY.NIL) RADDR)
                                    ((EQL 'END RADDR) RADDR)
                                    ((OR (EQL RADDR 0)
                                         (MINUSP RADDR))
                                     RADDR)
                                    (T (+ RADDR INCREMENT)))))
                   ADDRLIST)
             (SETQ COUNTER1 MEM*SIZE)
             (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            (T (UNLESS (= MEM*SIZE 10000)
                 (MEM-INITIALIZE 10000))
               (SETQ COUNTER1 41)
               (MAPC #'(LAMBDA (RADDR) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) RADDR))
                     ADDRLIST)
               (SETQ COUNTER1 MEM*SIZE)
               (MAPC #'(LAMBDA (DATA) (SETF (AREF MEM*MEMORY (DECF COUNTER1)) DATA)) DATALIST))
            )
      (SETQ MEM*NEXT.RADR (IF (> MEM*SIZE 10000) (+ 9685 INCREMENT) 9685))
      (SETQ MEM*NEXT.VADR 41
            MEM*REST (- MEM*NEXT.RADR MEM*NEXT.VADR -1)
            MEM*FIRST.REUSABLE.VADR NIL
            MEM*LAST.REUSABLE.VADR NIL))

(PROGN (SETQ DT*SORT.ALL (QUOTE (STATEMENT PERSON ANY))) (SETQ DT*SORT.NR (QUOTE 4)) (SETQ DT*SORT.PROPERTIES (QUOTE (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT))) (SETQ DT*SORT.COMMON.COMPUTE.FLAG (QUOTE NIL)) (SETQ DT*VARIABLE.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.COUNTER (QUOTE 0)) (SETQ DT*CONSTANT.ALL (QUOTE (4 3 2))) (SETQ DT*ABBREVIATIONS (QUOTE NIL)) (SETQ DT*FUNCTION.COUNTER (QUOTE 0)) (SETQ DT*FUNCTION.ALL (QUOTE (13))) (SETQ DT*FUNCTION.ADMISSIBLE.THEORIES (QUOTE (ASSOCIATIVE))) (SETQ DT*FUNCTION.ACTUAL.THEORIES (QUOTE NIL)) (SETQ DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES (QUOTE NIL)) (SETQ DT*FUNCTION.COMPONENTS (QUOTE (PNAME ATTRIBUTES MAX.RANGE.SORT MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))) (SETQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (QUOTE (SYMMETRIC DEFINED REFLEXIVE))) (SETQ DT*PREDICATE.COUNTER (QUOTE 0)) (SETQ DT*EQUALITY.SYMBOLS (QUOTE ("=" ":=" "=:" ":=:"))) (SETQ DT*EQUALITY.PREDICATES (QUOTE NIL)) (SETQ DT*NONEQUALITY.PREDICATES (QUOTE (12 11 10 9 8 7 6 5 1 0))) (SETQ DT*PREDICATE.ALL (QUOTE (12 11 10 9 8 7 6 5 1 0))) (SETQ DT*PREDICATE.WITH.ATTRIBUTES (QUOTE NIL)) (SETQ DT*PREDICATE.COMPONENTS (QUOTE (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES -ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES))) (SETQ DT*TRUE.PREDICATE (QUOTE 0)) (SETQ DT*FALSE.PREDICATE (QUOTE 1)) (SETQ DT*UNI.CREATES.VARIABLES (QUOTE NIL)) (SETQ DT*SIGN.MINUS.SYMBOLS (QUOTE (- --))) (SETQ DT*SIGN.PLUS.SYMBOLS (QUOTE (+ ++))) (SETQ DT*SYMBOL.KINDS (QUOTE (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))) 
(PROGN) 
(PROGN (PROGN)) 
(PROGN (PROGN (SETF (GET (QUOTE STATEMENT) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE STATEMENT) (QUOTE DT*SORT.NUMBER)) (QUOTE 3)) (SETF (GET (QUOTE STATEMENT) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (STATEMENT))) (SETF (GET (QUOTE STATEMENT) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((STATEMENT STATEMENT) (PERSON) (ANY STATEMENT)))) (SETF (GET (QUOTE STATEMENT) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (STATEMENT))) (SETF (GET (QUOTE STATEMENT) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE STATEMENT) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY STATEMENT)))) (PROGN (SETF (GET (QUOTE PERSON) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE PERSON) (QUOTE DT*SORT.NUMBER)) (QUOTE 2)) (SETF (GET (QUOTE PERSON) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (PERSON))) (SETF (GET (QUOTE PERSON) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((STATEMENT) (PERSON PERSON) (ANY PERSON)))) (SETF (GET (QUOTE PERSON) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (PERSON))) (SETF (GET (QUOTE PERSON) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE (ANY))) (SETF (GET (QUOTE PERSON) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY PERSON)))) (PROGN (SETF (GET (QUOTE ANY) (QUOTE DT*SORT.NUMBER)) (QUOTE 1)) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUBSORTS)) (QUOTE (STATEMENT PERSON))) (SETF (GET (QUOTE ANY) (QUOTE DT*TRANSITIVE.CLOSURE)) (QUOTE (ANY STATEMENT PERSON))) (SETF (GET (QUOTE ANY) (QUOTE DT*MAX.SUBSORTS)) (QUOTE ((STATEMENT STATEMENT) (PERSON PERSON) (ANY ANY)))) (SETF (GET (QUOTE ANY) (QUOTE DT*MINIMAL.SUBSORTS)) (QUOTE (PERSON))) (SETF (GET (QUOTE ANY) (QUOTE DT*DIRECT.SUPERSORTS)) (QUOTE NIL)) (SETF (GET (QUOTE ANY) (QUOTE DT*INVERSE.TRANSITIVE.CLOSURE)) (QUOTE (ANY))))) ))
(COND ((FMT-LOAD "14-MAR-85 13:26:31"
NIL(((* PROBLEM E95) COMMENT COMMENT) ((*) COMMENT COMMENT) ((* DECLARATIONS:) COMMENT COMMENT) ((TYPE A:PERSON)
(+ 1 NIL) TYPE) ((*) COMMENT COMMENT) ((* FUNCTIONS:) COMMENT COMMENT) ((TYPE KNIGHT (PERSON) : STATEMENT) (+ 1
NIL) TYPE) ((TYPE KNAVE (PERSON) : STATEMENT) (+ 1 NIL) TYPE) ((TYPE RICH (PERSON) :STATEMENT) (+ 1 NIL) TYPE)
((TYPE POOR (PERSON) :STATEMENT) (+ 1 NIL) TYPE) ((TYPE NOT1 (STATEMENT) : STATEMENT) (+ 1 NIL) TYPE) ((TYPE AND2
(STATEMENT STATEMENT) :STATEMENT) (+ 1 NIL) TYPE) ((* PREDICATES:) COMMENT COMMENT) ((TYPE CORRECT (STATEMENT STATEMENT))
(+ 1 NIL) TYPE) ((TYPE SAYS (PERSON STATEMENT)) (+ 1 NIL) TYPE) ((*) COMMENT COMMENT) ((* EXPLANATIONS:) COMMENT
COMMENT) ((ASSOCIATIVE (AND2)) (+ 1 NIL) PROPERTY) ((ALL S,T,U: STATEMENT CORRECT (AND2 (S T) U) EQV CORRECT (S
U) AND CORRECT (T U)) (ALL 92 (ALL 91 (ALL 90 (EQV (+ 95 ((96 90 91) 92) NIL) (AND (+ 95 (90 92) NIL) (+ 95 (91
92) NIL)))))) QUANTIFICATION) ((ALL S,T:STATEMENT CORRECT (NOT1 (S) T) EQV NOT (CORRECT (S T))) (ALL 88 (ALL 87
(EQV (+ 95 ((97 87) 88) NIL) (NOT (+ 95 (87 88) NIL))))) QUANTIFICATION) ((*) COMMENT COMMENT) ((ALL S,T: STATEMENT
ALL P:PERSON SAYS (P S) EQV (CORRECT (KNIGHT (P) T) EQV CORRECT (S T))) (ALL 98 (ALL 89 (ALL 99 (EQV (+ 94 (99
89) NIL) (EQV (+ 95 ((79 99) 98) NIL) (+ 95 (89 98) NIL)))))) QUANTIFICATION) ((*) COMMENT COMMENT) ((* EVERY PERSON
IS EITHER A KNIGHT OR A KNAVE:) COMMENT COMMENT) ((ALL T:STATEMENT ALL P:PERSON CORRECT (KNIGHT (P) T) EQV NOT
(CORRECT (KNAVE (P) T))) (ALL 100 (ALL 101 (EQV (+ 95 ((79 101) 100) NIL) (NOT (+ 95 ((80 101) 100) NIL))))) 
QUANTIFICATION) ((*) COMMENT COMMENT) ((* EVERY PERSON IS EITHER RICH OR POOR:) COMMENT COMMENT) ((ALL T:STATEMENT
ALL P:PERSON CORRECT (RICH (P) T) EQV NOT CORRECT (POOR (P) T)) (ALL 102 (ALL 103 (EQV (+ 95 ((81 103) 102) NIL)
(NOT (+ 95 ((82 103) 102) NIL))))) QUANTIFICATION)))(COND (ST*LOAD.FLAG (PROGN (DT-RESET))
(MEM-RESTORE NIL NIL 104 10291 10500 (QUOTE (10296 10301 10306 10311 10316 10321 10409 10395 10381 10366 ATP.MEMORY.NIL
10341 10346 10351 10326 10331 10336 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 10423 10437 10451
10465 10470 ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL
ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL ATP.MEMORY.NIL 10485 10500))(QUOTE (15 TRUE NIL NIL NIL (DEFINED)
NIL ((- 1 (POSITIVE))) ((+ 1 (NEGATIVE))) ((+ 1 (NIL))) ((- 1 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15 FALSE
NIL NIL NIL (DEFINED) NIL ((- 2 (POSITIVE))) ((+ 2 (NEGATIVE))) ((+ 2 (NIL))) ((- 2 (NIL))) NIL NIL (DT*ST-KIND
NIL) PREDICATE 5 A PERSON (ST*ATTRIBUTE NIL DT*ST-KIND NIL) CONSTANT 14 KNIGHT NIL STATEMENT (PERSON) NIL NIL NIL
NIL NIL 1 STATEMENT (DT*ST-KIND NIL) FUNCTION 14 KNAVE NIL STATEMENT (PERSON) NIL NIL NIL NIL NIL 1 STATEMENT (
DT*ST-KIND NIL) FUNCTION 14 RICH NIL STATEMENT (PERSON) NIL NIL NIL NIL NIL 1 STATEMENT (DT*ST-KIND NIL) FUNCTION
14 POOR NIL STATEMENT (PERSON) NIL NIL NIL NIL NIL 1 STATEMENT (DT*ST-KIND NIL) FUNCTION 14 NOT1 NIL STATEMENT
(STATEMENT) NIL NIL NIL NIL NIL 1 STATEMENT (DT*ST-KIND NIL) FUNCTION 14 AND2 (ASSOCIATIVE) STATEMENT (STATEMENT
STATEMENT) NIL NIL NIL NIL NIL 2 STATEMENT (DT*ST-KIND NIL) FUNCTION 15 CORRECT NIL NIL (STATEMENT STATEMENT) NIL
NIL ((- 95 (POSITIVE))) ((+ 95 (NEGATIVE))) ((+ 95 (NIL))) ((- 95 (NIL))) NIL NIL (DT*ST-KIND NIL) PREDICATE 15
SAYS NIL NIL (PERSON STATEMENT) NIL NIL ((- 94 (POSITIVE))) ((+ 94 (NEGATIVE))) ((+ 94 (NIL))) ((- 94 (NIL))) NIL
NIL (DT*ST-KIND NIL) PREDICATE 5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE 5 STATEMENT NIL (ST*DATA NIL DT*ST-KIND SYS-VAR) VARIABLE 5 PERSON NIL (ST*DATA
NIL DT*ST-KIND SYS-VAR) VARIABLE)))(PROGN (RPAQQ DT*SORT.ALL (STATEMENT PERSON ANY)) (RPAQQ DT*SORT.NR 18) (RPAQQ
DT*SORT.PROPERTIES (DT*MAX.SUBSORTS DT*LEAST.SUPERSORTS DT*TRANSITIVE.CLOSURE DT*INVERSE.TRANSITIVE.CLOSURE 
DT*MINIMAL.SUBSORTS DT*DIRECT.SUBSORTS DT*DIRECT.SUPERSORTS DT*DISJOINT.SORTS DT*COMPLETION.SORT)) (RPAQQ 
DT*SORT.COMMON.COMPUTE.FLAG NIL) (RPAQQ DT*VARIABLE.COUNTER 0) (RPAQQ DT*CONSTANT.COUNTER 0) (RPAQQ DT*CONSTANT.ALL
(78)) (RPAQQ DT*ABBREVIATIONS NIL) (RPAQQ DT*FUNCTION.COUNTER 0) (RPAQQ DT*FUNCTION.ALL (96 97 82 81 80 79)) (RPAQQ
DT*FUNCTION.ADMISSIBLE.THEORIES (ASSOCIATIVE)) (RPAQQ DT*FUNCTION.ACTUAL.THEORIES (ASSOCIATIVE)) (RPAQQ 
DT*FUNCTION.WITH.ARGUMENT.SYMMETRIES NIL) (RPAQQ DT*FUNCTION.COMPONENTS (PNAME ATTRIBUTES MAX.RANGE.SORT 
MAX.DOMAIN.SORTS MIN.RANGE.SORTS SORT.LIST SORT.LIST.INVERSE SORT.TREE.CALC ARGUMENT.SYMMETRIES ARITY G.L.B.OF.RANGES))
(RPAQQ DT*PREDICATE.ADMISSABLE.ATTRIBUTES (SYMMETRIC DEFINED REFLEXIVE)) (RPAQQ DT*PREDICATE.COUNTER 0) (RPAQQ
DT*EQUALITY.SYMBOLS ("=" ":=" "=:" ":=:")) (RPAQQ DT*EQUALITY.PREDICATES NIL) (RPAQQ DT*NONEQUALITY.PREDICATES
(94 95 2 1)) (RPAQQ DT*PREDICATE.ALL (94 95 2 1)) (RPAQQ DT*PREDICATE.WITH.ATTRIBUTES NIL) (RPAQQ 
DT*PREDICATE.COMPONENTS (PNAME POSITIVE.OCCURRENCES NEGATIVE.OCCURRENCES DOMAINSORTS ATTRIBUTES REFL.CLAUSE +ROTHERSIDES
-ROTHERSIDES +SOTHERSIDES -SOTHERSIDES +TOTHERSIDES -TOTHERSIDES)) (RPAQQ DT*TRUE.PREDICATE 1) (RPAQQ DT*FALSE.PREDICATE
2) (RPAQQ DT*UNI.CREATES.VARIABLES NIL) (RPAQQ DT*SIGN.MINUS.SYMBOLS (- --)) (RPAQQ DT*SIGN.PLUS.SYMBOLS (+ ++))
(RPAQQ DT*SYMBOL.KINDS (CONSTANT.ALL FUNCTION.ALL PREDICATE.ALL)))
(PROGN)
(PROGN (SETPROPLIST (QUOTE DT*PREDICATE.WITH.ATTRIBUTES) (QUOTE NIL)))
(PROGN (SETPROPLIST (QUOTE STATEMENT) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (STATEMENT ANY) DT*DIRECT.SUPERSORTS
(ANY) DT*MINIMAL.SUBSORTS (STATEMENT) DT*MAX.SUBSORTS ((STATEMENT STATEMENT) (PERSON) (ANY STATEMENT)) 
DT*TRANSITIVE.CLOSURE (STATEMENT) DT*DIRECT.SUBSORTS NIL DT*ATTRIBUTE NIL DT*SORT.NUMBER 17))) (SETPROPLIST (QUOTE
PERSON) (QUOTE (DT*INVERSE.TRANSITIVE.CLOSURE (PERSON ANY) DT*DIRECT.SUPERSORTS (ANY) DT*MINIMAL.SUBSORTS (PERSON)
DT*MAX.SUBSORTS ((STATEMENT) (PERSON PERSON) (ANY PERSON)) DT*TRANSITIVE.CLOSURE (PERSON) DT*DIRECT.SUBSORTS NIL
DT*ATTRIBUTE NIL DT*SORT.NUMBER 16))) (SETPROPLIST (QUOTE ANY) (QUOTE (DT*LEAST.SUPERSORTS ((ANY ANY)) DT*ATTRIBUTE
NIL DT*INVERSE.TRANSITIVE.CLOSURE (ANY) DT*DIRECT.SUPERSORTS NIL DT*MINIMAL.SUBSORTS (PERSON) DT*MAX.SUBSORTS ((
STATEMENT STATEMENT) (PERSON PERSON) (ANY ANY)) DT*TRANSITIVE.CLOSURE (STATEMENT PERSON ANY) DT*SORT.NUMBER 1 
DT*DIRECT.SUBSORTS (STATEMENT PERSON)))))
(PROGN (RPAQQ ST*STACK1 (NIL ((X_103 PROGN (DT-VARIABLE.DELETE 103) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
X_103) ST*SYMBOL.ADDRESSES))) (X_102 PROGN (DT-VARIABLE.DELETE 102) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
X_102) ST*SYMBOL.ADDRESSES)))) NIL NIL ((X_101 PROGN (DT-VARIABLE.DELETE 101) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE X_101) ST*SYMBOL.ADDRESSES))) (X_100 PROGN (DT-VARIABLE.DELETE 100) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE X_100) ST*SYMBOL.ADDRESSES)))) NIL NIL ((X_99 PROGN (DT-VARIABLE.DELETE 99) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE X_99) ST*SYMBOL.ADDRESSES))) (X_98 PROGN (DT-VARIABLE.DELETE 98) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE
X_98) ST*SYMBOL.ADDRESSES))) (X_89 PROGN (DT-VARIABLE.DELETE 89) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_89)
ST*SYMBOL.ADDRESSES)))) NIL ((X_88 PROGN (DT-VARIABLE.DELETE 88) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_88)
ST*SYMBOL.ADDRESSES))) (X_87 PROGN (DT-VARIABLE.DELETE 87) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_87) 
ST*SYMBOL.ADDRESSES)))) ((X_92 PROGN (DT-VARIABLE.DELETE 92) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_92) 
ST*SYMBOL.ADDRESSES))) (X_91 PROGN (DT-VARIABLE.DELETE 91) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_91) 
ST*SYMBOL.ADDRESSES))) (X_90 PROGN (DT-VARIABLE.DELETE 90) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE X_90) 
ST*SYMBOL.ADDRESSES)))) ((AND2 PROG1 NIL (DT-FUNCTION.CHANGE 96 (QUOTE STATEMENT) (QUOTE (STATEMENT STATEMENT))
NIL) (DT-FUNCTION.PUT.ATTRIBUTES 96 (QUOTE NIL))) (AND2 PROG1 NIL (DT-PUTPROP 96 (QUOTE NIL)) (DT-PUTPROP 96 (QUOTE
NIL)))) NIL NIL ((SAYS PROGN (DT-PREDICATE.DELETE 94) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE SAYS) 
ST*SYMBOL.ADDRESSES)))) ((CORRECT PROGN (DT-PREDICATE.DELETE 95) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE CORRECT)
ST*SYMBOL.ADDRESSES)))) NIL ((AND2 PROGN (DT-FUNCTION.DELETE 96) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE AND2)
ST*SYMBOL.ADDRESSES)))) ((NOT1 PROGN (DT-FUNCTION.DELETE 97) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE NOT1) 
ST*SYMBOL.ADDRESSES)))) ((POOR PROGN (DT-FUNCTION.DELETE 82) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE POOR) 
ST*SYMBOL.ADDRESSES)))) ((RICH PROGN (DT-FUNCTION.DELETE 81) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE RICH) 
ST*SYMBOL.ADDRESSES)))) ((KNAVE PROGN (DT-FUNCTION.DELETE 80) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNAVE)
ST*SYMBOL.ADDRESSES)))) ((KNIGHT PROGN (DT-FUNCTION.DELETE 79) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE KNIGHT)
ST*SYMBOL.ADDRESSES))) (STATEMENT PROGN (DT-SORT.ST.REMOVE (QUOTE STATEMENT)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE STATEMENT) ST*SYMBOL.ADDRESSES))) (STATEMENT REMPROP (QUOTE STATEMENT) (QUOTE ST*DATA))) NIL NIL ((A PROGN
(DT-CONSTANT.DELETE 78) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE A) ST*SYMBOL.ADDRESSES))) (PERSON PROGN (
DT-SORT.ST.REMOVE (QUOTE PERSON)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC (QUOTE PERSON) ST*SYMBOL.ADDRESSES))) (PERSON
REMPROP (QUOTE PERSON) (QUOTE ST*DATA))) NIL NIL NIL ((FALSE PROGN (DT-PREDICATE.DELETE 2) (RPAQ ST*SYMBOL.ADDRESSES
(REMASSOC (QUOTE FALSE) ST*SYMBOL.ADDRESSES))) (TRUE PROGN (DT-PREDICATE.DELETE 1) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE TRUE) ST*SYMBOL.ADDRESSES))) (ANY PROGN (DT-SORT.ST.REMOVE (QUOTE ANY)) (RPAQ ST*SYMBOL.ADDRESSES (REMASSOC
(QUOTE ANY) ST*SYMBOL.ADDRESSES))) (ANY REMPROP (QUOTE ANY) (QUOTE ST*DATA))))) (RPAQQ ST*SYMBOL.ADDRESSES (NIL
(ANY . T) (TRUE . 1) (FALSE . 2) (PERSON . T) (A . 78) (STATEMENT . T) (KNIGHT . 79) (KNAVE . 80) (RICH . 81) (POOR
. 82) (NOT1 . 97) (AND2 . 96) (CORRECT . 95) (SAYS . 94) (X_90 . 90) (X_91 . 91) (X_92 . 92) (X_87 . 87) (X_88
. 88) (X_89 . 89) (X_98 . 98) (X_99 . 99) (X_100 . 100) (X_101 . 101) (X_102 . 102) (X_103 . 103))))))))STOP
 

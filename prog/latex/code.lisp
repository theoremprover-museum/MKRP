;;; -*- Package: MKRP; Base: 10; Mode: LISP; Syntax: Common-lisp -*-

(CONSTRUCTION  "Genera 8.0.1 Logical Pathnames Translation Files NEWEST IP-TCP 422.2 RPC 415.0 Embedding Support 407.0 UX Support 416.0 Experimental Network RPC 415.0 Experimental NFS Client 415.0 CLX 419.0 C Runtime 416.0 Compiler Tools Package 411.0 Compiler Tools Runtime 411.0 C Packages 413.0 Minimal Lexer Runtime 416.0 Lexer Package 415.0 Syntax Editor Runtime 411.0 Experimental X Server 409.0 X Remote Screen 418.1 KKL 20.1 HADES 16.0 Waltz 7.0 COLUMN 7.0 MKRP 49.6 GENTRAFO 1.0" "19-NOV,1991 11:11" 
   ("                                                                                                                     "
   "*********************************************************************************************************************"
   "                                                                                                                     "
   " FORMULA:  Date: 19-NOV,1991 10:56"
   "           Axioms und Theorems for this proof have been read from"
   "              Axiom-File: NIL"
   "            Theorem-File: NIL"
   "                                                                                                                     "
   "*********************************************************************************************************************"
   ))

(AXIOMS.INFIX    ((* AXIOMS *)
   (* GROUP *)
   (ALL |X,Y,Z| + (+ (X Y) Z) = + (X + (Y Z)))
   (ALL X + (0 X) = X)
   (ALL X + (- (X) X) = 0)))

(THEOREMS.INFIX ((* THEOREM *)
   (((ALL |X,Y| + (X Y) = + (Y X)) IMPL (ALL |X,Y| + (+ (X Y) + (X Y)) = + (+ (X X) + (Y Y)))) AND ((ALL |X,Y| + (+ (X Y) + (X Y)) = + (+ (X X) + (Y Y))) IMPL (ALL |X,Y| - (+ (X Y)) = + (- (X) - (Y)))) AND ((ALL |X,Y| - (+ (X Y)) = + (- (X) - (Y))) IMPL (ALL |X,Y| + (X Y) = + (Y X))))))

(AXIOMS.PREFIX   (COMMENT
   COMMENT
   (ALL 5 (ALL 4 (ALL 3 (+ 2 ((6 (6 3 4) 5) (6 3 (6 4 5))) NIL))))
   (ALL 7 (+ 2 ((6 8 7) 7) NIL))
   (ALL 9 (+ 2 ((6 (10 9) 9) 8) NIL))))

(THEOREMS.PREFIX (COMMENT
   (AND (IMPL (ALL 12 (ALL 11 (+ 2 ((6 11 12) (6 12 11)) NIL))) (ALL 14 (ALL 13 (+ 2 ((6 (6 13 14) (6 13 14)) (6 (6 13 13) (6 14 14))) NIL)))) (AND (IMPL (ALL 16 (ALL 15 (+ 2 ((6 (6 15 16) (6 15 16)) (6 (6 15 15) (6 16 16))) NIL))) (ALL 18 (ALL 17 (+ 2 ((10 (6 17 18)) (6 (10 17) (10 18))) NIL)))) (IMPL (ALL 20 (ALL 19 (+ 2 ((10 (6 19 20)) (6 (10 19) (10 20))) NIL))) (ALL 22 (ALL 21 (+ 2 ((6 21 22) (6 22 21)) NIL))))))))

(OPTIONS (TWO_RULES)
    (TWO_RULES.MAXLEVEL . 1)
    (TWO_SUPPRESS.NORULES)
    (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.I_CLAUSE.PURITY . PARTIAL)
    (RED.I_CLAUSE.TAUTOLOGY . T)
    (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
    (RED.I_CLAUSE.SUBSUMPTION . T)
    (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
    (RED.I_CLAUSE.REPL.FACTORING . T)
    (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.I_CLAUSE.REWRITING . DEM)
    (RED.I_LINK.INCOMPATIBILITY . T)
    (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.I_LINK.TAUTOLOGY.RECHECK)
    (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.I_LINK.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.D_CLAUSE.PURITY . PARTIAL)
    (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
    (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
    (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
    (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.REPL.FACTORING . T)
    (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.D_CLAUSE.REWRITING . DEM)
    (RED.D_LINK.INCOMPATIBILITY . T)
    (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_LINK.TAUTOLOGY.RECHECK)
    (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.D_LINK.SUBSUMPTION.RECHECK)
    (FAC_INITIAL)
    (FAC_EACH.STEP)
    (STR_RESOLUTION . SET-OF-SUPPORT)
    (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
    (STR_LINK.DEPTH)
    (STR_TERM.DEPTH)
    (STR_FINITE.DOMAIN . T)
    (TERM_UNITS . T)
    (TERM_ITERATIONS . 0)
    (TERM_SET.OF.SUPPORT)
    (TERM_BREADTH.FIRST)
    (SORT_LITERALS)
    (ER_PARAMODULATION . HEURISTIC-COMPLETION)
    (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
    (ER_COMPLETION . UNFAILING)
    (ER_CP.REDUCTION . T)
    (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
    (ER_OPERATOR.ORDERING * - + 0 1)
    (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
    (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ X (* 2 Y))) (* (X Y) (+ X (* X Y))) (- (X) (+ (* 2 X) -1)) (0 NIL 2) (1 NIL 2))
    (ER_NARROW.DEPTH . 0)
    (ER_NARROW.NEXT . DEPTH)
    (ER_NARROW.TEST NORM C DELTA SL N)
    (ER_COMPILE)
    (GEN_SPLITTING . 0)
    (GEN_PRESIMPLIFICATION . T)
    (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
    (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
    (GEN_MANUAL.CONTROL)
    (GEN_MAXIMUM.STEPS)
    (GEN_GRAPH.SAVING)
    (GEN_SAVE.FILE . SAVEDEFAULT)
    (GEN_LISP.GARBAGE.COLLECTION)
    (GEN_COMMON.LISP)
    (TR_PREPROCESSING)
    (TR_STEP.MODE . LR)
    (TR_DUMP)
    (TR_CLAUSE.MODE . I)
    (TR_LINK.MODE . I)
    (TR_TRACE.FILE)
    (TR_TERMINAL . T)
    (PR_LATEX)
    (PR_INFIX.FORM . T)
    (PR_PREFIX.FORM)
    (PR_OPTIONS)
    (PR_AXIOM.CLAUSES . T)
    (PR_SYMBOLS)
    (PR_DIRECT.PROOF . T)
    (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
    (PR_PROTOCOL . T)
    (PR_LEFT.MARGIN . 3)
    (PR_RIGHT.MARGIN . 117)
    (PR_LINELENGTH . 114)
    (PR_LITERALS)
   )

(LINK.COLOURS (R RIW RD S SI SIW SID T TI TIW P PIW PD RIWD))

(AXIOMS (START.TIME 397077184)
   (PARTIAL   (CLAUSE 25 R.= AXIOM ((23 . ANY)) ((+ 2 (23 23)) ))(CLAUSE 29 A1 AXIOM ((5 . ANY)(4 . ANY)(3 . ANY)) ((+ 2 ((6 (6 3 4) 5) (6 3 (6 4 5)))) )))
   (PARTIAL   (CLAUSE 36 A2 AXIOM ((7 . ANY)) ((+ 2 ((6 8 7) 7)) )))
   (PARTIAL   (CLAUSE 40 A3 AXIOM ((9 . ANY)) ((+ 2 ((6 (10 9) 9) 8)) )))
   (END.TIME 397079765)
   (FINAL 25 29 36 40)
   (SYMBOLS 
   (LET (NEW.ADDRESS)
   (LIST (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
   (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (CONS    8 (DT-CONSTANT.CREATE "0" 'ANY))
   (CONS   10 (DT-FUNCTION.CREATE "-" 'ANY '(ANY) 'NIL))
   (CONS    6 (DT-FUNCTION.CREATE "+" 'ANY '(ANY ANY) 'NIL)))))
   (RESULT))

(THEOREMS (SPLITPART.IDENTIFIER 1)
   (START.TIME 397085334)
   (PARTIAL   (CLAUSE 45 T4 THEOREM ((12 . ANY)(11 . ANY)) ((+ 2 ((6 11 12) (6 12 11))) )))
   (OPERATION (CLAUSE 40 A3 AXIOM ((9 . ANY)) ((+ 2 ((6 9 (10 9)) 8)) ))
   (REWRITE 45 1 40))
   (PARTIAL   (CLAUSE 60 T5 THEOREM () ((- 2 ((6 (6 44 43) (6 44 43)) (6 (6 44 44) (6 43 43)))) )))
   (OPERATION (CLAUSE 60 T5 THEOREM () ((- 2 ((6 44 (6 43 (6 44 43))) (6 (6 44 44) (6 43 43)))) ))
   (REWRITE 29 1 60))
   (OPERATION (CLAUSE 60 T5 THEOREM () ((- 2 ((6 44 (6 43 (6 44 43))) (6 44 (6 44 (6 43 43))))) ))
   (REWRITE 29 1 60))
   (INITIAL   (CLAUSE 25 R.= AXIOM ((23 . ANY)) ((+ 2 (23 23)) ))
(CLAUSE 29 A1 AXIOM ((5 . ANY)(4 . ANY)(3 . ANY)) ((+ 2 ((6 (6 3 4) 5) (6 3 (6 4 5)))) ))
(CLAUSE 36 A2 AXIOM ((7 . ANY)) ((+ 2 ((6 8 7) 7)) ))
(CLAUSE 40 A3 AXIOM ((9 . ANY)) ((+ 2 ((6 9 (10 9)) 8)) ))
(CLAUSE 45 T4 THEOREM ((12 . ANY)(11 . ANY)) ((+ 2 ((6 11 12) (6 12 11))) ))
(CLAUSE 60 T5 THEOREM () ((- 2 ((6 44 (6 43 (6 44 43))) (6 44 (6 44 (6 43 43))))) ))   )
   (END.TIME 397109225)
   (FINAL 25 29 36 40 45 60)
   (SYMBOLS 
   (LET (NEW.ADDRESS)
   (LIST (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
   (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (CONS   18 (DT-CONSTANT.CREATE "c_6" 'ANY))
   (CONS   17 (DT-CONSTANT.CREATE "c_5" 'ANY))
   (CONS   14 (DT-CONSTANT.CREATE "c_4" 'ANY))
   (CONS   13 (DT-CONSTANT.CREATE "c_3" 'ANY))
   (CONS   44 (DT-CONSTANT.CREATE "c_2" 'ANY))
   (CONS   43 (DT-CONSTANT.CREATE "c_1" 'ANY))
   (CONS    8 (DT-CONSTANT.CREATE "0" 'ANY))
   (CONS   10 (DT-FUNCTION.CREATE "-" 'ANY '(ANY) 'NIL))
   (CONS    6 (DT-FUNCTION.CREATE "+" 'ANY '(ANY ANY) 'NIL)))))
   (RESULT))

(THEOREMS (SPLITPART.IDENTIFIER 2)
   (START.TIME 397109897)
   (PARTIAL   (CLAUSE 45 T4 THEOREM ((16 . ANY)(15 . ANY)) ((+ 2 ((6 (6 15 16) (6 15 16)) (6 (6 15 15) (6 16 16)))) )))
   (OPERATION (CLAUSE 45 T4 THEOREM ((16 . ANY)(15 . ANY)) ((+ 2 ((6 15 (6 16 (6 15 16))) (6 (6 15 15) (6 16 16)))) ))
   (REWRITE 29 1 45))
   (OPERATION (CLAUSE 45 T4 THEOREM ((16 . ANY)(15 . ANY)) ((+ 2 ((6 15 (6 16 (6 15 16))) (6 15 (6 15 (6 16 16))))) ))
   (REWRITE 29 1 45))
   (PARTIAL   (CLAUSE 75 T5 THEOREM () ((- 2 ((10 (6 14 13)) (6 (10 14) (10 13)))) )))
   (INITIAL   (CLAUSE 25 R.= AXIOM ((23 . ANY)) ((+ 2 (23 23)) ))
(CLAUSE 29 A1 AXIOM ((5 . ANY)(4 . ANY)(3 . ANY)) ((+ 2 ((6 (6 3 4) 5) (6 3 (6 4 5)))) ))
(CLAUSE 36 A2 AXIOM ((7 . ANY)) ((+ 2 ((6 8 7) 7)) ))
(CLAUSE 40 A3 AXIOM ((9 . ANY)) ((+ 2 ((6 (10 9) 9) 8)) ))
(CLAUSE 45 T4 THEOREM ((16 . ANY)(15 . ANY)) ((+ 2 ((6 15 (6 16 (6 15 16))) (6 15 (6 15 (6 16 16))))) ))
(CLAUSE 75 T5 THEOREM () ((- 2 ((10 (6 14 13)) (6 (10 14) (10 13)))) ))   )
   (END.TIME 397146963)
   (FINAL 25 29 36 40 45 75)
   (SYMBOLS 
   (LET (NEW.ADDRESS)
   (LIST (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
   (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (CONS   18 (DT-CONSTANT.CREATE "c_6" 'ANY))
   (CONS   17 (DT-CONSTANT.CREATE "c_5" 'ANY))
   (CONS   14 (DT-CONSTANT.CREATE "c_4" 'ANY))
   (CONS   13 (DT-CONSTANT.CREATE "c_3" 'ANY))
   (CONS   44 (DT-CONSTANT.CREATE "c_2" 'ANY))
   (CONS   43 (DT-CONSTANT.CREATE "c_1" 'ANY))
   (CONS    8 (DT-CONSTANT.CREATE "0" 'ANY))
   (CONS   10 (DT-FUNCTION.CREATE "-" 'ANY '(ANY) 'NIL))
   (CONS    6 (DT-FUNCTION.CREATE "+" 'ANY '(ANY ANY) 'NIL)))))
   (RESULT))

(THEOREMS (SPLITPART.IDENTIFIER 3)
   (START.TIME 397147435)
   (PARTIAL   (CLAUSE 45 T4 THEOREM ((20 . ANY)(19 . ANY)) ((+ 2 ((10 (6 19 20)) (6 (10 19) (10 20)))) )))
   (PARTIAL   (CLAUSE 51 T5 THEOREM () ((- 2 ((6 18 17) (6 17 18))) )))
   (INITIAL   (CLAUSE 25 R.= AXIOM ((23 . ANY)) ((+ 2 (23 23)) ))
(CLAUSE 29 A1 AXIOM ((5 . ANY)(4 . ANY)(3 . ANY)) ((+ 2 ((6 (6 3 4) 5) (6 3 (6 4 5)))) ))
(CLAUSE 36 A2 AXIOM ((7 . ANY)) ((+ 2 ((6 8 7) 7)) ))
(CLAUSE 40 A3 AXIOM ((9 . ANY)) ((+ 2 ((6 (10 9) 9) 8)) ))
(CLAUSE 45 T4 THEOREM ((20 . ANY)(19 . ANY)) ((+ 2 ((10 (6 19 20)) (6 (10 19) (10 20)))) ))
(CLAUSE 51 T5 THEOREM () ((- 2 ((6 18 17) (6 17 18))) ))   )
   (END.TIME 397166927)
   (FINAL 25 29 36 40 45 51)
   (SYMBOLS 
   (LET (NEW.ADDRESS)
   (LIST (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
   (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (CONS   18 (DT-CONSTANT.CREATE "c_6" 'ANY))
   (CONS   17 (DT-CONSTANT.CREATE "c_5" 'ANY))
   (CONS   14 (DT-CONSTANT.CREATE "c_4" 'ANY))
   (CONS   13 (DT-CONSTANT.CREATE "c_3" 'ANY))
   (CONS   44 (DT-CONSTANT.CREATE "c_2" 'ANY))
   (CONS   43 (DT-CONSTANT.CREATE "c_1" 'ANY))
   (CONS    8 (DT-CONSTANT.CREATE "0" 'ANY))
   (CONS   10 (DT-FUNCTION.CREATE "-" 'ANY '(ANY) 'NIL))
   (CONS    6 (DT-FUNCTION.CREATE "+" 'ANY '(ANY ANY) 'NIL)))))
   (RESULT))
(indices ((51 9) (45 8) (75 7) (45 6) (60 5) (45 4) (40 3) (36 2) (29 1) (25 NIL)))

(SPLITPARTS "Genera 8.0.1 Logical Pathnames Translation Files NEWEST IP-TCP 422.2 RPC 415.0 Embedding Support 407.0 UX Support 416.0 Experimental Network RPC 415.0 Experimental NFS Client 415.0 CLX 419.0 C Runtime 416.0 Compiler Tools Package 411.0 Compiler Tools Runtime 411.0 C Packages 413.0 Minimal Lexer Runtime 416.0 Lexer Package 415.0 Syntax Editor Runtime 411.0 Experimental X Server 409.0 X Remote Screen 418.1 KKL 20.1 HADES 16.0 Waltz 7.0 COLUMN 7.0 MKRP 49.6 GENTRAFO 1.0" "19-NOV,1991 11:13" NIL)

(OPTIONS (TWO_RULES)
    (TWO_RULES.MAXLEVEL . 1)
    (TWO_SUPPRESS.NORULES)
    (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.I_CLAUSE.PURITY . PARTIAL)
    (RED.I_CLAUSE.TAUTOLOGY . T)
    (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
    (RED.I_CLAUSE.SUBSUMPTION . T)
    (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
    (RED.I_CLAUSE.REPL.FACTORING . T)
    (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.I_CLAUSE.REWRITING . DEM)
    (RED.I_LINK.INCOMPATIBILITY . T)
    (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.I_LINK.TAUTOLOGY.RECHECK)
    (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.I_LINK.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.D_CLAUSE.PURITY . PARTIAL)
    (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
    (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
    (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
    (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.REPL.FACTORING . T)
    (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.D_CLAUSE.REWRITING . DEM)
    (RED.D_LINK.INCOMPATIBILITY . T)
    (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_LINK.TAUTOLOGY.RECHECK)
    (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.D_LINK.SUBSUMPTION.RECHECK)
    (FAC_INITIAL)
    (FAC_EACH.STEP)
    (STR_RESOLUTION . SET-OF-SUPPORT)
    (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
    (STR_LINK.DEPTH)
    (STR_TERM.DEPTH)
    (STR_FINITE.DOMAIN . T)
    (TERM_UNITS . T)
    (TERM_ITERATIONS . 0)
    (TERM_SET.OF.SUPPORT)
    (TERM_BREADTH.FIRST)
    (SORT_LITERALS)
    (ER_PARAMODULATION . HEURISTIC-COMPLETION)
    (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
    (ER_COMPLETION . UNFAILING)
    (ER_CP.REDUCTION . T)
    (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
    (ER_OPERATOR.ORDERING * - + 0 1)
    (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
    (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ X (* 2 Y))) (* (X Y) (+ X (* X Y))) (- (X) (+ (* 2 X) -1)) (0 NIL 2) (1 NIL 2))
    (ER_NARROW.DEPTH . 0)
    (ER_NARROW.NEXT . DEPTH)
    (ER_NARROW.TEST NORM C DELTA SL N)
    (ER_COMPILE)
    (GEN_SPLITTING . 0)
    (GEN_PRESIMPLIFICATION . T)
    (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
    (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
    (GEN_MANUAL.CONTROL)
    (GEN_MAXIMUM.STEPS)
    (GEN_GRAPH.SAVING)
    (GEN_SAVE.FILE . SAVEDEFAULT)
    (GEN_LISP.GARBAGE.COLLECTION)
    (GEN_COMMON.LISP)
    (TR_PREPROCESSING)
    (TR_STEP.MODE . LR)
    (TR_DUMP)
    (TR_CLAUSE.MODE . I)
    (TR_LINK.MODE . I)
    (TR_TRACE.FILE)
    (TR_TERMINAL . T)
    (PR_LATEX)
    (PR_INFIX.FORM . T)
    (PR_PREFIX.FORM)
    (PR_OPTIONS)
    (PR_AXIOM.CLAUSES . T)
    (PR_SYMBOLS)
    (PR_DIRECT.PROOF . T)
    (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
    (PR_PROTOCOL . T)
    (PR_LEFT.MARGIN . 3)
    (PR_RIGHT.MARGIN . 117)
    (PR_LINELENGTH . 114)
    (PR_LITERALS)
   )

(REFUTATION (START.TIME 397183163)

(OPTIONS (TWO_RULES)
    (TWO_RULES.MAXLEVEL . 1)
    (TWO_SUPPRESS.NORULES)
    (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.I_CLAUSE.PURITY . PARTIAL)
    (RED.I_CLAUSE.TAUTOLOGY . T)
    (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
    (RED.I_CLAUSE.SUBSUMPTION . T)
    (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
    (RED.I_CLAUSE.REPL.FACTORING . T)
    (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.I_CLAUSE.REWRITING . DEM)
    (RED.I_LINK.INCOMPATIBILITY . T)
    (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.I_LINK.TAUTOLOGY.RECHECK)
    (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.I_LINK.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.D_CLAUSE.PURITY . PARTIAL)
    (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
    (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
    (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
    (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.REPL.FACTORING . T)
    (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.D_CLAUSE.REWRITING . DEM)
    (RED.D_LINK.INCOMPATIBILITY . T)
    (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_LINK.TAUTOLOGY.RECHECK)
    (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.D_LINK.SUBSUMPTION.RECHECK)
    (FAC_INITIAL)
    (FAC_EACH.STEP)
    (STR_RESOLUTION . SET-OF-SUPPORT)
    (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
    (STR_LINK.DEPTH)
    (STR_TERM.DEPTH)
    (STR_FINITE.DOMAIN . T)
    (TERM_UNITS . T)
    (TERM_ITERATIONS . 0)
    (TERM_SET.OF.SUPPORT)
    (TERM_BREADTH.FIRST)
    (SORT_LITERALS)
    (ER_PARAMODULATION . HEURISTIC-COMPLETION)
    (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
    (ER_COMPLETION . UNFAILING)
    (ER_CP.REDUCTION . T)
    (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
    (ER_OPERATOR.ORDERING * - + 0 1)
    (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
    (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ X (* 2 Y))) (* (X Y) (+ X (* X Y))) (- (X) (+ (* 2 X) -1)) (0 NIL 2) (1 NIL 2))
    (ER_NARROW.DEPTH . 0)
    (ER_NARROW.NEXT . DEPTH)
    (ER_NARROW.TEST NORM C DELTA SL N)
    (ER_COMPILE)
    (GEN_SPLITTING . 0)
    (GEN_PRESIMPLIFICATION . T)
    (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
    (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
    (GEN_MANUAL.CONTROL)
    (GEN_MAXIMUM.STEPS)
    (GEN_GRAPH.SAVING)
    (GEN_SAVE.FILE . SAVEDEFAULT)
    (GEN_LISP.GARBAGE.COLLECTION)
    (GEN_COMMON.LISP)
    (TR_PREPROCESSING)
    (TR_STEP.MODE . LR)
    (TR_DUMP)
    (TR_CLAUSE.MODE . I)
    (TR_LINK.MODE . I)
    (TR_TRACE.FILE)
    (TR_TERMINAL . T)
    (PR_LATEX)
    (PR_INFIX.FORM . T)
    (PR_PREFIX.FORM)
    (PR_OPTIONS)
    (PR_AXIOM.CLAUSES . T)
    (PR_SYMBOLS)
    (PR_DIRECT.PROOF . T)
    (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
    (PR_PROTOCOL . T)
    (PR_LEFT.MARGIN . 3)
    (PR_RIGHT.MARGIN . 117)
    (PR_LINELENGTH . 114)
    (PR_LITERALS)
   )
   (INITIAL   (CLAUSE 25 R.= AXIOM ((23 . ANY)) ((+ 2 (23 23)) ))
(CLAUSE 29 A1 AXIOM ((5 . ANY)(4 . ANY)(3 . ANY)) ((+ 2 ((6 (6 3 4) 5) (6 3 (6 4 5)))) ))
(CLAUSE 36 A2 AXIOM ((7 . ANY)) ((+ 2 ((6 8 7) 7)) ))
(CLAUSE 40 A3 AXIOM ((9 . ANY)) ((+ 2 ((6 9 (10 9)) 8)) ))
(CLAUSE 45 T4 THEOREM ((12 . ANY)(11 . ANY)) ((+ 2 ((6 11 12) (6 12 11))) ))
(CLAUSE 60 T5 THEOREM () ((- 2 ((6 44 (6 43 (6 44 43))) (6 44 (6 44 (6 43 43))))) ))   )
   (OPERATION (CLAUSE 63 P1 (36 45) ((37 . ANY)) ((+ 2 ((6 37 8) 37)) ))
   (PARAMODULATION 45 1 (1) 36 1 (1) NIL (11 8 12 7) 63))
   (OPERATION (CLAUSE 76 P2 (40 36) () ((+ 2 ((10 8) 8)) ))
   (PARAMODULATION 36 1 (1) 40 1 (1) NIL (9 8 7 (10 8)) 76))
   (OPERATION (CLAUSE 75 P3 (29 45) ((61 . ANY)(58 . ANY)(64 . ANY)) ((+ 2 ((6 64 (6 58 61)) (6 58 (6 61 64)))) ))
   (PARAMODULATION 45 1 (1) 29 1 (1) NIL (11 (6 3 4) 12 5) 75))
   (OPERATION (CLAUSE 60 T5 THEOREM () ((- 2 ((6 44 (6 44 (6 43 43))) (6 44 (6 44 (6 43 43))))) ))
   (REWRITE 75 1 60))
   (OPERATION (CLAUSE 60 T5 THEOREM () ())
   (REPLACEMENT.OPERATION NIL (60 25)
  (((60 . 1) (25 . 1) NIL))
  (NIL)
  NIL))
   (END.TIME 397241457)
   (SYMBOLS 
   (LET (NEW.ADDRESS)
   (LIST (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
   (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (CONS   18 (DT-CONSTANT.CREATE "c_6" 'ANY))
   (CONS   17 (DT-CONSTANT.CREATE "c_5" 'ANY))
   (CONS   14 (DT-CONSTANT.CREATE "c_4" 'ANY))
   (CONS   13 (DT-CONSTANT.CREATE "c_3" 'ANY))
   (CONS   44 (DT-CONSTANT.CREATE "c_2" 'ANY))
   (CONS   43 (DT-CONSTANT.CREATE "c_1" 'ANY))
   (CONS    8 (DT-CONSTANT.CREATE "0" 'ANY))
   (CONS   10 (DT-FUNCTION.CREATE "-" 'ANY '(ANY) 'NIL))
   (CONS    6 (DT-FUNCTION.CREATE "+" 'ANY '(ANY ANY) 'NIL)))))
   (SPLITPART.IDENTIFIER 1)
   (RESULT SUCCESS 60)
)

(REFUTATION (START.TIME 397250565)

(OPTIONS (TWO_RULES)
    (TWO_RULES.MAXLEVEL . 1)
    (TWO_SUPPRESS.NORULES)
    (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.I_CLAUSE.PURITY . PARTIAL)
    (RED.I_CLAUSE.TAUTOLOGY . T)
    (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
    (RED.I_CLAUSE.SUBSUMPTION . T)
    (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
    (RED.I_CLAUSE.REPL.FACTORING . T)
    (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.I_CLAUSE.REWRITING . DEM)
    (RED.I_LINK.INCOMPATIBILITY . T)
    (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.I_LINK.TAUTOLOGY.RECHECK)
    (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.I_LINK.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.D_CLAUSE.PURITY . PARTIAL)
    (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
    (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
    (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
    (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.REPL.FACTORING . T)
    (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.D_CLAUSE.REWRITING . DEM)
    (RED.D_LINK.INCOMPATIBILITY . T)
    (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_LINK.TAUTOLOGY.RECHECK)
    (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.D_LINK.SUBSUMPTION.RECHECK)
    (FAC_INITIAL)
    (FAC_EACH.STEP)
    (STR_RESOLUTION . SET-OF-SUPPORT)
    (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
    (STR_LINK.DEPTH)
    (STR_TERM.DEPTH)
    (STR_FINITE.DOMAIN . T)
    (TERM_UNITS . T)
    (TERM_ITERATIONS . 0)
    (TERM_SET.OF.SUPPORT)
    (TERM_BREADTH.FIRST)
    (SORT_LITERALS)
    (ER_PARAMODULATION . HEURISTIC-COMPLETION)
    (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
    (ER_COMPLETION . UNFAILING)
    (ER_CP.REDUCTION . T)
    (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
    (ER_OPERATOR.ORDERING * - + 0 1)
    (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
    (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ X (* 2 Y))) (* (X Y) (+ X (* X Y))) (- (X) (+ (* 2 X) -1)) (0 NIL 2) (1 NIL 2))
    (ER_NARROW.DEPTH . 0)
    (ER_NARROW.NEXT . DEPTH)
    (ER_NARROW.TEST NORM C DELTA SL N)
    (ER_COMPILE)
    (GEN_SPLITTING . 0)
    (GEN_PRESIMPLIFICATION . T)
    (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
    (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
    (GEN_MANUAL.CONTROL)
    (GEN_MAXIMUM.STEPS)
    (GEN_GRAPH.SAVING)
    (GEN_SAVE.FILE . SAVEDEFAULT)
    (GEN_LISP.GARBAGE.COLLECTION)
    (GEN_COMMON.LISP)
    (TR_PREPROCESSING)
    (TR_STEP.MODE . LR)
    (TR_DUMP)
    (TR_CLAUSE.MODE . I)
    (TR_LINK.MODE . I)
    (TR_TRACE.FILE)
    (TR_TERMINAL . T)
    (PR_LATEX)
    (PR_INFIX.FORM . T)
    (PR_PREFIX.FORM)
    (PR_OPTIONS)
    (PR_AXIOM.CLAUSES . T)
    (PR_SYMBOLS)
    (PR_DIRECT.PROOF . T)
    (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
    (PR_PROTOCOL . T)
    (PR_LEFT.MARGIN . 3)
    (PR_RIGHT.MARGIN . 117)
    (PR_LINELENGTH . 114)
    (PR_LITERALS)
   )
   (INITIAL   (CLAUSE 25 R.= AXIOM ((23 . ANY)) ((+ 2 (23 23)) ))
(CLAUSE 29 A1 AXIOM ((5 . ANY)(4 . ANY)(3 . ANY)) ((+ 2 ((6 (6 3 4) 5) (6 3 (6 4 5)))) ))
(CLAUSE 36 A2 AXIOM ((7 . ANY)) ((+ 2 ((6 8 7) 7)) ))
(CLAUSE 40 A3 AXIOM ((9 . ANY)) ((+ 2 ((6 (10 9) 9) 8)) ))
(CLAUSE 45 T4 THEOREM ((16 . ANY)(15 . ANY)) ((+ 2 ((6 15 (6 16 (6 15 16))) (6 15 (6 15 (6 16 16))))) ))
(CLAUSE 75 T5 THEOREM () ((- 2 ((10 (6 14 13)) (6 (10 14) (10 13)))) ))   )
   (OPERATION (CLAUSE 52 P1 (29 40) ((37 . ANY)(31 . ANY)) ((+ 2 ((6 8 31) (6 (10 37) (6 37 31)))) ))
   (PARAMODULATION 40 1 (1) 29 1 (1 1) NIL (3 (10 4) 9 4) 52))
   (OPERATION (CLAUSE 52 P1 (29 40) ((37 . ANY)(31 . ANY)) ((+ 2 (31 (6 (10 37) (6 37 31)))) ))
   (REWRITE 36 1 52))
   (OPERATION (CLAUSE 53 P2 (52 36) ((60 . ANY)) ((+ 2 (60 (6 (10 8) 60))) ))
   (PARAMODULATION 36 1 (1) 52 1 (2 2) NIL (37 8 7 31) 53))
   (OPERATION (CLAUSE 241 P3 (52 40) ((243 . ANY)) ((+ 2 (243 (6 (10 (10 243)) 8))) ))
   (PARAMODULATION 40 1 (1) 52 1 (2 2) NIL (37 (10 31) 9 31) 241))
   (OPERATION (CLAUSE 297 P4 (52 53) ((236 . ANY)) ((+ 2 (236 (6 (10 (10 8)) 236))) ))
   (PARAMODULATION 53 1 (2) 52 1 (2 2) NIL (37 (10 8) 60 31) 297))
   (OPERATION (CLAUSE 311 P5 (40 297) () ((+ 2 ((10 8) 8)) ))
   (PARAMODULATION 297 1 (2) 40 1 (1) NIL (9 (10 8) 236 (10 8)) 311))
   (OPERATION (CLAUSE 53 P2 (52 36) ((60 . ANY)) ((+ 2 (60 (6 8 60))) ))
   (REWRITE 311 1 53))
   (OPERATION (CLAUSE 53 P2 (52 36) ((60 . ANY)) ((+ 2 (60 60)) ))
   (REWRITE 36 1 53))
   (OPERATION (CLAUSE 297 P4 (52 53) ((236 . ANY)) ((+ 2 (236 (6 (10 8) 236))) ))
   (REWRITE 311 1 297))
   (OPERATION (CLAUSE 297 P4 (52 53) ((236 . ANY)) ((+ 2 (236 (6 8 236))) ))
   (REWRITE 311 1 297))
   (OPERATION (CLAUSE 297 P4 (52 53) ((236 . ANY)) ((+ 2 (236 236)) ))
   (REWRITE 36 1 297))
   (OPERATION (CLAUSE 313 P6 (45 52) ((246 . ANY)(363 . ANY)) ((+ 2 ((6 (10 363) (6 (6 363 246) 246)) (6 (10 363) (6 (10 363) (6 (6 363 246) (6 363 246)))))) ))
   (PARAMODULATION 52 1 (2) 45 1 (1 2 2) NIL (15 (10 37) 16 (6 37 31)) 313))
   (OPERATION (CLAUSE 313 P6 (45 52) ((246 . ANY)(363 . ANY)) ((+ 2 ((6 (10 363) (6 363 (6 246 246))) (6 (10 363) (6 (10 363) (6 (6 363 246) (6 363 246)))))) ))
   (REWRITE 29 1 313))
   (OPERATION (CLAUSE 313 P6 (45 52) ((363 . ANY)(246 . ANY)) ((+ 2 ((6 246 246) (6 (10 363) (6 (10 363) (6 (6 363 246) (6 363 246)))))) ))
   (REWRITE 52 1 313))
   (OPERATION (CLAUSE 313 P6 (45 52) ((363 . ANY)(246 . ANY)) ((+ 2 ((6 246 246) (6 (10 363) (6 (10 363) (6 363 (6 246 (6 363 246))))))) ))
   (REWRITE 29 1 313))
   (OPERATION (CLAUSE 313 P6 (45 52) ((363 . ANY)(246 . ANY)) ((+ 2 ((6 246 246) (6 (10 363) (6 246 (6 363 246))))) ))
   (REWRITE 52 1 313))
   (OPERATION (CLAUSE 364 P7 (313 241) ((58 . ANY)) ((+ 2 ((6 8 8) (6 (10 (10 (10 58))) (6 8 58)))) ))
   (PARAMODULATION 241 1 (2) 313 1 (2 2 2) NIL (363 (10 (10 243)) 246 8) 364))
   (OPERATION (CLAUSE 364 P7 (313 241) ((58 . ANY)) ((+ 2 (8 (6 (10 (10 (10 58))) (6 8 58)))) ))
   (REWRITE 36 1 364))
   (OPERATION (CLAUSE 364 P7 (313 241) ((58 . ANY)) ((+ 2 (8 (6 (10 (10 (10 58))) 58))) ))
   (REWRITE 36 1 364))
   (OPERATION (CLAUSE 304 P8 (52 364) ((449 . ANY)) ((+ 2 (449 (6 (10 (10 (10 (10 449)))) 8))) ))
   (PARAMODULATION 364 1 (2) 52 1 (2 2) NIL (37 (10 (10 (10 31))) 58 31) 304))
   (OPERATION (CLAUSE 304 P8 (52 364) ((449 . ANY)) ((+ 2 (449 (10 (10 449)))) ))
   (REWRITE 241 1 304))
   (OPERATION (CLAUSE 241 P3 (52 40) ((243 . ANY)) ((+ 2 (243 (6 243 8))) ))
   (REWRITE 304 1 241))
   (OPERATION (CLAUSE 364 P7 (313 241) ((58 . ANY)) ((+ 2 (8 (6 (10 58) 58))) ))
   (REWRITE 304 1 364))
   (OPERATION (CLAUSE 364 P7 (313 241) () ((+ 2 (8 8)) ))
   (REWRITE 40 1 364))
   (OPERATION (CLAUSE 512 P9 (40 304) ((515 . ANY)) ((+ 2 ((6 515 (10 515)) 8)) ))
   (PARAMODULATION 304 1 (2) 40 1 (1 1) NIL (9 (10 449)) 512))
   (OPERATION (CLAUSE 507 P10 (52 304) ((237 . ANY)(504 . ANY)) ((+ 2 (504 (6 237 (6 (10 237) 504)))) ))
   (PARAMODULATION 304 1 (2) 52 1 (2 1) NIL (37 (10 449)) 507))
   (OPERATION (CLAUSE 614 P11 (313 40) ((618 . ANY)) ((+ 2 ((6 618 618) (6 (10 (10 618)) (6 618 8)))) ))
   (PARAMODULATION 40 1 (1) 313 1 (2 2 2) NIL (363 (10 246) 9 246) 614))
   (OPERATION (CLAUSE 614 P11 (313 40) ((618 . ANY)) ((+ 2 ((6 618 618) (6 (10 (10 618)) 618))) ))
   (REWRITE 241 1 614))
   (OPERATION (CLAUSE 614 P11 (313 40) ((618 . ANY)) ((+ 2 ((6 618 618) (6 618 618))) ))
   (REWRITE 304 1 614))
   (OPERATION (CLAUSE 717 P12 (29 512) ((721 . ANY)(720 . ANY)) ((+ 2 (8 (6 720 (6 721 (10 (6 720 721)))))) ))
   (PARAMODULATION 512 1 (1) 29 1 (1) NIL (515 (6 3 4) 5 (10 (6 3 4))) 717))
   (OPERATION (CLAUSE 608 P13 (52 717) ((724 . ANY)(511 . ANY)) ((+ 2 ((6 511 (10 (6 724 511))) (6 (10 724) 8))) ))
   (PARAMODULATION 717 1 (2) 52 1 (2 2) NIL (720 37 31 (6 721 (10 (6 37 721)))) 608))
   (OPERATION (CLAUSE 608 P13 (52 717) ((724 . ANY)(511 . ANY)) ((+ 2 ((6 511 (10 (6 724 511))) (10 724))) ))
   (REWRITE 241 1 608))
   (OPERATION (CLAUSE 717 P12 (29 512) ((720 . ANY)) ((+ 2 (8 (6 720 (10 720)))) ))
   (REWRITE 608 1 717))
   (OPERATION (CLAUSE 717 P12 (29 512) () ((+ 2 (8 8)) ))
   (REWRITE 512 1 717))
   (OPERATION (CLAUSE 516 P14 (608 313) ((719 . ANY)(718 . ANY)) ((+ 2 ((6 (6 718 (6 719 718)) (10 (6 718 718))) (10 (10 719)))) ))
   (PARAMODULATION 313 1 (2) 608 1 (1 2 1) NIL (724 (10 363) 511 (6 246 (6 363 246))) 516))
   (OPERATION (CLAUSE 516 P14 (608 313) ((719 . ANY)(718 . ANY)) ((+ 2 ((6 (6 718 (6 719 718)) (10 (6 718 718))) 719)) ))
   (REWRITE 304 1 516))
   (OPERATION (CLAUSE 516 P14 (608 313) ((719 . ANY)(718 . ANY)) ((+ 2 ((6 718 (6 (6 719 718) (10 (6 718 718)))) 719)) ))
   (REWRITE 29 1 516))
   (OPERATION (CLAUSE 516 P14 (608 313) ((719 . ANY)(718 . ANY)) ((+ 2 ((6 718 (6 719 (6 718 (10 (6 718 718))))) 719)) ))
   (REWRITE 29 1 516))
   (OPERATION (CLAUSE 516 P14 (608 313) ((719 . ANY)(718 . ANY)) ((+ 2 ((6 718 (6 719 (10 718))) 719)) ))
   (REWRITE 608 1 516))
   (OPERATION (CLAUSE 839 P15 (507 516) ((603 . ANY)(837 . ANY)) ((+ 2 ((6 837 (10 (10 603))) (6 603 837))) ))
   (PARAMODULATION 516 1 (1) 507 1 (2 2) NIL (718 (10 237) 504 (6 719 (10 (10 237)))) 839))
   (OPERATION (CLAUSE 839 P15 (507 516) ((603 . ANY)(837 . ANY)) ((+ 2 ((6 837 603) (6 603 837))) ))
   (REWRITE 304 1 839))
   (OPERATION (CLAUSE 40 A3 AXIOM ((9 . ANY)) ((+ 2 ((6 9 (10 9)) 8)) ))
   (REWRITE 839 1 40))
   (OPERATION (CLAUSE 40 A3 AXIOM () ((+ 2 (8 8)) ))
   (REWRITE 512 1 40))
   (OPERATION (CLAUSE 726 P16 (516 304) ((621 . ANY)(39 . ANY)) ((+ 2 ((6 (10 39) (6 621 39)) 621)) ))
   (PARAMODULATION 304 1 (2) 516 1 (1 2 2) NIL (718 (10 449)) 726))
   (OPERATION (CLAUSE 1070 P17 (726 516) ((1065 . ANY)(937 . ANY)) ((+ 2 ((6 (10 (6 937 (10 1065))) 937) 1065)) ))
   (PARAMODULATION 516 1 (1) 726 1 (1 2) NIL (718 621 39 (6 719 (10 621))) 1070))
   (OPERATION (CLAUSE 1070 P17 (726 516) ((1065 . ANY)(937 . ANY)) ((+ 2 ((6 937 (10 (6 937 (10 1065)))) 1065)) ))
   (REWRITE 839 1 1070))
   (OPERATION (CLAUSE 1071 P18 (1070 304) ((1072 . ANY)(1046 . ANY)) ((+ 2 ((6 1046 (10 (6 1046 1072))) (10 1072))) ))
   (PARAMODULATION 304 1 (2) 1070 1 (1 2 1 2) NIL (1065 (10 449)) 1071))
   (OPERATION (CLAUSE 1070 P17 (726 516) ((1065 . ANY)) ((+ 2 ((10 (10 1065)) 1065)) ))
   (REWRITE 1071 1 1070))
   (OPERATION (CLAUSE 1070 P17 (726 516) ((1065 . ANY)) ((+ 2 (1065 1065)) ))
   (REWRITE 304 1 1070))
   (OPERATION (CLAUSE 1495 P19 (52 313) ((1069 . ANY)(1773 . ANY)) ((+ 2 ((6 1773 (6 1069 1773)) (6 (10 (10 1069)) (6 1773 1773)))) ))
   (PARAMODULATION 313 1 (2) 52 1 (2 2) NIL (37 (10 363) 31 (6 246 (6 363 246))) 1495))
   (OPERATION (CLAUSE 1495 P19 (52 313) ((1069 . ANY)(1773 . ANY)) ((+ 2 ((6 1773 (6 1069 1773)) (6 1069 (6 1773 1773)))) ))
   (REWRITE 304 1 1495))
   (OPERATION (CLAUSE 1794 P20 (52 608) ((67 . ANY)(310 . ANY)) ((+ 2 ((10 (6 310 67)) (6 (10 67) (10 310)))) ))
   (PARAMODULATION 608 1 (1) 52 1 (2 2) NIL (511 37 31 (10 (6 724 37))) 1794))
   (OPERATION (CLAUSE 1614 P21 (1794 839) ((1606 . ANY)(1605 . ANY)) ((+ 2 ((10 (6 1605 1606)) (6 (10 1605) (10 1606)))) ))
   (PARAMODULATION 839 1 (1) 1794 1 (1 1) NIL (837 310 603 67) 1614))
   (OPERATION (CLAUSE 1614 P21 (1794 839) ((1606 . ANY)(1605 . ANY)) ((+ 2 ((10 (6 1605 1606)) (6 (10 1605) (10 1606)))) ))
   (REPLACEMENT.OPERATION (1605 14 1606 13) (1614 75)
  (((1614 . 1) (75 . 1) SYMMETRIC))
  (NIL)
  NIL))
   (END.TIME 397458662)
   (SYMBOLS 
   (LET (NEW.ADDRESS)
   (LIST (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
   (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (CONS   18 (DT-CONSTANT.CREATE "c_6" 'ANY))
   (CONS   17 (DT-CONSTANT.CREATE "c_5" 'ANY))
   (CONS   14 (DT-CONSTANT.CREATE "c_4" 'ANY))
   (CONS   13 (DT-CONSTANT.CREATE "c_3" 'ANY))
   (CONS   44 (DT-CONSTANT.CREATE "c_2" 'ANY))
   (CONS   43 (DT-CONSTANT.CREATE "c_1" 'ANY))
   (CONS    8 (DT-CONSTANT.CREATE "0" 'ANY))
   (CONS   10 (DT-FUNCTION.CREATE "-" 'ANY '(ANY) 'NIL))
   (CONS    6 (DT-FUNCTION.CREATE "+" 'ANY '(ANY ANY) 'NIL)))))
   (SPLITPART.IDENTIFIER 2)
   (RESULT SUCCESS 1614)
)

(REFUTATION (START.TIME 397466447)

(OPTIONS (TWO_RULES)
    (TWO_RULES.MAXLEVEL . 1)
    (TWO_SUPPRESS.NORULES)
    (RED.I_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.I_CLAUSE.PURITY . PARTIAL)
    (RED.I_CLAUSE.TAUTOLOGY . T)
    (RED.I_CLAUSE.TAUTOLOGY.RECHECK . PARTIAL)
    (RED.I_CLAUSE.SUBSUMPTION . T)
    (RED.I_CLAUSE.SUBSUMPTION.RECHECK . PARTIAL)
    (RED.I_CLAUSE.REPL.FACTORING . T)
    (RED.I_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.I_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.I_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.I_CLAUSE.REWRITING . DEM)
    (RED.I_LINK.INCOMPATIBILITY . T)
    (RED.I_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.I_LINK.TAUTOLOGY.RECHECK)
    (RED.I_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.I_LINK.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.MULTIPLE.LITERALS . T)
    (RED.D_CLAUSE.PURITY . PARTIAL)
    (RED.D_CLAUSE.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_CLAUSE.TAUTOLOGY.RECHECK)
    (RED.D_CLAUSE.SUBSUMPTION.FORWARD . REMOVE-INHIBIT)
    (RED.D_CLAUSE.SUBSUMPTION.BACKWARD . REMOVE)
    (RED.D_CLAUSE.SUBSUMPTION.RECHECK)
    (RED.D_CLAUSE.REPL.FACTORING . T)
    (RED.D_CLAUSE.REPL.FACTORING.RECHECK . T)
    (RED.D_CLAUSE.REPL.RESOLUTION . SIMPLE)
    (RED.D_CLAUSE.REPL.RESOLUTION.RECHECK . T)
    (RED.D_CLAUSE.REWRITING . DEM)
    (RED.D_LINK.INCOMPATIBILITY . T)
    (RED.D_LINK.TAUTOLOGY . REMOVE-INHIBIT)
    (RED.D_LINK.TAUTOLOGY.RECHECK)
    (RED.D_LINK.SUBSUMPTION . REMOVE-INHIBIT)
    (RED.D_LINK.SUBSUMPTION.RECHECK)
    (FAC_INITIAL)
    (FAC_EACH.STEP)
    (STR_RESOLUTION . SET-OF-SUPPORT)
    (STR_R.SELECTION * 10 (+ 2 VARIABLES (* 2 DEPTH) (* 3 NOLIT)))
    (STR_LINK.DEPTH)
    (STR_TERM.DEPTH)
    (STR_FINITE.DOMAIN . T)
    (TERM_UNITS . T)
    (TERM_ITERATIONS . 0)
    (TERM_SET.OF.SUPPORT)
    (TERM_BREADTH.FIRST)
    (SORT_LITERALS)
    (ER_PARAMODULATION . HEURISTIC-COMPLETION)
    (ER_P.SELECTION * WEIGHT (IF SUPPORT 1 1.5) (IF EQUATIONAL 1 2))
    (ER_COMPLETION . UNFAILING)
    (ER_CP.REDUCTION . T)
    (ER_ORDERING . LEXICOGRAPHIC-RECURSIVE-PATH)
    (ER_OPERATOR.ORDERING * - + 0 1)
    (ER_KNUTH.BENDIX.WEIGHT (+ 1) (* 1) (- 0) (0 1) (1 1))
    (ER_POLYNOMIAL.WEIGHT (+ (X Y) (+ X (* 2 Y))) (* (X Y) (+ X (* X Y))) (- (X) (+ (* 2 X) -1)) (0 NIL 2) (1 NIL 2))
    (ER_NARROW.DEPTH . 0)
    (ER_NARROW.NEXT . DEPTH)
    (ER_NARROW.TEST NORM C DELTA SL N)
    (ER_COMPILE)
    (GEN_SPLITTING . 0)
    (GEN_PRESIMPLIFICATION . T)
    (GEN_MIN.EXPRESSION.LENGTH.FOR.FILE)
    (GEN_MIN.EXPRESSION.SIZE.FOR.FILE)
    (GEN_MANUAL.CONTROL)
    (GEN_MAXIMUM.STEPS)
    (GEN_GRAPH.SAVING)
    (GEN_SAVE.FILE . SAVEDEFAULT)
    (GEN_LISP.GARBAGE.COLLECTION)
    (GEN_COMMON.LISP)
    (TR_PREPROCESSING)
    (TR_STEP.MODE . LR)
    (TR_DUMP)
    (TR_CLAUSE.MODE . I)
    (TR_LINK.MODE . I)
    (TR_TRACE.FILE)
    (TR_TERMINAL . T)
    (PR_LATEX)
    (PR_INFIX.FORM . T)
    (PR_PREFIX.FORM)
    (PR_OPTIONS)
    (PR_AXIOM.CLAUSES . T)
    (PR_SYMBOLS)
    (PR_DIRECT.PROOF . T)
    (PR_VARIABLE.PRINT.NAMES X Y Z U V W XX YY ZZ UU VV WW XXX YYY ZZZ UUU VVV WWW)
    (PR_PROTOCOL . T)
    (PR_LEFT.MARGIN . 3)
    (PR_RIGHT.MARGIN . 117)
    (PR_LINELENGTH . 114)
    (PR_LITERALS)
   )
   (INITIAL   (CLAUSE 25 R.= AXIOM ((23 . ANY)) ((+ 2 (23 23)) ))
(CLAUSE 29 A1 AXIOM ((5 . ANY)(4 . ANY)(3 . ANY)) ((+ 2 ((6 (6 3 4) 5) (6 3 (6 4 5)))) ))
(CLAUSE 36 A2 AXIOM ((7 . ANY)) ((+ 2 ((6 8 7) 7)) ))
(CLAUSE 40 A3 AXIOM ((9 . ANY)) ((+ 2 ((6 (10 9) 9) 8)) ))
(CLAUSE 45 T4 THEOREM ((20 . ANY)(19 . ANY)) ((+ 2 ((10 (6 19 20)) (6 (10 19) (10 20)))) ))
(CLAUSE 51 T5 THEOREM () ((- 2 ((6 18 17) (6 17 18))) ))   )
   (OPERATION (CLAUSE 42 P1 (45 40) ((31 . ANY)) ((+ 2 ((10 8) (6 (10 (10 31)) (10 31)))) ))
   (PARAMODULATION 40 1 (1) 45 1 (1 1) NIL (19 (10 20) 9 20) 42))
   (OPERATION (CLAUSE 42 P1 (45 40) () ((+ 2 ((10 8) 8)) ))
   (REWRITE 40 1 42))
   (OPERATION (CLAUSE 86 P2 (40 45) ((47 . ANY)(49 . ANY)) ((+ 2 ((6 (6 (10 49) (10 47)) (6 49 47)) 8)) ))
   (PARAMODULATION 45 1 (1) 40 1 (1 1) NIL (9 (6 19 20)) 86))
   (OPERATION (CLAUSE 86 P2 (40 45) ((47 . ANY)(49 . ANY)) ((+ 2 ((6 (10 49) (6 (10 47) (6 49 47))) 8)) ))
   (REWRITE 29 1 86))
   (OPERATION (CLAUSE 88 P3 (86 42) ((94 . ANY)) ((+ 2 ((6 (10 94) (6 8 (6 94 8))) 8)) ))
   (PARAMODULATION 42 1 (1) 86 1 (1 2 1) NIL (47 8) 88))
   (OPERATION (CLAUSE 88 P3 (86 42) ((94 . ANY)) ((+ 2 ((6 (10 94) (6 94 8)) 8)) ))
   (REWRITE 36 1 88))
   (OPERATION (CLAUSE 132 P4 (29 88) ((91 . ANY)(138 . ANY)) ((+ 2 ((6 8 138) (6 (10 91) (6 (6 91 8) 138)))) ))
   (PARAMODULATION 88 1 (1) 29 1 (1 1) NIL (3 (10 94) 4 (6 94 8)) 132))
   (OPERATION (CLAUSE 132 P4 (29 88) ((91 . ANY)(138 . ANY)) ((+ 2 (138 (6 (10 91) (6 (6 91 8) 138)))) ))
   (REWRITE 36 1 132))
   (OPERATION (CLAUSE 132 P4 (29 88) ((91 . ANY)(138 . ANY)) ((+ 2 (138 (6 (10 91) (6 91 (6 8 138))))) ))
   (REWRITE 29 1 132))
   (OPERATION (CLAUSE 132 P4 (29 88) ((91 . ANY)(138 . ANY)) ((+ 2 (138 (6 (10 91) (6 91 138)))) ))
   (REWRITE 36 1 132))
   (OPERATION (CLAUSE 171 P5 (132 40) ((96 . ANY)) ((+ 2 (96 (6 (10 (10 96)) 8))) ))
   (PARAMODULATION 40 1 (1) 132 1 (2 2) NIL (91 (10 138) 9 138) 171))
   (OPERATION (CLAUSE 257 P6 (132 86) ((173 . ANY)(177 . ANY)) ((+ 2 ((6 (10 177) (6 173 177)) (6 (10 (10 173)) 8))) ))
   (PARAMODULATION 86 1 (1) 132 1 (2 2) NIL (91 (10 49) 138 (6 (10 47) (6 49 47))) 257))
   (OPERATION (CLAUSE 257 P6 (132 86) ((173 . ANY)(177 . ANY)) ((+ 2 ((6 (10 177) (6 173 177)) 173)) ))
   (REWRITE 171 1 257))
   (OPERATION (CLAUSE 86 P2 (40 45) ((49 . ANY)) ((+ 2 ((6 (10 49) 49) 8)) ))
   (REWRITE 257 1 86))
   (OPERATION (CLAUSE 86 P2 (40 45) () ((+ 2 (8 8)) ))
   (REWRITE 40 1 86))
   (OPERATION (CLAUSE 176 P7 (257 42) ((50 . ANY)) ((+ 2 ((6 8 (6 50 8)) 50)) ))
   (PARAMODULATION 42 1 (1) 257 1 (1 1) NIL (177 8) 176))
   (OPERATION (CLAUSE 176 P7 (257 42) ((50 . ANY)) ((+ 2 ((6 50 8) 50)) ))
   (REWRITE 36 1 176))
   (OPERATION (CLAUSE 171 P5 (132 40) ((96 . ANY)) ((+ 2 (96 (10 (10 96)))) ))
   (REWRITE 176 1 171))
   (OPERATION (CLAUSE 375 P8 (40 171) ((371 . ANY)) ((+ 2 ((6 371 (10 371)) 8)) ))
   (PARAMODULATION 171 1 (2) 40 1 (1 1) NIL (9 (10 96)) 375))
   (OPERATION (CLAUSE 172 P9 (132 171) ((372 . ANY)(262 . ANY)) ((+ 2 (262 (6 372 (6 (10 372) 262)))) ))
   (PARAMODULATION 171 1 (2) 132 1 (2 1) NIL (91 (10 96)) 172))
   (OPERATION (CLAUSE 436 P10 (172 257) ((441 . ANY)(373 . ANY)) ((+ 2 ((6 373 441) (6 441 373))) ))
   (PARAMODULATION 257 1 (1) 172 1 (2 2) NIL (177 372 262 (6 173 372)) 436))
   (OPERATION (CLAUSE 436 P10 (172 257) ((441 . ANY)(373 . ANY)) ((+ 2 ((6 373 441) (6 441 373))) ))
   (REPLACEMENT.OPERATION (441 18 373 17) (436 51)
  (((436 . 1) (51 . 1) SYMMETRIC))
  (NIL)
  NIL))
   (END.TIME 397503991)
   (SYMBOLS 
   (LET (NEW.ADDRESS)
   (LIST (PROG1 (CONS    2 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "=" '(ANY ANY))))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED SYMMETRIC REFLEXIVE)))
   (PROG1 (CONS    1 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "FALSE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (PROG1 (CONS    0 (SETQ NEW.ADDRESS (DT-PREDICATE.CREATE "TRUE" 'NIL)))
   (DT-PREDICATE.ADD.ATTRIBUTES NEW.ADDRESS '(DEFINED)))
   (CONS   18 (DT-CONSTANT.CREATE "c_6" 'ANY))
   (CONS   17 (DT-CONSTANT.CREATE "c_5" 'ANY))
   (CONS   14 (DT-CONSTANT.CREATE "c_4" 'ANY))
   (CONS   13 (DT-CONSTANT.CREATE "c_3" 'ANY))
   (CONS   44 (DT-CONSTANT.CREATE "c_2" 'ANY))
   (CONS   43 (DT-CONSTANT.CREATE "c_1" 'ANY))
   (CONS    8 (DT-CONSTANT.CREATE "0" 'ANY))
   (CONS   10 (DT-FUNCTION.CREATE "-" 'ANY '(ANY) 'NIL))
   (CONS    6 (DT-FUNCTION.CREATE "+" 'ANY '(ANY ANY) 'NIL)))))
   (SPLITPART.IDENTIFIER 3)
   (RESULT SUCCESS 436)
)